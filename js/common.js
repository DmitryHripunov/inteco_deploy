/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 9);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createElementIfNotDefined = exports.classesToSelector = exports.getComputedStyle = exports.bindModuleMethods = exports.extend = exports.isObject = exports.getTranslate = exports.now = exports.nextTick = exports.deleteProps = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _ssrWindow = __webpack_require__(2);

function deleteProps(obj) {
  var object = obj;
  Object.keys(object).forEach(function (key) {
    try {
      object[key] = null;
    } catch (e) {// no getter for object
    }

    try {
      delete object[key];
    } catch (e) {// something got wrong
    }
  });
}

function nextTick(callback, delay) {
  if (delay === void 0) {
    delay = 0;
  }

  return setTimeout(callback, delay);
}

function now() {
  return Date.now();
}

function getComputedStyle(el) {
  var window = (0, _ssrWindow.getWindow)();
  var style;

  if (window.getComputedStyle) {
    style = window.getComputedStyle(el, null);
  }

  if (!style && el.currentStyle) {
    style = el.currentStyle;
  }

  if (!style) {
    style = el.style;
  }

  return style;
}

function getTranslate(el, axis) {
  if (axis === void 0) {
    axis = 'x';
  }

  var window = (0, _ssrWindow.getWindow)();
  var matrix;
  var curTransform;
  var transformMatrix;
  var curStyle = getComputedStyle(el, null);

  if (window.WebKitCSSMatrix) {
    curTransform = curStyle.transform || curStyle.webkitTransform;

    if (curTransform.split(',').length > 6) {
      curTransform = curTransform.split(', ').map(function (a) {
        return a.replace(',', '.');
      }).join(', ');
    } // Some old versions of Webkit choke when 'none' is passed; pass
    // empty string instead in this case


    transformMatrix = new window.WebKitCSSMatrix(curTransform === 'none' ? '' : curTransform);
  } else {
    transformMatrix = curStyle.MozTransform || curStyle.OTransform || curStyle.MsTransform || curStyle.msTransform || curStyle.transform || curStyle.getPropertyValue('transform').replace('translate(', 'matrix(1, 0, 0, 1,');
    matrix = transformMatrix.toString().split(',');
  }

  if (axis === 'x') {
    // Latest Chrome and webkits Fix
    if (window.WebKitCSSMatrix) curTransform = transformMatrix.m41; // Crazy IE10 Matrix
    else if (matrix.length === 16) curTransform = parseFloat(matrix[12]); // Normal Browsers
      else curTransform = parseFloat(matrix[4]);
  }

  if (axis === 'y') {
    // Latest Chrome and webkits Fix
    if (window.WebKitCSSMatrix) curTransform = transformMatrix.m42; // Crazy IE10 Matrix
    else if (matrix.length === 16) curTransform = parseFloat(matrix[13]); // Normal Browsers
      else curTransform = parseFloat(matrix[5]);
  }

  return curTransform || 0;
}

function isObject(o) {
  return (typeof o === 'undefined' ? 'undefined' : _typeof(o)) === 'object' && o !== null && o.constructor && Object.prototype.toString.call(o).slice(8, -1) === 'Object';
}

function extend() {
  var to = Object(arguments.length <= 0 ? undefined : arguments[0]);
  var noExtend = ['__proto__', 'constructor', 'prototype'];

  for (var i = 1; i < arguments.length; i += 1) {
    var nextSource = i < 0 || arguments.length <= i ? undefined : arguments[i];

    if (nextSource !== undefined && nextSource !== null) {
      var keysArray = Object.keys(Object(nextSource)).filter(function (key) {
        return noExtend.indexOf(key) < 0;
      });

      for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex += 1) {
        var nextKey = keysArray[nextIndex];
        var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);

        if (desc !== undefined && desc.enumerable) {
          if (isObject(to[nextKey]) && isObject(nextSource[nextKey])) {
            if (nextSource[nextKey].__swiper__) {
              to[nextKey] = nextSource[nextKey];
            } else {
              extend(to[nextKey], nextSource[nextKey]);
            }
          } else if (!isObject(to[nextKey]) && isObject(nextSource[nextKey])) {
            to[nextKey] = {};

            if (nextSource[nextKey].__swiper__) {
              to[nextKey] = nextSource[nextKey];
            } else {
              extend(to[nextKey], nextSource[nextKey]);
            }
          } else {
            to[nextKey] = nextSource[nextKey];
          }
        }
      }
    }
  }

  return to;
}

function bindModuleMethods(instance, obj) {
  Object.keys(obj).forEach(function (key) {
    if (isObject(obj[key])) {
      Object.keys(obj[key]).forEach(function (subKey) {
        if (typeof obj[key][subKey] === 'function') {
          obj[key][subKey] = obj[key][subKey].bind(instance);
        }
      });
    }

    instance[key] = obj[key];
  });
}

function classesToSelector(classes) {
  if (classes === void 0) {
    classes = '';
  }

  return "." + classes.trim().replace(/([\.:\/])/g, '\\$1') // eslint-disable-line
  .replace(/ /g, '.');
}

function createElementIfNotDefined($container, params, createElements, checkProps) {
  var document = (0, _ssrWindow.getDocument)();

  if (createElements) {
    Object.keys(checkProps).forEach(function (key) {
      if (!params[key] && params.auto === true) {
        var element = document.createElement('div');
        element.className = checkProps[key];
        $container.append(element);
        params[key] = element;
      }
    });
  }

  return params;
}

exports.deleteProps = deleteProps;
exports.nextTick = nextTick;
exports.now = now;
exports.getTranslate = getTranslate;
exports.isObject = isObject;
exports.extend = extend;
exports.bindModuleMethods = bindModuleMethods;
exports.getComputedStyle = getComputedStyle;
exports.classesToSelector = classesToSelector;
exports.createElementIfNotDefined = createElementIfNotDefined;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _dom = __webpack_require__(47);

var Methods = {
  addClass: _dom.addClass,
  removeClass: _dom.removeClass,
  hasClass: _dom.hasClass,
  toggleClass: _dom.toggleClass,
  attr: _dom.attr,
  removeAttr: _dom.removeAttr,
  transform: _dom.transform,
  transition: _dom.transition,
  on: _dom.on,
  off: _dom.off,
  trigger: _dom.trigger,
  transitionEnd: _dom.transitionEnd,
  outerWidth: _dom.outerWidth,
  outerHeight: _dom.outerHeight,
  styles: _dom.styles,
  offset: _dom.offset,
  css: _dom.css,
  each: _dom.each,
  html: _dom.html,
  text: _dom.text,
  is: _dom.is,
  index: _dom.index,
  eq: _dom.eq,
  append: _dom.append,
  prepend: _dom.prepend,
  next: _dom.next,
  nextAll: _dom.nextAll,
  prev: _dom.prev,
  prevAll: _dom.prevAll,
  parent: _dom.parent,
  parents: _dom.parents,
  closest: _dom.closest,
  find: _dom.find,
  children: _dom.children,
  filter: _dom.filter,
  remove: _dom.remove
};
Object.keys(Methods).forEach(function (methodName) {
  Object.defineProperty(_dom.$.fn, methodName, {
    value: Methods[methodName],
    writable: true
  });
});
exports.default = _dom.$;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * SSR Window 3.0.0
 * Better handling for window object in SSR environment
 * https://github.com/nolimits4web/ssr-window
 *
 * Copyright 2020, Vladimir Kharlampidi
 *
 * Licensed under MIT
 *
 * Released on: November 9, 2020
 */
/* eslint-disable no-param-reassign */
function isObject(obj) {
    return obj !== null && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && 'constructor' in obj && obj.constructor === Object;
}
function extend(target, src) {
    if (target === void 0) {
        target = {};
    }
    if (src === void 0) {
        src = {};
    }
    Object.keys(src).forEach(function (key) {
        if (typeof target[key] === 'undefined') target[key] = src[key];else if (isObject(src[key]) && isObject(target[key]) && Object.keys(src[key]).length > 0) {
            extend(target[key], src[key]);
        }
    });
}

var ssrDocument = {
    body: {},
    addEventListener: function addEventListener() {},
    removeEventListener: function removeEventListener() {},
    activeElement: {
        blur: function blur() {},
        nodeName: ''
    },
    querySelector: function querySelector() {
        return null;
    },
    querySelectorAll: function querySelectorAll() {
        return [];
    },
    getElementById: function getElementById() {
        return null;
    },
    createEvent: function createEvent() {
        return {
            initEvent: function initEvent() {}
        };
    },
    createElement: function createElement() {
        return {
            children: [],
            childNodes: [],
            style: {},
            setAttribute: function setAttribute() {},
            getElementsByTagName: function getElementsByTagName() {
                return [];
            }
        };
    },
    createElementNS: function createElementNS() {
        return {};
    },
    importNode: function importNode() {
        return null;
    },
    location: {
        hash: '',
        host: '',
        hostname: '',
        href: '',
        origin: '',
        pathname: '',
        protocol: '',
        search: ''
    }
};
function getDocument() {
    var doc = typeof document !== 'undefined' ? document : {};
    extend(doc, ssrDocument);
    return doc;
}

var ssrWindow = {
    document: ssrDocument,
    navigator: {
        userAgent: ''
    },
    location: {
        hash: '',
        host: '',
        hostname: '',
        href: '',
        origin: '',
        pathname: '',
        protocol: '',
        search: ''
    },
    history: {
        replaceState: function replaceState() {},
        pushState: function pushState() {},
        go: function go() {},
        back: function back() {}
    },
    CustomEvent: function CustomEvent() {
        return this;
    },
    addEventListener: function addEventListener() {},
    removeEventListener: function removeEventListener() {},
    getComputedStyle: function getComputedStyle() {
        return {
            getPropertyValue: function getPropertyValue() {
                return '';
            }
        };
    },
    Image: function Image() {},
    Date: function Date() {},
    screen: {},
    setTimeout: function setTimeout() {},
    clearTimeout: function clearTimeout() {},
    matchMedia: function matchMedia() {
        return {};
    },
    requestAnimationFrame: function requestAnimationFrame(callback) {
        if (typeof setTimeout === 'undefined') {
            callback();
            return null;
        }
        return setTimeout(callback, 0);
    },
    cancelAnimationFrame: function cancelAnimationFrame(id) {
        if (typeof setTimeout === 'undefined') {
            return;
        }
        clearTimeout(id);
    }
};
function getWindow() {
    var win = typeof window !== 'undefined' ? window : {};
    extend(win, ssrWindow);
    return win;
}

exports.extend = extend;
exports.getDocument = getDocument;
exports.getWindow = getWindow;
exports.ssrDocument = ssrDocument;
exports.ssrWindow = ssrWindow;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function (global, factory) {
    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : global.BrowserSpriteSymbol = factory();
})(undefined, function () {
    'use strict';

    var SpriteSymbol = function SpriteSymbol(ref) {
        var id = ref.id;
        var viewBox = ref.viewBox;
        var content = ref.content;

        this.id = id;
        this.viewBox = viewBox;
        this.content = content;
    };

    /**
     * @return {string}
     */
    SpriteSymbol.prototype.stringify = function stringify() {
        return this.content;
    };

    /**
     * @return {string}
     */
    SpriteSymbol.prototype.toString = function toString() {
        return this.stringify();
    };

    SpriteSymbol.prototype.destroy = function destroy() {
        var this$1 = this;

        ['id', 'viewBox', 'content'].forEach(function (prop) {
            return delete this$1[prop];
        });
    };

    /**
     * @param {string} content
     * @return {Element}
     */
    var parse = function parse(content) {
        var hasImportNode = !!document.importNode;
        var doc = new DOMParser().parseFromString(content, 'image/svg+xml').documentElement;

        /**
         * Fix for browser which are throwing WrongDocumentError
         * if you insert an element which is not part of the document
         * @see http://stackoverflow.com/a/7986519/4624403
         */
        if (hasImportNode) {
            return document.importNode(doc, true);
        }

        return doc;
    };

    var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function createCommonjsModule(fn, module) {
        return module = { exports: {} }, fn(module, module.exports), module.exports;
    }

    var deepmerge = createCommonjsModule(function (module, exports) {
        (function (root, factory) {
            if (false) {
                undefined(factory);
            } else {
                module.exports = factory();
            }
        })(commonjsGlobal, function () {

            function isMergeableObject(val) {
                var nonNullObject = val && (typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object';

                return nonNullObject && Object.prototype.toString.call(val) !== '[object RegExp]' && Object.prototype.toString.call(val) !== '[object Date]';
            }

            function emptyTarget(val) {
                return Array.isArray(val) ? [] : {};
            }

            function cloneIfNecessary(value, optionsArgument) {
                var clone = optionsArgument && optionsArgument.clone === true;
                return clone && isMergeableObject(value) ? deepmerge(emptyTarget(value), value, optionsArgument) : value;
            }

            function defaultArrayMerge(target, source, optionsArgument) {
                var destination = target.slice();
                source.forEach(function (e, i) {
                    if (typeof destination[i] === 'undefined') {
                        destination[i] = cloneIfNecessary(e, optionsArgument);
                    } else if (isMergeableObject(e)) {
                        destination[i] = deepmerge(target[i], e, optionsArgument);
                    } else if (target.indexOf(e) === -1) {
                        destination.push(cloneIfNecessary(e, optionsArgument));
                    }
                });
                return destination;
            }

            function mergeObject(target, source, optionsArgument) {
                var destination = {};
                if (isMergeableObject(target)) {
                    Object.keys(target).forEach(function (key) {
                        destination[key] = cloneIfNecessary(target[key], optionsArgument);
                    });
                }
                Object.keys(source).forEach(function (key) {
                    if (!isMergeableObject(source[key]) || !target[key]) {
                        destination[key] = cloneIfNecessary(source[key], optionsArgument);
                    } else {
                        destination[key] = deepmerge(target[key], source[key], optionsArgument);
                    }
                });
                return destination;
            }

            function deepmerge(target, source, optionsArgument) {
                var array = Array.isArray(source);
                var options = optionsArgument || { arrayMerge: defaultArrayMerge };
                var arrayMerge = options.arrayMerge || defaultArrayMerge;

                if (array) {
                    return Array.isArray(target) ? arrayMerge(target, source, optionsArgument) : cloneIfNecessary(source, optionsArgument);
                } else {
                    return mergeObject(target, source, optionsArgument);
                }
            }

            deepmerge.all = function deepmergeAll(array, optionsArgument) {
                if (!Array.isArray(array) || array.length < 2) {
                    throw new Error('first argument should be an array with at least two elements');
                }

                // we are sure there are at least 2 values, so it is safe to have no initial value
                return array.reduce(function (prev, next) {
                    return deepmerge(prev, next, optionsArgument);
                });
            };

            return deepmerge;
        });
    });

    var namespaces_1 = createCommonjsModule(function (module, exports) {
        var namespaces = {
            svg: {
                name: 'xmlns',
                uri: 'http://www.w3.org/2000/svg'
            },
            xlink: {
                name: 'xmlns:xlink',
                uri: 'http://www.w3.org/1999/xlink'
            }
        };

        exports.default = namespaces;
        module.exports = exports.default;
    });

    /**
     * @param {Object} attrs
     * @return {string}
     */
    var objectToAttrsString = function objectToAttrsString(attrs) {
        return Object.keys(attrs).map(function (attr) {
            var value = attrs[attr].toString().replace(/"/g, '&quot;');
            return attr + "=\"" + value + "\"";
        }).join(' ');
    };

    var svg = namespaces_1.svg;
    var xlink = namespaces_1.xlink;

    var defaultAttrs = {};
    defaultAttrs[svg.name] = svg.uri;
    defaultAttrs[xlink.name] = xlink.uri;

    /**
     * @param {string} [content]
     * @param {Object} [attributes]
     * @return {string}
     */
    var wrapInSvgString = function wrapInSvgString(content, attributes) {
        if (content === void 0) content = '';

        var attrs = deepmerge(defaultAttrs, attributes || {});
        var attrsRendered = objectToAttrsString(attrs);
        return "<svg " + attrsRendered + ">" + content + "</svg>";
    };

    var BrowserSpriteSymbol = function (SpriteSymbol$$1) {
        function BrowserSpriteSymbol() {
            SpriteSymbol$$1.apply(this, arguments);
        }

        if (SpriteSymbol$$1) BrowserSpriteSymbol.__proto__ = SpriteSymbol$$1;
        BrowserSpriteSymbol.prototype = Object.create(SpriteSymbol$$1 && SpriteSymbol$$1.prototype);
        BrowserSpriteSymbol.prototype.constructor = BrowserSpriteSymbol;

        var prototypeAccessors = { isMounted: {} };

        prototypeAccessors.isMounted.get = function () {
            return !!this.node;
        };

        /**
         * @param {Element} node
         * @return {BrowserSpriteSymbol}
         */
        BrowserSpriteSymbol.createFromExistingNode = function createFromExistingNode(node) {
            return new BrowserSpriteSymbol({
                id: node.getAttribute('id'),
                viewBox: node.getAttribute('viewBox'),
                content: node.outerHTML
            });
        };

        BrowserSpriteSymbol.prototype.destroy = function destroy() {
            if (this.isMounted) {
                this.unmount();
            }
            SpriteSymbol$$1.prototype.destroy.call(this);
        };

        /**
         * @param {Element|string} target
         * @return {Element}
         */
        BrowserSpriteSymbol.prototype.mount = function mount(target) {
            if (this.isMounted) {
                return this.node;
            }

            var mountTarget = typeof target === 'string' ? document.querySelector(target) : target;
            var node = this.render();
            this.node = node;

            mountTarget.appendChild(node);

            return node;
        };

        /**
         * @return {Element}
         */
        BrowserSpriteSymbol.prototype.render = function render() {
            var content = this.stringify();
            return parse(wrapInSvgString(content)).childNodes[0];
        };

        BrowserSpriteSymbol.prototype.unmount = function unmount() {
            this.node.parentNode.removeChild(this.node);
        };

        Object.defineProperties(BrowserSpriteSymbol.prototype, prototypeAccessors);

        return BrowserSpriteSymbol;
    }(SpriteSymbol);

    return BrowserSpriteSymbol;
});
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function (global, factory) {
  ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : global.BrowserSprite = factory();
})(undefined, function () {
  'use strict';

  var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function createCommonjsModule(fn, module) {
    return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var deepmerge = createCommonjsModule(function (module, exports) {
    (function (root, factory) {
      if (false) {
        undefined(factory);
      } else {
        module.exports = factory();
      }
    })(commonjsGlobal, function () {

      function isMergeableObject(val) {
        var nonNullObject = val && (typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object';

        return nonNullObject && Object.prototype.toString.call(val) !== '[object RegExp]' && Object.prototype.toString.call(val) !== '[object Date]';
      }

      function emptyTarget(val) {
        return Array.isArray(val) ? [] : {};
      }

      function cloneIfNecessary(value, optionsArgument) {
        var clone = optionsArgument && optionsArgument.clone === true;
        return clone && isMergeableObject(value) ? deepmerge(emptyTarget(value), value, optionsArgument) : value;
      }

      function defaultArrayMerge(target, source, optionsArgument) {
        var destination = target.slice();
        source.forEach(function (e, i) {
          if (typeof destination[i] === 'undefined') {
            destination[i] = cloneIfNecessary(e, optionsArgument);
          } else if (isMergeableObject(e)) {
            destination[i] = deepmerge(target[i], e, optionsArgument);
          } else if (target.indexOf(e) === -1) {
            destination.push(cloneIfNecessary(e, optionsArgument));
          }
        });
        return destination;
      }

      function mergeObject(target, source, optionsArgument) {
        var destination = {};
        if (isMergeableObject(target)) {
          Object.keys(target).forEach(function (key) {
            destination[key] = cloneIfNecessary(target[key], optionsArgument);
          });
        }
        Object.keys(source).forEach(function (key) {
          if (!isMergeableObject(source[key]) || !target[key]) {
            destination[key] = cloneIfNecessary(source[key], optionsArgument);
          } else {
            destination[key] = deepmerge(target[key], source[key], optionsArgument);
          }
        });
        return destination;
      }

      function deepmerge(target, source, optionsArgument) {
        var array = Array.isArray(source);
        var options = optionsArgument || { arrayMerge: defaultArrayMerge };
        var arrayMerge = options.arrayMerge || defaultArrayMerge;

        if (array) {
          return Array.isArray(target) ? arrayMerge(target, source, optionsArgument) : cloneIfNecessary(source, optionsArgument);
        } else {
          return mergeObject(target, source, optionsArgument);
        }
      }

      deepmerge.all = function deepmergeAll(array, optionsArgument) {
        if (!Array.isArray(array) || array.length < 2) {
          throw new Error('first argument should be an array with at least two elements');
        }

        // we are sure there are at least 2 values, so it is safe to have no initial value
        return array.reduce(function (prev, next) {
          return deepmerge(prev, next, optionsArgument);
        });
      };

      return deepmerge;
    });
  });

  //      
  // An event handler can take an optional event argument
  // and should not return a value

  // An array of all currently registered event handlers for a type

  // A map of event types and their corresponding event handlers.


  /** Mitt: Tiny (~200b) functional event emitter / pubsub.
   *  @name mitt
   *  @returns {Mitt}
   */
  function mitt(all) {
    all = all || Object.create(null);

    return {
      /**
       * Register an event handler for the given type.
       *
       * @param  {String} type	Type of event to listen for, or `"*"` for all events
       * @param  {Function} handler Function to call in response to given event
       * @memberOf mitt
       */
      on: function on(type, handler) {
        (all[type] || (all[type] = [])).push(handler);
      },

      /**
       * Remove an event handler for the given type.
       *
       * @param  {String} type	Type of event to unregister `handler` from, or `"*"`
       * @param  {Function} handler Handler function to remove
       * @memberOf mitt
       */
      off: function off(type, handler) {
        if (all[type]) {
          all[type].splice(all[type].indexOf(handler) >>> 0, 1);
        }
      },

      /**
       * Invoke all handlers for the given type.
       * If present, `"*"` handlers are invoked after type-matched handlers.
       *
       * @param {String} type  The event type to invoke
       * @param {Any} [evt]  Any value (object is recommended and powerful), passed to each handler
       * @memberof mitt
       */
      emit: function emit(type, evt) {
        (all[type] || []).map(function (handler) {
          handler(evt);
        });
        (all['*'] || []).map(function (handler) {
          handler(type, evt);
        });
      }
    };
  }

  var namespaces_1 = createCommonjsModule(function (module, exports) {
    var namespaces = {
      svg: {
        name: 'xmlns',
        uri: 'http://www.w3.org/2000/svg'
      },
      xlink: {
        name: 'xmlns:xlink',
        uri: 'http://www.w3.org/1999/xlink'
      }
    };

    exports.default = namespaces;
    module.exports = exports.default;
  });

  /**
   * @param {Object} attrs
   * @return {string}
   */
  var objectToAttrsString = function objectToAttrsString(attrs) {
    return Object.keys(attrs).map(function (attr) {
      var value = attrs[attr].toString().replace(/"/g, '&quot;');
      return attr + "=\"" + value + "\"";
    }).join(' ');
  };

  var svg = namespaces_1.svg;
  var xlink = namespaces_1.xlink;

  var defaultAttrs = {};
  defaultAttrs[svg.name] = svg.uri;
  defaultAttrs[xlink.name] = xlink.uri;

  /**
   * @param {string} [content]
   * @param {Object} [attributes]
   * @return {string}
   */
  var wrapInSvgString = function wrapInSvgString(content, attributes) {
    if (content === void 0) content = '';

    var attrs = deepmerge(defaultAttrs, attributes || {});
    var attrsRendered = objectToAttrsString(attrs);
    return "<svg " + attrsRendered + ">" + content + "</svg>";
  };

  var svg$1 = namespaces_1.svg;
  var xlink$1 = namespaces_1.xlink;

  var defaultConfig = {
    attrs: (obj = {
      style: ['position: absolute', 'width: 0', 'height: 0'].join('; ')
    }, obj[svg$1.name] = svg$1.uri, obj[xlink$1.name] = xlink$1.uri, obj)
  };
  var obj;

  var Sprite = function Sprite(config) {
    this.config = deepmerge(defaultConfig, config || {});
    this.symbols = [];
  };

  /**
   * Add new symbol. If symbol with the same id exists it will be replaced.
   * @param {SpriteSymbol} symbol
   * @return {boolean} `true` - symbol was added, `false` - replaced
   */
  Sprite.prototype.add = function add(symbol) {
    var ref = this;
    var symbols = ref.symbols;
    var existing = this.find(symbol.id);

    if (existing) {
      symbols[symbols.indexOf(existing)] = symbol;
      return false;
    }

    symbols.push(symbol);
    return true;
  };

  /**
   * Remove symbol & destroy it
   * @param {string} id
   * @return {boolean} `true` - symbol was found & successfully destroyed, `false` - otherwise
   */
  Sprite.prototype.remove = function remove(id) {
    var ref = this;
    var symbols = ref.symbols;
    var symbol = this.find(id);

    if (symbol) {
      symbols.splice(symbols.indexOf(symbol), 1);
      symbol.destroy();
      return true;
    }

    return false;
  };

  /**
   * @param {string} id
   * @return {SpriteSymbol|null}
   */
  Sprite.prototype.find = function find(id) {
    return this.symbols.filter(function (s) {
      return s.id === id;
    })[0] || null;
  };

  /**
   * @param {string} id
   * @return {boolean}
   */
  Sprite.prototype.has = function has(id) {
    return this.find(id) !== null;
  };

  /**
   * @return {string}
   */
  Sprite.prototype.stringify = function stringify() {
    var ref = this.config;
    var attrs = ref.attrs;
    var stringifiedSymbols = this.symbols.map(function (s) {
      return s.stringify();
    }).join('');
    return wrapInSvgString(stringifiedSymbols, attrs);
  };

  /**
   * @return {string}
   */
  Sprite.prototype.toString = function toString() {
    return this.stringify();
  };

  Sprite.prototype.destroy = function destroy() {
    this.symbols.forEach(function (s) {
      return s.destroy();
    });
  };

  var SpriteSymbol = function SpriteSymbol(ref) {
    var id = ref.id;
    var viewBox = ref.viewBox;
    var content = ref.content;

    this.id = id;
    this.viewBox = viewBox;
    this.content = content;
  };

  /**
   * @return {string}
   */
  SpriteSymbol.prototype.stringify = function stringify() {
    return this.content;
  };

  /**
   * @return {string}
   */
  SpriteSymbol.prototype.toString = function toString() {
    return this.stringify();
  };

  SpriteSymbol.prototype.destroy = function destroy() {
    var this$1 = this;

    ['id', 'viewBox', 'content'].forEach(function (prop) {
      return delete this$1[prop];
    });
  };

  /**
   * @param {string} content
   * @return {Element}
   */
  var parse = function parse(content) {
    var hasImportNode = !!document.importNode;
    var doc = new DOMParser().parseFromString(content, 'image/svg+xml').documentElement;

    /**
     * Fix for browser which are throwing WrongDocumentError
     * if you insert an element which is not part of the document
     * @see http://stackoverflow.com/a/7986519/4624403
     */
    if (hasImportNode) {
      return document.importNode(doc, true);
    }

    return doc;
  };

  var BrowserSpriteSymbol = function (SpriteSymbol$$1) {
    function BrowserSpriteSymbol() {
      SpriteSymbol$$1.apply(this, arguments);
    }

    if (SpriteSymbol$$1) BrowserSpriteSymbol.__proto__ = SpriteSymbol$$1;
    BrowserSpriteSymbol.prototype = Object.create(SpriteSymbol$$1 && SpriteSymbol$$1.prototype);
    BrowserSpriteSymbol.prototype.constructor = BrowserSpriteSymbol;

    var prototypeAccessors = { isMounted: {} };

    prototypeAccessors.isMounted.get = function () {
      return !!this.node;
    };

    /**
     * @param {Element} node
     * @return {BrowserSpriteSymbol}
     */
    BrowserSpriteSymbol.createFromExistingNode = function createFromExistingNode(node) {
      return new BrowserSpriteSymbol({
        id: node.getAttribute('id'),
        viewBox: node.getAttribute('viewBox'),
        content: node.outerHTML
      });
    };

    BrowserSpriteSymbol.prototype.destroy = function destroy() {
      if (this.isMounted) {
        this.unmount();
      }
      SpriteSymbol$$1.prototype.destroy.call(this);
    };

    /**
     * @param {Element|string} target
     * @return {Element}
     */
    BrowserSpriteSymbol.prototype.mount = function mount(target) {
      if (this.isMounted) {
        return this.node;
      }

      var mountTarget = typeof target === 'string' ? document.querySelector(target) : target;
      var node = this.render();
      this.node = node;

      mountTarget.appendChild(node);

      return node;
    };

    /**
     * @return {Element}
     */
    BrowserSpriteSymbol.prototype.render = function render() {
      var content = this.stringify();
      return parse(wrapInSvgString(content)).childNodes[0];
    };

    BrowserSpriteSymbol.prototype.unmount = function unmount() {
      this.node.parentNode.removeChild(this.node);
    };

    Object.defineProperties(BrowserSpriteSymbol.prototype, prototypeAccessors);

    return BrowserSpriteSymbol;
  }(SpriteSymbol);

  var defaultConfig$1 = {
    /**
     * Should following options be automatically configured:
     * - `syncUrlsWithBaseTag`
     * - `locationChangeAngularEmitter`
     * - `moveGradientsOutsideSymbol`
     * @type {boolean}
     */
    autoConfigure: true,

    /**
     * Default mounting selector
     * @type {string}
     */
    mountTo: 'body',

    /**
     * Fix disappearing SVG elements when <base href> exists.
     * Executes when sprite mounted.
     * @see http://stackoverflow.com/a/18265336/796152
     * @see https://github.com/everdimension/angular-svg-base-fix
     * @see https://github.com/angular/angular.js/issues/8934#issuecomment-56568466
     * @type {boolean}
     */
    syncUrlsWithBaseTag: false,

    /**
     * Should sprite listen custom location change event
     * @type {boolean}
     */
    listenLocationChangeEvent: true,

    /**
     * Custom window event name which should be emitted to update sprite urls
     * @type {string}
     */
    locationChangeEvent: 'locationChange',

    /**
     * Emit location change event in Angular automatically
     * @type {boolean}
     */
    locationChangeAngularEmitter: false,

    /**
     * Selector to find symbols usages when updating sprite urls
     * @type {string}
     */
    usagesToUpdate: 'use[*|href]',

    /**
     * Fix Firefox bug when gradients and patterns don't work if they are within a symbol.
     * Executes when sprite is rendered, but not mounted.
     * @see https://bugzilla.mozilla.org/show_bug.cgi?id=306674
     * @see https://bugzilla.mozilla.org/show_bug.cgi?id=353575
     * @see https://bugzilla.mozilla.org/show_bug.cgi?id=1235364
     * @type {boolean}
     */
    moveGradientsOutsideSymbol: false
  };

  /**
   * @param {*} arrayLike
   * @return {Array}
   */
  var arrayFrom = function arrayFrom(arrayLike) {
    return Array.prototype.slice.call(arrayLike, 0);
  };

  var ua = navigator.userAgent;

  var browser = {
    isChrome: /chrome/i.test(ua),
    isFirefox: /firefox/i.test(ua),

    // https://msdn.microsoft.com/en-us/library/ms537503(v=vs.85).aspx
    isIE: /msie/i.test(ua) || /trident/i.test(ua),
    isEdge: /edge/i.test(ua)
  };

  /**
   * @param {string} name
   * @param {*} data
   */
  var dispatchEvent = function dispatchEvent(name, data) {
    var event = document.createEvent('CustomEvent');
    event.initCustomEvent(name, false, false, data);
    window.dispatchEvent(event);
  };

  /**
   * IE doesn't evaluate <style> tags in SVGs that are dynamically added to the page.
   * This trick will trigger IE to read and use any existing SVG <style> tags.
   * @see https://github.com/iconic/SVGInjector/issues/23
   * @see https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/
   *
   * @param {Element} node DOM Element to search <style> tags in
   * @return {Array<HTMLStyleElement>}
   */
  var evalStylesIEWorkaround = function evalStylesIEWorkaround(node) {
    var updatedNodes = [];

    arrayFrom(node.querySelectorAll('style')).forEach(function (style) {
      style.textContent += '';
      updatedNodes.push(style);
    });

    return updatedNodes;
  };

  /**
   * @param {string} [url] If not provided - current URL will be used
   * @return {string}
   */
  var getUrlWithoutFragment = function getUrlWithoutFragment(url) {
    return (url || window.location.href).split('#')[0];
  };

  /* global angular */
  /**
   * @param {string} eventName
   */
  var locationChangeAngularEmitter = function locationChangeAngularEmitter(eventName) {
    angular.module('ng').run(['$rootScope', function ($rootScope) {
      $rootScope.$on('$locationChangeSuccess', function (e, newUrl, oldUrl) {
        dispatchEvent(eventName, { oldUrl: oldUrl, newUrl: newUrl });
      });
    }]);
  };

  var defaultSelector = 'linearGradient, radialGradient, pattern';

  /**
   * @param {Element} svg
   * @param {string} [selector]
   * @return {Element}
   */
  var moveGradientsOutsideSymbol = function moveGradientsOutsideSymbol(svg, selector) {
    if (selector === void 0) selector = defaultSelector;

    arrayFrom(svg.querySelectorAll('symbol')).forEach(function (symbol) {
      arrayFrom(symbol.querySelectorAll(selector)).forEach(function (node) {
        symbol.parentNode.insertBefore(node, symbol);
      });
    });
    return svg;
  };

  /**
   * @param {NodeList} nodes
   * @param {Function} [matcher]
   * @return {Attr[]}
   */
  function selectAttributes(nodes, matcher) {
    var attrs = arrayFrom(nodes).reduce(function (acc, node) {
      if (!node.attributes) {
        return acc;
      }

      var arrayfied = arrayFrom(node.attributes);
      var matched = matcher ? arrayfied.filter(matcher) : arrayfied;
      return acc.concat(matched);
    }, []);

    return attrs;
  }

  /**
   * @param {NodeList|Node} nodes
   * @param {boolean} [clone=true]
   * @return {string}
   */

  var xLinkNS = namespaces_1.xlink.uri;
  var xLinkAttrName = 'xlink:href';

  // eslint-disable-next-line no-useless-escape
  var specialUrlCharsPattern = /[{}|\\\^\[\]`"<>]/g;

  function encoder(url) {
    return url.replace(specialUrlCharsPattern, function (match) {
      return "%" + match[0].charCodeAt(0).toString(16).toUpperCase();
    });
  }

  /**
   * @param {NodeList} nodes
   * @param {string} startsWith
   * @param {string} replaceWith
   * @return {NodeList}
   */
  function updateReferences(nodes, startsWith, replaceWith) {
    arrayFrom(nodes).forEach(function (node) {
      var href = node.getAttribute(xLinkAttrName);
      if (href && href.indexOf(startsWith) === 0) {
        var newUrl = href.replace(startsWith, replaceWith);
        node.setAttributeNS(xLinkNS, xLinkAttrName, newUrl);
      }
    });

    return nodes;
  }

  /**
   * List of SVG attributes to update url() target in them
   */
  var attList = ['clipPath', 'colorProfile', 'src', 'cursor', 'fill', 'filter', 'marker', 'markerStart', 'markerMid', 'markerEnd', 'mask', 'stroke', 'style'];

  var attSelector = attList.map(function (attr) {
    return "[" + attr + "]";
  }).join(',');

  /**
   * Update URLs in svg image (like `fill="url(...)"`) and update referencing elements
   * @param {Element} svg
   * @param {NodeList} references
   * @param {string|RegExp} startsWith
   * @param {string} replaceWith
   * @return {void}
   *
   * @example
   * const sprite = document.querySelector('svg.sprite');
   * const usages = document.querySelectorAll('use');
   * updateUrls(sprite, usages, '#', 'prefix#');
   */
  var updateUrls = function updateUrls(svg, references, startsWith, replaceWith) {
    var startsWithEncoded = encoder(startsWith);
    var replaceWithEncoded = encoder(replaceWith);

    var nodes = svg.querySelectorAll(attSelector);
    var attrs = selectAttributes(nodes, function (ref) {
      var localName = ref.localName;
      var value = ref.value;

      return attList.indexOf(localName) !== -1 && value.indexOf("url(" + startsWithEncoded) !== -1;
    });

    attrs.forEach(function (attr) {
      return attr.value = attr.value.replace(startsWithEncoded, replaceWithEncoded);
    });
    updateReferences(references, startsWithEncoded, replaceWithEncoded);
  };

  /**
   * Internal emitter events
   * @enum
   * @private
   */
  var Events = {
    MOUNT: 'mount',
    SYMBOL_MOUNT: 'symbol_mount'
  };

  var BrowserSprite = function (Sprite$$1) {
    function BrowserSprite(cfg) {
      var this$1 = this;
      if (cfg === void 0) cfg = {};

      Sprite$$1.call(this, deepmerge(defaultConfig$1, cfg));

      var emitter = mitt();
      this._emitter = emitter;
      this.node = null;

      var ref = this;
      var config = ref.config;

      if (config.autoConfigure) {
        this._autoConfigure(cfg);
      }

      if (config.syncUrlsWithBaseTag) {
        var baseUrl = document.getElementsByTagName('base')[0].getAttribute('href');
        emitter.on(Events.MOUNT, function () {
          return this$1.updateUrls('#', baseUrl);
        });
      }

      var handleLocationChange = this._handleLocationChange.bind(this);
      this._handleLocationChange = handleLocationChange;

      // Provide way to update sprite urls externally via dispatching custom window event
      if (config.listenLocationChangeEvent) {
        window.addEventListener(config.locationChangeEvent, handleLocationChange);
      }

      // Emit location change event in Angular automatically
      if (config.locationChangeAngularEmitter) {
        locationChangeAngularEmitter(config.locationChangeEvent);
      }

      // After sprite mounted
      emitter.on(Events.MOUNT, function (spriteNode) {
        if (config.moveGradientsOutsideSymbol) {
          moveGradientsOutsideSymbol(spriteNode);
        }
      });

      // After symbol mounted into sprite
      emitter.on(Events.SYMBOL_MOUNT, function (symbolNode) {
        if (config.moveGradientsOutsideSymbol) {
          moveGradientsOutsideSymbol(symbolNode.parentNode);
        }

        if (browser.isIE || browser.isEdge) {
          evalStylesIEWorkaround(symbolNode);
        }
      });
    }

    if (Sprite$$1) BrowserSprite.__proto__ = Sprite$$1;
    BrowserSprite.prototype = Object.create(Sprite$$1 && Sprite$$1.prototype);
    BrowserSprite.prototype.constructor = BrowserSprite;

    var prototypeAccessors = { isMounted: {} };

    /**
     * @return {boolean}
     */
    prototypeAccessors.isMounted.get = function () {
      return !!this.node;
    };

    /**
     * Automatically configure following options
     * - `syncUrlsWithBaseTag`
     * - `locationChangeAngularEmitter`
     * - `moveGradientsOutsideSymbol`
     * @param {Object} cfg
     * @private
     */
    BrowserSprite.prototype._autoConfigure = function _autoConfigure(cfg) {
      var ref = this;
      var config = ref.config;

      if (typeof cfg.syncUrlsWithBaseTag === 'undefined') {
        config.syncUrlsWithBaseTag = typeof document.getElementsByTagName('base')[0] !== 'undefined';
      }

      if (typeof cfg.locationChangeAngularEmitter === 'undefined') {
        config.locationChangeAngularEmitter = 'angular' in window;
      }

      if (typeof cfg.moveGradientsOutsideSymbol === 'undefined') {
        config.moveGradientsOutsideSymbol = browser.isFirefox;
      }
    };

    /**
     * @param {Event} event
     * @param {Object} event.detail
     * @param {string} event.detail.oldUrl
     * @param {string} event.detail.newUrl
     * @private
     */
    BrowserSprite.prototype._handleLocationChange = function _handleLocationChange(event) {
      var ref = event.detail;
      var oldUrl = ref.oldUrl;
      var newUrl = ref.newUrl;
      this.updateUrls(oldUrl, newUrl);
    };

    /**
     * Add new symbol. If symbol with the same id exists it will be replaced.
     * If sprite already mounted - `symbol.mount(sprite.node)` will be called.
     * @fires Events#SYMBOL_MOUNT
     * @param {BrowserSpriteSymbol} symbol
     * @return {boolean} `true` - symbol was added, `false` - replaced
     */
    BrowserSprite.prototype.add = function add(symbol) {
      var sprite = this;
      var isNewSymbol = Sprite$$1.prototype.add.call(this, symbol);

      if (this.isMounted && isNewSymbol) {
        symbol.mount(sprite.node);
        this._emitter.emit(Events.SYMBOL_MOUNT, symbol.node);
      }

      return isNewSymbol;
    };

    /**
     * Attach to existing DOM node
     * @param {string|Element} target
     * @return {Element|null} attached DOM Element. null if node to attach not found.
     */
    BrowserSprite.prototype.attach = function attach(target) {
      var this$1 = this;

      var sprite = this;

      if (sprite.isMounted) {
        return sprite.node;
      }

      /** @type Element */
      var node = typeof target === 'string' ? document.querySelector(target) : target;
      sprite.node = node;

      // Already added symbols needs to be mounted
      this.symbols.forEach(function (symbol) {
        symbol.mount(sprite.node);
        this$1._emitter.emit(Events.SYMBOL_MOUNT, symbol.node);
      });

      // Create symbols from existing DOM nodes, add and mount them
      arrayFrom(node.querySelectorAll('symbol')).forEach(function (symbolNode) {
        var symbol = BrowserSpriteSymbol.createFromExistingNode(symbolNode);
        symbol.node = symbolNode; // hack to prevent symbol mounting to sprite when adding
        sprite.add(symbol);
      });

      this._emitter.emit(Events.MOUNT, node);

      return node;
    };

    BrowserSprite.prototype.destroy = function destroy() {
      var ref = this;
      var config = ref.config;
      var symbols = ref.symbols;
      var _emitter = ref._emitter;

      symbols.forEach(function (s) {
        return s.destroy();
      });

      _emitter.off('*');
      window.removeEventListener(config.locationChangeEvent, this._handleLocationChange);

      if (this.isMounted) {
        this.unmount();
      }
    };

    /**
     * @fires Events#MOUNT
     * @param {string|Element} [target]
     * @param {boolean} [prepend=false]
     * @return {Element|null} rendered sprite node. null if mount node not found.
     */
    BrowserSprite.prototype.mount = function mount(target, prepend) {
      if (target === void 0) target = this.config.mountTo;
      if (prepend === void 0) prepend = false;

      var sprite = this;

      if (sprite.isMounted) {
        return sprite.node;
      }

      var mountNode = typeof target === 'string' ? document.querySelector(target) : target;
      var node = sprite.render();
      this.node = node;

      if (prepend && mountNode.childNodes[0]) {
        mountNode.insertBefore(node, mountNode.childNodes[0]);
      } else {
        mountNode.appendChild(node);
      }

      this._emitter.emit(Events.MOUNT, node);

      return node;
    };

    /**
     * @return {Element}
     */
    BrowserSprite.prototype.render = function render() {
      return parse(this.stringify());
    };

    /**
     * Detach sprite from the DOM
     */
    BrowserSprite.prototype.unmount = function unmount() {
      this.node.parentNode.removeChild(this.node);
    };

    /**
     * Update URLs in sprite and usage elements
     * @param {string} oldUrl
     * @param {string} newUrl
     * @return {boolean} `true` - URLs was updated, `false` - sprite is not mounted
     */
    BrowserSprite.prototype.updateUrls = function updateUrls$1(oldUrl, newUrl) {
      if (!this.isMounted) {
        return false;
      }

      var usages = document.querySelectorAll(this.config.usagesToUpdate);

      updateUrls(this.node, usages, getUrlWithoutFragment(oldUrl) + "#", getUrlWithoutFragment(newUrl) + "#");

      return true;
    };

    Object.defineProperties(BrowserSprite.prototype, prototypeAccessors);

    return BrowserSprite;
  }(Sprite);

  var ready$1 = createCommonjsModule(function (module) {
    /*!
      * domready (c) Dustin Diaz 2014 - License MIT
      */
    !function (name, definition) {

      {
        module.exports = definition();
      }
    }('domready', function () {

      var fns = [],
          _listener,
          doc = document,
          hack = doc.documentElement.doScroll,
          domContentLoaded = 'DOMContentLoaded',
          loaded = (hack ? /^loaded|^c/ : /^loaded|^i|^c/).test(doc.readyState);

      if (!loaded) {
        doc.addEventListener(domContentLoaded, _listener = function listener() {
          doc.removeEventListener(domContentLoaded, _listener);
          loaded = 1;
          while (_listener = fns.shift()) {
            _listener();
          }
        });
      }

      return function (fn) {
        loaded ? setTimeout(fn, 0) : fns.push(fn);
      };
    });
  });

  var spriteNodeId = '__SVG_SPRITE_NODE__';
  var spriteGlobalVarName = '__SVG_SPRITE__';
  var isSpriteExists = !!window[spriteGlobalVarName];

  // eslint-disable-next-line import/no-mutable-exports
  var sprite;

  if (isSpriteExists) {
    sprite = window[spriteGlobalVarName];
  } else {
    sprite = new BrowserSprite({ attrs: { id: spriteNodeId } });
    window[spriteGlobalVarName] = sprite;
  }

  var loadSprite = function loadSprite() {
    /**
     * Check for page already contains sprite node
     * If found - attach to and reuse it's content
     * If not - render and mount the new sprite
     */
    var existing = document.getElementById(spriteNodeId);

    if (existing) {
      sprite.attach(existing);
    } else {
      sprite.mount(document.body, true);
    }
  };

  if (document.body) {
    loadSprite();
  } else {
    ready$1(loadSprite);
  }

  var sprite$1 = sprite;

  return sprite$1;
});
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function requireAll(r) {
  r.keys().forEach(r);
}

requireAll(__webpack_require__(14));

// requireAll(require.context('./', true, /\.(js|less|png|jpe?g|gif)$/));

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _swiper = __webpack_require__(45);

var _swiper2 = _interopRequireDefault(_swiper);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var cardSlider = new _swiper2.default('.slider', {
  wrapperClass: 'slider__wrapper',
  slideClass: 'slider__slide',
  direction: 'horizontal',
  slidesPerView: 'auto'
});

exports.default = cardSlider;

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSupport = undefined;

var _ssrWindow = __webpack_require__(2);

var support;

function calcSupport() {
  var window = (0, _ssrWindow.getWindow)();
  var document = (0, _ssrWindow.getDocument)();
  return {
    touch: !!('ontouchstart' in window || window.DocumentTouch && document instanceof window.DocumentTouch),
    pointerEvents: !!window.PointerEvent && 'maxTouchPoints' in window.navigator && window.navigator.maxTouchPoints >= 0,
    observer: function checkObserver() {
      return 'MutationObserver' in window || 'WebkitMutationObserver' in window;
    }(),
    passiveListener: function checkPassiveListener() {
      var supportsPassive = false;

      try {
        var opts = Object.defineProperty({}, 'passive', {
          // eslint-disable-next-line
          get: function get() {
            supportsPassive = true;
          }
        });
        window.addEventListener('testPassiveListener', null, opts);
      } catch (e) {// No support
      }

      return supportsPassive;
    }(),
    gestures: function checkGestures() {
      return 'ongesturestart' in window;
    }()
  };
}

function getSupport() {
  if (!support) {
    support = calcSupport();
  }

  return support;
}

exports.getSupport = getSupport;

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var g;

// This works in non-strict mode
g = function () {
	return this;
}();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1, eval)("this");
} catch (e) {
	// This works if the window reference is available
	if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(10);


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(11);

__webpack_require__(13);

__webpack_require__(5);

__webpack_require__(143);

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* eslint-disable */
// require("expose-loader?$!expose-loader?jQuery!jquery");

// flexslider
// require("./flexslider2/flexslider.css")
// require("expose-loader?flexslider!./flexslider2");

// parallax
// require("expose-loader?parallax!jquery-parallax.js");

// plax параллакс эффект
// require("plax");

// wow.js
// require("expose-loader?WOW!wow.js");

// animate.css
// require("animate.css/animate.css");

// blueimp gallery https://github.com/blueimp/Gallery
// require("blueimp-gallery/css/blueimp-gallery.min.css");
// require("expose-loader?blueimp.Gallery!blueimp-gallery/js/blueimp-gallery.min.js");


// slick-carousel
// require("slick-carousel/slick/slick.css");
// require("slick-carousel/slick/slick-theme.css");
// require("expose-loader?slick!slick-carousel");

// swiper slider
// require("swiper/dist/css/swiper.css");
// require("expose-loader?Swiper!swiper/dist/js/swiper.js");

// vue.js
// import Vue from 'vue';
// window.Vue = Vue;


// magnific-popup
// require("magnific-popup/dist/magnific-popup.css");
// require("expose-loader?magnificPopup!magnific-popup/dist/jquery.magnific-popup.js");

// jquery ui slider
// require('jquery-ui-css/slider.css');
// require("expose-loader?slider!jquery-ui/slider");

// jquery ui tabs
// require('jquery-ui-css/tabs.css');
// require("expose-loader?slider!jquery-ui/tabs");

// touch support for jquery ui
// require("jquery-ui-touch-punch");

// highslide
// require("expose-loader?hs!./highslide/highslide/highslide-with-gallery.js");
// // let hs = require("./highslide/highslide/highslide-with-gallery.js");
// // window.hs = hs;
// require("./highslide/highslide/highslide.css");

// lightbox
// require("lightbox2");
// require("lightbox2/dist/css/lightbox.css");

// normalize.css
__webpack_require__(12);

/***/ }),
/* 12 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 13 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./about/about.less": 15,
	"./accordion/accordion.js": 16,
	"./accordion/accordion.less": 17,
	"./advantages/advantages.less": 18,
	"./amount/amount.less": 19,
	"./btn-cross/btn-cross.less": 20,
	"./btn-menu/btn-menu.less": 21,
	"./btn/btn.less": 22,
	"./card/card.less": 23,
	"./charoit/charoit.less": 24,
	"./container/container.less": 25,
	"./eval/eval.less": 26,
	"./example/example.less": 27,
	"./faq/faq.less": 28,
	"./feedback-form/feedback-form.js": 29,
	"./feedback-form/feedback-form.less": 30,
	"./feedback/feedback.less": 31,
	"./footer/footer.js": 32,
	"./footer/footer.less": 33,
	"./header/header.less": 34,
	"./hero-eval/hero-eval.less": 35,
	"./hero/hero.less": 36,
	"./index.js": 5,
	"./info-block/info-block.js": 37,
	"./info-block/info-block.less": 38,
	"./map/map.js": 39,
	"./map/map.less": 40,
	"./menu/menu.js": 41,
	"./menu/menu.less": 42,
	"./modal/modal.js": 43,
	"./modal/modal.less": 132,
	"./page-section/page-section.less": 133,
	"./price/price.js": 134,
	"./price/price.less": 138,
	"./recommendations/recommendations.less": 139,
	"./section/section.less": 140,
	"./slider/slider.js": 6,
	"./slider/slider.less": 141,
	"./social/social.less": 142
};
function webpackContext(req) {
	return __webpack_require__(webpackContextResolve(req));
};
function webpackContextResolve(req) {
	var id = map[req];
	if(!(id + 1)) // check for number or string
		throw new Error("Cannot find module '" + req + "'.");
	return id;
};
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 14;

/***/ }),
/* 15 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var accordionItems = document.querySelectorAll('.accordion__item');
var accordionTriggers = document.querySelectorAll('.accordion__trigger');

function onAccordionTrigger() {
  var currentAccordionTrigger = this;
  var currentAccordionItem = currentAccordionTrigger.parentNode;
  var currentAccordionContent = currentAccordionTrigger.nextElementSibling;

  if (currentAccordionItem.dataset.open === 'false') {
    currentAccordionItem.dataset.open = 'true';
    currentAccordionItem.classList.add('accordion__item--show');
    currentAccordionContent.style.maxHeight = currentAccordionContent.scrollHeight + 'px';
  } else {
    currentAccordionItem.dataset.open = 'false';
    currentAccordionItem.classList.remove('accordion__item--show');
    currentAccordionContent.style.maxHeight = null;
  }
}

function accordionsInit() {
  accordionTriggers.forEach(function (trigger) {
    trigger.addEventListener('click', onAccordionTrigger);
  });

  accordionItems.forEach(function (item) {
    if (item.dataset.open === 'true') {
      item.classList.add('accordion__item--show');
    }
  });
}

document.addEventListener('DOMContentLoaded', function () {
  accordionsInit();
});

/***/ }),
/* 17 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 18 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 19 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 20 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 21 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 22 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 23 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 24 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 25 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 26 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 27 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 28 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var inputs = document.querySelectorAll('.feedback-form__input');

inputs.forEach(function (input) {
  input.addEventListener('change', function () {
    if (input.value.trim().length < 1) {
      input.value = null;
      input.classList.remove('feedback-form__input--filled');
    } else {
      input.classList.add('feedback-form__input--filled');
    }
  });
});

/***/ }),
/* 30 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 31 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var footerNavLinks = document.querySelectorAll('.footer__nav-link');

footerNavLinks.forEach(function (link) {
  link.addEventListener('click', function (event) {
    if (event.target.classList.contains('footer__nav-link--arrow')) {
      event.preventDefault();
      link.parentElement.classList.toggle('footer__nav-item--active');
    }
  });
});

/***/ }),
/* 33 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 34 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 35 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 36 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var video = document.querySelector('.js-video');

if (video) {
  video.playbackRate = 6.0;
}

/***/ }),
/* 38 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var DESTOP__WIDTH = 1140;
var mapData = document.querySelector('.map__data');
var charoitMaps = document.querySelectorAll('.map');
var mapDataItem = mapData.querySelectorAll('.map__item');
var charoitData = [];
var sliderCards = document.querySelectorAll('.js-map');
var markerCoortds = [];

mapDataItem.forEach(function (item) {
  var currentPinData = {};
  currentPinData.сoordinates = [];
  currentPinData.name = item.querySelector('.map__marker-title').textContent;
  currentPinData.сoordinates.push(Number(item.querySelector('.map__marker').dataset.x));
  currentPinData.сoordinates.push(Number(item.querySelector('.map__marker').dataset.y));
  currentPinData.opening = item.querySelector('.map__marker-opening').textContent;
  currentPinData.phone = item.querySelector('.map__marker-phone').textContent.replace('тел: ', '');
  charoitData.push(currentPinData);
  markerCoortds.push(currentPinData.сoordinates);
});

function loadMaps() {
  try {
    ymaps.load().then(function (maps) {
      charoitMaps.forEach(function (charoitMap) {
        var currentMap = new maps.Map(charoitMap, {
          center: [53.196842, 45.020711],
          zoom: 16
        });

        currentMap.behaviors.enable(['multiTouch']);
        if (/Android|webOS|iPhone|iPad|iPod|Samsung|BlackBerry|BB|PlayBook|IEMobile|Windows Phone|Kindle|Silk|Opera Mini/i.test(navigator.userAgent) || window.innerWidth < DESTOP__WIDTH) {
          currentMap.behaviors.disable(['drag']);
          var zoomControlObj = currentMap.controls.get('zoomControl');
          zoomControlObj.options.set('size', 'small');
          zoomControlObj.options.set('position', {
            left: '10px',
            top: '48px'
          });
        }

        var markersCollection = new ymaps.GeoObjectCollection(null);

        charoitData.forEach(function (data) {
          var pin = [data.сoordinates, {
            balloonContentHeader: data.name,
            balloonContentBody: data.opening,
            balloonContentFooter: '<a class="pin" href="tel:' + data.phone + '">\u0442\u0435\u043B: ' + data.phone + '</a>',
            hintContent: data.name
          }];

          markersCollection.add(new (Function.prototype.bind.apply(ymaps.Placemark, [null].concat(pin)))());
          currentMap.geoObjects.add(markersCollection);
        });

        if (charoitMap.id === 'map-slider') {
          sliderCards.forEach(function (item) {
            item.addEventListener('click', function (event) {
              if (event.target.parentNode.classList.contains('js-map')) {
                var currentItem = event.target.parentNode;
                var index = currentItem.dataset.value.replace('address-', '');
                var coords = markerCoortds[index];

                currentMap.panTo(coords, {
                  flying: 1
                }).then(function () {
                  return markersCollection.get(index).balloon.open(coords);
                });
              }
            });
          });
        }
      });
    });
  } catch (error) {
    console.error('Something went wrong', error);
  }
}

document.addEventListener('DOMContentLoaded', loadMaps);

/***/ }),
/* 40 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* eslint-disable */

var ESC_KEYCODE = 27;

var body = document.querySelector('body');
var menuOpen = document.querySelector('.menu__open');
var menuClose = document.querySelector('.menu__close');
var menu = document.querySelector('.menu');
var menuBody = document.querySelector('.menu__body');

function onEscPress(evt) {
  if (evt.keyCode === ESC_KEYCODE) {
    menu.classList.remove('menu--active');
    if (body.classList.contains('lock')) {
      body.classList.remove('lock');
    }
  }

  document.removeEventListener('keydown', onEscPress);
}

function hideMenu() {
  menuBody.scrollTop = 0;
  menu.classList.remove('menu--active');
  body.classList.remove('lock');
  document.removeEventListener('keydown', onEscPress);
}

function showMenu() {
  body.classList.add('lock');
  document.addEventListener('keydown', onEscPress);
  menu.classList.add('menu--active');
  menuBody.scrollTop = 0;
  menuClose.addEventListener('click', hideMenu);
}

menuOpen.addEventListener('click', showMenu);

/***/ }),
/* 42 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _micromodal = __webpack_require__(44);

var _micromodal2 = _interopRequireDefault(_micromodal);

var _slider = __webpack_require__(6);

var _slider2 = _interopRequireDefault(_slider);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_micromodal2.default.init({
  openTrigger: 'data-micromodal-open',
  closeTrigger: 'data-micromodal-close',
  disableFocus: true,
  disableScroll: true,
  awaitOpenAnimation: true,
  awaitCloseAnimation: true,
  onShow: function onShow(modal) {
    if (modal.id === 'modal-2') {
      _slider2.default.update();
    }
  }
});

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(n);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }return arr2;
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

var MicroModal = function () {

  var FOCUSABLE_ELEMENTS = ['a[href]', 'area[href]', 'input:not([disabled]):not([type="hidden"]):not([aria-hidden])', 'select:not([disabled]):not([aria-hidden])', 'textarea:not([disabled]):not([aria-hidden])', 'button:not([disabled]):not([aria-hidden])', 'iframe', 'object', 'embed', '[contenteditable]', '[tabindex]:not([tabindex^="-"])'];

  var Modal = /*#__PURE__*/function () {
    function Modal(_ref) {
      var targetModal = _ref.targetModal,
          _ref$triggers = _ref.triggers,
          triggers = _ref$triggers === void 0 ? [] : _ref$triggers,
          _ref$onShow = _ref.onShow,
          onShow = _ref$onShow === void 0 ? function () {} : _ref$onShow,
          _ref$onClose = _ref.onClose,
          onClose = _ref$onClose === void 0 ? function () {} : _ref$onClose,
          _ref$openTrigger = _ref.openTrigger,
          openTrigger = _ref$openTrigger === void 0 ? 'data-micromodal-trigger' : _ref$openTrigger,
          _ref$closeTrigger = _ref.closeTrigger,
          closeTrigger = _ref$closeTrigger === void 0 ? 'data-micromodal-close' : _ref$closeTrigger,
          _ref$openClass = _ref.openClass,
          openClass = _ref$openClass === void 0 ? 'is-open' : _ref$openClass,
          _ref$disableScroll = _ref.disableScroll,
          disableScroll = _ref$disableScroll === void 0 ? false : _ref$disableScroll,
          _ref$disableFocus = _ref.disableFocus,
          disableFocus = _ref$disableFocus === void 0 ? false : _ref$disableFocus,
          _ref$awaitCloseAnimat = _ref.awaitCloseAnimation,
          awaitCloseAnimation = _ref$awaitCloseAnimat === void 0 ? false : _ref$awaitCloseAnimat,
          _ref$awaitOpenAnimati = _ref.awaitOpenAnimation,
          awaitOpenAnimation = _ref$awaitOpenAnimati === void 0 ? false : _ref$awaitOpenAnimati,
          _ref$debugMode = _ref.debugMode,
          debugMode = _ref$debugMode === void 0 ? false : _ref$debugMode;

      _classCallCheck(this, Modal);

      // Save a reference of the modal
      this.modal = document.getElementById(targetModal); // Save a reference to the passed config

      this.config = {
        debugMode: debugMode,
        disableScroll: disableScroll,
        openTrigger: openTrigger,
        closeTrigger: closeTrigger,
        openClass: openClass,
        onShow: onShow,
        onClose: onClose,
        awaitCloseAnimation: awaitCloseAnimation,
        awaitOpenAnimation: awaitOpenAnimation,
        disableFocus: disableFocus
      }; // Register click events only if pre binding eventListeners

      if (triggers.length > 0) this.registerTriggers.apply(this, _toConsumableArray(triggers)); // pre bind functions for event listeners

      this.onClick = this.onClick.bind(this);
      this.onKeydown = this.onKeydown.bind(this);
    }
    /**
     * Loops through all openTriggers and binds click event
     * @param  {array} triggers [Array of node elements]
     * @return {void}
     */

    _createClass(Modal, [{
      key: "registerTriggers",
      value: function registerTriggers() {
        var _this = this;

        for (var _len = arguments.length, triggers = new Array(_len), _key = 0; _key < _len; _key++) {
          triggers[_key] = arguments[_key];
        }

        triggers.filter(Boolean).forEach(function (trigger) {
          trigger.addEventListener('click', function (event) {
            return _this.showModal(event);
          });
        });
      }
    }, {
      key: "showModal",
      value: function showModal() {
        var _this2 = this;

        var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
        this.activeElement = document.activeElement;
        this.modal.setAttribute('aria-hidden', 'false');
        this.modal.classList.add(this.config.openClass);
        this.scrollBehaviour('disable');
        this.addEventListeners();

        if (this.config.awaitOpenAnimation) {
          var handler = function handler() {
            _this2.modal.removeEventListener('animationend', handler, false);

            _this2.setFocusToFirstNode();
          };

          this.modal.addEventListener('animationend', handler, false);
        } else {
          this.setFocusToFirstNode();
        }

        this.config.onShow(this.modal, this.activeElement, event);
      }
    }, {
      key: "closeModal",
      value: function closeModal() {
        var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
        var modal = this.modal;
        this.modal.setAttribute('aria-hidden', 'true');
        this.removeEventListeners();
        this.scrollBehaviour('enable');

        if (this.activeElement && this.activeElement.focus) {
          this.activeElement.focus();
        }

        this.config.onClose(this.modal, this.activeElement, event);

        if (this.config.awaitCloseAnimation) {
          var openClass = this.config.openClass; // <- old school ftw

          this.modal.addEventListener('animationend', function handler() {
            modal.classList.remove(openClass);
            modal.removeEventListener('animationend', handler, false);
          }, false);
        } else {
          modal.classList.remove(this.config.openClass);
        }
      }
    }, {
      key: "closeModalById",
      value: function closeModalById(targetModal) {
        this.modal = document.getElementById(targetModal);
        if (this.modal) this.closeModal();
      }
    }, {
      key: "scrollBehaviour",
      value: function scrollBehaviour(toggle) {
        if (!this.config.disableScroll) return;
        var body = document.querySelector('body');

        switch (toggle) {
          case 'enable':
            Object.assign(body.style, {
              overflow: ''
            });
            break;

          case 'disable':
            Object.assign(body.style, {
              overflow: 'hidden'
            });
            break;
        }
      }
    }, {
      key: "addEventListeners",
      value: function addEventListeners() {
        this.modal.addEventListener('touchstart', this.onClick);
        this.modal.addEventListener('click', this.onClick);
        document.addEventListener('keydown', this.onKeydown);
      }
    }, {
      key: "removeEventListeners",
      value: function removeEventListeners() {
        this.modal.removeEventListener('touchstart', this.onClick);
        this.modal.removeEventListener('click', this.onClick);
        document.removeEventListener('keydown', this.onKeydown);
      }
    }, {
      key: "onClick",
      value: function onClick(event) {
        if (event.target.hasAttribute(this.config.closeTrigger)) {
          this.closeModal(event);
        }
      }
    }, {
      key: "onKeydown",
      value: function onKeydown(event) {
        if (event.keyCode === 27) this.closeModal(event); // esc

        if (event.keyCode === 9) this.retainFocus(event); // tab
      }
    }, {
      key: "getFocusableNodes",
      value: function getFocusableNodes() {
        var nodes = this.modal.querySelectorAll(FOCUSABLE_ELEMENTS);
        return Array.apply(void 0, _toConsumableArray(nodes));
      }
      /**
       * Tries to set focus on a node which is not a close trigger
       * if no other nodes exist then focuses on first close trigger
       */

    }, {
      key: "setFocusToFirstNode",
      value: function setFocusToFirstNode() {
        var _this3 = this;

        if (this.config.disableFocus) return;
        var focusableNodes = this.getFocusableNodes(); // no focusable nodes

        if (focusableNodes.length === 0) return; // remove nodes on whose click, the modal closes
        // could not think of a better name :(

        var nodesWhichAreNotCloseTargets = focusableNodes.filter(function (node) {
          return !node.hasAttribute(_this3.config.closeTrigger);
        });
        if (nodesWhichAreNotCloseTargets.length > 0) nodesWhichAreNotCloseTargets[0].focus();
        if (nodesWhichAreNotCloseTargets.length === 0) focusableNodes[0].focus();
      }
    }, {
      key: "retainFocus",
      value: function retainFocus(event) {
        var focusableNodes = this.getFocusableNodes(); // no focusable nodes

        if (focusableNodes.length === 0) return;
        /**
         * Filters nodes which are hidden to prevent
         * focus leak outside modal
         */

        focusableNodes = focusableNodes.filter(function (node) {
          return node.offsetParent !== null;
        }); // if disableFocus is true

        if (!this.modal.contains(document.activeElement)) {
          focusableNodes[0].focus();
        } else {
          var focusedItemIndex = focusableNodes.indexOf(document.activeElement);

          if (event.shiftKey && focusedItemIndex === 0) {
            focusableNodes[focusableNodes.length - 1].focus();
            event.preventDefault();
          }

          if (!event.shiftKey && focusableNodes.length > 0 && focusedItemIndex === focusableNodes.length - 1) {
            focusableNodes[0].focus();
            event.preventDefault();
          }
        }
      }
    }]);

    return Modal;
  }();
  /**
   * Modal prototype ends.
   * Here on code is responsible for detecting and
   * auto binding event handlers on modal triggers
   */
  // Keep a reference to the opened modal


  var activeModal = null;
  /**
   * Generates an associative array of modals and it's
   * respective triggers
   * @param  {array} triggers     An array of all triggers
   * @param  {string} triggerAttr The data-attribute which triggers the module
   * @return {array}
   */

  var generateTriggerMap = function generateTriggerMap(triggers, triggerAttr) {
    var triggerMap = [];
    triggers.forEach(function (trigger) {
      var targetModal = trigger.attributes[triggerAttr].value;
      if (triggerMap[targetModal] === undefined) triggerMap[targetModal] = [];
      triggerMap[targetModal].push(trigger);
    });
    return triggerMap;
  };
  /**
   * Validates whether a modal of the given id exists
   * in the DOM
   * @param  {number} id  The id of the modal
   * @return {boolean}
   */

  var validateModalPresence = function validateModalPresence(id) {
    if (!document.getElementById(id)) {
      console.warn("MicroModal: \u2757Seems like you have missed %c'".concat(id, "'"), 'background-color: #f8f9fa;color: #50596c;font-weight: bold;', 'ID somewhere in your code. Refer example below to resolve it.');
      console.warn("%cExample:", 'background-color: #f8f9fa;color: #50596c;font-weight: bold;', "<div class=\"modal\" id=\"".concat(id, "\"></div>"));
      return false;
    }
  };
  /**
   * Validates if there are modal triggers present
   * in the DOM
   * @param  {array} triggers An array of data-triggers
   * @return {boolean}
   */

  var validateTriggerPresence = function validateTriggerPresence(triggers) {
    if (triggers.length <= 0) {
      console.warn("MicroModal: \u2757Please specify at least one %c'micromodal-trigger'", 'background-color: #f8f9fa;color: #50596c;font-weight: bold;', 'data attribute.');
      console.warn("%cExample:", 'background-color: #f8f9fa;color: #50596c;font-weight: bold;', "<a href=\"#\" data-micromodal-trigger=\"my-modal\"></a>");
      return false;
    }
  };
  /**
   * Checks if triggers and their corresponding modals
   * are present in the DOM
   * @param  {array} triggers   Array of DOM nodes which have data-triggers
   * @param  {array} triggerMap Associative array of modals and their triggers
   * @return {boolean}
   */

  var validateArgs = function validateArgs(triggers, triggerMap) {
    validateTriggerPresence(triggers);
    if (!triggerMap) return true;

    for (var id in triggerMap) {
      validateModalPresence(id);
    }

    return true;
  };
  /**
   * Binds click handlers to all modal triggers
   * @param  {object} config [description]
   * @return void
   */

  var init = function init(config) {
    // Create an config object with default openTrigger
    var options = Object.assign({}, {
      openTrigger: 'data-micromodal-trigger'
    }, config); // Collects all the nodes with the trigger

    var triggers = _toConsumableArray(document.querySelectorAll("[".concat(options.openTrigger, "]"))); // Makes a mappings of modals with their trigger nodes


    var triggerMap = generateTriggerMap(triggers, options.openTrigger); // Checks if modals and triggers exist in dom

    if (options.debugMode === true && validateArgs(triggers, triggerMap) === false) return; // For every target modal creates a new instance

    for (var key in triggerMap) {
      var value = triggerMap[key];
      options.targetModal = key;
      options.triggers = _toConsumableArray(value);
      activeModal = new Modal(options); // eslint-disable-line no-new
    }
  };
  /**
   * Shows a particular modal
   * @param  {string} targetModal [The id of the modal to display]
   * @param  {object} config [The configuration object to pass]
   * @return {void}
   */

  var show = function show(targetModal, config) {
    var options = config || {};
    options.targetModal = targetModal; // Checks if modals and triggers exist in dom

    if (options.debugMode === true && validateModalPresence(targetModal) === false) return; // clear events in case previous modal wasn't close

    if (activeModal) activeModal.removeEventListeners(); // stores reference to active modal

    activeModal = new Modal(options); // eslint-disable-line no-new

    activeModal.showModal();
  };
  /**
   * Closes the active modal
   * @param  {string} targetModal [The id of the modal to close]
   * @return {void}
   */

  var close = function close(targetModal) {
    targetModal ? activeModal.closeModalById(targetModal) : activeModal.closeModal();
  };

  return {
    init: init,
    show: show,
    close: close
  };
}();
window.MicroModal = MicroModal;

exports.default = MicroModal;

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _coreClass = __webpack_require__(46);

Object.defineProperty(exports, 'Swiper', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_coreClass).default;
  }
});
Object.defineProperty(exports, 'default', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_coreClass).default;
  }
});

var _virtual = __webpack_require__(113);

Object.defineProperty(exports, 'Virtual', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_virtual).default;
  }
});

var _keyboard = __webpack_require__(114);

Object.defineProperty(exports, 'Keyboard', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_keyboard).default;
  }
});

var _mousewheel = __webpack_require__(115);

Object.defineProperty(exports, 'Mousewheel', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_mousewheel).default;
  }
});

var _navigation = __webpack_require__(116);

Object.defineProperty(exports, 'Navigation', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_navigation).default;
  }
});

var _pagination = __webpack_require__(117);

Object.defineProperty(exports, 'Pagination', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_pagination).default;
  }
});

var _scrollbar = __webpack_require__(118);

Object.defineProperty(exports, 'Scrollbar', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_scrollbar).default;
  }
});

var _parallax = __webpack_require__(119);

Object.defineProperty(exports, 'Parallax', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_parallax).default;
  }
});

var _zoom = __webpack_require__(120);

Object.defineProperty(exports, 'Zoom', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_zoom).default;
  }
});

var _lazy = __webpack_require__(121);

Object.defineProperty(exports, 'Lazy', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_lazy).default;
  }
});

var _controller = __webpack_require__(122);

Object.defineProperty(exports, 'Controller', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_controller).default;
  }
});

var _a11y = __webpack_require__(123);

Object.defineProperty(exports, 'A11y', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_a11y).default;
  }
});

var _history = __webpack_require__(124);

Object.defineProperty(exports, 'History', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_history).default;
  }
});

var _hashNavigation = __webpack_require__(125);

Object.defineProperty(exports, 'HashNavigation', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_hashNavigation).default;
  }
});

var _autoplay = __webpack_require__(126);

Object.defineProperty(exports, 'Autoplay', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_autoplay).default;
  }
});

var _effectFade = __webpack_require__(127);

Object.defineProperty(exports, 'EffectFade', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_effectFade).default;
  }
});

var _effectCube = __webpack_require__(128);

Object.defineProperty(exports, 'EffectCube', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_effectCube).default;
  }
});

var _effectFlip = __webpack_require__(129);

Object.defineProperty(exports, 'EffectFlip', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_effectFlip).default;
  }
});

var _effectCoverflow = __webpack_require__(130);

Object.defineProperty(exports, 'EffectCoverflow', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_effectCoverflow).default;
  }
});

var _thumbs = __webpack_require__(131);

Object.defineProperty(exports, 'Thumbs', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_thumbs).default;
  }
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _ssrWindow = __webpack_require__(2);

var _dom = __webpack_require__(1);

var _dom2 = _interopRequireDefault(_dom);

var _utils = __webpack_require__(0);

var _getSupport = __webpack_require__(7);

var _getDevice = __webpack_require__(48);

var _getBrowser = __webpack_require__(49);

var _resize = __webpack_require__(50);

var _resize2 = _interopRequireDefault(_resize);

var _observer = __webpack_require__(51);

var _observer2 = _interopRequireDefault(_observer);

var _modular = __webpack_require__(52);

var _modular2 = _interopRequireDefault(_modular);

var _eventsEmitter = __webpack_require__(53);

var _eventsEmitter2 = _interopRequireDefault(_eventsEmitter);

var _index = __webpack_require__(54);

var _index2 = _interopRequireDefault(_index);

var _index3 = __webpack_require__(64);

var _index4 = _interopRequireDefault(_index3);

var _index5 = __webpack_require__(70);

var _index6 = _interopRequireDefault(_index5);

var _index7 = __webpack_require__(74);

var _index8 = _interopRequireDefault(_index7);

var _index9 = __webpack_require__(82);

var _index10 = _interopRequireDefault(_index9);

var _index11 = __webpack_require__(86);

var _index12 = _interopRequireDefault(_index11);

var _index13 = __webpack_require__(89);

var _index14 = _interopRequireDefault(_index13);

var _index15 = __webpack_require__(95);

var _index16 = _interopRequireDefault(_index15);

var _index17 = __webpack_require__(102);

var _index18 = _interopRequireDefault(_index17);

var _index19 = __webpack_require__(105);

var _index20 = _interopRequireDefault(_index19);

var _index21 = __webpack_require__(108);

var _index22 = _interopRequireDefault(_index21);

var _index23 = __webpack_require__(111);

var _index24 = _interopRequireDefault(_index23);

var _defaults = __webpack_require__(112);

var _defaults2 = _interopRequireDefault(_defaults);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;
}

/* eslint no-param-reassign: "off" */

var prototypes = {
  modular: _modular2.default,
  eventsEmitter: _eventsEmitter2.default,
  update: _index2.default,
  translate: _index4.default,
  transition: _index6.default,
  slide: _index8.default,
  loop: _index10.default,
  grabCursor: _index12.default,
  manipulation: _index14.default,
  events: _index16.default,
  breakpoints: _index18.default,
  checkOverflow: _index24.default,
  classes: _index20.default,
  images: _index22.default
};
var extendedDefaults = {};

var Swiper = /*#__PURE__*/function () {
  function Swiper() {
    var el;
    var params;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (args.length === 1 && args[0].constructor && Object.prototype.toString.call(args[0]).slice(8, -1) === 'Object') {
      params = args[0];
    } else {
      el = args[0];
      params = args[1];
    }

    if (!params) params = {};
    params = (0, _utils.extend)({}, params);
    if (el && !params.el) params.el = el;

    if (params.el && (0, _dom2.default)(params.el).length > 1) {
      var swipers = [];
      (0, _dom2.default)(params.el).each(function (containerEl) {
        var newParams = (0, _utils.extend)({}, params, {
          el: containerEl
        });
        swipers.push(new Swiper(newParams));
      });
      return swipers;
    } // Swiper Instance


    var swiper = this;
    swiper.__swiper__ = true;
    swiper.support = (0, _getSupport.getSupport)();
    swiper.device = (0, _getDevice.getDevice)({
      userAgent: params.userAgent
    });
    swiper.browser = (0, _getBrowser.getBrowser)();
    swiper.eventsListeners = {};
    swiper.eventsAnyListeners = [];

    if (typeof swiper.modules === 'undefined') {
      swiper.modules = {};
    }

    Object.keys(swiper.modules).forEach(function (moduleName) {
      var module = swiper.modules[moduleName];

      if (module.params) {
        var moduleParamName = Object.keys(module.params)[0];
        var moduleParams = module.params[moduleParamName];
        if ((typeof moduleParams === 'undefined' ? 'undefined' : _typeof(moduleParams)) !== 'object' || moduleParams === null) return;

        if (['navigation', 'pagination', 'scrollbar'].indexOf(moduleParamName) >= 0 && params[moduleParamName] === true) {
          params[moduleParamName] = {
            auto: true
          };
        }

        if (!(moduleParamName in params && 'enabled' in moduleParams)) return;

        if (params[moduleParamName] === true) {
          params[moduleParamName] = {
            enabled: true
          };
        }

        if (_typeof(params[moduleParamName]) === 'object' && !('enabled' in params[moduleParamName])) {
          params[moduleParamName].enabled = true;
        }

        if (!params[moduleParamName]) params[moduleParamName] = {
          enabled: false
        };
      }
    }); // Extend defaults with modules params

    var swiperParams = (0, _utils.extend)({}, _defaults2.default);
    swiper.useParams(swiperParams); // Extend defaults with passed params

    swiper.params = (0, _utils.extend)({}, swiperParams, extendedDefaults, params);
    swiper.originalParams = (0, _utils.extend)({}, swiper.params);
    swiper.passedParams = (0, _utils.extend)({}, params); // add event listeners

    if (swiper.params && swiper.params.on) {
      Object.keys(swiper.params.on).forEach(function (eventName) {
        swiper.on(eventName, swiper.params.on[eventName]);
      });
    }

    if (swiper.params && swiper.params.onAny) {
      swiper.onAny(swiper.params.onAny);
    } // Save Dom lib


    swiper.$ = _dom2.default; // Extend Swiper

    (0, _utils.extend)(swiper, {
      enabled: swiper.params.enabled,
      el: el,
      // Classes
      classNames: [],
      // Slides
      slides: (0, _dom2.default)(),
      slidesGrid: [],
      snapGrid: [],
      slidesSizesGrid: [],
      // isDirection
      isHorizontal: function isHorizontal() {
        return swiper.params.direction === 'horizontal';
      },
      isVertical: function isVertical() {
        return swiper.params.direction === 'vertical';
      },
      // Indexes
      activeIndex: 0,
      realIndex: 0,
      //
      isBeginning: true,
      isEnd: false,
      // Props
      translate: 0,
      previousTranslate: 0,
      progress: 0,
      velocity: 0,
      animating: false,
      // Locks
      allowSlideNext: swiper.params.allowSlideNext,
      allowSlidePrev: swiper.params.allowSlidePrev,
      // Touch Events
      touchEvents: function touchEvents() {
        var touch = ['touchstart', 'touchmove', 'touchend', 'touchcancel'];
        var desktop = ['mousedown', 'mousemove', 'mouseup'];

        if (swiper.support.pointerEvents) {
          desktop = ['pointerdown', 'pointermove', 'pointerup'];
        }

        swiper.touchEventsTouch = {
          start: touch[0],
          move: touch[1],
          end: touch[2],
          cancel: touch[3]
        };
        swiper.touchEventsDesktop = {
          start: desktop[0],
          move: desktop[1],
          end: desktop[2]
        };
        return swiper.support.touch || !swiper.params.simulateTouch ? swiper.touchEventsTouch : swiper.touchEventsDesktop;
      }(),
      touchEventsData: {
        isTouched: undefined,
        isMoved: undefined,
        allowTouchCallbacks: undefined,
        touchStartTime: undefined,
        isScrolling: undefined,
        currentTranslate: undefined,
        startTranslate: undefined,
        allowThresholdMove: undefined,
        // Form elements to match
        formElements: 'input, select, option, textarea, button, video, label',
        // Last click time
        lastClickTime: (0, _utils.now)(),
        clickTimeout: undefined,
        // Velocities
        velocities: [],
        allowMomentumBounce: undefined,
        isTouchEvent: undefined,
        startMoving: undefined
      },
      // Clicks
      allowClick: true,
      // Touches
      allowTouchMove: swiper.params.allowTouchMove,
      touches: {
        startX: 0,
        startY: 0,
        currentX: 0,
        currentY: 0,
        diff: 0
      },
      // Images
      imagesToLoad: [],
      imagesLoaded: 0
    }); // Install Modules

    swiper.useModules();
    swiper.emit('_swiper'); // Init

    if (swiper.params.init) {
      swiper.init();
    } // Return app instance


    return swiper;
  }

  var _proto = Swiper.prototype;

  _proto.enable = function enable() {
    var swiper = this;
    if (swiper.enabled) return;
    swiper.enabled = true;

    if (swiper.params.grabCursor) {
      swiper.setGrabCursor();
    }

    swiper.emit('enable');
  };

  _proto.disable = function disable() {
    var swiper = this;
    if (!swiper.enabled) return;
    swiper.enabled = false;

    if (swiper.params.grabCursor) {
      swiper.unsetGrabCursor();
    }

    swiper.emit('disable');
  };

  _proto.setProgress = function setProgress(progress, speed) {
    var swiper = this;
    progress = Math.min(Math.max(progress, 0), 1);
    var min = swiper.minTranslate();
    var max = swiper.maxTranslate();
    var current = (max - min) * progress + min;
    swiper.translateTo(current, typeof speed === 'undefined' ? 0 : speed);
    swiper.updateActiveIndex();
    swiper.updateSlidesClasses();
  };

  _proto.emitContainerClasses = function emitContainerClasses() {
    var swiper = this;
    if (!swiper.params._emitClasses || !swiper.el) return;
    var classes = swiper.el.className.split(' ').filter(function (className) {
      return className.indexOf('swiper-container') === 0 || className.indexOf(swiper.params.containerModifierClass) === 0;
    });
    swiper.emit('_containerClasses', classes.join(' '));
  };

  _proto.getSlideClasses = function getSlideClasses(slideEl) {
    var swiper = this;
    return slideEl.className.split(' ').filter(function (className) {
      return className.indexOf('swiper-slide') === 0 || className.indexOf(swiper.params.slideClass) === 0;
    }).join(' ');
  };

  _proto.emitSlidesClasses = function emitSlidesClasses() {
    var swiper = this;
    if (!swiper.params._emitClasses || !swiper.el) return;
    var updates = [];
    swiper.slides.each(function (slideEl) {
      var classNames = swiper.getSlideClasses(slideEl);
      updates.push({
        slideEl: slideEl,
        classNames: classNames
      });
      swiper.emit('_slideClass', slideEl, classNames);
    });
    swiper.emit('_slideClasses', updates);
  };

  _proto.slidesPerViewDynamic = function slidesPerViewDynamic() {
    var swiper = this;
    var params = swiper.params,
        slides = swiper.slides,
        slidesGrid = swiper.slidesGrid,
        swiperSize = swiper.size,
        activeIndex = swiper.activeIndex;
    var spv = 1;

    if (params.centeredSlides) {
      var slideSize = slides[activeIndex].swiperSlideSize;
      var breakLoop;

      for (var i = activeIndex + 1; i < slides.length; i += 1) {
        if (slides[i] && !breakLoop) {
          slideSize += slides[i].swiperSlideSize;
          spv += 1;
          if (slideSize > swiperSize) breakLoop = true;
        }
      }

      for (var _i = activeIndex - 1; _i >= 0; _i -= 1) {
        if (slides[_i] && !breakLoop) {
          slideSize += slides[_i].swiperSlideSize;
          spv += 1;
          if (slideSize > swiperSize) breakLoop = true;
        }
      }
    } else {
      for (var _i2 = activeIndex + 1; _i2 < slides.length; _i2 += 1) {
        if (slidesGrid[_i2] - slidesGrid[activeIndex] < swiperSize) {
          spv += 1;
        }
      }
    }

    return spv;
  };

  _proto.update = function update() {
    var swiper = this;
    if (!swiper || swiper.destroyed) return;
    var snapGrid = swiper.snapGrid,
        params = swiper.params; // Breakpoints

    if (params.breakpoints) {
      swiper.setBreakpoint();
    }

    swiper.updateSize();
    swiper.updateSlides();
    swiper.updateProgress();
    swiper.updateSlidesClasses();

    function setTranslate() {
      var translateValue = swiper.rtlTranslate ? swiper.translate * -1 : swiper.translate;
      var newTranslate = Math.min(Math.max(translateValue, swiper.maxTranslate()), swiper.minTranslate());
      swiper.setTranslate(newTranslate);
      swiper.updateActiveIndex();
      swiper.updateSlidesClasses();
    }

    var translated;

    if (swiper.params.freeMode) {
      setTranslate();

      if (swiper.params.autoHeight) {
        swiper.updateAutoHeight();
      }
    } else {
      if ((swiper.params.slidesPerView === 'auto' || swiper.params.slidesPerView > 1) && swiper.isEnd && !swiper.params.centeredSlides) {
        translated = swiper.slideTo(swiper.slides.length - 1, 0, false, true);
      } else {
        translated = swiper.slideTo(swiper.activeIndex, 0, false, true);
      }

      if (!translated) {
        setTranslate();
      }
    }

    if (params.watchOverflow && snapGrid !== swiper.snapGrid) {
      swiper.checkOverflow();
    }

    swiper.emit('update');
  };

  _proto.changeDirection = function changeDirection(newDirection, needUpdate) {
    if (needUpdate === void 0) {
      needUpdate = true;
    }

    var swiper = this;
    var currentDirection = swiper.params.direction;

    if (!newDirection) {
      // eslint-disable-next-line
      newDirection = currentDirection === 'horizontal' ? 'vertical' : 'horizontal';
    }

    if (newDirection === currentDirection || newDirection !== 'horizontal' && newDirection !== 'vertical') {
      return swiper;
    }

    swiper.$el.removeClass("" + swiper.params.containerModifierClass + currentDirection).addClass("" + swiper.params.containerModifierClass + newDirection);
    swiper.emitContainerClasses();
    swiper.params.direction = newDirection;
    swiper.slides.each(function (slideEl) {
      if (newDirection === 'vertical') {
        slideEl.style.width = '';
      } else {
        slideEl.style.height = '';
      }
    });
    swiper.emit('changeDirection');
    if (needUpdate) swiper.update();
    return swiper;
  };

  _proto.mount = function mount(el) {
    var swiper = this;
    if (swiper.mounted) return true; // Find el

    var $el = (0, _dom2.default)(el || swiper.params.el);
    el = $el[0];

    if (!el) {
      return false;
    }

    el.swiper = swiper;

    var getWrapper = function getWrapper() {
      if (el && el.shadowRoot && el.shadowRoot.querySelector) {
        var res = (0, _dom2.default)(el.shadowRoot.querySelector("." + swiper.params.wrapperClass)); // Children needs to return slot items

        res.children = function (options) {
          return $el.children(options);
        };

        return res;
      }

      return $el.children("." + swiper.params.wrapperClass);
    }; // Find Wrapper


    var $wrapperEl = getWrapper();

    if ($wrapperEl.length === 0 && swiper.params.createElements) {
      var document = (0, _ssrWindow.getDocument)();
      var wrapper = document.createElement('div');
      $wrapperEl = (0, _dom2.default)(wrapper);
      wrapper.className = swiper.params.wrapperClass;
      $el.append(wrapper);
      $el.children("." + swiper.params.slideClass).each(function (slideEl) {
        $wrapperEl.append(slideEl);
      });
    }

    (0, _utils.extend)(swiper, {
      $el: $el,
      el: el,
      $wrapperEl: $wrapperEl,
      wrapperEl: $wrapperEl[0],
      mounted: true,
      // RTL
      rtl: el.dir.toLowerCase() === 'rtl' || $el.css('direction') === 'rtl',
      rtlTranslate: swiper.params.direction === 'horizontal' && (el.dir.toLowerCase() === 'rtl' || $el.css('direction') === 'rtl'),
      wrongRTL: $wrapperEl.css('display') === '-webkit-box'
    });
    return true;
  };

  _proto.init = function init(el) {
    var swiper = this;
    if (swiper.initialized) return swiper;
    var mounted = swiper.mount(el);
    if (mounted === false) return swiper;
    swiper.emit('beforeInit'); // Set breakpoint

    if (swiper.params.breakpoints) {
      swiper.setBreakpoint();
    } // Add Classes


    swiper.addClasses(); // Create loop

    if (swiper.params.loop) {
      swiper.loopCreate();
    } // Update size


    swiper.updateSize(); // Update slides

    swiper.updateSlides();

    if (swiper.params.watchOverflow) {
      swiper.checkOverflow();
    } // Set Grab Cursor


    if (swiper.params.grabCursor && swiper.enabled) {
      swiper.setGrabCursor();
    }

    if (swiper.params.preloadImages) {
      swiper.preloadImages();
    } // Slide To Initial Slide


    if (swiper.params.loop) {
      swiper.slideTo(swiper.params.initialSlide + swiper.loopedSlides, 0, swiper.params.runCallbacksOnInit, false, true);
    } else {
      swiper.slideTo(swiper.params.initialSlide, 0, swiper.params.runCallbacksOnInit, false, true);
    } // Attach events


    swiper.attachEvents(); // Init Flag

    swiper.initialized = true; // Emit

    swiper.emit('init');
    swiper.emit('afterInit');
    return swiper;
  };

  _proto.destroy = function destroy(deleteInstance, cleanStyles) {
    if (deleteInstance === void 0) {
      deleteInstance = true;
    }

    if (cleanStyles === void 0) {
      cleanStyles = true;
    }

    var swiper = this;
    var params = swiper.params,
        $el = swiper.$el,
        $wrapperEl = swiper.$wrapperEl,
        slides = swiper.slides;

    if (typeof swiper.params === 'undefined' || swiper.destroyed) {
      return null;
    }

    swiper.emit('beforeDestroy'); // Init Flag

    swiper.initialized = false; // Detach events

    swiper.detachEvents(); // Destroy loop

    if (params.loop) {
      swiper.loopDestroy();
    } // Cleanup styles


    if (cleanStyles) {
      swiper.removeClasses();
      $el.removeAttr('style');
      $wrapperEl.removeAttr('style');

      if (slides && slides.length) {
        slides.removeClass([params.slideVisibleClass, params.slideActiveClass, params.slideNextClass, params.slidePrevClass].join(' ')).removeAttr('style').removeAttr('data-swiper-slide-index');
      }
    }

    swiper.emit('destroy'); // Detach emitter events

    Object.keys(swiper.eventsListeners).forEach(function (eventName) {
      swiper.off(eventName);
    });

    if (deleteInstance !== false) {
      swiper.$el[0].swiper = null;
      (0, _utils.deleteProps)(swiper);
    }

    swiper.destroyed = true;
    return null;
  };

  Swiper.extendDefaults = function extendDefaults(newDefaults) {
    (0, _utils.extend)(extendedDefaults, newDefaults);
  };

  Swiper.installModule = function installModule(module) {
    if (!Swiper.prototype.modules) Swiper.prototype.modules = {};
    var name = module.name || Object.keys(Swiper.prototype.modules).length + "_" + (0, _utils.now)();
    Swiper.prototype.modules[name] = module;
  };

  Swiper.use = function use(module) {
    if (Array.isArray(module)) {
      module.forEach(function (m) {
        return Swiper.installModule(m);
      });
      return Swiper;
    }

    Swiper.installModule(module);
    return Swiper;
  };

  _createClass(Swiper, null, [{
    key: "extendedDefaults",
    get: function get() {
      return extendedDefaults;
    }
  }, {
    key: "defaults",
    get: function get() {
      return _defaults2.default;
    }
  }]);

  return Swiper;
}();

Object.keys(prototypes).forEach(function (prototypeGroup) {
  Object.keys(prototypes[prototypeGroup]).forEach(function (protoMethod) {
    Swiper.prototype[protoMethod] = prototypes[prototypeGroup][protoMethod];
  });
});
Swiper.use([_resize2.default, _observer2.default]);
exports.default = Swiper;

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.width = exports.value = exports.val = exports.trigger = exports.transitionEnd = exports.transition = exports.transform = exports.touchstart = exports.touchmove = exports.touchend = exports.toggleClass = exports.text = exports.submit = exports.styles = exports.stop = exports.siblings = exports.show = exports.scrollTop = exports.scrollTo = exports.scrollLeft = exports.scroll = exports.resize = exports.removeData = exports.removeClass = exports.removeAttr = exports.remove = exports.prop = exports.prevAll = exports.prev = exports.prependTo = exports.prepend = exports.parents = exports.parent = exports.outerWidth = exports.outerHeight = exports.once = exports.on = exports.offset = exports.off = exports.nextAll = exports.next = exports.mouseup = exports.mouseover = exports.mouseout = exports.mousemove = exports.mouseleave = exports.mouseenter = exports.mousedown = exports.keyup = exports.keypress = exports.keydown = exports.is = exports.insertBefore = exports.insertAfter = exports.index = exports.html = exports.hide = exports.height = exports.hasClass = exports.focusout = exports.focusin = exports.focus = exports.find = exports.filter = exports.eq = exports.empty = exports.each = exports.detach = exports.dataset = exports.data = exports.css = exports.closest = exports.click = exports.children = exports.change = exports.blur = exports.attr = exports.appendTo = exports.append = exports.animationEnd = exports.animate = exports.addClass = exports.add = exports.$ = undefined;

var _ssrWindow = __webpack_require__(2);

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
} /**
   * Dom7 3.0.0
   * Minimalistic JavaScript library for DOM manipulation, with a jQuery-compatible API
   * https://framework7.io/docs/dom7.html
   *
   * Copyright 2020, Vladimir Kharlampidi
   *
   * Licensed under MIT
   *
   * Released on: November 9, 2020
   */


function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}

function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;

  _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !_isNativeFunction(Class)) return Class;

    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }

    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);

      _cache.set(Class, Wrapper);
    }

    function Wrapper() {
      return _construct(Class, arguments, _getPrototypeOf(this).constructor);
    }

    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class);
  };

  return _wrapNativeSuper(Class);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

/* eslint-disable no-proto */
function makeReactive(obj) {
  var proto = obj.__proto__;
  Object.defineProperty(obj, '__proto__', {
    get: function get() {
      return proto;
    },
    set: function set(value) {
      proto.__proto__ = value;
    }
  });
}

var Dom7 = /*#__PURE__*/function (_Array) {
  _inheritsLoose(Dom7, _Array);

  function Dom7(items) {
    var _this;

    _this = _Array.call.apply(_Array, [this].concat(items)) || this;
    makeReactive(_assertThisInitialized(_this));
    return _this;
  }

  return Dom7;
}( /*#__PURE__*/_wrapNativeSuper(Array));

function arrayFlat(arr) {
  if (arr === void 0) {
    arr = [];
  }

  var res = [];
  arr.forEach(function (el) {
    if (Array.isArray(el)) {
      res.push.apply(res, arrayFlat(el));
    } else {
      res.push(el);
    }
  });
  return res;
}
function arrayFilter(arr, callback) {
  return Array.prototype.filter.call(arr, callback);
}
function arrayUnique(arr) {
  var uniqueArray = [];

  for (var i = 0; i < arr.length; i += 1) {
    if (uniqueArray.indexOf(arr[i]) === -1) uniqueArray.push(arr[i]);
  }

  return uniqueArray;
}
function toCamelCase(string) {
  return string.toLowerCase().replace(/-(.)/g, function (match, group) {
    return group.toUpperCase();
  });
}

function qsa(selector, context) {
  if (typeof selector !== 'string') {
    return [selector];
  }

  var a = [];
  var res = context.querySelectorAll(selector);

  for (var i = 0; i < res.length; i += 1) {
    a.push(res[i]);
  }

  return a;
}

function $(selector, context) {
  var window = (0, _ssrWindow.getWindow)();
  var document = (0, _ssrWindow.getDocument)();
  var arr = [];

  if (!context && selector instanceof Dom7) {
    return selector;
  }

  if (!selector) {
    return new Dom7(arr);
  }

  if (typeof selector === 'string') {
    var html = selector.trim();

    if (html.indexOf('<') >= 0 && html.indexOf('>') >= 0) {
      var toCreate = 'div';
      if (html.indexOf('<li') === 0) toCreate = 'ul';
      if (html.indexOf('<tr') === 0) toCreate = 'tbody';
      if (html.indexOf('<td') === 0 || html.indexOf('<th') === 0) toCreate = 'tr';
      if (html.indexOf('<tbody') === 0) toCreate = 'table';
      if (html.indexOf('<option') === 0) toCreate = 'select';
      var tempParent = document.createElement(toCreate);
      tempParent.innerHTML = html;

      for (var i = 0; i < tempParent.childNodes.length; i += 1) {
        arr.push(tempParent.childNodes[i]);
      }
    } else {
      arr = qsa(selector.trim(), context || document);
    } // arr = qsa(selector, document);
  } else if (selector.nodeType || selector === window || selector === document) {
    arr.push(selector);
  } else if (Array.isArray(selector)) {
    if (selector instanceof Dom7) return selector;
    arr = selector;
  }

  return new Dom7(arrayUnique(arr));
}

$.fn = Dom7.prototype;

function addClass() {
  for (var _len = arguments.length, classes = new Array(_len), _key = 0; _key < _len; _key++) {
    classes[_key] = arguments[_key];
  }

  var classNames = arrayFlat(classes.map(function (c) {
    return c.split(' ');
  }));
  this.forEach(function (el) {
    var _el$classList;

    (_el$classList = el.classList).add.apply(_el$classList, classNames);
  });
  return this;
}

function removeClass() {
  for (var _len2 = arguments.length, classes = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    classes[_key2] = arguments[_key2];
  }

  var classNames = arrayFlat(classes.map(function (c) {
    return c.split(' ');
  }));
  this.forEach(function (el) {
    var _el$classList2;

    (_el$classList2 = el.classList).remove.apply(_el$classList2, classNames);
  });
  return this;
}

function toggleClass() {
  for (var _len3 = arguments.length, classes = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    classes[_key3] = arguments[_key3];
  }

  var classNames = arrayFlat(classes.map(function (c) {
    return c.split(' ');
  }));
  this.forEach(function (el) {
    classNames.forEach(function (className) {
      el.classList.toggle(className);
    });
  });
}

function hasClass() {
  for (var _len4 = arguments.length, classes = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
    classes[_key4] = arguments[_key4];
  }

  var classNames = arrayFlat(classes.map(function (c) {
    return c.split(' ');
  }));
  return arrayFilter(this, function (el) {
    return classNames.filter(function (className) {
      return el.classList.contains(className);
    }).length > 0;
  }).length > 0;
}

function attr(attrs, value) {
  if (arguments.length === 1 && typeof attrs === 'string') {
    // Get attr
    if (this[0]) return this[0].getAttribute(attrs);
    return undefined;
  } // Set attrs


  for (var i = 0; i < this.length; i += 1) {
    if (arguments.length === 2) {
      // String
      this[i].setAttribute(attrs, value);
    } else {
      // Object
      for (var attrName in attrs) {
        this[i][attrName] = attrs[attrName];
        this[i].setAttribute(attrName, attrs[attrName]);
      }
    }
  }

  return this;
}

function removeAttr(attr) {
  for (var i = 0; i < this.length; i += 1) {
    this[i].removeAttribute(attr);
  }

  return this;
}

function prop(props, value) {
  if (arguments.length === 1 && typeof props === 'string') {
    // Get prop
    if (this[0]) return this[0][props];
  } else {
    // Set props
    for (var i = 0; i < this.length; i += 1) {
      if (arguments.length === 2) {
        // String
        this[i][props] = value;
      } else {
        // Object
        for (var propName in props) {
          this[i][propName] = props[propName];
        }
      }
    }

    return this;
  }

  return this;
}

function data(key, value) {
  var el;

  if (typeof value === 'undefined') {
    el = this[0];
    if (!el) return undefined; // Get value

    if (el.dom7ElementDataStorage && key in el.dom7ElementDataStorage) {
      return el.dom7ElementDataStorage[key];
    }

    var dataKey = el.getAttribute("data-" + key);

    if (dataKey) {
      return dataKey;
    }

    return undefined;
  } // Set value


  for (var i = 0; i < this.length; i += 1) {
    el = this[i];
    if (!el.dom7ElementDataStorage) el.dom7ElementDataStorage = {};
    el.dom7ElementDataStorage[key] = value;
  }

  return this;
}

function removeData(key) {
  for (var i = 0; i < this.length; i += 1) {
    var el = this[i];

    if (el.dom7ElementDataStorage && el.dom7ElementDataStorage[key]) {
      el.dom7ElementDataStorage[key] = null;
      delete el.dom7ElementDataStorage[key];
    }
  }
}

function dataset() {
  var el = this[0];
  if (!el) return undefined;
  var dataset = {}; // eslint-disable-line

  if (el.dataset) {
    for (var dataKey in el.dataset) {
      dataset[dataKey] = el.dataset[dataKey];
    }
  } else {
    for (var i = 0; i < el.attributes.length; i += 1) {
      var _attr = el.attributes[i];

      if (_attr.name.indexOf('data-') >= 0) {
        dataset[toCamelCase(_attr.name.split('data-')[1])] = _attr.value;
      }
    }
  }

  for (var key in dataset) {
    if (dataset[key] === 'false') dataset[key] = false;else if (dataset[key] === 'true') dataset[key] = true;else if (parseFloat(dataset[key]) === dataset[key] * 1) dataset[key] *= 1;
  }

  return dataset;
}

function val(value) {
  if (typeof value === 'undefined') {
    // get value
    var el = this[0];
    if (!el) return undefined;

    if (el.multiple && el.nodeName.toLowerCase() === 'select') {
      var values = [];

      for (var i = 0; i < el.selectedOptions.length; i += 1) {
        values.push(el.selectedOptions[i].value);
      }

      return values;
    }

    return el.value;
  } // set value


  for (var _i = 0; _i < this.length; _i += 1) {
    var _el = this[_i];

    if (Array.isArray(value) && _el.multiple && _el.nodeName.toLowerCase() === 'select') {
      for (var j = 0; j < _el.options.length; j += 1) {
        _el.options[j].selected = value.indexOf(_el.options[j].value) >= 0;
      }
    } else {
      _el.value = value;
    }
  }

  return this;
}

function value(value) {
  return this.val(value);
}

function transform(transform) {
  for (var i = 0; i < this.length; i += 1) {
    this[i].style.transform = transform;
  }

  return this;
}

function transition(duration) {
  for (var i = 0; i < this.length; i += 1) {
    this[i].style.transitionDuration = typeof duration !== 'string' ? duration + "ms" : duration;
  }

  return this;
}

function on() {
  for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
    args[_key5] = arguments[_key5];
  }

  var eventType = args[0],
      targetSelector = args[1],
      listener = args[2],
      capture = args[3];

  if (typeof args[1] === 'function') {
    eventType = args[0];
    listener = args[1];
    capture = args[2];
    targetSelector = undefined;
  }

  if (!capture) capture = false;

  function handleLiveEvent(e) {
    var target = e.target;
    if (!target) return;
    var eventData = e.target.dom7EventData || [];

    if (eventData.indexOf(e) < 0) {
      eventData.unshift(e);
    }

    if ($(target).is(targetSelector)) listener.apply(target, eventData);else {
      var _parents = $(target).parents(); // eslint-disable-line


      for (var k = 0; k < _parents.length; k += 1) {
        if ($(_parents[k]).is(targetSelector)) listener.apply(_parents[k], eventData);
      }
    }
  }

  function handleEvent(e) {
    var eventData = e && e.target ? e.target.dom7EventData || [] : [];

    if (eventData.indexOf(e) < 0) {
      eventData.unshift(e);
    }

    listener.apply(this, eventData);
  }

  var events = eventType.split(' ');
  var j;

  for (var i = 0; i < this.length; i += 1) {
    var el = this[i];

    if (!targetSelector) {
      for (j = 0; j < events.length; j += 1) {
        var event = events[j];
        if (!el.dom7Listeners) el.dom7Listeners = {};
        if (!el.dom7Listeners[event]) el.dom7Listeners[event] = [];
        el.dom7Listeners[event].push({
          listener: listener,
          proxyListener: handleEvent
        });
        el.addEventListener(event, handleEvent, capture);
      }
    } else {
      // Live events
      for (j = 0; j < events.length; j += 1) {
        var _event = events[j];
        if (!el.dom7LiveListeners) el.dom7LiveListeners = {};
        if (!el.dom7LiveListeners[_event]) el.dom7LiveListeners[_event] = [];

        el.dom7LiveListeners[_event].push({
          listener: listener,
          proxyListener: handleLiveEvent
        });

        el.addEventListener(_event, handleLiveEvent, capture);
      }
    }
  }

  return this;
}

function off() {
  for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
    args[_key6] = arguments[_key6];
  }

  var eventType = args[0],
      targetSelector = args[1],
      listener = args[2],
      capture = args[3];

  if (typeof args[1] === 'function') {
    eventType = args[0];
    listener = args[1];
    capture = args[2];
    targetSelector = undefined;
  }

  if (!capture) capture = false;
  var events = eventType.split(' ');

  for (var i = 0; i < events.length; i += 1) {
    var event = events[i];

    for (var j = 0; j < this.length; j += 1) {
      var el = this[j];
      var handlers = void 0;

      if (!targetSelector && el.dom7Listeners) {
        handlers = el.dom7Listeners[event];
      } else if (targetSelector && el.dom7LiveListeners) {
        handlers = el.dom7LiveListeners[event];
      }

      if (handlers && handlers.length) {
        for (var k = handlers.length - 1; k >= 0; k -= 1) {
          var handler = handlers[k];

          if (listener && handler.listener === listener) {
            el.removeEventListener(event, handler.proxyListener, capture);
            handlers.splice(k, 1);
          } else if (listener && handler.listener && handler.listener.dom7proxy && handler.listener.dom7proxy === listener) {
            el.removeEventListener(event, handler.proxyListener, capture);
            handlers.splice(k, 1);
          } else if (!listener) {
            el.removeEventListener(event, handler.proxyListener, capture);
            handlers.splice(k, 1);
          }
        }
      }
    }
  }

  return this;
}

function once() {
  var dom = this;

  for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
    args[_key7] = arguments[_key7];
  }

  var eventName = args[0],
      targetSelector = args[1],
      listener = args[2],
      capture = args[3];

  if (typeof args[1] === 'function') {
    eventName = args[0];
    listener = args[1];
    capture = args[2];
    targetSelector = undefined;
  }

  function onceHandler() {
    for (var _len8 = arguments.length, eventArgs = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
      eventArgs[_key8] = arguments[_key8];
    }

    listener.apply(this, eventArgs);
    dom.off(eventName, targetSelector, onceHandler, capture);

    if (onceHandler.dom7proxy) {
      delete onceHandler.dom7proxy;
    }
  }

  onceHandler.dom7proxy = listener;
  return dom.on(eventName, targetSelector, onceHandler, capture);
}

function trigger() {
  var window = (0, _ssrWindow.getWindow)();

  for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
    args[_key9] = arguments[_key9];
  }

  var events = args[0].split(' ');
  var eventData = args[1];

  for (var i = 0; i < events.length; i += 1) {
    var event = events[i];

    for (var j = 0; j < this.length; j += 1) {
      var el = this[j];

      if (window.CustomEvent) {
        var evt = new window.CustomEvent(event, {
          detail: eventData,
          bubbles: true,
          cancelable: true
        });
        el.dom7EventData = args.filter(function (data, dataIndex) {
          return dataIndex > 0;
        });
        el.dispatchEvent(evt);
        el.dom7EventData = [];
        delete el.dom7EventData;
      }
    }
  }

  return this;
}

function transitionEnd(callback) {
  var dom = this;

  function fireCallBack(e) {
    if (e.target !== this) return;
    callback.call(this, e);
    dom.off('transitionend', fireCallBack);
  }

  if (callback) {
    dom.on('transitionend', fireCallBack);
  }

  return this;
}

function animationEnd(callback) {
  var dom = this;

  function fireCallBack(e) {
    if (e.target !== this) return;
    callback.call(this, e);
    dom.off('animationend', fireCallBack);
  }

  if (callback) {
    dom.on('animationend', fireCallBack);
  }

  return this;
}

function width() {
  var window = (0, _ssrWindow.getWindow)();

  if (this[0] === window) {
    return window.innerWidth;
  }

  if (this.length > 0) {
    return parseFloat(this.css('width'));
  }

  return null;
}

function outerWidth(includeMargins) {
  if (this.length > 0) {
    if (includeMargins) {
      var _styles = this.styles();

      return this[0].offsetWidth + parseFloat(_styles.getPropertyValue('margin-right')) + parseFloat(_styles.getPropertyValue('margin-left'));
    }

    return this[0].offsetWidth;
  }

  return null;
}

function height() {
  var window = (0, _ssrWindow.getWindow)();

  if (this[0] === window) {
    return window.innerHeight;
  }

  if (this.length > 0) {
    return parseFloat(this.css('height'));
  }

  return null;
}

function outerHeight(includeMargins) {
  if (this.length > 0) {
    if (includeMargins) {
      var _styles2 = this.styles();

      return this[0].offsetHeight + parseFloat(_styles2.getPropertyValue('margin-top')) + parseFloat(_styles2.getPropertyValue('margin-bottom'));
    }

    return this[0].offsetHeight;
  }

  return null;
}

function offset() {
  if (this.length > 0) {
    var window = (0, _ssrWindow.getWindow)();
    var document = (0, _ssrWindow.getDocument)();
    var el = this[0];
    var box = el.getBoundingClientRect();
    var body = document.body;
    var clientTop = el.clientTop || body.clientTop || 0;
    var clientLeft = el.clientLeft || body.clientLeft || 0;
    var scrollTop = el === window ? window.scrollY : el.scrollTop;
    var scrollLeft = el === window ? window.scrollX : el.scrollLeft;
    return {
      top: box.top + scrollTop - clientTop,
      left: box.left + scrollLeft - clientLeft
    };
  }

  return null;
}

function hide() {
  for (var i = 0; i < this.length; i += 1) {
    this[i].style.display = 'none';
  }

  return this;
}

function show() {
  var window = (0, _ssrWindow.getWindow)();

  for (var i = 0; i < this.length; i += 1) {
    var el = this[i];

    if (el.style.display === 'none') {
      el.style.display = '';
    }

    if (window.getComputedStyle(el, null).getPropertyValue('display') === 'none') {
      // Still not visible
      el.style.display = 'block';
    }
  }

  return this;
}

function styles() {
  var window = (0, _ssrWindow.getWindow)();
  if (this[0]) return window.getComputedStyle(this[0], null);
  return {};
}

function css(props, value) {
  var window = (0, _ssrWindow.getWindow)();
  var i;

  if (arguments.length === 1) {
    if (typeof props === 'string') {
      // .css('width')
      if (this[0]) return window.getComputedStyle(this[0], null).getPropertyValue(props);
    } else {
      // .css({ width: '100px' })
      for (i = 0; i < this.length; i += 1) {
        for (var _prop in props) {
          this[i].style[_prop] = props[_prop];
        }
      }

      return this;
    }
  }

  if (arguments.length === 2 && typeof props === 'string') {
    // .css('width', '100px')
    for (i = 0; i < this.length; i += 1) {
      this[i].style[props] = value;
    }

    return this;
  }

  return this;
}

function each(callback) {
  if (!callback) return this;
  this.forEach(function (el, index) {
    callback.apply(el, [el, index]);
  });
  return this;
}

function filter(callback) {
  var result = arrayFilter(this, callback);
  return $(result);
}

function html(html) {
  if (typeof html === 'undefined') {
    return this[0] ? this[0].innerHTML : null;
  }

  for (var i = 0; i < this.length; i += 1) {
    this[i].innerHTML = html;
  }

  return this;
}

function text(text) {
  if (typeof text === 'undefined') {
    return this[0] ? this[0].textContent.trim() : null;
  }

  for (var i = 0; i < this.length; i += 1) {
    this[i].textContent = text;
  }

  return this;
}

function is(selector) {
  var window = (0, _ssrWindow.getWindow)();
  var document = (0, _ssrWindow.getDocument)();
  var el = this[0];
  var compareWith;
  var i;
  if (!el || typeof selector === 'undefined') return false;

  if (typeof selector === 'string') {
    if (el.matches) return el.matches(selector);
    if (el.webkitMatchesSelector) return el.webkitMatchesSelector(selector);
    if (el.msMatchesSelector) return el.msMatchesSelector(selector);
    compareWith = $(selector);

    for (i = 0; i < compareWith.length; i += 1) {
      if (compareWith[i] === el) return true;
    }

    return false;
  }

  if (selector === document) {
    return el === document;
  }

  if (selector === window) {
    return el === window;
  }

  if (selector.nodeType || selector instanceof Dom7) {
    compareWith = selector.nodeType ? [selector] : selector;

    for (i = 0; i < compareWith.length; i += 1) {
      if (compareWith[i] === el) return true;
    }

    return false;
  }

  return false;
}

function index() {
  var child = this[0];
  var i;

  if (child) {
    i = 0; // eslint-disable-next-line

    while ((child = child.previousSibling) !== null) {
      if (child.nodeType === 1) i += 1;
    }

    return i;
  }

  return undefined;
}

function eq(index) {
  if (typeof index === 'undefined') return this;
  var length = this.length;

  if (index > length - 1) {
    return $([]);
  }

  if (index < 0) {
    var returnIndex = length + index;
    if (returnIndex < 0) return $([]);
    return $([this[returnIndex]]);
  }

  return $([this[index]]);
}

function append() {
  var newChild;
  var document = (0, _ssrWindow.getDocument)();

  for (var k = 0; k < arguments.length; k += 1) {
    newChild = k < 0 || arguments.length <= k ? undefined : arguments[k];

    for (var i = 0; i < this.length; i += 1) {
      if (typeof newChild === 'string') {
        var tempDiv = document.createElement('div');
        tempDiv.innerHTML = newChild;

        while (tempDiv.firstChild) {
          this[i].appendChild(tempDiv.firstChild);
        }
      } else if (newChild instanceof Dom7) {
        for (var j = 0; j < newChild.length; j += 1) {
          this[i].appendChild(newChild[j]);
        }
      } else {
        this[i].appendChild(newChild);
      }
    }
  }

  return this;
}

function appendTo(parent) {
  $(parent).append(this);
  return this;
}

function prepend(newChild) {
  var document = (0, _ssrWindow.getDocument)();
  var i;
  var j;

  for (i = 0; i < this.length; i += 1) {
    if (typeof newChild === 'string') {
      var tempDiv = document.createElement('div');
      tempDiv.innerHTML = newChild;

      for (j = tempDiv.childNodes.length - 1; j >= 0; j -= 1) {
        this[i].insertBefore(tempDiv.childNodes[j], this[i].childNodes[0]);
      }
    } else if (newChild instanceof Dom7) {
      for (j = 0; j < newChild.length; j += 1) {
        this[i].insertBefore(newChild[j], this[i].childNodes[0]);
      }
    } else {
      this[i].insertBefore(newChild, this[i].childNodes[0]);
    }
  }

  return this;
}

function prependTo(parent) {
  $(parent).prepend(this);
  return this;
}

function insertBefore(selector) {
  var before = $(selector);

  for (var i = 0; i < this.length; i += 1) {
    if (before.length === 1) {
      before[0].parentNode.insertBefore(this[i], before[0]);
    } else if (before.length > 1) {
      for (var j = 0; j < before.length; j += 1) {
        before[j].parentNode.insertBefore(this[i].cloneNode(true), before[j]);
      }
    }
  }
}

function insertAfter(selector) {
  var after = $(selector);

  for (var i = 0; i < this.length; i += 1) {
    if (after.length === 1) {
      after[0].parentNode.insertBefore(this[i], after[0].nextSibling);
    } else if (after.length > 1) {
      for (var j = 0; j < after.length; j += 1) {
        after[j].parentNode.insertBefore(this[i].cloneNode(true), after[j].nextSibling);
      }
    }
  }
}

function next(selector) {
  if (this.length > 0) {
    if (selector) {
      if (this[0].nextElementSibling && $(this[0].nextElementSibling).is(selector)) {
        return $([this[0].nextElementSibling]);
      }

      return $([]);
    }

    if (this[0].nextElementSibling) return $([this[0].nextElementSibling]);
    return $([]);
  }

  return $([]);
}

function nextAll(selector) {
  var nextEls = [];
  var el = this[0];
  if (!el) return $([]);

  while (el.nextElementSibling) {
    var _next = el.nextElementSibling; // eslint-disable-line

    if (selector) {
      if ($(_next).is(selector)) nextEls.push(_next);
    } else nextEls.push(_next);

    el = _next;
  }

  return $(nextEls);
}

function prev(selector) {
  if (this.length > 0) {
    var el = this[0];

    if (selector) {
      if (el.previousElementSibling && $(el.previousElementSibling).is(selector)) {
        return $([el.previousElementSibling]);
      }

      return $([]);
    }

    if (el.previousElementSibling) return $([el.previousElementSibling]);
    return $([]);
  }

  return $([]);
}

function prevAll(selector) {
  var prevEls = [];
  var el = this[0];
  if (!el) return $([]);

  while (el.previousElementSibling) {
    var _prev = el.previousElementSibling; // eslint-disable-line

    if (selector) {
      if ($(_prev).is(selector)) prevEls.push(_prev);
    } else prevEls.push(_prev);

    el = _prev;
  }

  return $(prevEls);
}

function siblings(selector) {
  return this.nextAll(selector).add(this.prevAll(selector));
}

function parent(selector) {
  var parents = []; // eslint-disable-line

  for (var i = 0; i < this.length; i += 1) {
    if (this[i].parentNode !== null) {
      if (selector) {
        if ($(this[i].parentNode).is(selector)) parents.push(this[i].parentNode);
      } else {
        parents.push(this[i].parentNode);
      }
    }
  }

  return $(parents);
}

function parents(selector) {
  var parents = []; // eslint-disable-line

  for (var i = 0; i < this.length; i += 1) {
    var _parent = this[i].parentNode; // eslint-disable-line

    while (_parent) {
      if (selector) {
        if ($(_parent).is(selector)) parents.push(_parent);
      } else {
        parents.push(_parent);
      }

      _parent = _parent.parentNode;
    }
  }

  return $(parents);
}

function closest(selector) {
  var closest = this; // eslint-disable-line

  if (typeof selector === 'undefined') {
    return $([]);
  }

  if (!closest.is(selector)) {
    closest = closest.parents(selector).eq(0);
  }

  return closest;
}

function find(selector) {
  var foundElements = [];

  for (var i = 0; i < this.length; i += 1) {
    var found = this[i].querySelectorAll(selector);

    for (var j = 0; j < found.length; j += 1) {
      foundElements.push(found[j]);
    }
  }

  return $(foundElements);
}

function children(selector) {
  var children = []; // eslint-disable-line

  for (var i = 0; i < this.length; i += 1) {
    var childNodes = this[i].children;

    for (var j = 0; j < childNodes.length; j += 1) {
      if (!selector || $(childNodes[j]).is(selector)) {
        children.push(childNodes[j]);
      }
    }
  }

  return $(children);
}

function remove() {
  for (var i = 0; i < this.length; i += 1) {
    if (this[i].parentNode) this[i].parentNode.removeChild(this[i]);
  }

  return this;
}

function detach() {
  return this.remove();
}

function add() {
  var dom = this;
  var i;
  var j;

  for (var _len10 = arguments.length, els = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
    els[_key10] = arguments[_key10];
  }

  for (i = 0; i < els.length; i += 1) {
    var toAdd = $(els[i]);

    for (j = 0; j < toAdd.length; j += 1) {
      dom.push(toAdd[j]);
    }
  }

  return dom;
}

function empty() {
  for (var i = 0; i < this.length; i += 1) {
    var el = this[i];

    if (el.nodeType === 1) {
      for (var j = 0; j < el.childNodes.length; j += 1) {
        if (el.childNodes[j].parentNode) {
          el.childNodes[j].parentNode.removeChild(el.childNodes[j]);
        }
      }

      el.textContent = '';
    }
  }

  return this;
}

function scrollTo() {
  var window = (0, _ssrWindow.getWindow)();

  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  var left = args[0],
      top = args[1],
      duration = args[2],
      easing = args[3],
      callback = args[4];

  if (args.length === 4 && typeof easing === 'function') {
    callback = easing;
    left = args[0];
    top = args[1];
    duration = args[2];
    callback = args[3];
    easing = args[4];
  }

  if (typeof easing === 'undefined') easing = 'swing';
  return this.each(function animate() {
    var el = this;
    var currentTop;
    var currentLeft;
    var maxTop;
    var maxLeft;
    var newTop;
    var newLeft;
    var scrollTop; // eslint-disable-line

    var scrollLeft; // eslint-disable-line

    var animateTop = top > 0 || top === 0;
    var animateLeft = left > 0 || left === 0;

    if (typeof easing === 'undefined') {
      easing = 'swing';
    }

    if (animateTop) {
      currentTop = el.scrollTop;

      if (!duration) {
        el.scrollTop = top;
      }
    }

    if (animateLeft) {
      currentLeft = el.scrollLeft;

      if (!duration) {
        el.scrollLeft = left;
      }
    }

    if (!duration) return;

    if (animateTop) {
      maxTop = el.scrollHeight - el.offsetHeight;
      newTop = Math.max(Math.min(top, maxTop), 0);
    }

    if (animateLeft) {
      maxLeft = el.scrollWidth - el.offsetWidth;
      newLeft = Math.max(Math.min(left, maxLeft), 0);
    }

    var startTime = null;
    if (animateTop && newTop === currentTop) animateTop = false;
    if (animateLeft && newLeft === currentLeft) animateLeft = false;

    function render(time) {
      if (time === void 0) {
        time = new Date().getTime();
      }

      if (startTime === null) {
        startTime = time;
      }

      var progress = Math.max(Math.min((time - startTime) / duration, 1), 0);
      var easeProgress = easing === 'linear' ? progress : 0.5 - Math.cos(progress * Math.PI) / 2;
      var done;
      if (animateTop) scrollTop = currentTop + easeProgress * (newTop - currentTop);
      if (animateLeft) scrollLeft = currentLeft + easeProgress * (newLeft - currentLeft);

      if (animateTop && newTop > currentTop && scrollTop >= newTop) {
        el.scrollTop = newTop;
        done = true;
      }

      if (animateTop && newTop < currentTop && scrollTop <= newTop) {
        el.scrollTop = newTop;
        done = true;
      }

      if (animateLeft && newLeft > currentLeft && scrollLeft >= newLeft) {
        el.scrollLeft = newLeft;
        done = true;
      }

      if (animateLeft && newLeft < currentLeft && scrollLeft <= newLeft) {
        el.scrollLeft = newLeft;
        done = true;
      }

      if (done) {
        if (callback) callback();
        return;
      }

      if (animateTop) el.scrollTop = scrollTop;
      if (animateLeft) el.scrollLeft = scrollLeft;
      window.requestAnimationFrame(render);
    }

    window.requestAnimationFrame(render);
  });
} // scrollTop(top, duration, easing, callback) {


function scrollTop() {
  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }

  var top = args[0],
      duration = args[1],
      easing = args[2],
      callback = args[3];

  if (args.length === 3 && typeof easing === 'function') {
    top = args[0];
    duration = args[1];
    callback = args[2];
    easing = args[3];
  }

  var dom = this;

  if (typeof top === 'undefined') {
    if (dom.length > 0) return dom[0].scrollTop;
    return null;
  }

  return dom.scrollTo(undefined, top, duration, easing, callback);
}

function scrollLeft() {
  for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    args[_key3] = arguments[_key3];
  }

  var left = args[0],
      duration = args[1],
      easing = args[2],
      callback = args[3];

  if (args.length === 3 && typeof easing === 'function') {
    left = args[0];
    duration = args[1];
    callback = args[2];
    easing = args[3];
  }

  var dom = this;

  if (typeof left === 'undefined') {
    if (dom.length > 0) return dom[0].scrollLeft;
    return null;
  }

  return dom.scrollTo(left, undefined, duration, easing, callback);
}

function animate(initialProps, initialParams) {
  var window = (0, _ssrWindow.getWindow)();
  var els = this;
  var a = {
    props: Object.assign({}, initialProps),
    params: Object.assign({
      duration: 300,
      easing: 'swing' // or 'linear'

      /* Callbacks
      begin(elements)
      complete(elements)
      progress(elements, complete, remaining, start, tweenValue)
      */

    }, initialParams),
    elements: els,
    animating: false,
    que: [],
    easingProgress: function easingProgress(easing, progress) {
      if (easing === 'swing') {
        return 0.5 - Math.cos(progress * Math.PI) / 2;
      }

      if (typeof easing === 'function') {
        return easing(progress);
      }

      return progress;
    },
    stop: function stop() {
      if (a.frameId) {
        window.cancelAnimationFrame(a.frameId);
      }

      a.animating = false;
      a.elements.each(function (el) {
        var element = el;
        delete element.dom7AnimateInstance;
      });
      a.que = [];
    },
    done: function done(complete) {
      a.animating = false;
      a.elements.each(function (el) {
        var element = el;
        delete element.dom7AnimateInstance;
      });
      if (complete) complete(els);

      if (a.que.length > 0) {
        var que = a.que.shift();
        a.animate(que[0], que[1]);
      }
    },
    animate: function animate(props, params) {
      if (a.animating) {
        a.que.push([props, params]);
        return a;
      }

      var elements = []; // Define & Cache Initials & Units

      a.elements.each(function (el, index) {
        var initialFullValue;
        var initialValue;
        var unit;
        var finalValue;
        var finalFullValue;
        if (!el.dom7AnimateInstance) a.elements[index].dom7AnimateInstance = a;
        elements[index] = {
          container: el
        };
        Object.keys(props).forEach(function (prop) {
          initialFullValue = window.getComputedStyle(el, null).getPropertyValue(prop).replace(',', '.');
          initialValue = parseFloat(initialFullValue);
          unit = initialFullValue.replace(initialValue, '');
          finalValue = parseFloat(props[prop]);
          finalFullValue = props[prop] + unit;
          elements[index][prop] = {
            initialFullValue: initialFullValue,
            initialValue: initialValue,
            unit: unit,
            finalValue: finalValue,
            finalFullValue: finalFullValue,
            currentValue: initialValue
          };
        });
      });
      var startTime = null;
      var time;
      var elementsDone = 0;
      var propsDone = 0;
      var done;
      var began = false;
      a.animating = true;

      function render() {
        time = new Date().getTime();
        var progress;
        var easeProgress; // let el;

        if (!began) {
          began = true;
          if (params.begin) params.begin(els);
        }

        if (startTime === null) {
          startTime = time;
        }

        if (params.progress) {
          // eslint-disable-next-line
          params.progress(els, Math.max(Math.min((time - startTime) / params.duration, 1), 0), startTime + params.duration - time < 0 ? 0 : startTime + params.duration - time, startTime);
        }

        elements.forEach(function (element) {
          var el = element;
          if (done || el.done) return;
          Object.keys(props).forEach(function (prop) {
            if (done || el.done) return;
            progress = Math.max(Math.min((time - startTime) / params.duration, 1), 0);
            easeProgress = a.easingProgress(params.easing, progress);
            var _el$prop = el[prop],
                initialValue = _el$prop.initialValue,
                finalValue = _el$prop.finalValue,
                unit = _el$prop.unit;
            el[prop].currentValue = initialValue + easeProgress * (finalValue - initialValue);
            var currentValue = el[prop].currentValue;

            if (finalValue > initialValue && currentValue >= finalValue || finalValue < initialValue && currentValue <= finalValue) {
              el.container.style[prop] = finalValue + unit;
              propsDone += 1;

              if (propsDone === Object.keys(props).length) {
                el.done = true;
                elementsDone += 1;
              }

              if (elementsDone === elements.length) {
                done = true;
              }
            }

            if (done) {
              a.done(params.complete);
              return;
            }

            el.container.style[prop] = currentValue + unit;
          });
        });
        if (done) return; // Then call

        a.frameId = window.requestAnimationFrame(render);
      }

      a.frameId = window.requestAnimationFrame(render);
      return a;
    }
  };

  if (a.elements.length === 0) {
    return els;
  }

  var animateInstance;

  for (var i = 0; i < a.elements.length; i += 1) {
    if (a.elements[i].dom7AnimateInstance) {
      animateInstance = a.elements[i].dom7AnimateInstance;
    } else a.elements[i].dom7AnimateInstance = a;
  }

  if (!animateInstance) {
    animateInstance = a;
  }

  if (initialProps === 'stop') {
    animateInstance.stop();
  } else {
    animateInstance.animate(a.props, a.params);
  }

  return els;
}

function stop() {
  var els = this;

  for (var i = 0; i < els.length; i += 1) {
    if (els[i].dom7AnimateInstance) {
      els[i].dom7AnimateInstance.stop();
    }
  }
}

var noTrigger = 'resize scroll'.split(' ');

function shortcut(name) {
  function eventHandler() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (typeof args[0] === 'undefined') {
      for (var i = 0; i < this.length; i += 1) {
        if (noTrigger.indexOf(name) < 0) {
          if (name in this[i]) this[i][name]();else {
            $(this[i]).trigger(name);
          }
        }
      }

      return this;
    }

    return this.on.apply(this, [name].concat(args));
  }

  return eventHandler;
}

var click = shortcut('click');
var blur = shortcut('blur');
var focus = shortcut('focus');
var focusin = shortcut('focusin');
var focusout = shortcut('focusout');
var keyup = shortcut('keyup');
var keydown = shortcut('keydown');
var keypress = shortcut('keypress');
var submit = shortcut('submit');
var change = shortcut('change');
var mousedown = shortcut('mousedown');
var mousemove = shortcut('mousemove');
var mouseup = shortcut('mouseup');
var mouseenter = shortcut('mouseenter');
var mouseleave = shortcut('mouseleave');
var mouseout = shortcut('mouseout');
var mouseover = shortcut('mouseover');
var touchstart = shortcut('touchstart');
var touchend = shortcut('touchend');
var touchmove = shortcut('touchmove');
var resize = shortcut('resize');
var scroll = shortcut('scroll');

exports.default = $;
exports.$ = $;
exports.add = add;
exports.addClass = addClass;
exports.animate = animate;
exports.animationEnd = animationEnd;
exports.append = append;
exports.appendTo = appendTo;
exports.attr = attr;
exports.blur = blur;
exports.change = change;
exports.children = children;
exports.click = click;
exports.closest = closest;
exports.css = css;
exports.data = data;
exports.dataset = dataset;
exports.detach = detach;
exports.each = each;
exports.empty = empty;
exports.eq = eq;
exports.filter = filter;
exports.find = find;
exports.focus = focus;
exports.focusin = focusin;
exports.focusout = focusout;
exports.hasClass = hasClass;
exports.height = height;
exports.hide = hide;
exports.html = html;
exports.index = index;
exports.insertAfter = insertAfter;
exports.insertBefore = insertBefore;
exports.is = is;
exports.keydown = keydown;
exports.keypress = keypress;
exports.keyup = keyup;
exports.mousedown = mousedown;
exports.mouseenter = mouseenter;
exports.mouseleave = mouseleave;
exports.mousemove = mousemove;
exports.mouseout = mouseout;
exports.mouseover = mouseover;
exports.mouseup = mouseup;
exports.next = next;
exports.nextAll = nextAll;
exports.off = off;
exports.offset = offset;
exports.on = on;
exports.once = once;
exports.outerHeight = outerHeight;
exports.outerWidth = outerWidth;
exports.parent = parent;
exports.parents = parents;
exports.prepend = prepend;
exports.prependTo = prependTo;
exports.prev = prev;
exports.prevAll = prevAll;
exports.prop = prop;
exports.remove = remove;
exports.removeAttr = removeAttr;
exports.removeClass = removeClass;
exports.removeData = removeData;
exports.resize = resize;
exports.scroll = scroll;
exports.scrollLeft = scrollLeft;
exports.scrollTo = scrollTo;
exports.scrollTop = scrollTop;
exports.show = show;
exports.siblings = siblings;
exports.stop = stop;
exports.styles = styles;
exports.submit = submit;
exports.text = text;
exports.toggleClass = toggleClass;
exports.touchend = touchend;
exports.touchmove = touchmove;
exports.touchstart = touchstart;
exports.transform = transform;
exports.transition = transition;
exports.transitionEnd = transitionEnd;
exports.trigger = trigger;
exports.val = val;
exports.value = value;
exports.width = width;

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDevice = undefined;

var _ssrWindow = __webpack_require__(2);

var _getSupport = __webpack_require__(7);

var device;

function calcDevice(_temp) {
  var _ref = _temp === void 0 ? {} : _temp,
      userAgent = _ref.userAgent;

  var support = (0, _getSupport.getSupport)();
  var window = (0, _ssrWindow.getWindow)();
  var platform = window.navigator.platform;
  var ua = userAgent || window.navigator.userAgent;
  var device = {
    ios: false,
    android: false
  };
  var screenWidth = window.screen.width;
  var screenHeight = window.screen.height;
  var android = ua.match(/(Android);?[\s\/]+([\d.]+)?/); // eslint-disable-line

  var ipad = ua.match(/(iPad).*OS\s([\d_]+)/);
  var ipod = ua.match(/(iPod)(.*OS\s([\d_]+))?/);
  var iphone = !ipad && ua.match(/(iPhone\sOS|iOS)\s([\d_]+)/);
  var windows = platform === 'Win32';
  var macos = platform === 'MacIntel'; // iPadOs 13 fix

  var iPadScreens = ['1024x1366', '1366x1024', '834x1194', '1194x834', '834x1112', '1112x834', '768x1024', '1024x768', '820x1180', '1180x820', '810x1080', '1080x810'];

  if (!ipad && macos && support.touch && iPadScreens.indexOf(screenWidth + "x" + screenHeight) >= 0) {
    ipad = ua.match(/(Version)\/([\d.]+)/);
    if (!ipad) ipad = [0, 1, '13_0_0'];
    macos = false;
  } // Android


  if (android && !windows) {
    device.os = 'android';
    device.android = true;
  }

  if (ipad || iphone || ipod) {
    device.os = 'ios';
    device.ios = true;
  } // Export object


  return device;
}

function getDevice(overrides) {
  if (overrides === void 0) {
    overrides = {};
  }

  if (!device) {
    device = calcDevice(overrides);
  }

  return device;
}

exports.getDevice = getDevice;

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getBrowser = undefined;

var _ssrWindow = __webpack_require__(2);

var browser;

function calcBrowser() {
  var window = (0, _ssrWindow.getWindow)();

  function isSafari() {
    var ua = window.navigator.userAgent.toLowerCase();
    return ua.indexOf('safari') >= 0 && ua.indexOf('chrome') < 0 && ua.indexOf('android') < 0;
  }

  return {
    isEdge: !!window.navigator.userAgent.match(/Edge/g),
    isSafari: isSafari(),
    isWebView: /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(window.navigator.userAgent)
  };
}

function getBrowser() {
  if (!browser) {
    browser = calcBrowser();
  }

  return browser;
}

exports.getBrowser = getBrowser;

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ssrWindow = __webpack_require__(2);

var _utils = __webpack_require__(0);

var supportsResizeObserver = function supportsResizeObserver() {
  var window = (0, _ssrWindow.getWindow)();
  return typeof window.ResizeObserver !== 'undefined';
};

exports.default = {
  name: 'resize',
  create: function create() {
    var swiper = this;
    (0, _utils.extend)(swiper, {
      resize: {
        observer: null,
        createObserver: function createObserver() {
          if (!swiper || swiper.destroyed || !swiper.initialized) return;
          swiper.resize.observer = new ResizeObserver(function (entries) {
            var width = swiper.width,
                height = swiper.height;
            var newWidth = width;
            var newHeight = height;
            entries.forEach(function (_ref) {
              var contentBoxSize = _ref.contentBoxSize,
                  contentRect = _ref.contentRect,
                  target = _ref.target;
              if (target && target !== swiper.el) return;
              newWidth = contentRect ? contentRect.width : (contentBoxSize[0] || contentBoxSize).inlineSize;
              newHeight = contentRect ? contentRect.height : (contentBoxSize[0] || contentBoxSize).blockSize;
            });

            if (newWidth !== width || newHeight !== height) {
              swiper.resize.resizeHandler();
            }
          });
          swiper.resize.observer.observe(swiper.el);
        },
        removeObserver: function removeObserver() {
          if (swiper.resize.observer && swiper.resize.observer.unobserve && swiper.el) {
            swiper.resize.observer.unobserve(swiper.el);
            swiper.resize.observer = null;
          }
        },
        resizeHandler: function resizeHandler() {
          if (!swiper || swiper.destroyed || !swiper.initialized) return;
          swiper.emit('beforeResize');
          swiper.emit('resize');
        },
        orientationChangeHandler: function orientationChangeHandler() {
          if (!swiper || swiper.destroyed || !swiper.initialized) return;
          swiper.emit('orientationchange');
        }
      }
    });
  },
  on: {
    init: function init(swiper) {
      var window = (0, _ssrWindow.getWindow)();

      if (swiper.params.resizeObserver && supportsResizeObserver()) {
        swiper.resize.createObserver();
        return;
      } // Emit resize


      window.addEventListener('resize', swiper.resize.resizeHandler); // Emit orientationchange

      window.addEventListener('orientationchange', swiper.resize.orientationChangeHandler);
    },
    destroy: function destroy(swiper) {
      var window = (0, _ssrWindow.getWindow)();
      swiper.resize.removeObserver();
      window.removeEventListener('resize', swiper.resize.resizeHandler);
      window.removeEventListener('orientationchange', swiper.resize.orientationChangeHandler);
    }
  }
};

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ssrWindow = __webpack_require__(2);

var _utils = __webpack_require__(0);

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }return target;
  };return _extends.apply(this, arguments);
}

var Observer = {
  attach: function attach(target, options) {
    if (options === void 0) {
      options = {};
    }

    var window = (0, _ssrWindow.getWindow)();
    var swiper = this;
    var ObserverFunc = window.MutationObserver || window.WebkitMutationObserver;
    var observer = new ObserverFunc(function (mutations) {
      // The observerUpdate event should only be triggered
      // once despite the number of mutations.  Additional
      // triggers are redundant and are very costly
      if (mutations.length === 1) {
        swiper.emit('observerUpdate', mutations[0]);
        return;
      }

      var observerUpdate = function observerUpdate() {
        swiper.emit('observerUpdate', mutations[0]);
      };

      if (window.requestAnimationFrame) {
        window.requestAnimationFrame(observerUpdate);
      } else {
        window.setTimeout(observerUpdate, 0);
      }
    });
    observer.observe(target, {
      attributes: typeof options.attributes === 'undefined' ? true : options.attributes,
      childList: typeof options.childList === 'undefined' ? true : options.childList,
      characterData: typeof options.characterData === 'undefined' ? true : options.characterData
    });
    swiper.observer.observers.push(observer);
  },
  init: function init() {
    var swiper = this;
    if (!swiper.support.observer || !swiper.params.observer) return;

    if (swiper.params.observeParents) {
      var containerParents = swiper.$el.parents();

      for (var i = 0; i < containerParents.length; i += 1) {
        swiper.observer.attach(containerParents[i]);
      }
    } // Observe container


    swiper.observer.attach(swiper.$el[0], {
      childList: swiper.params.observeSlideChildren
    }); // Observe wrapper

    swiper.observer.attach(swiper.$wrapperEl[0], {
      attributes: false
    });
  },
  destroy: function destroy() {
    var swiper = this;
    swiper.observer.observers.forEach(function (observer) {
      observer.disconnect();
    });
    swiper.observer.observers = [];
  }
};
exports.default = {
  name: 'observer',
  params: {
    observer: false,
    observeParents: false,
    observeSlideChildren: false
  },
  create: function create() {
    var swiper = this;
    (0, _utils.bindModuleMethods)(swiper, {
      observer: _extends({}, Observer, {
        observers: []
      })
    });
  },
  on: {
    init: function init(swiper) {
      swiper.observer.init();
    },
    destroy: function destroy(swiper) {
      swiper.observer.destroy();
    }
  }
};

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = __webpack_require__(0);

exports.default = {
  useParams: function useParams(instanceParams) {
    var instance = this;
    if (!instance.modules) return;
    Object.keys(instance.modules).forEach(function (moduleName) {
      var module = instance.modules[moduleName]; // Extend params

      if (module.params) {
        (0, _utils.extend)(instanceParams, module.params);
      }
    });
  },
  useModules: function useModules(modulesParams) {
    if (modulesParams === void 0) {
      modulesParams = {};
    }

    var instance = this;
    if (!instance.modules) return;
    Object.keys(instance.modules).forEach(function (moduleName) {
      var module = instance.modules[moduleName];
      var moduleParams = modulesParams[moduleName] || {}; // Add event listeners

      if (module.on && instance.on) {
        Object.keys(module.on).forEach(function (moduleEventName) {
          instance.on(moduleEventName, module.on[moduleEventName]);
        });
      } // Module create callback


      if (module.create) {
        module.create.bind(instance)(moduleParams);
      }
    });
  }
};

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
/* eslint-disable no-underscore-dangle */
exports.default = {
  on: function on(events, handler, priority) {
    var self = this;
    if (typeof handler !== 'function') return self;
    var method = priority ? 'unshift' : 'push';
    events.split(' ').forEach(function (event) {
      if (!self.eventsListeners[event]) self.eventsListeners[event] = [];
      self.eventsListeners[event][method](handler);
    });
    return self;
  },
  once: function once(events, handler, priority) {
    var self = this;
    if (typeof handler !== 'function') return self;

    function onceHandler() {
      self.off(events, onceHandler);

      if (onceHandler.__emitterProxy) {
        delete onceHandler.__emitterProxy;
      }

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      handler.apply(self, args);
    }

    onceHandler.__emitterProxy = handler;
    return self.on(events, onceHandler, priority);
  },
  onAny: function onAny(handler, priority) {
    var self = this;
    if (typeof handler !== 'function') return self;
    var method = priority ? 'unshift' : 'push';

    if (self.eventsAnyListeners.indexOf(handler) < 0) {
      self.eventsAnyListeners[method](handler);
    }

    return self;
  },
  offAny: function offAny(handler) {
    var self = this;
    if (!self.eventsAnyListeners) return self;
    var index = self.eventsAnyListeners.indexOf(handler);

    if (index >= 0) {
      self.eventsAnyListeners.splice(index, 1);
    }

    return self;
  },
  off: function off(events, handler) {
    var self = this;
    if (!self.eventsListeners) return self;
    events.split(' ').forEach(function (event) {
      if (typeof handler === 'undefined') {
        self.eventsListeners[event] = [];
      } else if (self.eventsListeners[event]) {
        self.eventsListeners[event].forEach(function (eventHandler, index) {
          if (eventHandler === handler || eventHandler.__emitterProxy && eventHandler.__emitterProxy === handler) {
            self.eventsListeners[event].splice(index, 1);
          }
        });
      }
    });
    return self;
  },
  emit: function emit() {
    var self = this;
    if (!self.eventsListeners) return self;
    var events;
    var data;
    var context;

    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    if (typeof args[0] === 'string' || Array.isArray(args[0])) {
      events = args[0];
      data = args.slice(1, args.length);
      context = self;
    } else {
      events = args[0].events;
      data = args[0].data;
      context = args[0].context || self;
    }

    data.unshift(context);
    var eventsArray = Array.isArray(events) ? events : events.split(' ');
    eventsArray.forEach(function (event) {
      if (self.eventsAnyListeners && self.eventsAnyListeners.length) {
        self.eventsAnyListeners.forEach(function (eventHandler) {
          eventHandler.apply(context, [event].concat(data));
        });
      }

      if (self.eventsListeners && self.eventsListeners[event]) {
        self.eventsListeners[event].forEach(function (eventHandler) {
          eventHandler.apply(context, data);
        });
      }
    });
    return self;
  }
};

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _updateSize = __webpack_require__(55);

var _updateSize2 = _interopRequireDefault(_updateSize);

var _updateSlides = __webpack_require__(56);

var _updateSlides2 = _interopRequireDefault(_updateSlides);

var _updateAutoHeight = __webpack_require__(57);

var _updateAutoHeight2 = _interopRequireDefault(_updateAutoHeight);

var _updateSlidesOffset = __webpack_require__(58);

var _updateSlidesOffset2 = _interopRequireDefault(_updateSlidesOffset);

var _updateSlidesProgress = __webpack_require__(59);

var _updateSlidesProgress2 = _interopRequireDefault(_updateSlidesProgress);

var _updateProgress = __webpack_require__(60);

var _updateProgress2 = _interopRequireDefault(_updateProgress);

var _updateSlidesClasses = __webpack_require__(61);

var _updateSlidesClasses2 = _interopRequireDefault(_updateSlidesClasses);

var _updateActiveIndex = __webpack_require__(62);

var _updateActiveIndex2 = _interopRequireDefault(_updateActiveIndex);

var _updateClickedSlide = __webpack_require__(63);

var _updateClickedSlide2 = _interopRequireDefault(_updateClickedSlide);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  updateSize: _updateSize2.default,
  updateSlides: _updateSlides2.default,
  updateAutoHeight: _updateAutoHeight2.default,
  updateSlidesOffset: _updateSlidesOffset2.default,
  updateSlidesProgress: _updateSlidesProgress2.default,
  updateProgress: _updateProgress2.default,
  updateSlidesClasses: _updateSlidesClasses2.default,
  updateActiveIndex: _updateActiveIndex2.default,
  updateClickedSlide: _updateClickedSlide2.default
};

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = updateSize;

var _utils = __webpack_require__(0);

function updateSize() {
  var swiper = this;
  var width;
  var height;
  var $el = swiper.$el;

  if (typeof swiper.params.width !== 'undefined' && swiper.params.width !== null) {
    width = swiper.params.width;
  } else {
    width = $el[0].clientWidth;
  }

  if (typeof swiper.params.height !== 'undefined' && swiper.params.height !== null) {
    height = swiper.params.height;
  } else {
    height = $el[0].clientHeight;
  }

  if (width === 0 && swiper.isHorizontal() || height === 0 && swiper.isVertical()) {
    return;
  } // Subtract paddings


  width = width - parseInt($el.css('padding-left') || 0, 10) - parseInt($el.css('padding-right') || 0, 10);
  height = height - parseInt($el.css('padding-top') || 0, 10) - parseInt($el.css('padding-bottom') || 0, 10);
  if (Number.isNaN(width)) width = 0;
  if (Number.isNaN(height)) height = 0;
  (0, _utils.extend)(swiper, {
    width: width,
    height: height,
    size: swiper.isHorizontal() ? width : height
  });
}

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = updateSlides;

var _utils = __webpack_require__(0);

function updateSlides() {
  var swiper = this;

  function getDirectionLabel(property) {
    if (swiper.isHorizontal()) {
      return property;
    } // prettier-ignore


    return {
      'width': 'height',
      'margin-top': 'margin-left',
      'margin-bottom ': 'margin-right',
      'margin-left': 'margin-top',
      'margin-right': 'margin-bottom',
      'padding-left': 'padding-top',
      'padding-right': 'padding-bottom',
      'marginRight': 'marginBottom'
    }[property];
  }

  function getDirectionPropertyValue(node, label) {
    return parseFloat(node.getPropertyValue(getDirectionLabel(label)) || 0);
  }

  var params = swiper.params;
  var $wrapperEl = swiper.$wrapperEl,
      swiperSize = swiper.size,
      rtl = swiper.rtlTranslate,
      wrongRTL = swiper.wrongRTL;
  var isVirtual = swiper.virtual && params.virtual.enabled;
  var previousSlidesLength = isVirtual ? swiper.virtual.slides.length : swiper.slides.length;
  var slides = $wrapperEl.children("." + swiper.params.slideClass);
  var slidesLength = isVirtual ? swiper.virtual.slides.length : slides.length;
  var snapGrid = [];
  var slidesGrid = [];
  var slidesSizesGrid = [];
  var offsetBefore = params.slidesOffsetBefore;

  if (typeof offsetBefore === 'function') {
    offsetBefore = params.slidesOffsetBefore.call(swiper);
  }

  var offsetAfter = params.slidesOffsetAfter;

  if (typeof offsetAfter === 'function') {
    offsetAfter = params.slidesOffsetAfter.call(swiper);
  }

  var previousSnapGridLength = swiper.snapGrid.length;
  var previousSlidesGridLength = swiper.slidesGrid.length;
  var spaceBetween = params.spaceBetween;
  var slidePosition = -offsetBefore;
  var prevSlideSize = 0;
  var index = 0;

  if (typeof swiperSize === 'undefined') {
    return;
  }

  if (typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0) {
    spaceBetween = parseFloat(spaceBetween.replace('%', '')) / 100 * swiperSize;
  }

  swiper.virtualSize = -spaceBetween; // reset margins

  if (rtl) slides.css({
    marginLeft: '',
    marginTop: ''
  });else slides.css({
    marginRight: '',
    marginBottom: ''
  });
  var slidesNumberEvenToRows;

  if (params.slidesPerColumn > 1) {
    if (Math.floor(slidesLength / params.slidesPerColumn) === slidesLength / swiper.params.slidesPerColumn) {
      slidesNumberEvenToRows = slidesLength;
    } else {
      slidesNumberEvenToRows = Math.ceil(slidesLength / params.slidesPerColumn) * params.slidesPerColumn;
    }

    if (params.slidesPerView !== 'auto' && params.slidesPerColumnFill === 'row') {
      slidesNumberEvenToRows = Math.max(slidesNumberEvenToRows, params.slidesPerView * params.slidesPerColumn);
    }
  } // Calc slides


  var slideSize;
  var slidesPerColumn = params.slidesPerColumn;
  var slidesPerRow = slidesNumberEvenToRows / slidesPerColumn;
  var numFullColumns = Math.floor(slidesLength / params.slidesPerColumn);

  for (var i = 0; i < slidesLength; i += 1) {
    slideSize = 0;
    var slide = slides.eq(i);

    if (params.slidesPerColumn > 1) {
      // Set slides order
      var newSlideOrderIndex = void 0;
      var column = void 0;
      var row = void 0;

      if (params.slidesPerColumnFill === 'row' && params.slidesPerGroup > 1) {
        var groupIndex = Math.floor(i / (params.slidesPerGroup * params.slidesPerColumn));
        var slideIndexInGroup = i - params.slidesPerColumn * params.slidesPerGroup * groupIndex;
        var columnsInGroup = groupIndex === 0 ? params.slidesPerGroup : Math.min(Math.ceil((slidesLength - groupIndex * slidesPerColumn * params.slidesPerGroup) / slidesPerColumn), params.slidesPerGroup);
        row = Math.floor(slideIndexInGroup / columnsInGroup);
        column = slideIndexInGroup - row * columnsInGroup + groupIndex * params.slidesPerGroup;
        newSlideOrderIndex = column + row * slidesNumberEvenToRows / slidesPerColumn;
        slide.css({
          '-webkit-box-ordinal-group': newSlideOrderIndex,
          '-moz-box-ordinal-group': newSlideOrderIndex,
          '-ms-flex-order': newSlideOrderIndex,
          '-webkit-order': newSlideOrderIndex,
          order: newSlideOrderIndex
        });
      } else if (params.slidesPerColumnFill === 'column') {
        column = Math.floor(i / slidesPerColumn);
        row = i - column * slidesPerColumn;

        if (column > numFullColumns || column === numFullColumns && row === slidesPerColumn - 1) {
          row += 1;

          if (row >= slidesPerColumn) {
            row = 0;
            column += 1;
          }
        }
      } else {
        row = Math.floor(i / slidesPerRow);
        column = i - row * slidesPerRow;
      }

      slide.css(getDirectionLabel('margin-top'), row !== 0 && params.spaceBetween && params.spaceBetween + "px");
    }

    if (slide.css('display') === 'none') continue; // eslint-disable-line

    if (params.slidesPerView === 'auto') {
      var slideStyles = getComputedStyle(slide[0]);
      var currentTransform = slide[0].style.transform;
      var currentWebKitTransform = slide[0].style.webkitTransform;

      if (currentTransform) {
        slide[0].style.transform = 'none';
      }

      if (currentWebKitTransform) {
        slide[0].style.webkitTransform = 'none';
      }

      if (params.roundLengths) {
        slideSize = swiper.isHorizontal() ? slide.outerWidth(true) : slide.outerHeight(true);
      } else {
        // eslint-disable-next-line
        var width = getDirectionPropertyValue(slideStyles, 'width');
        var paddingLeft = getDirectionPropertyValue(slideStyles, 'padding-left');
        var paddingRight = getDirectionPropertyValue(slideStyles, 'padding-right');
        var marginLeft = getDirectionPropertyValue(slideStyles, 'margin-left');
        var marginRight = getDirectionPropertyValue(slideStyles, 'margin-right');
        var boxSizing = slideStyles.getPropertyValue('box-sizing');

        if (boxSizing && boxSizing === 'border-box') {
          slideSize = width + marginLeft + marginRight;
        } else {
          var _slide$ = slide[0],
              clientWidth = _slide$.clientWidth,
              offsetWidth = _slide$.offsetWidth;
          slideSize = width + paddingLeft + paddingRight + marginLeft + marginRight + (offsetWidth - clientWidth);
        }
      }

      if (currentTransform) {
        slide[0].style.transform = currentTransform;
      }

      if (currentWebKitTransform) {
        slide[0].style.webkitTransform = currentWebKitTransform;
      }

      if (params.roundLengths) slideSize = Math.floor(slideSize);
    } else {
      slideSize = (swiperSize - (params.slidesPerView - 1) * spaceBetween) / params.slidesPerView;
      if (params.roundLengths) slideSize = Math.floor(slideSize);

      if (slides[i]) {
        slides[i].style[getDirectionLabel('width')] = slideSize + "px";
      }
    }

    if (slides[i]) {
      slides[i].swiperSlideSize = slideSize;
    }

    slidesSizesGrid.push(slideSize);

    if (params.centeredSlides) {
      slidePosition = slidePosition + slideSize / 2 + prevSlideSize / 2 + spaceBetween;
      if (prevSlideSize === 0 && i !== 0) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;
      if (i === 0) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;
      if (Math.abs(slidePosition) < 1 / 1000) slidePosition = 0;
      if (params.roundLengths) slidePosition = Math.floor(slidePosition);
      if (index % params.slidesPerGroup === 0) snapGrid.push(slidePosition);
      slidesGrid.push(slidePosition);
    } else {
      if (params.roundLengths) slidePosition = Math.floor(slidePosition);
      if ((index - Math.min(swiper.params.slidesPerGroupSkip, index)) % swiper.params.slidesPerGroup === 0) snapGrid.push(slidePosition);
      slidesGrid.push(slidePosition);
      slidePosition = slidePosition + slideSize + spaceBetween;
    }

    swiper.virtualSize += slideSize + spaceBetween;
    prevSlideSize = slideSize;
    index += 1;
  }

  swiper.virtualSize = Math.max(swiper.virtualSize, swiperSize) + offsetAfter;
  var newSlidesGrid;

  if (rtl && wrongRTL && (params.effect === 'slide' || params.effect === 'coverflow')) {
    $wrapperEl.css({
      width: swiper.virtualSize + params.spaceBetween + "px"
    });
  }

  if (params.setWrapperSize) {
    var _$wrapperEl$css;

    $wrapperEl.css((_$wrapperEl$css = {}, _$wrapperEl$css[getDirectionLabel('width')] = swiper.virtualSize + params.spaceBetween + "px", _$wrapperEl$css));
  }

  if (params.slidesPerColumn > 1) {
    var _$wrapperEl$css2;

    swiper.virtualSize = (slideSize + params.spaceBetween) * slidesNumberEvenToRows;
    swiper.virtualSize = Math.ceil(swiper.virtualSize / params.slidesPerColumn) - params.spaceBetween;
    $wrapperEl.css((_$wrapperEl$css2 = {}, _$wrapperEl$css2[getDirectionLabel('width')] = swiper.virtualSize + params.spaceBetween + "px", _$wrapperEl$css2));

    if (params.centeredSlides) {
      newSlidesGrid = [];

      for (var _i = 0; _i < snapGrid.length; _i += 1) {
        var slidesGridItem = snapGrid[_i];
        if (params.roundLengths) slidesGridItem = Math.floor(slidesGridItem);
        if (snapGrid[_i] < swiper.virtualSize + snapGrid[0]) newSlidesGrid.push(slidesGridItem);
      }

      snapGrid = newSlidesGrid;
    }
  } // Remove last grid elements depending on width


  if (!params.centeredSlides) {
    newSlidesGrid = [];

    for (var _i2 = 0; _i2 < snapGrid.length; _i2 += 1) {
      var _slidesGridItem = snapGrid[_i2];
      if (params.roundLengths) _slidesGridItem = Math.floor(_slidesGridItem);

      if (snapGrid[_i2] <= swiper.virtualSize - swiperSize) {
        newSlidesGrid.push(_slidesGridItem);
      }
    }

    snapGrid = newSlidesGrid;

    if (Math.floor(swiper.virtualSize - swiperSize) - Math.floor(snapGrid[snapGrid.length - 1]) > 1) {
      snapGrid.push(swiper.virtualSize - swiperSize);
    }
  }

  if (snapGrid.length === 0) snapGrid = [0];

  if (params.spaceBetween !== 0) {
    var _slides$filter$css;

    var key = swiper.isHorizontal() && rtl ? 'marginLeft' : getDirectionLabel('marginRight');
    slides.filter(function (_, slideIndex) {
      if (!params.cssMode) return true;

      if (slideIndex === slides.length - 1) {
        return false;
      }

      return true;
    }).css((_slides$filter$css = {}, _slides$filter$css[key] = spaceBetween + "px", _slides$filter$css));
  }

  if (params.centeredSlides && params.centeredSlidesBounds) {
    var allSlidesSize = 0;
    slidesSizesGrid.forEach(function (slideSizeValue) {
      allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);
    });
    allSlidesSize -= params.spaceBetween;
    var maxSnap = allSlidesSize - swiperSize;
    snapGrid = snapGrid.map(function (snap) {
      if (snap < 0) return -offsetBefore;
      if (snap > maxSnap) return maxSnap + offsetAfter;
      return snap;
    });
  }

  if (params.centerInsufficientSlides) {
    var _allSlidesSize = 0;
    slidesSizesGrid.forEach(function (slideSizeValue) {
      _allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);
    });
    _allSlidesSize -= params.spaceBetween;

    if (_allSlidesSize < swiperSize) {
      var allSlidesOffset = (swiperSize - _allSlidesSize) / 2;
      snapGrid.forEach(function (snap, snapIndex) {
        snapGrid[snapIndex] = snap - allSlidesOffset;
      });
      slidesGrid.forEach(function (snap, snapIndex) {
        slidesGrid[snapIndex] = snap + allSlidesOffset;
      });
    }
  }

  (0, _utils.extend)(swiper, {
    slides: slides,
    snapGrid: snapGrid,
    slidesGrid: slidesGrid,
    slidesSizesGrid: slidesSizesGrid
  });

  if (slidesLength !== previousSlidesLength) {
    swiper.emit('slidesLengthChange');
  }

  if (snapGrid.length !== previousSnapGridLength) {
    if (swiper.params.watchOverflow) swiper.checkOverflow();
    swiper.emit('snapGridLengthChange');
  }

  if (slidesGrid.length !== previousSlidesGridLength) {
    swiper.emit('slidesGridLengthChange');
  }

  if (params.watchSlidesProgress || params.watchSlidesVisibility) {
    swiper.updateSlidesOffset();
  }
}

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = updateAutoHeight;
function updateAutoHeight(speed) {
  var swiper = this;
  var activeSlides = [];
  var isVirtual = swiper.virtual && swiper.params.virtual.enabled;
  var newHeight = 0;
  var i;

  if (typeof speed === 'number') {
    swiper.setTransition(speed);
  } else if (speed === true) {
    swiper.setTransition(swiper.params.speed);
  }

  var getSlideByIndex = function getSlideByIndex(index) {
    if (isVirtual) {
      return swiper.slides.filter(function (el) {
        return parseInt(el.getAttribute('data-swiper-slide-index'), 10) === index;
      })[0];
    }

    return swiper.slides.eq(index)[0];
  }; // Find slides currently in view


  if (swiper.params.slidesPerView !== 'auto' && swiper.params.slidesPerView > 1) {
    if (swiper.params.centeredSlides) {
      swiper.visibleSlides.each(function (slide) {
        activeSlides.push(slide);
      });
    } else {
      for (i = 0; i < Math.ceil(swiper.params.slidesPerView); i += 1) {
        var index = swiper.activeIndex + i;
        if (index > swiper.slides.length && !isVirtual) break;
        activeSlides.push(getSlideByIndex(index));
      }
    }
  } else {
    activeSlides.push(getSlideByIndex(swiper.activeIndex));
  } // Find new height from highest slide in view


  for (i = 0; i < activeSlides.length; i += 1) {
    if (typeof activeSlides[i] !== 'undefined') {
      var height = activeSlides[i].offsetHeight;
      newHeight = height > newHeight ? height : newHeight;
    }
  } // Update Height


  if (newHeight) swiper.$wrapperEl.css('height', newHeight + "px");
}

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = updateSlidesOffset;
function updateSlidesOffset() {
  var swiper = this;
  var slides = swiper.slides;

  for (var i = 0; i < slides.length; i += 1) {
    slides[i].swiperSlideOffset = swiper.isHorizontal() ? slides[i].offsetLeft : slides[i].offsetTop;
  }
}

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = updateSlidesProgress;

var _dom = __webpack_require__(1);

var _dom2 = _interopRequireDefault(_dom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function updateSlidesProgress(translate) {
  if (translate === void 0) {
    translate = this && this.translate || 0;
  }

  var swiper = this;
  var params = swiper.params;
  var slides = swiper.slides,
      rtl = swiper.rtlTranslate;
  if (slides.length === 0) return;
  if (typeof slides[0].swiperSlideOffset === 'undefined') swiper.updateSlidesOffset();
  var offsetCenter = -translate;
  if (rtl) offsetCenter = translate; // Visible Slides

  slides.removeClass(params.slideVisibleClass);
  swiper.visibleSlidesIndexes = [];
  swiper.visibleSlides = [];

  for (var i = 0; i < slides.length; i += 1) {
    var slide = slides[i];
    var slideProgress = (offsetCenter + (params.centeredSlides ? swiper.minTranslate() : 0) - slide.swiperSlideOffset) / (slide.swiperSlideSize + params.spaceBetween);

    if (params.watchSlidesVisibility || params.centeredSlides && params.autoHeight) {
      var slideBefore = -(offsetCenter - slide.swiperSlideOffset);
      var slideAfter = slideBefore + swiper.slidesSizesGrid[i];
      var isVisible = slideBefore >= 0 && slideBefore < swiper.size - 1 || slideAfter > 1 && slideAfter <= swiper.size || slideBefore <= 0 && slideAfter >= swiper.size;

      if (isVisible) {
        swiper.visibleSlides.push(slide);
        swiper.visibleSlidesIndexes.push(i);
        slides.eq(i).addClass(params.slideVisibleClass);
      }
    }

    slide.progress = rtl ? -slideProgress : slideProgress;
  }

  swiper.visibleSlides = (0, _dom2.default)(swiper.visibleSlides);
}

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = updateProgress;

var _utils = __webpack_require__(0);

function updateProgress(translate) {
  var swiper = this;

  if (typeof translate === 'undefined') {
    var multiplier = swiper.rtlTranslate ? -1 : 1; // eslint-disable-next-line

    translate = swiper && swiper.translate && swiper.translate * multiplier || 0;
  }

  var params = swiper.params;
  var translatesDiff = swiper.maxTranslate() - swiper.minTranslate();
  var progress = swiper.progress,
      isBeginning = swiper.isBeginning,
      isEnd = swiper.isEnd;
  var wasBeginning = isBeginning;
  var wasEnd = isEnd;

  if (translatesDiff === 0) {
    progress = 0;
    isBeginning = true;
    isEnd = true;
  } else {
    progress = (translate - swiper.minTranslate()) / translatesDiff;
    isBeginning = progress <= 0;
    isEnd = progress >= 1;
  }

  (0, _utils.extend)(swiper, {
    progress: progress,
    isBeginning: isBeginning,
    isEnd: isEnd
  });
  if (params.watchSlidesProgress || params.watchSlidesVisibility || params.centeredSlides && params.autoHeight) swiper.updateSlidesProgress(translate);

  if (isBeginning && !wasBeginning) {
    swiper.emit('reachBeginning toEdge');
  }

  if (isEnd && !wasEnd) {
    swiper.emit('reachEnd toEdge');
  }

  if (wasBeginning && !isBeginning || wasEnd && !isEnd) {
    swiper.emit('fromEdge');
  }

  swiper.emit('progress', progress);
}

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = updateSlidesClasses;
function updateSlidesClasses() {
  var swiper = this;
  var slides = swiper.slides,
      params = swiper.params,
      $wrapperEl = swiper.$wrapperEl,
      activeIndex = swiper.activeIndex,
      realIndex = swiper.realIndex;
  var isVirtual = swiper.virtual && params.virtual.enabled;
  slides.removeClass(params.slideActiveClass + " " + params.slideNextClass + " " + params.slidePrevClass + " " + params.slideDuplicateActiveClass + " " + params.slideDuplicateNextClass + " " + params.slideDuplicatePrevClass);
  var activeSlide;

  if (isVirtual) {
    activeSlide = swiper.$wrapperEl.find("." + params.slideClass + "[data-swiper-slide-index=\"" + activeIndex + "\"]");
  } else {
    activeSlide = slides.eq(activeIndex);
  } // Active classes


  activeSlide.addClass(params.slideActiveClass);

  if (params.loop) {
    // Duplicate to all looped slides
    if (activeSlide.hasClass(params.slideDuplicateClass)) {
      $wrapperEl.children("." + params.slideClass + ":not(." + params.slideDuplicateClass + ")[data-swiper-slide-index=\"" + realIndex + "\"]").addClass(params.slideDuplicateActiveClass);
    } else {
      $wrapperEl.children("." + params.slideClass + "." + params.slideDuplicateClass + "[data-swiper-slide-index=\"" + realIndex + "\"]").addClass(params.slideDuplicateActiveClass);
    }
  } // Next Slide


  var nextSlide = activeSlide.nextAll("." + params.slideClass).eq(0).addClass(params.slideNextClass);

  if (params.loop && nextSlide.length === 0) {
    nextSlide = slides.eq(0);
    nextSlide.addClass(params.slideNextClass);
  } // Prev Slide


  var prevSlide = activeSlide.prevAll("." + params.slideClass).eq(0).addClass(params.slidePrevClass);

  if (params.loop && prevSlide.length === 0) {
    prevSlide = slides.eq(-1);
    prevSlide.addClass(params.slidePrevClass);
  }

  if (params.loop) {
    // Duplicate to all looped slides
    if (nextSlide.hasClass(params.slideDuplicateClass)) {
      $wrapperEl.children("." + params.slideClass + ":not(." + params.slideDuplicateClass + ")[data-swiper-slide-index=\"" + nextSlide.attr('data-swiper-slide-index') + "\"]").addClass(params.slideDuplicateNextClass);
    } else {
      $wrapperEl.children("." + params.slideClass + "." + params.slideDuplicateClass + "[data-swiper-slide-index=\"" + nextSlide.attr('data-swiper-slide-index') + "\"]").addClass(params.slideDuplicateNextClass);
    }

    if (prevSlide.hasClass(params.slideDuplicateClass)) {
      $wrapperEl.children("." + params.slideClass + ":not(." + params.slideDuplicateClass + ")[data-swiper-slide-index=\"" + prevSlide.attr('data-swiper-slide-index') + "\"]").addClass(params.slideDuplicatePrevClass);
    } else {
      $wrapperEl.children("." + params.slideClass + "." + params.slideDuplicateClass + "[data-swiper-slide-index=\"" + prevSlide.attr('data-swiper-slide-index') + "\"]").addClass(params.slideDuplicatePrevClass);
    }
  }

  swiper.emitSlidesClasses();
}

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = updateActiveIndex;

var _utils = __webpack_require__(0);

function updateActiveIndex(newActiveIndex) {
  var swiper = this;
  var translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;
  var slidesGrid = swiper.slidesGrid,
      snapGrid = swiper.snapGrid,
      params = swiper.params,
      previousIndex = swiper.activeIndex,
      previousRealIndex = swiper.realIndex,
      previousSnapIndex = swiper.snapIndex;
  var activeIndex = newActiveIndex;
  var snapIndex;

  if (typeof activeIndex === 'undefined') {
    for (var i = 0; i < slidesGrid.length; i += 1) {
      if (typeof slidesGrid[i + 1] !== 'undefined') {
        if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1] - (slidesGrid[i + 1] - slidesGrid[i]) / 2) {
          activeIndex = i;
        } else if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1]) {
          activeIndex = i + 1;
        }
      } else if (translate >= slidesGrid[i]) {
        activeIndex = i;
      }
    } // Normalize slideIndex


    if (params.normalizeSlideIndex) {
      if (activeIndex < 0 || typeof activeIndex === 'undefined') activeIndex = 0;
    }
  }

  if (snapGrid.indexOf(translate) >= 0) {
    snapIndex = snapGrid.indexOf(translate);
  } else {
    var skip = Math.min(params.slidesPerGroupSkip, activeIndex);
    snapIndex = skip + Math.floor((activeIndex - skip) / params.slidesPerGroup);
  }

  if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;

  if (activeIndex === previousIndex) {
    if (snapIndex !== previousSnapIndex) {
      swiper.snapIndex = snapIndex;
      swiper.emit('snapIndexChange');
    }

    return;
  } // Get real index


  var realIndex = parseInt(swiper.slides.eq(activeIndex).attr('data-swiper-slide-index') || activeIndex, 10);
  (0, _utils.extend)(swiper, {
    snapIndex: snapIndex,
    realIndex: realIndex,
    previousIndex: previousIndex,
    activeIndex: activeIndex
  });
  swiper.emit('activeIndexChange');
  swiper.emit('snapIndexChange');

  if (previousRealIndex !== realIndex) {
    swiper.emit('realIndexChange');
  }

  if (swiper.initialized || swiper.params.runCallbacksOnInit) {
    swiper.emit('slideChange');
  }
}

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = updateClickedSlide;

var _dom = __webpack_require__(1);

var _dom2 = _interopRequireDefault(_dom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function updateClickedSlide(e) {
  var swiper = this;
  var params = swiper.params;
  var slide = (0, _dom2.default)(e.target).closest("." + params.slideClass)[0];
  var slideFound = false;
  var slideIndex;

  if (slide) {
    for (var i = 0; i < swiper.slides.length; i += 1) {
      if (swiper.slides[i] === slide) {
        slideFound = true;
        slideIndex = i;
        break;
      }
    }
  }

  if (slide && slideFound) {
    swiper.clickedSlide = slide;

    if (swiper.virtual && swiper.params.virtual.enabled) {
      swiper.clickedIndex = parseInt((0, _dom2.default)(slide).attr('data-swiper-slide-index'), 10);
    } else {
      swiper.clickedIndex = slideIndex;
    }
  } else {
    swiper.clickedSlide = undefined;
    swiper.clickedIndex = undefined;
    return;
  }

  if (params.slideToClickedSlide && swiper.clickedIndex !== undefined && swiper.clickedIndex !== swiper.activeIndex) {
    swiper.slideToClickedSlide();
  }
}

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getTranslate = __webpack_require__(65);

var _getTranslate2 = _interopRequireDefault(_getTranslate);

var _setTranslate = __webpack_require__(66);

var _setTranslate2 = _interopRequireDefault(_setTranslate);

var _minTranslate = __webpack_require__(67);

var _minTranslate2 = _interopRequireDefault(_minTranslate);

var _maxTranslate = __webpack_require__(68);

var _maxTranslate2 = _interopRequireDefault(_maxTranslate);

var _translateTo = __webpack_require__(69);

var _translateTo2 = _interopRequireDefault(_translateTo);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  getTranslate: _getTranslate2.default,
  setTranslate: _setTranslate2.default,
  minTranslate: _minTranslate2.default,
  maxTranslate: _maxTranslate2.default,
  translateTo: _translateTo2.default
};

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getSwiperTranslate;

var _utils = __webpack_require__(0);

function getSwiperTranslate(axis) {
  if (axis === void 0) {
    axis = this.isHorizontal() ? 'x' : 'y';
  }

  var swiper = this;
  var params = swiper.params,
      rtl = swiper.rtlTranslate,
      translate = swiper.translate,
      $wrapperEl = swiper.$wrapperEl;

  if (params.virtualTranslate) {
    return rtl ? -translate : translate;
  }

  if (params.cssMode) {
    return translate;
  }

  var currentTranslate = (0, _utils.getTranslate)($wrapperEl[0], axis);
  if (rtl) currentTranslate = -currentTranslate;
  return currentTranslate || 0;
}

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = setTranslate;
function setTranslate(translate, byController) {
  var swiper = this;
  var rtl = swiper.rtlTranslate,
      params = swiper.params,
      $wrapperEl = swiper.$wrapperEl,
      wrapperEl = swiper.wrapperEl,
      progress = swiper.progress;
  var x = 0;
  var y = 0;
  var z = 0;

  if (swiper.isHorizontal()) {
    x = rtl ? -translate : translate;
  } else {
    y = translate;
  }

  if (params.roundLengths) {
    x = Math.floor(x);
    y = Math.floor(y);
  }

  if (params.cssMode) {
    wrapperEl[swiper.isHorizontal() ? 'scrollLeft' : 'scrollTop'] = swiper.isHorizontal() ? -x : -y;
  } else if (!params.virtualTranslate) {
    $wrapperEl.transform("translate3d(" + x + "px, " + y + "px, " + z + "px)");
  }

  swiper.previousTranslate = swiper.translate;
  swiper.translate = swiper.isHorizontal() ? x : y; // Check if we need to update progress

  var newProgress;
  var translatesDiff = swiper.maxTranslate() - swiper.minTranslate();

  if (translatesDiff === 0) {
    newProgress = 0;
  } else {
    newProgress = (translate - swiper.minTranslate()) / translatesDiff;
  }

  if (newProgress !== progress) {
    swiper.updateProgress(translate);
  }

  swiper.emit('setTranslate', swiper.translate, byController);
}

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = minTranslate;
function minTranslate() {
  return -this.snapGrid[0];
}

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = maxTranslate;
function maxTranslate() {
  return -this.snapGrid[this.snapGrid.length - 1];
}

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = translateTo;
function translateTo(translate, speed, runCallbacks, translateBounds, internal) {
  if (translate === void 0) {
    translate = 0;
  }

  if (speed === void 0) {
    speed = this.params.speed;
  }

  if (runCallbacks === void 0) {
    runCallbacks = true;
  }

  if (translateBounds === void 0) {
    translateBounds = true;
  }

  var swiper = this;
  var params = swiper.params,
      wrapperEl = swiper.wrapperEl;

  if (swiper.animating && params.preventInteractionOnTransition) {
    return false;
  }

  var minTranslate = swiper.minTranslate();
  var maxTranslate = swiper.maxTranslate();
  var newTranslate;
  if (translateBounds && translate > minTranslate) newTranslate = minTranslate;else if (translateBounds && translate < maxTranslate) newTranslate = maxTranslate;else newTranslate = translate; // Update progress

  swiper.updateProgress(newTranslate);

  if (params.cssMode) {
    var isH = swiper.isHorizontal();

    if (speed === 0) {
      wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = -newTranslate;
    } else {
      // eslint-disable-next-line
      if (wrapperEl.scrollTo) {
        var _wrapperEl$scrollTo;

        wrapperEl.scrollTo((_wrapperEl$scrollTo = {}, _wrapperEl$scrollTo[isH ? 'left' : 'top'] = -newTranslate, _wrapperEl$scrollTo.behavior = 'smooth', _wrapperEl$scrollTo));
      } else {
        wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = -newTranslate;
      }
    }

    return true;
  }

  if (speed === 0) {
    swiper.setTransition(0);
    swiper.setTranslate(newTranslate);

    if (runCallbacks) {
      swiper.emit('beforeTransitionStart', speed, internal);
      swiper.emit('transitionEnd');
    }
  } else {
    swiper.setTransition(speed);
    swiper.setTranslate(newTranslate);

    if (runCallbacks) {
      swiper.emit('beforeTransitionStart', speed, internal);
      swiper.emit('transitionStart');
    }

    if (!swiper.animating) {
      swiper.animating = true;

      if (!swiper.onTranslateToWrapperTransitionEnd) {
        swiper.onTranslateToWrapperTransitionEnd = function transitionEnd(e) {
          if (!swiper || swiper.destroyed) return;
          if (e.target !== this) return;
          swiper.$wrapperEl[0].removeEventListener('transitionend', swiper.onTranslateToWrapperTransitionEnd);
          swiper.$wrapperEl[0].removeEventListener('webkitTransitionEnd', swiper.onTranslateToWrapperTransitionEnd);
          swiper.onTranslateToWrapperTransitionEnd = null;
          delete swiper.onTranslateToWrapperTransitionEnd;

          if (runCallbacks) {
            swiper.emit('transitionEnd');
          }
        };
      }

      swiper.$wrapperEl[0].addEventListener('transitionend', swiper.onTranslateToWrapperTransitionEnd);
      swiper.$wrapperEl[0].addEventListener('webkitTransitionEnd', swiper.onTranslateToWrapperTransitionEnd);
    }
  }

  return true;
}

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _setTransition = __webpack_require__(71);

var _setTransition2 = _interopRequireDefault(_setTransition);

var _transitionStart = __webpack_require__(72);

var _transitionStart2 = _interopRequireDefault(_transitionStart);

var _transitionEnd = __webpack_require__(73);

var _transitionEnd2 = _interopRequireDefault(_transitionEnd);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  setTransition: _setTransition2.default,
  transitionStart: _transitionStart2.default,
  transitionEnd: _transitionEnd2.default
};

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = setTransition;
function setTransition(duration, byController) {
  var swiper = this;

  if (!swiper.params.cssMode) {
    swiper.$wrapperEl.transition(duration);
  }

  swiper.emit('setTransition', duration, byController);
}

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = transitionStart;
function transitionStart(runCallbacks, direction) {
  if (runCallbacks === void 0) {
    runCallbacks = true;
  }

  var swiper = this;
  var activeIndex = swiper.activeIndex,
      params = swiper.params,
      previousIndex = swiper.previousIndex;
  if (params.cssMode) return;

  if (params.autoHeight) {
    swiper.updateAutoHeight();
  }

  var dir = direction;

  if (!dir) {
    if (activeIndex > previousIndex) dir = 'next';else if (activeIndex < previousIndex) dir = 'prev';else dir = 'reset';
  }

  swiper.emit('transitionStart');

  if (runCallbacks && activeIndex !== previousIndex) {
    if (dir === 'reset') {
      swiper.emit('slideResetTransitionStart');
      return;
    }

    swiper.emit('slideChangeTransitionStart');

    if (dir === 'next') {
      swiper.emit('slideNextTransitionStart');
    } else {
      swiper.emit('slidePrevTransitionStart');
    }
  }
}

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = transitionEnd;
function transitionEnd(runCallbacks, direction) {
  if (runCallbacks === void 0) {
    runCallbacks = true;
  }

  var swiper = this;
  var activeIndex = swiper.activeIndex,
      previousIndex = swiper.previousIndex,
      params = swiper.params;
  swiper.animating = false;
  if (params.cssMode) return;
  swiper.setTransition(0);
  var dir = direction;

  if (!dir) {
    if (activeIndex > previousIndex) dir = 'next';else if (activeIndex < previousIndex) dir = 'prev';else dir = 'reset';
  }

  swiper.emit('transitionEnd');

  if (runCallbacks && activeIndex !== previousIndex) {
    if (dir === 'reset') {
      swiper.emit('slideResetTransitionEnd');
      return;
    }

    swiper.emit('slideChangeTransitionEnd');

    if (dir === 'next') {
      swiper.emit('slideNextTransitionEnd');
    } else {
      swiper.emit('slidePrevTransitionEnd');
    }
  }
}

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slideTo = __webpack_require__(75);

var _slideTo2 = _interopRequireDefault(_slideTo);

var _slideToLoop = __webpack_require__(76);

var _slideToLoop2 = _interopRequireDefault(_slideToLoop);

var _slideNext = __webpack_require__(77);

var _slideNext2 = _interopRequireDefault(_slideNext);

var _slidePrev = __webpack_require__(78);

var _slidePrev2 = _interopRequireDefault(_slidePrev);

var _slideReset = __webpack_require__(79);

var _slideReset2 = _interopRequireDefault(_slideReset);

var _slideToClosest = __webpack_require__(80);

var _slideToClosest2 = _interopRequireDefault(_slideToClosest);

var _slideToClickedSlide = __webpack_require__(81);

var _slideToClickedSlide2 = _interopRequireDefault(_slideToClickedSlide);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  slideTo: _slideTo2.default,
  slideToLoop: _slideToLoop2.default,
  slideNext: _slideNext2.default,
  slidePrev: _slidePrev2.default,
  slideReset: _slideReset2.default,
  slideToClosest: _slideToClosest2.default,
  slideToClickedSlide: _slideToClickedSlide2.default
};

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = slideTo;
function slideTo(index, speed, runCallbacks, internal, initial) {
  if (index === void 0) {
    index = 0;
  }

  if (speed === void 0) {
    speed = this.params.speed;
  }

  if (runCallbacks === void 0) {
    runCallbacks = true;
  }

  if (typeof index !== 'number' && typeof index !== 'string') {
    throw new Error("The 'index' argument cannot have type other than 'number' or 'string'. [" + (typeof index === 'undefined' ? 'undefined' : _typeof(index)) + "] given.");
  }

  if (typeof index === 'string') {
    /**
     * The `index` argument converted from `string` to `number`.
     * @type {number}
     */
    var indexAsNumber = parseInt(index, 10);
    /**
     * Determines whether the `index` argument is a valid `number`
     * after being converted from the `string` type.
     * @type {boolean}
     */

    var isValidNumber = isFinite(indexAsNumber);

    if (!isValidNumber) {
      throw new Error("The passed-in 'index' (string) couldn't be converted to 'number'. [" + index + "] given.");
    } // Knowing that the converted `index` is a valid number,
    // we can update the original argument's value.


    index = indexAsNumber;
  }

  var swiper = this;
  var slideIndex = index;
  if (slideIndex < 0) slideIndex = 0;
  var params = swiper.params,
      snapGrid = swiper.snapGrid,
      slidesGrid = swiper.slidesGrid,
      previousIndex = swiper.previousIndex,
      activeIndex = swiper.activeIndex,
      rtl = swiper.rtlTranslate,
      wrapperEl = swiper.wrapperEl,
      enabled = swiper.enabled;

  if (swiper.animating && params.preventInteractionOnTransition || !enabled && !internal && !initial) {
    return false;
  }

  var skip = Math.min(swiper.params.slidesPerGroupSkip, slideIndex);
  var snapIndex = skip + Math.floor((slideIndex - skip) / swiper.params.slidesPerGroup);
  if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;

  if ((activeIndex || params.initialSlide || 0) === (previousIndex || 0) && runCallbacks) {
    swiper.emit('beforeSlideChangeStart');
  }

  var translate = -snapGrid[snapIndex]; // Update progress

  swiper.updateProgress(translate); // Normalize slideIndex

  if (params.normalizeSlideIndex) {
    for (var i = 0; i < slidesGrid.length; i += 1) {
      var normalizedTranslate = -Math.floor(translate * 100);
      var normalizedGird = Math.floor(slidesGrid[i] * 100);
      var normalizedGridNext = Math.floor(slidesGrid[i + 1] * 100);

      if (typeof slidesGrid[i + 1] !== 'undefined') {
        if (normalizedTranslate >= normalizedGird && normalizedTranslate < normalizedGridNext - (normalizedGridNext - normalizedGird) / 2) {
          slideIndex = i;
        } else if (normalizedTranslate >= normalizedGird && normalizedTranslate < normalizedGridNext) {
          slideIndex = i + 1;
        }
      } else if (normalizedTranslate >= normalizedGird) {
        slideIndex = i;
      }
    }
  } // Directions locks


  if (swiper.initialized && slideIndex !== activeIndex) {
    if (!swiper.allowSlideNext && translate < swiper.translate && translate < swiper.minTranslate()) {
      return false;
    }

    if (!swiper.allowSlidePrev && translate > swiper.translate && translate > swiper.maxTranslate()) {
      if ((activeIndex || 0) !== slideIndex) return false;
    }
  }

  var direction;
  if (slideIndex > activeIndex) direction = 'next';else if (slideIndex < activeIndex) direction = 'prev';else direction = 'reset'; // Update Index

  if (rtl && -translate === swiper.translate || !rtl && translate === swiper.translate) {
    swiper.updateActiveIndex(slideIndex); // Update Height

    if (params.autoHeight) {
      swiper.updateAutoHeight();
    }

    swiper.updateSlidesClasses();

    if (params.effect !== 'slide') {
      swiper.setTranslate(translate);
    }

    if (direction !== 'reset') {
      swiper.transitionStart(runCallbacks, direction);
      swiper.transitionEnd(runCallbacks, direction);
    }

    return false;
  }

  if (params.cssMode) {
    var isH = swiper.isHorizontal();
    var t = -translate;

    if (rtl) {
      t = wrapperEl.scrollWidth - wrapperEl.offsetWidth - t;
    }

    if (speed === 0) {
      wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = t;
    } else {
      // eslint-disable-next-line
      if (wrapperEl.scrollTo) {
        var _wrapperEl$scrollTo;

        wrapperEl.scrollTo((_wrapperEl$scrollTo = {}, _wrapperEl$scrollTo[isH ? 'left' : 'top'] = t, _wrapperEl$scrollTo.behavior = 'smooth', _wrapperEl$scrollTo));
      } else {
        wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = t;
      }
    }

    return true;
  }

  if (speed === 0) {
    swiper.setTransition(0);
    swiper.setTranslate(translate);
    swiper.updateActiveIndex(slideIndex);
    swiper.updateSlidesClasses();
    swiper.emit('beforeTransitionStart', speed, internal);
    swiper.transitionStart(runCallbacks, direction);
    swiper.transitionEnd(runCallbacks, direction);
  } else {
    swiper.setTransition(speed);
    swiper.setTranslate(translate);
    swiper.updateActiveIndex(slideIndex);
    swiper.updateSlidesClasses();
    swiper.emit('beforeTransitionStart', speed, internal);
    swiper.transitionStart(runCallbacks, direction);

    if (!swiper.animating) {
      swiper.animating = true;

      if (!swiper.onSlideToWrapperTransitionEnd) {
        swiper.onSlideToWrapperTransitionEnd = function transitionEnd(e) {
          if (!swiper || swiper.destroyed) return;
          if (e.target !== this) return;
          swiper.$wrapperEl[0].removeEventListener('transitionend', swiper.onSlideToWrapperTransitionEnd);
          swiper.$wrapperEl[0].removeEventListener('webkitTransitionEnd', swiper.onSlideToWrapperTransitionEnd);
          swiper.onSlideToWrapperTransitionEnd = null;
          delete swiper.onSlideToWrapperTransitionEnd;
          swiper.transitionEnd(runCallbacks, direction);
        };
      }

      swiper.$wrapperEl[0].addEventListener('transitionend', swiper.onSlideToWrapperTransitionEnd);
      swiper.$wrapperEl[0].addEventListener('webkitTransitionEnd', swiper.onSlideToWrapperTransitionEnd);
    }
  }

  return true;
}

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = slideToLoop;
function slideToLoop(index, speed, runCallbacks, internal) {
  if (index === void 0) {
    index = 0;
  }

  if (speed === void 0) {
    speed = this.params.speed;
  }

  if (runCallbacks === void 0) {
    runCallbacks = true;
  }

  var swiper = this;
  var newIndex = index;

  if (swiper.params.loop) {
    newIndex += swiper.loopedSlides;
  }

  return swiper.slideTo(newIndex, speed, runCallbacks, internal);
}

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = slideNext;
/* eslint no-unused-vars: "off" */
function slideNext(speed, runCallbacks, internal) {
  if (speed === void 0) {
    speed = this.params.speed;
  }

  if (runCallbacks === void 0) {
    runCallbacks = true;
  }

  var swiper = this;
  var params = swiper.params,
      animating = swiper.animating,
      enabled = swiper.enabled;
  if (!enabled) return swiper;
  var increment = swiper.activeIndex < params.slidesPerGroupSkip ? 1 : params.slidesPerGroup;

  if (params.loop) {
    if (animating && params.loopPreventsSlide) return false;
    swiper.loopFix(); // eslint-disable-next-line

    swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;
  }

  return swiper.slideTo(swiper.activeIndex + increment, speed, runCallbacks, internal);
}

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = slidePrev;
/* eslint no-unused-vars: "off" */
function slidePrev(speed, runCallbacks, internal) {
  if (speed === void 0) {
    speed = this.params.speed;
  }

  if (runCallbacks === void 0) {
    runCallbacks = true;
  }

  var swiper = this;
  var params = swiper.params,
      animating = swiper.animating,
      snapGrid = swiper.snapGrid,
      slidesGrid = swiper.slidesGrid,
      rtlTranslate = swiper.rtlTranslate,
      enabled = swiper.enabled;
  if (!enabled) return swiper;

  if (params.loop) {
    if (animating && params.loopPreventsSlide) return false;
    swiper.loopFix(); // eslint-disable-next-line

    swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;
  }

  var translate = rtlTranslate ? swiper.translate : -swiper.translate;

  function normalize(val) {
    if (val < 0) return -Math.floor(Math.abs(val));
    return Math.floor(val);
  }

  var normalizedTranslate = normalize(translate);
  var normalizedSnapGrid = snapGrid.map(function (val) {
    return normalize(val);
  });
  var currentSnap = snapGrid[normalizedSnapGrid.indexOf(normalizedTranslate)];
  var prevSnap = snapGrid[normalizedSnapGrid.indexOf(normalizedTranslate) - 1];

  if (typeof prevSnap === 'undefined' && params.cssMode) {
    snapGrid.forEach(function (snap) {
      if (!prevSnap && normalizedTranslate >= snap) prevSnap = snap;
    });
  }

  var prevIndex;

  if (typeof prevSnap !== 'undefined') {
    prevIndex = slidesGrid.indexOf(prevSnap);
    if (prevIndex < 0) prevIndex = swiper.activeIndex - 1;
  }

  return swiper.slideTo(prevIndex, speed, runCallbacks, internal);
}

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = slideReset;
/* eslint no-unused-vars: "off" */
function slideReset(speed, runCallbacks, internal) {
  if (speed === void 0) {
    speed = this.params.speed;
  }

  if (runCallbacks === void 0) {
    runCallbacks = true;
  }

  var swiper = this;
  return swiper.slideTo(swiper.activeIndex, speed, runCallbacks, internal);
}

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = slideToClosest;
/* eslint no-unused-vars: "off" */
function slideToClosest(speed, runCallbacks, internal, threshold) {
  if (speed === void 0) {
    speed = this.params.speed;
  }

  if (runCallbacks === void 0) {
    runCallbacks = true;
  }

  if (threshold === void 0) {
    threshold = 0.5;
  }

  var swiper = this;
  var index = swiper.activeIndex;
  var skip = Math.min(swiper.params.slidesPerGroupSkip, index);
  var snapIndex = skip + Math.floor((index - skip) / swiper.params.slidesPerGroup);
  var translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;

  if (translate >= swiper.snapGrid[snapIndex]) {
    // The current translate is on or after the current snap index, so the choice
    // is between the current index and the one after it.
    var currentSnap = swiper.snapGrid[snapIndex];
    var nextSnap = swiper.snapGrid[snapIndex + 1];

    if (translate - currentSnap > (nextSnap - currentSnap) * threshold) {
      index += swiper.params.slidesPerGroup;
    }
  } else {
    // The current translate is before the current snap index, so the choice
    // is between the current index and the one before it.
    var prevSnap = swiper.snapGrid[snapIndex - 1];
    var _currentSnap = swiper.snapGrid[snapIndex];

    if (translate - prevSnap <= (_currentSnap - prevSnap) * threshold) {
      index -= swiper.params.slidesPerGroup;
    }
  }

  index = Math.max(index, 0);
  index = Math.min(index, swiper.slidesGrid.length - 1);
  return swiper.slideTo(index, speed, runCallbacks, internal);
}

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = slideToClickedSlide;

var _dom = __webpack_require__(1);

var _dom2 = _interopRequireDefault(_dom);

var _utils = __webpack_require__(0);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function slideToClickedSlide() {
  var swiper = this;
  var params = swiper.params,
      $wrapperEl = swiper.$wrapperEl;
  var slidesPerView = params.slidesPerView === 'auto' ? swiper.slidesPerViewDynamic() : params.slidesPerView;
  var slideToIndex = swiper.clickedIndex;
  var realIndex;

  if (params.loop) {
    if (swiper.animating) return;
    realIndex = parseInt((0, _dom2.default)(swiper.clickedSlide).attr('data-swiper-slide-index'), 10);

    if (params.centeredSlides) {
      if (slideToIndex < swiper.loopedSlides - slidesPerView / 2 || slideToIndex > swiper.slides.length - swiper.loopedSlides + slidesPerView / 2) {
        swiper.loopFix();
        slideToIndex = $wrapperEl.children("." + params.slideClass + "[data-swiper-slide-index=\"" + realIndex + "\"]:not(." + params.slideDuplicateClass + ")").eq(0).index();
        (0, _utils.nextTick)(function () {
          swiper.slideTo(slideToIndex);
        });
      } else {
        swiper.slideTo(slideToIndex);
      }
    } else if (slideToIndex > swiper.slides.length - slidesPerView) {
      swiper.loopFix();
      slideToIndex = $wrapperEl.children("." + params.slideClass + "[data-swiper-slide-index=\"" + realIndex + "\"]:not(." + params.slideDuplicateClass + ")").eq(0).index();
      (0, _utils.nextTick)(function () {
        swiper.slideTo(slideToIndex);
      });
    } else {
      swiper.slideTo(slideToIndex);
    }
  } else {
    swiper.slideTo(slideToIndex);
  }
}

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _loopCreate = __webpack_require__(83);

var _loopCreate2 = _interopRequireDefault(_loopCreate);

var _loopFix = __webpack_require__(84);

var _loopFix2 = _interopRequireDefault(_loopFix);

var _loopDestroy = __webpack_require__(85);

var _loopDestroy2 = _interopRequireDefault(_loopDestroy);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  loopCreate: _loopCreate2.default,
  loopFix: _loopFix2.default,
  loopDestroy: _loopDestroy2.default
};

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = loopCreate;

var _ssrWindow = __webpack_require__(2);

var _dom = __webpack_require__(1);

var _dom2 = _interopRequireDefault(_dom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function loopCreate() {
  var swiper = this;
  var document = (0, _ssrWindow.getDocument)();
  var params = swiper.params,
      $wrapperEl = swiper.$wrapperEl; // Remove duplicated slides

  $wrapperEl.children("." + params.slideClass + "." + params.slideDuplicateClass).remove();
  var slides = $wrapperEl.children("." + params.slideClass);

  if (params.loopFillGroupWithBlank) {
    var blankSlidesNum = params.slidesPerGroup - slides.length % params.slidesPerGroup;

    if (blankSlidesNum !== params.slidesPerGroup) {
      for (var i = 0; i < blankSlidesNum; i += 1) {
        var blankNode = (0, _dom2.default)(document.createElement('div')).addClass(params.slideClass + " " + params.slideBlankClass);
        $wrapperEl.append(blankNode);
      }

      slides = $wrapperEl.children("." + params.slideClass);
    }
  }

  if (params.slidesPerView === 'auto' && !params.loopedSlides) params.loopedSlides = slides.length;
  swiper.loopedSlides = Math.ceil(parseFloat(params.loopedSlides || params.slidesPerView, 10));
  swiper.loopedSlides += params.loopAdditionalSlides;

  if (swiper.loopedSlides > slides.length) {
    swiper.loopedSlides = slides.length;
  }

  var prependSlides = [];
  var appendSlides = [];
  slides.each(function (el, index) {
    var slide = (0, _dom2.default)(el);

    if (index < swiper.loopedSlides) {
      appendSlides.push(el);
    }

    if (index < slides.length && index >= slides.length - swiper.loopedSlides) {
      prependSlides.push(el);
    }

    slide.attr('data-swiper-slide-index', index);
  });

  for (var _i = 0; _i < appendSlides.length; _i += 1) {
    $wrapperEl.append((0, _dom2.default)(appendSlides[_i].cloneNode(true)).addClass(params.slideDuplicateClass));
  }

  for (var _i2 = prependSlides.length - 1; _i2 >= 0; _i2 -= 1) {
    $wrapperEl.prepend((0, _dom2.default)(prependSlides[_i2].cloneNode(true)).addClass(params.slideDuplicateClass));
  }
}

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = loopFix;
function loopFix() {
  var swiper = this;
  swiper.emit('beforeLoopFix');
  var activeIndex = swiper.activeIndex,
      slides = swiper.slides,
      loopedSlides = swiper.loopedSlides,
      allowSlidePrev = swiper.allowSlidePrev,
      allowSlideNext = swiper.allowSlideNext,
      snapGrid = swiper.snapGrid,
      rtl = swiper.rtlTranslate;
  var newIndex;
  swiper.allowSlidePrev = true;
  swiper.allowSlideNext = true;
  var snapTranslate = -snapGrid[activeIndex];
  var diff = snapTranslate - swiper.getTranslate(); // Fix For Negative Oversliding

  if (activeIndex < loopedSlides) {
    newIndex = slides.length - loopedSlides * 3 + activeIndex;
    newIndex += loopedSlides;
    var slideChanged = swiper.slideTo(newIndex, 0, false, true);

    if (slideChanged && diff !== 0) {
      swiper.setTranslate((rtl ? -swiper.translate : swiper.translate) - diff);
    }
  } else if (activeIndex >= slides.length - loopedSlides) {
    // Fix For Positive Oversliding
    newIndex = -slides.length + activeIndex + loopedSlides;
    newIndex += loopedSlides;

    var _slideChanged = swiper.slideTo(newIndex, 0, false, true);

    if (_slideChanged && diff !== 0) {
      swiper.setTranslate((rtl ? -swiper.translate : swiper.translate) - diff);
    }
  }

  swiper.allowSlidePrev = allowSlidePrev;
  swiper.allowSlideNext = allowSlideNext;
  swiper.emit('loopFix');
}

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = loopDestroy;
function loopDestroy() {
  var swiper = this;
  var $wrapperEl = swiper.$wrapperEl,
      params = swiper.params,
      slides = swiper.slides;
  $wrapperEl.children("." + params.slideClass + "." + params.slideDuplicateClass + ",." + params.slideClass + "." + params.slideBlankClass).remove();
  slides.removeAttr('data-swiper-slide-index');
}

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _setGrabCursor = __webpack_require__(87);

var _setGrabCursor2 = _interopRequireDefault(_setGrabCursor);

var _unsetGrabCursor = __webpack_require__(88);

var _unsetGrabCursor2 = _interopRequireDefault(_unsetGrabCursor);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  setGrabCursor: _setGrabCursor2.default,
  unsetGrabCursor: _unsetGrabCursor2.default
};

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = setGrabCursor;
function setGrabCursor(moving) {
  var swiper = this;
  if (swiper.support.touch || !swiper.params.simulateTouch || swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode) return;
  var el = swiper.el;
  el.style.cursor = 'move';
  el.style.cursor = moving ? '-webkit-grabbing' : '-webkit-grab';
  el.style.cursor = moving ? '-moz-grabbin' : '-moz-grab';
  el.style.cursor = moving ? 'grabbing' : 'grab';
}

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = unsetGrabCursor;
function unsetGrabCursor() {
  var swiper = this;

  if (swiper.support.touch || swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode) {
    return;
  }

  swiper.el.style.cursor = '';
}

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _appendSlide = __webpack_require__(90);

var _appendSlide2 = _interopRequireDefault(_appendSlide);

var _prependSlide = __webpack_require__(91);

var _prependSlide2 = _interopRequireDefault(_prependSlide);

var _addSlide = __webpack_require__(92);

var _addSlide2 = _interopRequireDefault(_addSlide);

var _removeSlide = __webpack_require__(93);

var _removeSlide2 = _interopRequireDefault(_removeSlide);

var _removeAllSlides = __webpack_require__(94);

var _removeAllSlides2 = _interopRequireDefault(_removeAllSlides);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  appendSlide: _appendSlide2.default,
  prependSlide: _prependSlide2.default,
  addSlide: _addSlide2.default,
  removeSlide: _removeSlide2.default,
  removeAllSlides: _removeAllSlides2.default
};

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = appendSlide;
function appendSlide(slides) {
  var swiper = this;
  var $wrapperEl = swiper.$wrapperEl,
      params = swiper.params;

  if (params.loop) {
    swiper.loopDestroy();
  }

  if ((typeof slides === 'undefined' ? 'undefined' : _typeof(slides)) === 'object' && 'length' in slides) {
    for (var i = 0; i < slides.length; i += 1) {
      if (slides[i]) $wrapperEl.append(slides[i]);
    }
  } else {
    $wrapperEl.append(slides);
  }

  if (params.loop) {
    swiper.loopCreate();
  }

  if (!(params.observer && swiper.support.observer)) {
    swiper.update();
  }
}

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = prependSlide;
function prependSlide(slides) {
  var swiper = this;
  var params = swiper.params,
      $wrapperEl = swiper.$wrapperEl,
      activeIndex = swiper.activeIndex;

  if (params.loop) {
    swiper.loopDestroy();
  }

  var newActiveIndex = activeIndex + 1;

  if ((typeof slides === 'undefined' ? 'undefined' : _typeof(slides)) === 'object' && 'length' in slides) {
    for (var i = 0; i < slides.length; i += 1) {
      if (slides[i]) $wrapperEl.prepend(slides[i]);
    }

    newActiveIndex = activeIndex + slides.length;
  } else {
    $wrapperEl.prepend(slides);
  }

  if (params.loop) {
    swiper.loopCreate();
  }

  if (!(params.observer && swiper.support.observer)) {
    swiper.update();
  }

  swiper.slideTo(newActiveIndex, 0, false);
}

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = addSlide;
function addSlide(index, slides) {
  var swiper = this;
  var $wrapperEl = swiper.$wrapperEl,
      params = swiper.params,
      activeIndex = swiper.activeIndex;
  var activeIndexBuffer = activeIndex;

  if (params.loop) {
    activeIndexBuffer -= swiper.loopedSlides;
    swiper.loopDestroy();
    swiper.slides = $wrapperEl.children("." + params.slideClass);
  }

  var baseLength = swiper.slides.length;

  if (index <= 0) {
    swiper.prependSlide(slides);
    return;
  }

  if (index >= baseLength) {
    swiper.appendSlide(slides);
    return;
  }

  var newActiveIndex = activeIndexBuffer > index ? activeIndexBuffer + 1 : activeIndexBuffer;
  var slidesBuffer = [];

  for (var i = baseLength - 1; i >= index; i -= 1) {
    var currentSlide = swiper.slides.eq(i);
    currentSlide.remove();
    slidesBuffer.unshift(currentSlide);
  }

  if ((typeof slides === 'undefined' ? 'undefined' : _typeof(slides)) === 'object' && 'length' in slides) {
    for (var _i = 0; _i < slides.length; _i += 1) {
      if (slides[_i]) $wrapperEl.append(slides[_i]);
    }

    newActiveIndex = activeIndexBuffer > index ? activeIndexBuffer + slides.length : activeIndexBuffer;
  } else {
    $wrapperEl.append(slides);
  }

  for (var _i2 = 0; _i2 < slidesBuffer.length; _i2 += 1) {
    $wrapperEl.append(slidesBuffer[_i2]);
  }

  if (params.loop) {
    swiper.loopCreate();
  }

  if (!(params.observer && swiper.support.observer)) {
    swiper.update();
  }

  if (params.loop) {
    swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);
  } else {
    swiper.slideTo(newActiveIndex, 0, false);
  }
}

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = removeSlide;
function removeSlide(slidesIndexes) {
  var swiper = this;
  var params = swiper.params,
      $wrapperEl = swiper.$wrapperEl,
      activeIndex = swiper.activeIndex;
  var activeIndexBuffer = activeIndex;

  if (params.loop) {
    activeIndexBuffer -= swiper.loopedSlides;
    swiper.loopDestroy();
    swiper.slides = $wrapperEl.children("." + params.slideClass);
  }

  var newActiveIndex = activeIndexBuffer;
  var indexToRemove;

  if ((typeof slidesIndexes === 'undefined' ? 'undefined' : _typeof(slidesIndexes)) === 'object' && 'length' in slidesIndexes) {
    for (var i = 0; i < slidesIndexes.length; i += 1) {
      indexToRemove = slidesIndexes[i];
      if (swiper.slides[indexToRemove]) swiper.slides.eq(indexToRemove).remove();
      if (indexToRemove < newActiveIndex) newActiveIndex -= 1;
    }

    newActiveIndex = Math.max(newActiveIndex, 0);
  } else {
    indexToRemove = slidesIndexes;
    if (swiper.slides[indexToRemove]) swiper.slides.eq(indexToRemove).remove();
    if (indexToRemove < newActiveIndex) newActiveIndex -= 1;
    newActiveIndex = Math.max(newActiveIndex, 0);
  }

  if (params.loop) {
    swiper.loopCreate();
  }

  if (!(params.observer && swiper.support.observer)) {
    swiper.update();
  }

  if (params.loop) {
    swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);
  } else {
    swiper.slideTo(newActiveIndex, 0, false);
  }
}

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = removeAllSlides;
function removeAllSlides() {
  var swiper = this;
  var slidesIndexes = [];

  for (var i = 0; i < swiper.slides.length; i += 1) {
    slidesIndexes.push(i);
  }

  swiper.removeSlide(slidesIndexes);
}

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ssrWindow = __webpack_require__(2);

var _onTouchStart = __webpack_require__(96);

var _onTouchStart2 = _interopRequireDefault(_onTouchStart);

var _onTouchMove = __webpack_require__(97);

var _onTouchMove2 = _interopRequireDefault(_onTouchMove);

var _onTouchEnd = __webpack_require__(98);

var _onTouchEnd2 = _interopRequireDefault(_onTouchEnd);

var _onResize = __webpack_require__(99);

var _onResize2 = _interopRequireDefault(_onResize);

var _onClick = __webpack_require__(100);

var _onClick2 = _interopRequireDefault(_onClick);

var _onScroll = __webpack_require__(101);

var _onScroll2 = _interopRequireDefault(_onScroll);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var dummyEventAttached = false;

function dummyEventListener() {}

function attachEvents() {
  var swiper = this;
  var document = (0, _ssrWindow.getDocument)();
  var params = swiper.params,
      touchEvents = swiper.touchEvents,
      el = swiper.el,
      wrapperEl = swiper.wrapperEl,
      device = swiper.device,
      support = swiper.support;
  swiper.onTouchStart = _onTouchStart2.default.bind(swiper);
  swiper.onTouchMove = _onTouchMove2.default.bind(swiper);
  swiper.onTouchEnd = _onTouchEnd2.default.bind(swiper);

  if (params.cssMode) {
    swiper.onScroll = _onScroll2.default.bind(swiper);
  }

  swiper.onClick = _onClick2.default.bind(swiper);
  var capture = !!params.nested; // Touch Events

  if (!support.touch && support.pointerEvents) {
    el.addEventListener(touchEvents.start, swiper.onTouchStart, false);
    document.addEventListener(touchEvents.move, swiper.onTouchMove, capture);
    document.addEventListener(touchEvents.end, swiper.onTouchEnd, false);
  } else {
    if (support.touch) {
      var passiveListener = touchEvents.start === 'touchstart' && support.passiveListener && params.passiveListeners ? {
        passive: true,
        capture: false
      } : false;
      el.addEventListener(touchEvents.start, swiper.onTouchStart, passiveListener);
      el.addEventListener(touchEvents.move, swiper.onTouchMove, support.passiveListener ? {
        passive: false,
        capture: capture
      } : capture);
      el.addEventListener(touchEvents.end, swiper.onTouchEnd, passiveListener);

      if (touchEvents.cancel) {
        el.addEventListener(touchEvents.cancel, swiper.onTouchEnd, passiveListener);
      }

      if (!dummyEventAttached) {
        document.addEventListener('touchstart', dummyEventListener);
        dummyEventAttached = true;
      }
    }

    if (params.simulateTouch && !device.ios && !device.android || params.simulateTouch && !support.touch && device.ios) {
      el.addEventListener('mousedown', swiper.onTouchStart, false);
      document.addEventListener('mousemove', swiper.onTouchMove, capture);
      document.addEventListener('mouseup', swiper.onTouchEnd, false);
    }
  } // Prevent Links Clicks


  if (params.preventClicks || params.preventClicksPropagation) {
    el.addEventListener('click', swiper.onClick, true);
  }

  if (params.cssMode) {
    wrapperEl.addEventListener('scroll', swiper.onScroll);
  } // Resize handler


  if (params.updateOnWindowResize) {
    swiper.on(device.ios || device.android ? 'resize orientationchange observerUpdate' : 'resize observerUpdate', _onResize2.default, true);
  } else {
    swiper.on('observerUpdate', _onResize2.default, true);
  }
}

function detachEvents() {
  var swiper = this;
  var document = (0, _ssrWindow.getDocument)();
  var params = swiper.params,
      touchEvents = swiper.touchEvents,
      el = swiper.el,
      wrapperEl = swiper.wrapperEl,
      device = swiper.device,
      support = swiper.support;
  var capture = !!params.nested; // Touch Events

  if (!support.touch && support.pointerEvents) {
    el.removeEventListener(touchEvents.start, swiper.onTouchStart, false);
    document.removeEventListener(touchEvents.move, swiper.onTouchMove, capture);
    document.removeEventListener(touchEvents.end, swiper.onTouchEnd, false);
  } else {
    if (support.touch) {
      var passiveListener = touchEvents.start === 'onTouchStart' && support.passiveListener && params.passiveListeners ? {
        passive: true,
        capture: false
      } : false;
      el.removeEventListener(touchEvents.start, swiper.onTouchStart, passiveListener);
      el.removeEventListener(touchEvents.move, swiper.onTouchMove, capture);
      el.removeEventListener(touchEvents.end, swiper.onTouchEnd, passiveListener);

      if (touchEvents.cancel) {
        el.removeEventListener(touchEvents.cancel, swiper.onTouchEnd, passiveListener);
      }
    }

    if (params.simulateTouch && !device.ios && !device.android || params.simulateTouch && !support.touch && device.ios) {
      el.removeEventListener('mousedown', swiper.onTouchStart, false);
      document.removeEventListener('mousemove', swiper.onTouchMove, capture);
      document.removeEventListener('mouseup', swiper.onTouchEnd, false);
    }
  } // Prevent Links Clicks


  if (params.preventClicks || params.preventClicksPropagation) {
    el.removeEventListener('click', swiper.onClick, true);
  }

  if (params.cssMode) {
    wrapperEl.removeEventListener('scroll', swiper.onScroll);
  } // Resize handler


  swiper.off(device.ios || device.android ? 'resize orientationchange observerUpdate' : 'resize observerUpdate', _onResize2.default);
}

exports.default = {
  attachEvents: attachEvents,
  detachEvents: detachEvents
};

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = onTouchStart;

var _ssrWindow = __webpack_require__(2);

var _dom = __webpack_require__(1);

var _dom2 = _interopRequireDefault(_dom);

var _utils = __webpack_require__(0);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function onTouchStart(event) {
  var swiper = this;
  var document = (0, _ssrWindow.getDocument)();
  var window = (0, _ssrWindow.getWindow)();
  var data = swiper.touchEventsData;
  var params = swiper.params,
      touches = swiper.touches,
      enabled = swiper.enabled;
  if (!enabled) return;

  if (swiper.animating && params.preventInteractionOnTransition) {
    return;
  }

  var e = event;
  if (e.originalEvent) e = e.originalEvent;
  var $targetEl = (0, _dom2.default)(e.target);

  if (params.touchEventsTarget === 'wrapper') {
    if (!$targetEl.closest(swiper.wrapperEl).length) return;
  }

  data.isTouchEvent = e.type === 'touchstart';
  if (!data.isTouchEvent && 'which' in e && e.which === 3) return;
  if (!data.isTouchEvent && 'button' in e && e.button > 0) return;
  if (data.isTouched && data.isMoved) return; // change target el for shadow root componenet

  var swipingClassHasValue = !!params.noSwipingClass && params.noSwipingClass !== '';

  if (swipingClassHasValue && e.target && e.target.shadowRoot && event.path && event.path[0]) {
    $targetEl = (0, _dom2.default)(event.path[0]);
  }

  if (params.noSwiping && $targetEl.closest(params.noSwipingSelector ? params.noSwipingSelector : "." + params.noSwipingClass)[0]) {
    swiper.allowClick = true;
    return;
  }

  if (params.swipeHandler) {
    if (!$targetEl.closest(params.swipeHandler)[0]) return;
  }

  touches.currentX = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;
  touches.currentY = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;
  var startX = touches.currentX;
  var startY = touches.currentY; // Do NOT start if iOS edge swipe is detected. Otherwise iOS app cannot swipe-to-go-back anymore

  var edgeSwipeDetection = params.edgeSwipeDetection || params.iOSEdgeSwipeDetection;
  var edgeSwipeThreshold = params.edgeSwipeThreshold || params.iOSEdgeSwipeThreshold;

  if (edgeSwipeDetection && (startX <= edgeSwipeThreshold || startX >= window.innerWidth - edgeSwipeThreshold)) {
    if (edgeSwipeDetection === 'prevent') {
      event.preventDefault();
    } else {
      return;
    }
  }

  (0, _utils.extend)(data, {
    isTouched: true,
    isMoved: false,
    allowTouchCallbacks: true,
    isScrolling: undefined,
    startMoving: undefined
  });
  touches.startX = startX;
  touches.startY = startY;
  data.touchStartTime = (0, _utils.now)();
  swiper.allowClick = true;
  swiper.updateSize();
  swiper.swipeDirection = undefined;
  if (params.threshold > 0) data.allowThresholdMove = false;

  if (e.type !== 'touchstart') {
    var preventDefault = true;
    if ($targetEl.is(data.formElements)) preventDefault = false;

    if (document.activeElement && (0, _dom2.default)(document.activeElement).is(data.formElements) && document.activeElement !== $targetEl[0]) {
      document.activeElement.blur();
    }

    var shouldPreventDefault = preventDefault && swiper.allowTouchMove && params.touchStartPreventDefault;

    if ((params.touchStartForcePreventDefault || shouldPreventDefault) && !$targetEl[0].isContentEditable) {
      e.preventDefault();
    }
  }

  swiper.emit('touchStart', e);
}

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = onTouchMove;

var _ssrWindow = __webpack_require__(2);

var _dom = __webpack_require__(1);

var _dom2 = _interopRequireDefault(_dom);

var _utils = __webpack_require__(0);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function onTouchMove(event) {
  var document = (0, _ssrWindow.getDocument)();
  var swiper = this;
  var data = swiper.touchEventsData;
  var params = swiper.params,
      touches = swiper.touches,
      rtl = swiper.rtlTranslate,
      enabled = swiper.enabled;
  if (!enabled) return;
  var e = event;
  if (e.originalEvent) e = e.originalEvent;

  if (!data.isTouched) {
    if (data.startMoving && data.isScrolling) {
      swiper.emit('touchMoveOpposite', e);
    }

    return;
  }

  if (data.isTouchEvent && e.type !== 'touchmove') return;
  var targetTouch = e.type === 'touchmove' && e.targetTouches && (e.targetTouches[0] || e.changedTouches[0]);
  var pageX = e.type === 'touchmove' ? targetTouch.pageX : e.pageX;
  var pageY = e.type === 'touchmove' ? targetTouch.pageY : e.pageY;

  if (e.preventedByNestedSwiper) {
    touches.startX = pageX;
    touches.startY = pageY;
    return;
  }

  if (!swiper.allowTouchMove) {
    // isMoved = true;
    swiper.allowClick = false;

    if (data.isTouched) {
      (0, _utils.extend)(touches, {
        startX: pageX,
        startY: pageY,
        currentX: pageX,
        currentY: pageY
      });
      data.touchStartTime = (0, _utils.now)();
    }

    return;
  }

  if (data.isTouchEvent && params.touchReleaseOnEdges && !params.loop) {
    if (swiper.isVertical()) {
      // Vertical
      if (pageY < touches.startY && swiper.translate <= swiper.maxTranslate() || pageY > touches.startY && swiper.translate >= swiper.minTranslate()) {
        data.isTouched = false;
        data.isMoved = false;
        return;
      }
    } else if (pageX < touches.startX && swiper.translate <= swiper.maxTranslate() || pageX > touches.startX && swiper.translate >= swiper.minTranslate()) {
      return;
    }
  }

  if (data.isTouchEvent && document.activeElement) {
    if (e.target === document.activeElement && (0, _dom2.default)(e.target).is(data.formElements)) {
      data.isMoved = true;
      swiper.allowClick = false;
      return;
    }
  }

  if (data.allowTouchCallbacks) {
    swiper.emit('touchMove', e);
  }

  if (e.targetTouches && e.targetTouches.length > 1) return;
  touches.currentX = pageX;
  touches.currentY = pageY;
  var diffX = touches.currentX - touches.startX;
  var diffY = touches.currentY - touches.startY;
  if (swiper.params.threshold && Math.sqrt(Math.pow(diffX, 2) + Math.pow(diffY, 2)) < swiper.params.threshold) return;

  if (typeof data.isScrolling === 'undefined') {
    var touchAngle;

    if (swiper.isHorizontal() && touches.currentY === touches.startY || swiper.isVertical() && touches.currentX === touches.startX) {
      data.isScrolling = false;
    } else {
      // eslint-disable-next-line
      if (diffX * diffX + diffY * diffY >= 25) {
        touchAngle = Math.atan2(Math.abs(diffY), Math.abs(diffX)) * 180 / Math.PI;
        data.isScrolling = swiper.isHorizontal() ? touchAngle > params.touchAngle : 90 - touchAngle > params.touchAngle;
      }
    }
  }

  if (data.isScrolling) {
    swiper.emit('touchMoveOpposite', e);
  }

  if (typeof data.startMoving === 'undefined') {
    if (touches.currentX !== touches.startX || touches.currentY !== touches.startY) {
      data.startMoving = true;
    }
  }

  if (data.isScrolling) {
    data.isTouched = false;
    return;
  }

  if (!data.startMoving) {
    return;
  }

  swiper.allowClick = false;

  if (!params.cssMode && e.cancelable) {
    e.preventDefault();
  }

  if (params.touchMoveStopPropagation && !params.nested) {
    e.stopPropagation();
  }

  if (!data.isMoved) {
    if (params.loop) {
      swiper.loopFix();
    }

    data.startTranslate = swiper.getTranslate();
    swiper.setTransition(0);

    if (swiper.animating) {
      swiper.$wrapperEl.trigger('webkitTransitionEnd transitionend');
    }

    data.allowMomentumBounce = false; // Grab Cursor

    if (params.grabCursor && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {
      swiper.setGrabCursor(true);
    }

    swiper.emit('sliderFirstMove', e);
  }

  swiper.emit('sliderMove', e);
  data.isMoved = true;
  var diff = swiper.isHorizontal() ? diffX : diffY;
  touches.diff = diff;
  diff *= params.touchRatio;
  if (rtl) diff = -diff;
  swiper.swipeDirection = diff > 0 ? 'prev' : 'next';
  data.currentTranslate = diff + data.startTranslate;
  var disableParentSwiper = true;
  var resistanceRatio = params.resistanceRatio;

  if (params.touchReleaseOnEdges) {
    resistanceRatio = 0;
  }

  if (diff > 0 && data.currentTranslate > swiper.minTranslate()) {
    disableParentSwiper = false;
    if (params.resistance) data.currentTranslate = swiper.minTranslate() - 1 + Math.pow(-swiper.minTranslate() + data.startTranslate + diff, resistanceRatio);
  } else if (diff < 0 && data.currentTranslate < swiper.maxTranslate()) {
    disableParentSwiper = false;
    if (params.resistance) data.currentTranslate = swiper.maxTranslate() + 1 - Math.pow(swiper.maxTranslate() - data.startTranslate - diff, resistanceRatio);
  }

  if (disableParentSwiper) {
    e.preventedByNestedSwiper = true;
  } // Directions locks


  if (!swiper.allowSlideNext && swiper.swipeDirection === 'next' && data.currentTranslate < data.startTranslate) {
    data.currentTranslate = data.startTranslate;
  }

  if (!swiper.allowSlidePrev && swiper.swipeDirection === 'prev' && data.currentTranslate > data.startTranslate) {
    data.currentTranslate = data.startTranslate;
  }

  if (!swiper.allowSlidePrev && !swiper.allowSlideNext) {
    data.currentTranslate = data.startTranslate;
  } // Threshold


  if (params.threshold > 0) {
    if (Math.abs(diff) > params.threshold || data.allowThresholdMove) {
      if (!data.allowThresholdMove) {
        data.allowThresholdMove = true;
        touches.startX = touches.currentX;
        touches.startY = touches.currentY;
        data.currentTranslate = data.startTranslate;
        touches.diff = swiper.isHorizontal() ? touches.currentX - touches.startX : touches.currentY - touches.startY;
        return;
      }
    } else {
      data.currentTranslate = data.startTranslate;
      return;
    }
  }

  if (!params.followFinger || params.cssMode) return; // Update active index in free mode

  if (params.freeMode || params.watchSlidesProgress || params.watchSlidesVisibility) {
    swiper.updateActiveIndex();
    swiper.updateSlidesClasses();
  }

  if (params.freeMode) {
    // Velocity
    if (data.velocities.length === 0) {
      data.velocities.push({
        position: touches[swiper.isHorizontal() ? 'startX' : 'startY'],
        time: data.touchStartTime
      });
    }

    data.velocities.push({
      position: touches[swiper.isHorizontal() ? 'currentX' : 'currentY'],
      time: (0, _utils.now)()
    });
  } // Update progress


  swiper.updateProgress(data.currentTranslate); // Update translate

  swiper.setTranslate(data.currentTranslate);
}

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = onTouchEnd;

var _utils = __webpack_require__(0);

function onTouchEnd(event) {
  var swiper = this;
  var data = swiper.touchEventsData;
  var params = swiper.params,
      touches = swiper.touches,
      rtl = swiper.rtlTranslate,
      $wrapperEl = swiper.$wrapperEl,
      slidesGrid = swiper.slidesGrid,
      snapGrid = swiper.snapGrid,
      enabled = swiper.enabled;
  if (!enabled) return;
  var e = event;
  if (e.originalEvent) e = e.originalEvent;

  if (data.allowTouchCallbacks) {
    swiper.emit('touchEnd', e);
  }

  data.allowTouchCallbacks = false;

  if (!data.isTouched) {
    if (data.isMoved && params.grabCursor) {
      swiper.setGrabCursor(false);
    }

    data.isMoved = false;
    data.startMoving = false;
    return;
  } // Return Grab Cursor


  if (params.grabCursor && data.isMoved && data.isTouched && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {
    swiper.setGrabCursor(false);
  } // Time diff


  var touchEndTime = (0, _utils.now)();
  var timeDiff = touchEndTime - data.touchStartTime; // Tap, doubleTap, Click

  if (swiper.allowClick) {
    swiper.updateClickedSlide(e);
    swiper.emit('tap click', e);

    if (timeDiff < 300 && touchEndTime - data.lastClickTime < 300) {
      swiper.emit('doubleTap doubleClick', e);
    }
  }

  data.lastClickTime = (0, _utils.now)();
  (0, _utils.nextTick)(function () {
    if (!swiper.destroyed) swiper.allowClick = true;
  });

  if (!data.isTouched || !data.isMoved || !swiper.swipeDirection || touches.diff === 0 || data.currentTranslate === data.startTranslate) {
    data.isTouched = false;
    data.isMoved = false;
    data.startMoving = false;
    return;
  }

  data.isTouched = false;
  data.isMoved = false;
  data.startMoving = false;
  var currentPos;

  if (params.followFinger) {
    currentPos = rtl ? swiper.translate : -swiper.translate;
  } else {
    currentPos = -data.currentTranslate;
  }

  if (params.cssMode) {
    return;
  }

  if (params.freeMode) {
    if (currentPos < -swiper.minTranslate()) {
      swiper.slideTo(swiper.activeIndex);
      return;
    }

    if (currentPos > -swiper.maxTranslate()) {
      if (swiper.slides.length < snapGrid.length) {
        swiper.slideTo(snapGrid.length - 1);
      } else {
        swiper.slideTo(swiper.slides.length - 1);
      }

      return;
    }

    if (params.freeModeMomentum) {
      if (data.velocities.length > 1) {
        var lastMoveEvent = data.velocities.pop();
        var velocityEvent = data.velocities.pop();
        var distance = lastMoveEvent.position - velocityEvent.position;
        var time = lastMoveEvent.time - velocityEvent.time;
        swiper.velocity = distance / time;
        swiper.velocity /= 2;

        if (Math.abs(swiper.velocity) < params.freeModeMinimumVelocity) {
          swiper.velocity = 0;
        } // this implies that the user stopped moving a finger then released.
        // There would be no events with distance zero, so the last event is stale.


        if (time > 150 || (0, _utils.now)() - lastMoveEvent.time > 300) {
          swiper.velocity = 0;
        }
      } else {
        swiper.velocity = 0;
      }

      swiper.velocity *= params.freeModeMomentumVelocityRatio;
      data.velocities.length = 0;
      var momentumDuration = 1000 * params.freeModeMomentumRatio;
      var momentumDistance = swiper.velocity * momentumDuration;
      var newPosition = swiper.translate + momentumDistance;
      if (rtl) newPosition = -newPosition;
      var doBounce = false;
      var afterBouncePosition;
      var bounceAmount = Math.abs(swiper.velocity) * 20 * params.freeModeMomentumBounceRatio;
      var needsLoopFix;

      if (newPosition < swiper.maxTranslate()) {
        if (params.freeModeMomentumBounce) {
          if (newPosition + swiper.maxTranslate() < -bounceAmount) {
            newPosition = swiper.maxTranslate() - bounceAmount;
          }

          afterBouncePosition = swiper.maxTranslate();
          doBounce = true;
          data.allowMomentumBounce = true;
        } else {
          newPosition = swiper.maxTranslate();
        }

        if (params.loop && params.centeredSlides) needsLoopFix = true;
      } else if (newPosition > swiper.minTranslate()) {
        if (params.freeModeMomentumBounce) {
          if (newPosition - swiper.minTranslate() > bounceAmount) {
            newPosition = swiper.minTranslate() + bounceAmount;
          }

          afterBouncePosition = swiper.minTranslate();
          doBounce = true;
          data.allowMomentumBounce = true;
        } else {
          newPosition = swiper.minTranslate();
        }

        if (params.loop && params.centeredSlides) needsLoopFix = true;
      } else if (params.freeModeSticky) {
        var nextSlide;

        for (var j = 0; j < snapGrid.length; j += 1) {
          if (snapGrid[j] > -newPosition) {
            nextSlide = j;
            break;
          }
        }

        if (Math.abs(snapGrid[nextSlide] - newPosition) < Math.abs(snapGrid[nextSlide - 1] - newPosition) || swiper.swipeDirection === 'next') {
          newPosition = snapGrid[nextSlide];
        } else {
          newPosition = snapGrid[nextSlide - 1];
        }

        newPosition = -newPosition;
      }

      if (needsLoopFix) {
        swiper.once('transitionEnd', function () {
          swiper.loopFix();
        });
      } // Fix duration


      if (swiper.velocity !== 0) {
        if (rtl) {
          momentumDuration = Math.abs((-newPosition - swiper.translate) / swiper.velocity);
        } else {
          momentumDuration = Math.abs((newPosition - swiper.translate) / swiper.velocity);
        }

        if (params.freeModeSticky) {
          // If freeModeSticky is active and the user ends a swipe with a slow-velocity
          // event, then durations can be 20+ seconds to slide one (or zero!) slides.
          // It's easy to see this when simulating touch with mouse events. To fix this,
          // limit single-slide swipes to the default slide duration. This also has the
          // nice side effect of matching slide speed if the user stopped moving before
          // lifting finger or mouse vs. moving slowly before lifting the finger/mouse.
          // For faster swipes, also apply limits (albeit higher ones).
          var moveDistance = Math.abs((rtl ? -newPosition : newPosition) - swiper.translate);
          var currentSlideSize = swiper.slidesSizesGrid[swiper.activeIndex];

          if (moveDistance < currentSlideSize) {
            momentumDuration = params.speed;
          } else if (moveDistance < 2 * currentSlideSize) {
            momentumDuration = params.speed * 1.5;
          } else {
            momentumDuration = params.speed * 2.5;
          }
        }
      } else if (params.freeModeSticky) {
        swiper.slideToClosest();
        return;
      }

      if (params.freeModeMomentumBounce && doBounce) {
        swiper.updateProgress(afterBouncePosition);
        swiper.setTransition(momentumDuration);
        swiper.setTranslate(newPosition);
        swiper.transitionStart(true, swiper.swipeDirection);
        swiper.animating = true;
        $wrapperEl.transitionEnd(function () {
          if (!swiper || swiper.destroyed || !data.allowMomentumBounce) return;
          swiper.emit('momentumBounce');
          swiper.setTransition(params.speed);
          setTimeout(function () {
            swiper.setTranslate(afterBouncePosition);
            $wrapperEl.transitionEnd(function () {
              if (!swiper || swiper.destroyed) return;
              swiper.transitionEnd();
            });
          }, 0);
        });
      } else if (swiper.velocity) {
        swiper.updateProgress(newPosition);
        swiper.setTransition(momentumDuration);
        swiper.setTranslate(newPosition);
        swiper.transitionStart(true, swiper.swipeDirection);

        if (!swiper.animating) {
          swiper.animating = true;
          $wrapperEl.transitionEnd(function () {
            if (!swiper || swiper.destroyed) return;
            swiper.transitionEnd();
          });
        }
      } else {
        swiper.emit('_freeModeNoMomentumRelease');
        swiper.updateProgress(newPosition);
      }

      swiper.updateActiveIndex();
      swiper.updateSlidesClasses();
    } else if (params.freeModeSticky) {
      swiper.slideToClosest();
      return;
    } else if (params.freeMode) {
      swiper.emit('_freeModeNoMomentumRelease');
    }

    if (!params.freeModeMomentum || timeDiff >= params.longSwipesMs) {
      swiper.updateProgress();
      swiper.updateActiveIndex();
      swiper.updateSlidesClasses();
    }

    return;
  } // Find current slide


  var stopIndex = 0;
  var groupSize = swiper.slidesSizesGrid[0];

  for (var i = 0; i < slidesGrid.length; i += i < params.slidesPerGroupSkip ? 1 : params.slidesPerGroup) {
    var _increment = i < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;

    if (typeof slidesGrid[i + _increment] !== 'undefined') {
      if (currentPos >= slidesGrid[i] && currentPos < slidesGrid[i + _increment]) {
        stopIndex = i;
        groupSize = slidesGrid[i + _increment] - slidesGrid[i];
      }
    } else if (currentPos >= slidesGrid[i]) {
      stopIndex = i;
      groupSize = slidesGrid[slidesGrid.length - 1] - slidesGrid[slidesGrid.length - 2];
    }
  } // Find current slide size


  var ratio = (currentPos - slidesGrid[stopIndex]) / groupSize;
  var increment = stopIndex < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;

  if (timeDiff > params.longSwipesMs) {
    // Long touches
    if (!params.longSwipes) {
      swiper.slideTo(swiper.activeIndex);
      return;
    }

    if (swiper.swipeDirection === 'next') {
      if (ratio >= params.longSwipesRatio) swiper.slideTo(stopIndex + increment);else swiper.slideTo(stopIndex);
    }

    if (swiper.swipeDirection === 'prev') {
      if (ratio > 1 - params.longSwipesRatio) swiper.slideTo(stopIndex + increment);else swiper.slideTo(stopIndex);
    }
  } else {
    // Short swipes
    if (!params.shortSwipes) {
      swiper.slideTo(swiper.activeIndex);
      return;
    }

    var isNavButtonTarget = swiper.navigation && (e.target === swiper.navigation.nextEl || e.target === swiper.navigation.prevEl);

    if (!isNavButtonTarget) {
      if (swiper.swipeDirection === 'next') {
        swiper.slideTo(stopIndex + increment);
      }

      if (swiper.swipeDirection === 'prev') {
        swiper.slideTo(stopIndex);
      }
    } else if (e.target === swiper.navigation.nextEl) {
      swiper.slideTo(stopIndex + increment);
    } else {
      swiper.slideTo(stopIndex);
    }
  }
}

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = onResize;
function onResize() {
  var swiper = this;
  var params = swiper.params,
      el = swiper.el;
  if (el && el.offsetWidth === 0) return; // Breakpoints

  if (params.breakpoints) {
    swiper.setBreakpoint();
  } // Save locks


  var allowSlideNext = swiper.allowSlideNext,
      allowSlidePrev = swiper.allowSlidePrev,
      snapGrid = swiper.snapGrid; // Disable locks on resize

  swiper.allowSlideNext = true;
  swiper.allowSlidePrev = true;
  swiper.updateSize();
  swiper.updateSlides();
  swiper.updateSlidesClasses();

  if ((params.slidesPerView === 'auto' || params.slidesPerView > 1) && swiper.isEnd && !swiper.isBeginning && !swiper.params.centeredSlides) {
    swiper.slideTo(swiper.slides.length - 1, 0, false, true);
  } else {
    swiper.slideTo(swiper.activeIndex, 0, false, true);
  }

  if (swiper.autoplay && swiper.autoplay.running && swiper.autoplay.paused) {
    swiper.autoplay.run();
  } // Return locks after resize


  swiper.allowSlidePrev = allowSlidePrev;
  swiper.allowSlideNext = allowSlideNext;

  if (swiper.params.watchOverflow && snapGrid !== swiper.snapGrid) {
    swiper.checkOverflow();
  }
}

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = onClick;
function onClick(e) {
  var swiper = this;
  if (!swiper.enabled) return;

  if (!swiper.allowClick) {
    if (swiper.params.preventClicks) e.preventDefault();

    if (swiper.params.preventClicksPropagation && swiper.animating) {
      e.stopPropagation();
      e.stopImmediatePropagation();
    }
  }
}

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = onScroll;
function onScroll() {
  var swiper = this;
  var wrapperEl = swiper.wrapperEl,
      rtlTranslate = swiper.rtlTranslate,
      enabled = swiper.enabled;
  if (!enabled) return;
  swiper.previousTranslate = swiper.translate;

  if (swiper.isHorizontal()) {
    if (rtlTranslate) {
      swiper.translate = wrapperEl.scrollWidth - wrapperEl.offsetWidth - wrapperEl.scrollLeft;
    } else {
      swiper.translate = -wrapperEl.scrollLeft;
    }
  } else {
    swiper.translate = -wrapperEl.scrollTop;
  } // eslint-disable-next-line


  if (swiper.translate === -0) swiper.translate = 0;
  swiper.updateActiveIndex();
  swiper.updateSlidesClasses();
  var newProgress;
  var translatesDiff = swiper.maxTranslate() - swiper.minTranslate();

  if (translatesDiff === 0) {
    newProgress = 0;
  } else {
    newProgress = (swiper.translate - swiper.minTranslate()) / translatesDiff;
  }

  if (newProgress !== swiper.progress) {
    swiper.updateProgress(rtlTranslate ? -swiper.translate : swiper.translate);
  }

  swiper.emit('setTranslate', swiper.translate, false);
}

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _setBreakpoint = __webpack_require__(103);

var _setBreakpoint2 = _interopRequireDefault(_setBreakpoint);

var _getBreakpoint = __webpack_require__(104);

var _getBreakpoint2 = _interopRequireDefault(_getBreakpoint);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  setBreakpoint: _setBreakpoint2.default,
  getBreakpoint: _getBreakpoint2.default
};

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = setBreakpoint;

var _utils = __webpack_require__(0);

function setBreakpoint() {
  var swiper = this;
  var activeIndex = swiper.activeIndex,
      initialized = swiper.initialized,
      _swiper$loopedSlides = swiper.loopedSlides,
      loopedSlides = _swiper$loopedSlides === void 0 ? 0 : _swiper$loopedSlides,
      params = swiper.params,
      $el = swiper.$el;
  var breakpoints = params.breakpoints;
  if (!breakpoints || breakpoints && Object.keys(breakpoints).length === 0) return; // Get breakpoint for window width and update parameters

  var breakpoint = swiper.getBreakpoint(breakpoints, swiper.params.breakpointsBase, swiper.el);
  if (!breakpoint || swiper.currentBreakpoint === breakpoint) return;
  var breakpointOnlyParams = breakpoint in breakpoints ? breakpoints[breakpoint] : undefined;

  if (breakpointOnlyParams) {
    ['slidesPerView', 'spaceBetween', 'slidesPerGroup', 'slidesPerGroupSkip', 'slidesPerColumn'].forEach(function (param) {
      var paramValue = breakpointOnlyParams[param];
      if (typeof paramValue === 'undefined') return;

      if (param === 'slidesPerView' && (paramValue === 'AUTO' || paramValue === 'auto')) {
        breakpointOnlyParams[param] = 'auto';
      } else if (param === 'slidesPerView') {
        breakpointOnlyParams[param] = parseFloat(paramValue);
      } else {
        breakpointOnlyParams[param] = parseInt(paramValue, 10);
      }
    });
  }

  var breakpointParams = breakpointOnlyParams || swiper.originalParams;
  var wasMultiRow = params.slidesPerColumn > 1;
  var isMultiRow = breakpointParams.slidesPerColumn > 1;
  var wasEnabled = params.enabled;

  if (wasMultiRow && !isMultiRow) {
    $el.removeClass(params.containerModifierClass + "multirow " + params.containerModifierClass + "multirow-column");
    swiper.emitContainerClasses();
  } else if (!wasMultiRow && isMultiRow) {
    $el.addClass(params.containerModifierClass + "multirow");

    if (breakpointParams.slidesPerColumnFill === 'column') {
      $el.addClass(params.containerModifierClass + "multirow-column");
    }

    swiper.emitContainerClasses();
  }

  var directionChanged = breakpointParams.direction && breakpointParams.direction !== params.direction;
  var needsReLoop = params.loop && (breakpointParams.slidesPerView !== params.slidesPerView || directionChanged);

  if (directionChanged && initialized) {
    swiper.changeDirection();
  }

  (0, _utils.extend)(swiper.params, breakpointParams);
  var isEnabled = swiper.params.enabled;
  (0, _utils.extend)(swiper, {
    allowTouchMove: swiper.params.allowTouchMove,
    allowSlideNext: swiper.params.allowSlideNext,
    allowSlidePrev: swiper.params.allowSlidePrev
  });

  if (wasEnabled && !isEnabled) {
    swiper.disable();
  } else if (!wasEnabled && isEnabled) {
    swiper.enable();
  }

  swiper.currentBreakpoint = breakpoint;
  swiper.emit('_beforeBreakpoint', breakpointParams);

  if (needsReLoop && initialized) {
    swiper.loopDestroy();
    swiper.loopCreate();
    swiper.updateSlides();
    swiper.slideTo(activeIndex - loopedSlides + swiper.loopedSlides, 0, false);
  }

  swiper.emit('breakpoint', breakpointParams);
}

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getBreakpoint;

var _ssrWindow = __webpack_require__(2);

function getBreakpoint(breakpoints, base, containerEl) {
  if (base === void 0) {
    base = 'window';
  }

  if (!breakpoints || base === 'container' && !containerEl) return undefined;
  var breakpoint = false;
  var window = (0, _ssrWindow.getWindow)();
  var currentWidth = base === 'window' ? window.innerWidth : containerEl.clientWidth;
  var currentHeight = base === 'window' ? window.innerHeight : containerEl.clientHeight;
  var points = Object.keys(breakpoints).map(function (point) {
    if (typeof point === 'string' && point.indexOf('@') === 0) {
      var minRatio = parseFloat(point.substr(1));
      var value = currentHeight * minRatio;
      return {
        value: value,
        point: point
      };
    }

    return {
      value: point,
      point: point
    };
  });
  points.sort(function (a, b) {
    return parseInt(a.value, 10) - parseInt(b.value, 10);
  });

  for (var i = 0; i < points.length; i += 1) {
    var _points$i = points[i],
        point = _points$i.point,
        value = _points$i.value;

    if (value <= currentWidth) {
      breakpoint = point;
    }
  }

  return breakpoint || 'max';
}

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _addClasses = __webpack_require__(106);

var _addClasses2 = _interopRequireDefault(_addClasses);

var _removeClasses = __webpack_require__(107);

var _removeClasses2 = _interopRequireDefault(_removeClasses);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  addClasses: _addClasses2.default,
  removeClasses: _removeClasses2.default
};

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = addClasses;
function prepareClasses(entries, prefix) {
  var resultClasses = [];
  entries.forEach(function (item) {
    if ((typeof item === 'undefined' ? 'undefined' : _typeof(item)) === 'object') {
      Object.keys(item).forEach(function (classNames) {
        if (item[classNames]) {
          resultClasses.push(prefix + classNames);
        }
      });
    } else if (typeof item === 'string') {
      resultClasses.push(prefix + item);
    }
  });
  return resultClasses;
}

function addClasses() {
  var swiper = this;
  var classNames = swiper.classNames,
      params = swiper.params,
      rtl = swiper.rtl,
      $el = swiper.$el,
      device = swiper.device,
      support = swiper.support; // prettier-ignore

  var suffixes = prepareClasses(['initialized', params.direction, {
    'pointer-events': support.pointerEvents && !support.touch
  }, {
    'free-mode': params.freeMode
  }, {
    'autoheight': params.autoHeight
  }, {
    'rtl': rtl
  }, {
    'multirow': params.slidesPerColumn > 1
  }, {
    'multirow-column': params.slidesPerColumn > 1 && params.slidesPerColumnFill === 'column'
  }, {
    'android': device.android
  }, {
    'ios': device.ios
  }, {
    'css-mode': params.cssMode
  }], params.containerModifierClass);
  classNames.push.apply(classNames, suffixes);
  $el.addClass([].concat(classNames).join(' '));
  swiper.emitContainerClasses();
}

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = removeClasses;
function removeClasses() {
  var swiper = this;
  var $el = swiper.$el,
      classNames = swiper.classNames;
  $el.removeClass(classNames.join(' '));
  swiper.emitContainerClasses();
}

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _loadImage = __webpack_require__(109);

var _loadImage2 = _interopRequireDefault(_loadImage);

var _preloadImages = __webpack_require__(110);

var _preloadImages2 = _interopRequireDefault(_preloadImages);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  loadImage: _loadImage2.default,
  preloadImages: _preloadImages2.default
};

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = loadImage;

var _ssrWindow = __webpack_require__(2);

var _dom = __webpack_require__(1);

var _dom2 = _interopRequireDefault(_dom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function loadImage(imageEl, src, srcset, sizes, checkForComplete, callback) {
  var window = (0, _ssrWindow.getWindow)();
  var image;

  function onReady() {
    if (callback) callback();
  }

  var isPicture = (0, _dom2.default)(imageEl).parent('picture')[0];

  if (!isPicture && (!imageEl.complete || !checkForComplete)) {
    if (src) {
      image = new window.Image();
      image.onload = onReady;
      image.onerror = onReady;

      if (sizes) {
        image.sizes = sizes;
      }

      if (srcset) {
        image.srcset = srcset;
      }

      if (src) {
        image.src = src;
      }
    } else {
      onReady();
    }
  } else {
    // image already loaded...
    onReady();
  }
}

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = preloadImages;
function preloadImages() {
  var swiper = this;
  swiper.imagesToLoad = swiper.$el.find('img');

  function onReady() {
    if (typeof swiper === 'undefined' || swiper === null || !swiper || swiper.destroyed) return;
    if (swiper.imagesLoaded !== undefined) swiper.imagesLoaded += 1;

    if (swiper.imagesLoaded === swiper.imagesToLoad.length) {
      if (swiper.params.updateOnImagesReady) swiper.update();
      swiper.emit('imagesReady');
    }
  }

  for (var i = 0; i < swiper.imagesToLoad.length; i += 1) {
    var imageEl = swiper.imagesToLoad[i];
    swiper.loadImage(imageEl, imageEl.currentSrc || imageEl.getAttribute('src'), imageEl.srcset || imageEl.getAttribute('srcset'), imageEl.sizes || imageEl.getAttribute('sizes'), true, onReady);
  }
}

/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
function checkOverflow() {
  var swiper = this;
  var params = swiper.params;
  var wasLocked = swiper.isLocked;
  var lastSlidePosition = swiper.slides.length > 0 && params.slidesOffsetBefore + params.spaceBetween * (swiper.slides.length - 1) + swiper.slides[0].offsetWidth * swiper.slides.length;

  if (params.slidesOffsetBefore && params.slidesOffsetAfter && lastSlidePosition) {
    swiper.isLocked = lastSlidePosition <= swiper.size;
  } else {
    swiper.isLocked = swiper.snapGrid.length === 1;
  }

  swiper.allowSlideNext = !swiper.isLocked;
  swiper.allowSlidePrev = !swiper.isLocked; // events

  if (wasLocked !== swiper.isLocked) swiper.emit(swiper.isLocked ? 'lock' : 'unlock');

  if (wasLocked && wasLocked !== swiper.isLocked) {
    swiper.isEnd = false;
    if (swiper.navigation) swiper.navigation.update();
  }
}

exports.default = {
  checkOverflow: checkOverflow
};

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  init: true,
  direction: 'horizontal',
  touchEventsTarget: 'container',
  initialSlide: 0,
  speed: 300,
  cssMode: false,
  updateOnWindowResize: true,
  resizeObserver: false,
  nested: false,
  createElements: false,
  enabled: true,
  // Overrides
  width: null,
  height: null,
  //
  preventInteractionOnTransition: false,
  // ssr
  userAgent: null,
  url: null,
  // To support iOS's swipe-to-go-back gesture (when being used in-app).
  edgeSwipeDetection: false,
  edgeSwipeThreshold: 20,
  // Free mode
  freeMode: false,
  freeModeMomentum: true,
  freeModeMomentumRatio: 1,
  freeModeMomentumBounce: true,
  freeModeMomentumBounceRatio: 1,
  freeModeMomentumVelocityRatio: 1,
  freeModeSticky: false,
  freeModeMinimumVelocity: 0.02,
  // Autoheight
  autoHeight: false,
  // Set wrapper width
  setWrapperSize: false,
  // Virtual Translate
  virtualTranslate: false,
  // Effects
  effect: 'slide',
  // 'slide' or 'fade' or 'cube' or 'coverflow' or 'flip'
  // Breakpoints
  breakpoints: undefined,
  breakpointsBase: 'window',
  // Slides grid
  spaceBetween: 0,
  slidesPerView: 1,
  slidesPerColumn: 1,
  slidesPerColumnFill: 'column',
  slidesPerGroup: 1,
  slidesPerGroupSkip: 0,
  centeredSlides: false,
  centeredSlidesBounds: false,
  slidesOffsetBefore: 0,
  // in px
  slidesOffsetAfter: 0,
  // in px
  normalizeSlideIndex: true,
  centerInsufficientSlides: false,
  // Disable swiper and hide navigation when container not overflow
  watchOverflow: false,
  // Round length
  roundLengths: false,
  // Touches
  touchRatio: 1,
  touchAngle: 45,
  simulateTouch: true,
  shortSwipes: true,
  longSwipes: true,
  longSwipesRatio: 0.5,
  longSwipesMs: 300,
  followFinger: true,
  allowTouchMove: true,
  threshold: 0,
  touchMoveStopPropagation: false,
  touchStartPreventDefault: true,
  touchStartForcePreventDefault: false,
  touchReleaseOnEdges: false,
  // Unique Navigation Elements
  uniqueNavElements: true,
  // Resistance
  resistance: true,
  resistanceRatio: 0.85,
  // Progress
  watchSlidesProgress: false,
  watchSlidesVisibility: false,
  // Cursor
  grabCursor: false,
  // Clicks
  preventClicks: true,
  preventClicksPropagation: true,
  slideToClickedSlide: false,
  // Images
  preloadImages: true,
  updateOnImagesReady: true,
  // loop
  loop: false,
  loopAdditionalSlides: 0,
  loopedSlides: null,
  loopFillGroupWithBlank: false,
  loopPreventsSlide: true,
  // Swiping/no swiping
  allowSlidePrev: true,
  allowSlideNext: true,
  swipeHandler: null,
  // '.swipe-handler',
  noSwiping: true,
  noSwipingClass: 'swiper-no-swiping',
  noSwipingSelector: null,
  // Passive Listeners
  passiveListeners: true,
  // NS
  containerModifierClass: 'swiper-container-',
  // NEW
  slideClass: 'swiper-slide',
  slideBlankClass: 'swiper-slide-invisible-blank',
  slideActiveClass: 'swiper-slide-active',
  slideDuplicateActiveClass: 'swiper-slide-duplicate-active',
  slideVisibleClass: 'swiper-slide-visible',
  slideDuplicateClass: 'swiper-slide-duplicate',
  slideNextClass: 'swiper-slide-next',
  slideDuplicateNextClass: 'swiper-slide-duplicate-next',
  slidePrevClass: 'swiper-slide-prev',
  slideDuplicatePrevClass: 'swiper-slide-duplicate-prev',
  wrapperClass: 'swiper-wrapper',
  // Callbacks
  runCallbacksOnInit: true,
  // Internals
  _emitClasses: false
};

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _dom = __webpack_require__(1);

var _dom2 = _interopRequireDefault(_dom);

var _utils = __webpack_require__(0);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }return target;
  };return _extends.apply(this, arguments);
}

var Virtual = {
  update: function update(force) {
    var swiper = this;
    var _swiper$params = swiper.params,
        slidesPerView = _swiper$params.slidesPerView,
        slidesPerGroup = _swiper$params.slidesPerGroup,
        centeredSlides = _swiper$params.centeredSlides;
    var _swiper$params$virtua = swiper.params.virtual,
        addSlidesBefore = _swiper$params$virtua.addSlidesBefore,
        addSlidesAfter = _swiper$params$virtua.addSlidesAfter;
    var _swiper$virtual = swiper.virtual,
        previousFrom = _swiper$virtual.from,
        previousTo = _swiper$virtual.to,
        slides = _swiper$virtual.slides,
        previousSlidesGrid = _swiper$virtual.slidesGrid,
        renderSlide = _swiper$virtual.renderSlide,
        previousOffset = _swiper$virtual.offset;
    swiper.updateActiveIndex();
    var activeIndex = swiper.activeIndex || 0;
    var offsetProp;
    if (swiper.rtlTranslate) offsetProp = 'right';else offsetProp = swiper.isHorizontal() ? 'left' : 'top';
    var slidesAfter;
    var slidesBefore;

    if (centeredSlides) {
      slidesAfter = Math.floor(slidesPerView / 2) + slidesPerGroup + addSlidesAfter;
      slidesBefore = Math.floor(slidesPerView / 2) + slidesPerGroup + addSlidesBefore;
    } else {
      slidesAfter = slidesPerView + (slidesPerGroup - 1) + addSlidesAfter;
      slidesBefore = slidesPerGroup + addSlidesBefore;
    }

    var from = Math.max((activeIndex || 0) - slidesBefore, 0);
    var to = Math.min((activeIndex || 0) + slidesAfter, slides.length - 1);
    var offset = (swiper.slidesGrid[from] || 0) - (swiper.slidesGrid[0] || 0);
    (0, _utils.extend)(swiper.virtual, {
      from: from,
      to: to,
      offset: offset,
      slidesGrid: swiper.slidesGrid
    });

    function onRendered() {
      swiper.updateSlides();
      swiper.updateProgress();
      swiper.updateSlidesClasses();

      if (swiper.lazy && swiper.params.lazy.enabled) {
        swiper.lazy.load();
      }
    }

    if (previousFrom === from && previousTo === to && !force) {
      if (swiper.slidesGrid !== previousSlidesGrid && offset !== previousOffset) {
        swiper.slides.css(offsetProp, offset + "px");
      }

      swiper.updateProgress();
      return;
    }

    if (swiper.params.virtual.renderExternal) {
      swiper.params.virtual.renderExternal.call(swiper, {
        offset: offset,
        from: from,
        to: to,
        slides: function getSlides() {
          var slidesToRender = [];

          for (var i = from; i <= to; i += 1) {
            slidesToRender.push(slides[i]);
          }

          return slidesToRender;
        }()
      });

      if (swiper.params.virtual.renderExternalUpdate) {
        onRendered();
      }

      return;
    }

    var prependIndexes = [];
    var appendIndexes = [];

    if (force) {
      swiper.$wrapperEl.find("." + swiper.params.slideClass).remove();
    } else {
      for (var i = previousFrom; i <= previousTo; i += 1) {
        if (i < from || i > to) {
          swiper.$wrapperEl.find("." + swiper.params.slideClass + "[data-swiper-slide-index=\"" + i + "\"]").remove();
        }
      }
    }

    for (var _i = 0; _i < slides.length; _i += 1) {
      if (_i >= from && _i <= to) {
        if (typeof previousTo === 'undefined' || force) {
          appendIndexes.push(_i);
        } else {
          if (_i > previousTo) appendIndexes.push(_i);
          if (_i < previousFrom) prependIndexes.push(_i);
        }
      }
    }

    appendIndexes.forEach(function (index) {
      swiper.$wrapperEl.append(renderSlide(slides[index], index));
    });
    prependIndexes.sort(function (a, b) {
      return b - a;
    }).forEach(function (index) {
      swiper.$wrapperEl.prepend(renderSlide(slides[index], index));
    });
    swiper.$wrapperEl.children('.swiper-slide').css(offsetProp, offset + "px");
    onRendered();
  },
  renderSlide: function renderSlide(slide, index) {
    var swiper = this;
    var params = swiper.params.virtual;

    if (params.cache && swiper.virtual.cache[index]) {
      return swiper.virtual.cache[index];
    }

    var $slideEl = params.renderSlide ? (0, _dom2.default)(params.renderSlide.call(swiper, slide, index)) : (0, _dom2.default)("<div class=\"" + swiper.params.slideClass + "\" data-swiper-slide-index=\"" + index + "\">" + slide + "</div>");
    if (!$slideEl.attr('data-swiper-slide-index')) $slideEl.attr('data-swiper-slide-index', index);
    if (params.cache) swiper.virtual.cache[index] = $slideEl;
    return $slideEl;
  },
  appendSlide: function appendSlide(slides) {
    var swiper = this;

    if ((typeof slides === 'undefined' ? 'undefined' : _typeof(slides)) === 'object' && 'length' in slides) {
      for (var i = 0; i < slides.length; i += 1) {
        if (slides[i]) swiper.virtual.slides.push(slides[i]);
      }
    } else {
      swiper.virtual.slides.push(slides);
    }

    swiper.virtual.update(true);
  },
  prependSlide: function prependSlide(slides) {
    var swiper = this;
    var activeIndex = swiper.activeIndex;
    var newActiveIndex = activeIndex + 1;
    var numberOfNewSlides = 1;

    if (Array.isArray(slides)) {
      for (var i = 0; i < slides.length; i += 1) {
        if (slides[i]) swiper.virtual.slides.unshift(slides[i]);
      }

      newActiveIndex = activeIndex + slides.length;
      numberOfNewSlides = slides.length;
    } else {
      swiper.virtual.slides.unshift(slides);
    }

    if (swiper.params.virtual.cache) {
      var cache = swiper.virtual.cache;
      var newCache = {};
      Object.keys(cache).forEach(function (cachedIndex) {
        var $cachedEl = cache[cachedIndex];
        var cachedElIndex = $cachedEl.attr('data-swiper-slide-index');

        if (cachedElIndex) {
          $cachedEl.attr('data-swiper-slide-index', parseInt(cachedElIndex, 10) + 1);
        }

        newCache[parseInt(cachedIndex, 10) + numberOfNewSlides] = $cachedEl;
      });
      swiper.virtual.cache = newCache;
    }

    swiper.virtual.update(true);
    swiper.slideTo(newActiveIndex, 0);
  },
  removeSlide: function removeSlide(slidesIndexes) {
    var swiper = this;
    if (typeof slidesIndexes === 'undefined' || slidesIndexes === null) return;
    var activeIndex = swiper.activeIndex;

    if (Array.isArray(slidesIndexes)) {
      for (var i = slidesIndexes.length - 1; i >= 0; i -= 1) {
        swiper.virtual.slides.splice(slidesIndexes[i], 1);

        if (swiper.params.virtual.cache) {
          delete swiper.virtual.cache[slidesIndexes[i]];
        }

        if (slidesIndexes[i] < activeIndex) activeIndex -= 1;
        activeIndex = Math.max(activeIndex, 0);
      }
    } else {
      swiper.virtual.slides.splice(slidesIndexes, 1);

      if (swiper.params.virtual.cache) {
        delete swiper.virtual.cache[slidesIndexes];
      }

      if (slidesIndexes < activeIndex) activeIndex -= 1;
      activeIndex = Math.max(activeIndex, 0);
    }

    swiper.virtual.update(true);
    swiper.slideTo(activeIndex, 0);
  },
  removeAllSlides: function removeAllSlides() {
    var swiper = this;
    swiper.virtual.slides = [];

    if (swiper.params.virtual.cache) {
      swiper.virtual.cache = {};
    }

    swiper.virtual.update(true);
    swiper.slideTo(0, 0);
  }
};
exports.default = {
  name: 'virtual',
  params: {
    virtual: {
      enabled: false,
      slides: [],
      cache: true,
      renderSlide: null,
      renderExternal: null,
      renderExternalUpdate: true,
      addSlidesBefore: 0,
      addSlidesAfter: 0
    }
  },
  create: function create() {
    var swiper = this;
    (0, _utils.bindModuleMethods)(swiper, {
      virtual: _extends({}, Virtual, {
        slides: swiper.params.virtual.slides,
        cache: {}
      })
    });
  },
  on: {
    beforeInit: function beforeInit(swiper) {
      if (!swiper.params.virtual.enabled) return;
      swiper.classNames.push(swiper.params.containerModifierClass + "virtual");
      var overwriteParams = {
        watchSlidesProgress: true
      };
      (0, _utils.extend)(swiper.params, overwriteParams);
      (0, _utils.extend)(swiper.originalParams, overwriteParams);

      if (!swiper.params.initialSlide) {
        swiper.virtual.update();
      }
    },
    setTranslate: function setTranslate(swiper) {
      if (!swiper.params.virtual.enabled) return;
      swiper.virtual.update();
    }
  }
};

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ssrWindow = __webpack_require__(2);

var _dom = __webpack_require__(1);

var _dom2 = _interopRequireDefault(_dom);

var _utils = __webpack_require__(0);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }return target;
  };return _extends.apply(this, arguments);
}

/* eslint-disable consistent-return */

var Keyboard = {
  handle: function handle(event) {
    var swiper = this;
    if (!swiper.enabled) return;
    var window = (0, _ssrWindow.getWindow)();
    var document = (0, _ssrWindow.getDocument)();
    var rtl = swiper.rtlTranslate;
    var e = event;
    if (e.originalEvent) e = e.originalEvent; // jquery fix

    var kc = e.keyCode || e.charCode;
    var pageUpDown = swiper.params.keyboard.pageUpDown;
    var isPageUp = pageUpDown && kc === 33;
    var isPageDown = pageUpDown && kc === 34;
    var isArrowLeft = kc === 37;
    var isArrowRight = kc === 39;
    var isArrowUp = kc === 38;
    var isArrowDown = kc === 40; // Directions locks

    if (!swiper.allowSlideNext && (swiper.isHorizontal() && isArrowRight || swiper.isVertical() && isArrowDown || isPageDown)) {
      return false;
    }

    if (!swiper.allowSlidePrev && (swiper.isHorizontal() && isArrowLeft || swiper.isVertical() && isArrowUp || isPageUp)) {
      return false;
    }

    if (e.shiftKey || e.altKey || e.ctrlKey || e.metaKey) {
      return undefined;
    }

    if (document.activeElement && document.activeElement.nodeName && (document.activeElement.nodeName.toLowerCase() === 'input' || document.activeElement.nodeName.toLowerCase() === 'textarea')) {
      return undefined;
    }

    if (swiper.params.keyboard.onlyInViewport && (isPageUp || isPageDown || isArrowLeft || isArrowRight || isArrowUp || isArrowDown)) {
      var inView = false; // Check that swiper should be inside of visible area of window

      if (swiper.$el.parents("." + swiper.params.slideClass).length > 0 && swiper.$el.parents("." + swiper.params.slideActiveClass).length === 0) {
        return undefined;
      }

      var $el = swiper.$el;
      var swiperWidth = $el[0].clientWidth;
      var swiperHeight = $el[0].clientHeight;
      var windowWidth = window.innerWidth;
      var windowHeight = window.innerHeight;
      var swiperOffset = swiper.$el.offset();
      if (rtl) swiperOffset.left -= swiper.$el[0].scrollLeft;
      var swiperCoord = [[swiperOffset.left, swiperOffset.top], [swiperOffset.left + swiperWidth, swiperOffset.top], [swiperOffset.left, swiperOffset.top + swiperHeight], [swiperOffset.left + swiperWidth, swiperOffset.top + swiperHeight]];

      for (var i = 0; i < swiperCoord.length; i += 1) {
        var point = swiperCoord[i];

        if (point[0] >= 0 && point[0] <= windowWidth && point[1] >= 0 && point[1] <= windowHeight) {
          if (point[0] === 0 && point[1] === 0) continue; // eslint-disable-line

          inView = true;
        }
      }

      if (!inView) return undefined;
    }

    if (swiper.isHorizontal()) {
      if (isPageUp || isPageDown || isArrowLeft || isArrowRight) {
        if (e.preventDefault) e.preventDefault();else e.returnValue = false;
      }

      if ((isPageDown || isArrowRight) && !rtl || (isPageUp || isArrowLeft) && rtl) swiper.slideNext();
      if ((isPageUp || isArrowLeft) && !rtl || (isPageDown || isArrowRight) && rtl) swiper.slidePrev();
    } else {
      if (isPageUp || isPageDown || isArrowUp || isArrowDown) {
        if (e.preventDefault) e.preventDefault();else e.returnValue = false;
      }

      if (isPageDown || isArrowDown) swiper.slideNext();
      if (isPageUp || isArrowUp) swiper.slidePrev();
    }

    swiper.emit('keyPress', kc);
    return undefined;
  },
  enable: function enable() {
    var swiper = this;
    var document = (0, _ssrWindow.getDocument)();
    if (swiper.keyboard.enabled) return;
    (0, _dom2.default)(document).on('keydown', swiper.keyboard.handle);
    swiper.keyboard.enabled = true;
  },
  disable: function disable() {
    var swiper = this;
    var document = (0, _ssrWindow.getDocument)();
    if (!swiper.keyboard.enabled) return;
    (0, _dom2.default)(document).off('keydown', swiper.keyboard.handle);
    swiper.keyboard.enabled = false;
  }
};
exports.default = {
  name: 'keyboard',
  params: {
    keyboard: {
      enabled: false,
      onlyInViewport: true,
      pageUpDown: true
    }
  },
  create: function create() {
    var swiper = this;
    (0, _utils.bindModuleMethods)(swiper, {
      keyboard: _extends({
        enabled: false
      }, Keyboard)
    });
  },
  on: {
    init: function init(swiper) {
      if (swiper.params.keyboard.enabled) {
        swiper.keyboard.enable();
      }
    },
    destroy: function destroy(swiper) {
      if (swiper.keyboard.enabled) {
        swiper.keyboard.disable();
      }
    }
  }
};

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ssrWindow = __webpack_require__(2);

var _dom = __webpack_require__(1);

var _dom2 = _interopRequireDefault(_dom);

var _utils = __webpack_require__(0);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function isEventSupported() {
  var document = (0, _ssrWindow.getDocument)();
  var eventName = 'onwheel';
  var isSupported = eventName in document;

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  if (!isSupported && document.implementation && document.implementation.hasFeature && // always returns true in newer browsers as per the standard.
  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
  document.implementation.hasFeature('', '') !== true) {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
  }

  return isSupported;
} /* eslint-disable consistent-return */


var Mousewheel = {
  lastScrollTime: (0, _utils.now)(),
  lastEventBeforeSnap: undefined,
  recentWheelEvents: [],
  event: function event() {
    var window = (0, _ssrWindow.getWindow)();
    if (window.navigator.userAgent.indexOf('firefox') > -1) return 'DOMMouseScroll';
    return isEventSupported() ? 'wheel' : 'mousewheel';
  },
  normalize: function normalize(e) {
    // Reasonable defaults
    var PIXEL_STEP = 10;
    var LINE_HEIGHT = 40;
    var PAGE_HEIGHT = 800;
    var sX = 0;
    var sY = 0; // spinX, spinY

    var pX = 0;
    var pY = 0; // pixelX, pixelY
    // Legacy

    if ('detail' in e) {
      sY = e.detail;
    }

    if ('wheelDelta' in e) {
      sY = -e.wheelDelta / 120;
    }

    if ('wheelDeltaY' in e) {
      sY = -e.wheelDeltaY / 120;
    }

    if ('wheelDeltaX' in e) {
      sX = -e.wheelDeltaX / 120;
    } // side scrolling on FF with DOMMouseScroll


    if ('axis' in e && e.axis === e.HORIZONTAL_AXIS) {
      sX = sY;
      sY = 0;
    }

    pX = sX * PIXEL_STEP;
    pY = sY * PIXEL_STEP;

    if ('deltaY' in e) {
      pY = e.deltaY;
    }

    if ('deltaX' in e) {
      pX = e.deltaX;
    }

    if (e.shiftKey && !pX) {
      // if user scrolls with shift he wants horizontal scroll
      pX = pY;
      pY = 0;
    }

    if ((pX || pY) && e.deltaMode) {
      if (e.deltaMode === 1) {
        // delta in LINE units
        pX *= LINE_HEIGHT;
        pY *= LINE_HEIGHT;
      } else {
        // delta in PAGE units
        pX *= PAGE_HEIGHT;
        pY *= PAGE_HEIGHT;
      }
    } // Fall-back if spin cannot be determined


    if (pX && !sX) {
      sX = pX < 1 ? -1 : 1;
    }

    if (pY && !sY) {
      sY = pY < 1 ? -1 : 1;
    }

    return {
      spinX: sX,
      spinY: sY,
      pixelX: pX,
      pixelY: pY
    };
  },
  handleMouseEnter: function handleMouseEnter() {
    var swiper = this;
    if (!swiper.enabled) return;
    swiper.mouseEntered = true;
  },
  handleMouseLeave: function handleMouseLeave() {
    var swiper = this;
    if (!swiper.enabled) return;
    swiper.mouseEntered = false;
  },
  handle: function handle(event) {
    var e = event;
    var disableParentSwiper = true;
    var swiper = this;
    if (!swiper.enabled) return;
    var params = swiper.params.mousewheel;

    if (swiper.params.cssMode) {
      e.preventDefault();
    }

    var target = swiper.$el;

    if (swiper.params.mousewheel.eventsTarget !== 'container') {
      target = (0, _dom2.default)(swiper.params.mousewheel.eventsTarget);
    }

    if (!swiper.mouseEntered && !target[0].contains(e.target) && !params.releaseOnEdges) return true;
    if (e.originalEvent) e = e.originalEvent; // jquery fix

    var delta = 0;
    var rtlFactor = swiper.rtlTranslate ? -1 : 1;
    var data = Mousewheel.normalize(e);

    if (params.forceToAxis) {
      if (swiper.isHorizontal()) {
        if (Math.abs(data.pixelX) > Math.abs(data.pixelY)) delta = -data.pixelX * rtlFactor;else return true;
      } else if (Math.abs(data.pixelY) > Math.abs(data.pixelX)) delta = -data.pixelY;else return true;
    } else {
      delta = Math.abs(data.pixelX) > Math.abs(data.pixelY) ? -data.pixelX * rtlFactor : -data.pixelY;
    }

    if (delta === 0) return true;
    if (params.invert) delta = -delta; // Get the scroll positions

    var positions = swiper.getTranslate() + delta * params.sensitivity;
    if (positions >= swiper.minTranslate()) positions = swiper.minTranslate();
    if (positions <= swiper.maxTranslate()) positions = swiper.maxTranslate(); // When loop is true:
    //     the disableParentSwiper will be true.
    // When loop is false:
    //     if the scroll positions is not on edge,
    //     then the disableParentSwiper will be true.
    //     if the scroll on edge positions,
    //     then the disableParentSwiper will be false.

    disableParentSwiper = swiper.params.loop ? true : !(positions === swiper.minTranslate() || positions === swiper.maxTranslate());
    if (disableParentSwiper && swiper.params.nested) e.stopPropagation();

    if (!swiper.params.freeMode) {
      // Register the new event in a variable which stores the relevant data
      var newEvent = {
        time: (0, _utils.now)(),
        delta: Math.abs(delta),
        direction: Math.sign(delta),
        raw: event
      }; // Keep the most recent events

      var recentWheelEvents = swiper.mousewheel.recentWheelEvents;

      if (recentWheelEvents.length >= 2) {
        recentWheelEvents.shift(); // only store the last N events
      }

      var prevEvent = recentWheelEvents.length ? recentWheelEvents[recentWheelEvents.length - 1] : undefined;
      recentWheelEvents.push(newEvent); // If there is at least one previous recorded event:
      //   If direction has changed or
      //   if the scroll is quicker than the previous one:
      //     Animate the slider.
      // Else (this is the first time the wheel is moved):
      //     Animate the slider.

      if (prevEvent) {
        if (newEvent.direction !== prevEvent.direction || newEvent.delta > prevEvent.delta || newEvent.time > prevEvent.time + 150) {
          swiper.mousewheel.animateSlider(newEvent);
        }
      } else {
        swiper.mousewheel.animateSlider(newEvent);
      } // If it's time to release the scroll:
      //   Return now so you don't hit the preventDefault.


      if (swiper.mousewheel.releaseScroll(newEvent)) {
        return true;
      }
    } else {
      // Freemode or scrollContainer:
      // If we recently snapped after a momentum scroll, then ignore wheel events
      // to give time for the deceleration to finish. Stop ignoring after 500 msecs
      // or if it's a new scroll (larger delta or inverse sign as last event before
      // an end-of-momentum snap).
      var _newEvent = {
        time: (0, _utils.now)(),
        delta: Math.abs(delta),
        direction: Math.sign(delta)
      };
      var lastEventBeforeSnap = swiper.mousewheel.lastEventBeforeSnap;
      var ignoreWheelEvents = lastEventBeforeSnap && _newEvent.time < lastEventBeforeSnap.time + 500 && _newEvent.delta <= lastEventBeforeSnap.delta && _newEvent.direction === lastEventBeforeSnap.direction;

      if (!ignoreWheelEvents) {
        swiper.mousewheel.lastEventBeforeSnap = undefined;

        if (swiper.params.loop) {
          swiper.loopFix();
        }

        var position = swiper.getTranslate() + delta * params.sensitivity;
        var wasBeginning = swiper.isBeginning;
        var wasEnd = swiper.isEnd;
        if (position >= swiper.minTranslate()) position = swiper.minTranslate();
        if (position <= swiper.maxTranslate()) position = swiper.maxTranslate();
        swiper.setTransition(0);
        swiper.setTranslate(position);
        swiper.updateProgress();
        swiper.updateActiveIndex();
        swiper.updateSlidesClasses();

        if (!wasBeginning && swiper.isBeginning || !wasEnd && swiper.isEnd) {
          swiper.updateSlidesClasses();
        }

        if (swiper.params.freeModeSticky) {
          // When wheel scrolling starts with sticky (aka snap) enabled, then detect
          // the end of a momentum scroll by storing recent (N=15?) wheel events.
          // 1. do all N events have decreasing or same (absolute value) delta?
          // 2. did all N events arrive in the last M (M=500?) msecs?
          // 3. does the earliest event have an (absolute value) delta that's
          //    at least P (P=1?) larger than the most recent event's delta?
          // 4. does the latest event have a delta that's smaller than Q (Q=6?) pixels?
          // If 1-4 are "yes" then we're near the end of a momentum scroll deceleration.
          // Snap immediately and ignore remaining wheel events in this scroll.
          // See comment above for "remaining wheel events in this scroll" determination.
          // If 1-4 aren't satisfied, then wait to snap until 500ms after the last event.
          clearTimeout(swiper.mousewheel.timeout);
          swiper.mousewheel.timeout = undefined;
          var _recentWheelEvents = swiper.mousewheel.recentWheelEvents;

          if (_recentWheelEvents.length >= 15) {
            _recentWheelEvents.shift(); // only store the last N events
          }

          var _prevEvent = _recentWheelEvents.length ? _recentWheelEvents[_recentWheelEvents.length - 1] : undefined;

          var firstEvent = _recentWheelEvents[0];

          _recentWheelEvents.push(_newEvent);

          if (_prevEvent && (_newEvent.delta > _prevEvent.delta || _newEvent.direction !== _prevEvent.direction)) {
            // Increasing or reverse-sign delta means the user started scrolling again. Clear the wheel event log.
            _recentWheelEvents.splice(0);
          } else if (_recentWheelEvents.length >= 15 && _newEvent.time - firstEvent.time < 500 && firstEvent.delta - _newEvent.delta >= 1 && _newEvent.delta <= 6) {
            // We're at the end of the deceleration of a momentum scroll, so there's no need
            // to wait for more events. Snap ASAP on the next tick.
            // Also, because there's some remaining momentum we'll bias the snap in the
            // direction of the ongoing scroll because it's better UX for the scroll to snap
            // in the same direction as the scroll instead of reversing to snap.  Therefore,
            // if it's already scrolled more than 20% in the current direction, keep going.
            var snapToThreshold = delta > 0 ? 0.8 : 0.2;
            swiper.mousewheel.lastEventBeforeSnap = _newEvent;

            _recentWheelEvents.splice(0);

            swiper.mousewheel.timeout = (0, _utils.nextTick)(function () {
              swiper.slideToClosest(swiper.params.speed, true, undefined, snapToThreshold);
            }, 0); // no delay; move on next tick
          }

          if (!swiper.mousewheel.timeout) {
            // if we get here, then we haven't detected the end of a momentum scroll, so
            // we'll consider a scroll "complete" when there haven't been any wheel events
            // for 500ms.
            swiper.mousewheel.timeout = (0, _utils.nextTick)(function () {
              var snapToThreshold = 0.5;
              swiper.mousewheel.lastEventBeforeSnap = _newEvent;

              _recentWheelEvents.splice(0);

              swiper.slideToClosest(swiper.params.speed, true, undefined, snapToThreshold);
            }, 500);
          }
        } // Emit event


        if (!ignoreWheelEvents) swiper.emit('scroll', e); // Stop autoplay

        if (swiper.params.autoplay && swiper.params.autoplayDisableOnInteraction) swiper.autoplay.stop(); // Return page scroll on edge positions

        if (position === swiper.minTranslate() || position === swiper.maxTranslate()) return true;
      }
    }

    if (e.preventDefault) e.preventDefault();else e.returnValue = false;
    return false;
  },
  animateSlider: function animateSlider(newEvent) {
    var swiper = this;
    var window = (0, _ssrWindow.getWindow)();

    if (this.params.mousewheel.thresholdDelta && newEvent.delta < this.params.mousewheel.thresholdDelta) {
      // Prevent if delta of wheel scroll delta is below configured threshold
      return false;
    }

    if (this.params.mousewheel.thresholdTime && (0, _utils.now)() - swiper.mousewheel.lastScrollTime < this.params.mousewheel.thresholdTime) {
      // Prevent if time between scrolls is below configured threshold
      return false;
    } // If the movement is NOT big enough and
    // if the last time the user scrolled was too close to the current one (avoid continuously triggering the slider):
    //   Don't go any further (avoid insignificant scroll movement).


    if (newEvent.delta >= 6 && (0, _utils.now)() - swiper.mousewheel.lastScrollTime < 60) {
      // Return false as a default
      return true;
    } // If user is scrolling towards the end:
    //   If the slider hasn't hit the latest slide or
    //   if the slider is a loop and
    //   if the slider isn't moving right now:
    //     Go to next slide and
    //     emit a scroll event.
    // Else (the user is scrolling towards the beginning) and
    // if the slider hasn't hit the first slide or
    // if the slider is a loop and
    // if the slider isn't moving right now:
    //   Go to prev slide and
    //   emit a scroll event.


    if (newEvent.direction < 0) {
      if ((!swiper.isEnd || swiper.params.loop) && !swiper.animating) {
        swiper.slideNext();
        swiper.emit('scroll', newEvent.raw);
      }
    } else if ((!swiper.isBeginning || swiper.params.loop) && !swiper.animating) {
      swiper.slidePrev();
      swiper.emit('scroll', newEvent.raw);
    } // If you got here is because an animation has been triggered so store the current time


    swiper.mousewheel.lastScrollTime = new window.Date().getTime(); // Return false as a default

    return false;
  },
  releaseScroll: function releaseScroll(newEvent) {
    var swiper = this;
    var params = swiper.params.mousewheel;

    if (newEvent.direction < 0) {
      if (swiper.isEnd && !swiper.params.loop && params.releaseOnEdges) {
        // Return true to animate scroll on edges
        return true;
      }
    } else if (swiper.isBeginning && !swiper.params.loop && params.releaseOnEdges) {
      // Return true to animate scroll on edges
      return true;
    }

    return false;
  },
  enable: function enable() {
    var swiper = this;
    var event = Mousewheel.event();

    if (swiper.params.cssMode) {
      swiper.wrapperEl.removeEventListener(event, swiper.mousewheel.handle);
      return true;
    }

    if (!event) return false;
    if (swiper.mousewheel.enabled) return false;
    var target = swiper.$el;

    if (swiper.params.mousewheel.eventsTarget !== 'container') {
      target = (0, _dom2.default)(swiper.params.mousewheel.eventsTarget);
    }

    target.on('mouseenter', swiper.mousewheel.handleMouseEnter);
    target.on('mouseleave', swiper.mousewheel.handleMouseLeave);
    target.on(event, swiper.mousewheel.handle);
    swiper.mousewheel.enabled = true;
    return true;
  },
  disable: function disable() {
    var swiper = this;
    var event = Mousewheel.event();

    if (swiper.params.cssMode) {
      swiper.wrapperEl.addEventListener(event, swiper.mousewheel.handle);
      return true;
    }

    if (!event) return false;
    if (!swiper.mousewheel.enabled) return false;
    var target = swiper.$el;

    if (swiper.params.mousewheel.eventsTarget !== 'container') {
      target = (0, _dom2.default)(swiper.params.mousewheel.eventsTarget);
    }

    target.off(event, swiper.mousewheel.handle);
    swiper.mousewheel.enabled = false;
    return true;
  }
};
exports.default = {
  name: 'mousewheel',
  params: {
    mousewheel: {
      enabled: false,
      releaseOnEdges: false,
      invert: false,
      forceToAxis: false,
      sensitivity: 1,
      eventsTarget: 'container',
      thresholdDelta: null,
      thresholdTime: null
    }
  },
  create: function create() {
    var swiper = this;
    (0, _utils.bindModuleMethods)(swiper, {
      mousewheel: {
        enabled: false,
        lastScrollTime: (0, _utils.now)(),
        lastEventBeforeSnap: undefined,
        recentWheelEvents: [],
        enable: Mousewheel.enable,
        disable: Mousewheel.disable,
        handle: Mousewheel.handle,
        handleMouseEnter: Mousewheel.handleMouseEnter,
        handleMouseLeave: Mousewheel.handleMouseLeave,
        animateSlider: Mousewheel.animateSlider,
        releaseScroll: Mousewheel.releaseScroll
      }
    });
  },
  on: {
    init: function init(swiper) {
      if (!swiper.params.mousewheel.enabled && swiper.params.cssMode) {
        swiper.mousewheel.disable();
      }

      if (swiper.params.mousewheel.enabled) swiper.mousewheel.enable();
    },
    destroy: function destroy(swiper) {
      if (swiper.params.cssMode) {
        swiper.mousewheel.enable();
      }

      if (swiper.mousewheel.enabled) swiper.mousewheel.disable();
    }
  }
};

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _dom = __webpack_require__(1);

var _dom2 = _interopRequireDefault(_dom);

var _utils = __webpack_require__(0);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }return target;
  };return _extends.apply(this, arguments);
}

var Navigation = {
  toggleEl: function toggleEl($el, disabled) {
    $el[disabled ? 'addClass' : 'removeClass'](this.params.navigation.disabledClass);
    if ($el[0] && $el[0].tagName === 'BUTTON') $el[0].disabled = disabled;
  },
  update: function update() {
    // Update Navigation Buttons
    var swiper = this;
    var params = swiper.params.navigation;
    var toggleEl = swiper.navigation.toggleEl;
    if (swiper.params.loop) return;
    var _swiper$navigation = swiper.navigation,
        $nextEl = _swiper$navigation.$nextEl,
        $prevEl = _swiper$navigation.$prevEl;

    if ($prevEl && $prevEl.length > 0) {
      if (swiper.isBeginning) {
        toggleEl($prevEl, true);
      } else {
        toggleEl($prevEl, false);
      }

      if (swiper.params.watchOverflow && swiper.enabled) {
        $prevEl[swiper.isLocked ? 'addClass' : 'removeClass'](params.lockClass);
      }
    }

    if ($nextEl && $nextEl.length > 0) {
      if (swiper.isEnd) {
        toggleEl($nextEl, true);
      } else {
        toggleEl($nextEl, false);
      }

      if (swiper.params.watchOverflow && swiper.enabled) {
        $nextEl[swiper.isLocked ? 'addClass' : 'removeClass'](params.lockClass);
      }
    }
  },
  onPrevClick: function onPrevClick(e) {
    var swiper = this;
    e.preventDefault();
    if (swiper.isBeginning && !swiper.params.loop) return;
    swiper.slidePrev();
  },
  onNextClick: function onNextClick(e) {
    var swiper = this;
    e.preventDefault();
    if (swiper.isEnd && !swiper.params.loop) return;
    swiper.slideNext();
  },
  init: function init() {
    var swiper = this;
    var params = swiper.params.navigation;
    swiper.params.navigation = (0, _utils.createElementIfNotDefined)(swiper.$el, swiper.params.navigation, swiper.params.createElements, {
      nextEl: 'swiper-button-next',
      prevEl: 'swiper-button-prev'
    });
    if (!(params.nextEl || params.prevEl)) return;
    var $nextEl;
    var $prevEl;

    if (params.nextEl) {
      $nextEl = (0, _dom2.default)(params.nextEl);

      if (swiper.params.uniqueNavElements && typeof params.nextEl === 'string' && $nextEl.length > 1 && swiper.$el.find(params.nextEl).length === 1) {
        $nextEl = swiper.$el.find(params.nextEl);
      }
    }

    if (params.prevEl) {
      $prevEl = (0, _dom2.default)(params.prevEl);

      if (swiper.params.uniqueNavElements && typeof params.prevEl === 'string' && $prevEl.length > 1 && swiper.$el.find(params.prevEl).length === 1) {
        $prevEl = swiper.$el.find(params.prevEl);
      }
    }

    if ($nextEl && $nextEl.length > 0) {
      $nextEl.on('click', swiper.navigation.onNextClick);
    }

    if ($prevEl && $prevEl.length > 0) {
      $prevEl.on('click', swiper.navigation.onPrevClick);
    }

    (0, _utils.extend)(swiper.navigation, {
      $nextEl: $nextEl,
      nextEl: $nextEl && $nextEl[0],
      $prevEl: $prevEl,
      prevEl: $prevEl && $prevEl[0]
    });

    if (!swiper.enabled) {
      if ($nextEl) $nextEl.addClass(params.lockClass);
      if ($prevEl) $prevEl.addClass(params.lockClass);
    }
  },
  destroy: function destroy() {
    var swiper = this;
    var _swiper$navigation2 = swiper.navigation,
        $nextEl = _swiper$navigation2.$nextEl,
        $prevEl = _swiper$navigation2.$prevEl;

    if ($nextEl && $nextEl.length) {
      $nextEl.off('click', swiper.navigation.onNextClick);
      $nextEl.removeClass(swiper.params.navigation.disabledClass);
    }

    if ($prevEl && $prevEl.length) {
      $prevEl.off('click', swiper.navigation.onPrevClick);
      $prevEl.removeClass(swiper.params.navigation.disabledClass);
    }
  }
};
exports.default = {
  name: 'navigation',
  params: {
    navigation: {
      nextEl: null,
      prevEl: null,
      hideOnClick: false,
      disabledClass: 'swiper-button-disabled',
      hiddenClass: 'swiper-button-hidden',
      lockClass: 'swiper-button-lock'
    }
  },
  create: function create() {
    var swiper = this;
    (0, _utils.bindModuleMethods)(swiper, {
      navigation: _extends({}, Navigation)
    });
  },
  on: {
    init: function init(swiper) {
      swiper.navigation.init();
      swiper.navigation.update();
    },
    toEdge: function toEdge(swiper) {
      swiper.navigation.update();
    },
    fromEdge: function fromEdge(swiper) {
      swiper.navigation.update();
    },
    destroy: function destroy(swiper) {
      swiper.navigation.destroy();
    },
    'enable disable': function enableDisable(swiper) {
      var _swiper$navigation3 = swiper.navigation,
          $nextEl = _swiper$navigation3.$nextEl,
          $prevEl = _swiper$navigation3.$prevEl;

      if ($nextEl) {
        $nextEl[swiper.enabled ? 'removeClass' : 'addClass'](swiper.params.navigation.lockClass);
      }

      if ($prevEl) {
        $prevEl[swiper.enabled ? 'removeClass' : 'addClass'](swiper.params.navigation.lockClass);
      }
    },
    click: function click(swiper, e) {
      var _swiper$navigation4 = swiper.navigation,
          $nextEl = _swiper$navigation4.$nextEl,
          $prevEl = _swiper$navigation4.$prevEl;
      var targetEl = e.target;

      if (swiper.params.navigation.hideOnClick && !(0, _dom2.default)(targetEl).is($prevEl) && !(0, _dom2.default)(targetEl).is($nextEl)) {
        if (swiper.pagination && swiper.params.pagination && swiper.params.pagination.clickable && (swiper.pagination.el === targetEl || swiper.pagination.el.contains(targetEl))) return;
        var isHidden;

        if ($nextEl) {
          isHidden = $nextEl.hasClass(swiper.params.navigation.hiddenClass);
        } else if ($prevEl) {
          isHidden = $prevEl.hasClass(swiper.params.navigation.hiddenClass);
        }

        if (isHidden === true) {
          swiper.emit('navigationShow');
        } else {
          swiper.emit('navigationHide');
        }

        if ($nextEl) {
          $nextEl.toggleClass(swiper.params.navigation.hiddenClass);
        }

        if ($prevEl) {
          $prevEl.toggleClass(swiper.params.navigation.hiddenClass);
        }
      }
    }
  }
};

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _dom = __webpack_require__(1);

var _dom2 = _interopRequireDefault(_dom);

var _utils = __webpack_require__(0);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }return target;
  };return _extends.apply(this, arguments);
}

var Pagination = {
  update: function update() {
    // Render || Update Pagination bullets/items
    var swiper = this;
    var rtl = swiper.rtl;
    var params = swiper.params.pagination;
    if (!params.el || !swiper.pagination.el || !swiper.pagination.$el || swiper.pagination.$el.length === 0) return;
    var slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.slides.length;
    var $el = swiper.pagination.$el; // Current/Total

    var current;
    var total = swiper.params.loop ? Math.ceil((slidesLength - swiper.loopedSlides * 2) / swiper.params.slidesPerGroup) : swiper.snapGrid.length;

    if (swiper.params.loop) {
      current = Math.ceil((swiper.activeIndex - swiper.loopedSlides) / swiper.params.slidesPerGroup);

      if (current > slidesLength - 1 - swiper.loopedSlides * 2) {
        current -= slidesLength - swiper.loopedSlides * 2;
      }

      if (current > total - 1) current -= total;
      if (current < 0 && swiper.params.paginationType !== 'bullets') current = total + current;
    } else if (typeof swiper.snapIndex !== 'undefined') {
      current = swiper.snapIndex;
    } else {
      current = swiper.activeIndex || 0;
    } // Types


    if (params.type === 'bullets' && swiper.pagination.bullets && swiper.pagination.bullets.length > 0) {
      var bullets = swiper.pagination.bullets;
      var firstIndex;
      var lastIndex;
      var midIndex;

      if (params.dynamicBullets) {
        swiper.pagination.bulletSize = bullets.eq(0)[swiper.isHorizontal() ? 'outerWidth' : 'outerHeight'](true);
        $el.css(swiper.isHorizontal() ? 'width' : 'height', swiper.pagination.bulletSize * (params.dynamicMainBullets + 4) + "px");

        if (params.dynamicMainBullets > 1 && swiper.previousIndex !== undefined) {
          swiper.pagination.dynamicBulletIndex += current - swiper.previousIndex;

          if (swiper.pagination.dynamicBulletIndex > params.dynamicMainBullets - 1) {
            swiper.pagination.dynamicBulletIndex = params.dynamicMainBullets - 1;
          } else if (swiper.pagination.dynamicBulletIndex < 0) {
            swiper.pagination.dynamicBulletIndex = 0;
          }
        }

        firstIndex = current - swiper.pagination.dynamicBulletIndex;
        lastIndex = firstIndex + (Math.min(bullets.length, params.dynamicMainBullets) - 1);
        midIndex = (lastIndex + firstIndex) / 2;
      }

      bullets.removeClass(params.bulletActiveClass + " " + params.bulletActiveClass + "-next " + params.bulletActiveClass + "-next-next " + params.bulletActiveClass + "-prev " + params.bulletActiveClass + "-prev-prev " + params.bulletActiveClass + "-main");

      if ($el.length > 1) {
        bullets.each(function (bullet) {
          var $bullet = (0, _dom2.default)(bullet);
          var bulletIndex = $bullet.index();

          if (bulletIndex === current) {
            $bullet.addClass(params.bulletActiveClass);
          }

          if (params.dynamicBullets) {
            if (bulletIndex >= firstIndex && bulletIndex <= lastIndex) {
              $bullet.addClass(params.bulletActiveClass + "-main");
            }

            if (bulletIndex === firstIndex) {
              $bullet.prev().addClass(params.bulletActiveClass + "-prev").prev().addClass(params.bulletActiveClass + "-prev-prev");
            }

            if (bulletIndex === lastIndex) {
              $bullet.next().addClass(params.bulletActiveClass + "-next").next().addClass(params.bulletActiveClass + "-next-next");
            }
          }
        });
      } else {
        var $bullet = bullets.eq(current);
        var bulletIndex = $bullet.index();
        $bullet.addClass(params.bulletActiveClass);

        if (params.dynamicBullets) {
          var $firstDisplayedBullet = bullets.eq(firstIndex);
          var $lastDisplayedBullet = bullets.eq(lastIndex);

          for (var i = firstIndex; i <= lastIndex; i += 1) {
            bullets.eq(i).addClass(params.bulletActiveClass + "-main");
          }

          if (swiper.params.loop) {
            if (bulletIndex >= bullets.length - params.dynamicMainBullets) {
              for (var _i = params.dynamicMainBullets; _i >= 0; _i -= 1) {
                bullets.eq(bullets.length - _i).addClass(params.bulletActiveClass + "-main");
              }

              bullets.eq(bullets.length - params.dynamicMainBullets - 1).addClass(params.bulletActiveClass + "-prev");
            } else {
              $firstDisplayedBullet.prev().addClass(params.bulletActiveClass + "-prev").prev().addClass(params.bulletActiveClass + "-prev-prev");
              $lastDisplayedBullet.next().addClass(params.bulletActiveClass + "-next").next().addClass(params.bulletActiveClass + "-next-next");
            }
          } else {
            $firstDisplayedBullet.prev().addClass(params.bulletActiveClass + "-prev").prev().addClass(params.bulletActiveClass + "-prev-prev");
            $lastDisplayedBullet.next().addClass(params.bulletActiveClass + "-next").next().addClass(params.bulletActiveClass + "-next-next");
          }
        }
      }

      if (params.dynamicBullets) {
        var dynamicBulletsLength = Math.min(bullets.length, params.dynamicMainBullets + 4);
        var bulletsOffset = (swiper.pagination.bulletSize * dynamicBulletsLength - swiper.pagination.bulletSize) / 2 - midIndex * swiper.pagination.bulletSize;
        var offsetProp = rtl ? 'right' : 'left';
        bullets.css(swiper.isHorizontal() ? offsetProp : 'top', bulletsOffset + "px");
      }
    }

    if (params.type === 'fraction') {
      $el.find((0, _utils.classesToSelector)(params.currentClass)).text(params.formatFractionCurrent(current + 1));
      $el.find((0, _utils.classesToSelector)(params.totalClass)).text(params.formatFractionTotal(total));
    }

    if (params.type === 'progressbar') {
      var progressbarDirection;

      if (params.progressbarOpposite) {
        progressbarDirection = swiper.isHorizontal() ? 'vertical' : 'horizontal';
      } else {
        progressbarDirection = swiper.isHorizontal() ? 'horizontal' : 'vertical';
      }

      var scale = (current + 1) / total;
      var scaleX = 1;
      var scaleY = 1;

      if (progressbarDirection === 'horizontal') {
        scaleX = scale;
      } else {
        scaleY = scale;
      }

      $el.find((0, _utils.classesToSelector)(params.progressbarFillClass)).transform("translate3d(0,0,0) scaleX(" + scaleX + ") scaleY(" + scaleY + ")").transition(swiper.params.speed);
    }

    if (params.type === 'custom' && params.renderCustom) {
      $el.html(params.renderCustom(swiper, current + 1, total));
      swiper.emit('paginationRender', $el[0]);
    } else {
      swiper.emit('paginationUpdate', $el[0]);
    }

    if (swiper.params.watchOverflow && swiper.enabled) {
      $el[swiper.isLocked ? 'addClass' : 'removeClass'](params.lockClass);
    }
  },
  render: function render() {
    // Render Container
    var swiper = this;
    var params = swiper.params.pagination;
    if (!params.el || !swiper.pagination.el || !swiper.pagination.$el || swiper.pagination.$el.length === 0) return;
    var slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.slides.length;
    var $el = swiper.pagination.$el;
    var paginationHTML = '';

    if (params.type === 'bullets') {
      var numberOfBullets = swiper.params.loop ? Math.ceil((slidesLength - swiper.loopedSlides * 2) / swiper.params.slidesPerGroup) : swiper.snapGrid.length;

      if (swiper.params.freeMode && !swiper.params.loop && numberOfBullets > slidesLength) {
        numberOfBullets = slidesLength;
      }

      for (var i = 0; i < numberOfBullets; i += 1) {
        if (params.renderBullet) {
          paginationHTML += params.renderBullet.call(swiper, i, params.bulletClass);
        } else {
          paginationHTML += "<" + params.bulletElement + " class=\"" + params.bulletClass + "\"></" + params.bulletElement + ">";
        }
      }

      $el.html(paginationHTML);
      swiper.pagination.bullets = $el.find((0, _utils.classesToSelector)(params.bulletClass));
    }

    if (params.type === 'fraction') {
      if (params.renderFraction) {
        paginationHTML = params.renderFraction.call(swiper, params.currentClass, params.totalClass);
      } else {
        paginationHTML = "<span class=\"" + params.currentClass + "\"></span>" + ' / ' + ("<span class=\"" + params.totalClass + "\"></span>");
      }

      $el.html(paginationHTML);
    }

    if (params.type === 'progressbar') {
      if (params.renderProgressbar) {
        paginationHTML = params.renderProgressbar.call(swiper, params.progressbarFillClass);
      } else {
        paginationHTML = "<span class=\"" + params.progressbarFillClass + "\"></span>";
      }

      $el.html(paginationHTML);
    }

    if (params.type !== 'custom') {
      swiper.emit('paginationRender', swiper.pagination.$el[0]);
    }
  },
  init: function init() {
    var swiper = this;
    swiper.params.pagination = (0, _utils.createElementIfNotDefined)(swiper.$el, swiper.params.pagination, swiper.params.createElements, {
      el: 'swiper-pagination'
    });
    var params = swiper.params.pagination;
    if (!params.el) return;
    var $el = (0, _dom2.default)(params.el);
    if ($el.length === 0) return;

    if (swiper.params.uniqueNavElements && typeof params.el === 'string' && $el.length > 1) {
      $el = swiper.$el.find(params.el);
    }

    if (params.type === 'bullets' && params.clickable) {
      $el.addClass(params.clickableClass);
    }

    $el.addClass(params.modifierClass + params.type);

    if (params.type === 'bullets' && params.dynamicBullets) {
      $el.addClass("" + params.modifierClass + params.type + "-dynamic");
      swiper.pagination.dynamicBulletIndex = 0;

      if (params.dynamicMainBullets < 1) {
        params.dynamicMainBullets = 1;
      }
    }

    if (params.type === 'progressbar' && params.progressbarOpposite) {
      $el.addClass(params.progressbarOppositeClass);
    }

    if (params.clickable) {
      $el.on('click', (0, _utils.classesToSelector)(params.bulletClass), function onClick(e) {
        e.preventDefault();
        var index = (0, _dom2.default)(this).index() * swiper.params.slidesPerGroup;
        if (swiper.params.loop) index += swiper.loopedSlides;
        swiper.slideTo(index);
      });
    }

    (0, _utils.extend)(swiper.pagination, {
      $el: $el,
      el: $el[0]
    });

    if (!swiper.enabled) {
      $el.addClass(params.lockClass);
    }
  },
  destroy: function destroy() {
    var swiper = this;
    var params = swiper.params.pagination;
    if (!params.el || !swiper.pagination.el || !swiper.pagination.$el || swiper.pagination.$el.length === 0) return;
    var $el = swiper.pagination.$el;
    $el.removeClass(params.hiddenClass);
    $el.removeClass(params.modifierClass + params.type);
    if (swiper.pagination.bullets) swiper.pagination.bullets.removeClass(params.bulletActiveClass);

    if (params.clickable) {
      $el.off('click', (0, _utils.classesToSelector)(params.bulletClass));
    }
  }
};
exports.default = {
  name: 'pagination',
  params: {
    pagination: {
      el: null,
      bulletElement: 'span',
      clickable: false,
      hideOnClick: false,
      renderBullet: null,
      renderProgressbar: null,
      renderFraction: null,
      renderCustom: null,
      progressbarOpposite: false,
      type: 'bullets',
      // 'bullets' or 'progressbar' or 'fraction' or 'custom'
      dynamicBullets: false,
      dynamicMainBullets: 1,
      formatFractionCurrent: function formatFractionCurrent(number) {
        return number;
      },
      formatFractionTotal: function formatFractionTotal(number) {
        return number;
      },
      bulletClass: 'swiper-pagination-bullet',
      bulletActiveClass: 'swiper-pagination-bullet-active',
      modifierClass: 'swiper-pagination-',
      // NEW
      currentClass: 'swiper-pagination-current',
      totalClass: 'swiper-pagination-total',
      hiddenClass: 'swiper-pagination-hidden',
      progressbarFillClass: 'swiper-pagination-progressbar-fill',
      progressbarOppositeClass: 'swiper-pagination-progressbar-opposite',
      clickableClass: 'swiper-pagination-clickable',
      // NEW
      lockClass: 'swiper-pagination-lock'
    }
  },
  create: function create() {
    var swiper = this;
    (0, _utils.bindModuleMethods)(swiper, {
      pagination: _extends({
        dynamicBulletIndex: 0
      }, Pagination)
    });
  },
  on: {
    init: function init(swiper) {
      swiper.pagination.init();
      swiper.pagination.render();
      swiper.pagination.update();
    },
    activeIndexChange: function activeIndexChange(swiper) {
      if (swiper.params.loop) {
        swiper.pagination.update();
      } else if (typeof swiper.snapIndex === 'undefined') {
        swiper.pagination.update();
      }
    },
    snapIndexChange: function snapIndexChange(swiper) {
      if (!swiper.params.loop) {
        swiper.pagination.update();
      }
    },
    slidesLengthChange: function slidesLengthChange(swiper) {
      if (swiper.params.loop) {
        swiper.pagination.render();
        swiper.pagination.update();
      }
    },
    snapGridLengthChange: function snapGridLengthChange(swiper) {
      if (!swiper.params.loop) {
        swiper.pagination.render();
        swiper.pagination.update();
      }
    },
    destroy: function destroy(swiper) {
      swiper.pagination.destroy();
    },
    'enable disable': function enableDisable(swiper) {
      var $el = swiper.pagination.$el;

      if ($el) {
        $el[swiper.enabled ? 'removeClass' : 'addClass'](swiper.params.pagination.lockClass);
      }
    },
    click: function click(swiper, e) {
      var targetEl = e.target;

      if (swiper.params.pagination.el && swiper.params.pagination.hideOnClick && swiper.pagination.$el.length > 0 && !(0, _dom2.default)(targetEl).hasClass(swiper.params.pagination.bulletClass)) {
        if (swiper.navigation && (swiper.navigation.nextEl && targetEl === swiper.navigation.nextEl || swiper.navigation.prevEl && targetEl === swiper.navigation.prevEl)) return;
        var isHidden = swiper.pagination.$el.hasClass(swiper.params.pagination.hiddenClass);

        if (isHidden === true) {
          swiper.emit('paginationShow');
        } else {
          swiper.emit('paginationHide');
        }

        swiper.pagination.$el.toggleClass(swiper.params.pagination.hiddenClass);
      }
    }
  }
};

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ssrWindow = __webpack_require__(2);

var _dom = __webpack_require__(1);

var _dom2 = _interopRequireDefault(_dom);

var _utils = __webpack_require__(0);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }return target;
  };return _extends.apply(this, arguments);
}

var Scrollbar = {
  setTranslate: function setTranslate() {
    var swiper = this;
    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;
    var scrollbar = swiper.scrollbar,
        rtl = swiper.rtlTranslate,
        progress = swiper.progress;
    var dragSize = scrollbar.dragSize,
        trackSize = scrollbar.trackSize,
        $dragEl = scrollbar.$dragEl,
        $el = scrollbar.$el;
    var params = swiper.params.scrollbar;
    var newSize = dragSize;
    var newPos = (trackSize - dragSize) * progress;

    if (rtl) {
      newPos = -newPos;

      if (newPos > 0) {
        newSize = dragSize - newPos;
        newPos = 0;
      } else if (-newPos + dragSize > trackSize) {
        newSize = trackSize + newPos;
      }
    } else if (newPos < 0) {
      newSize = dragSize + newPos;
      newPos = 0;
    } else if (newPos + dragSize > trackSize) {
      newSize = trackSize - newPos;
    }

    if (swiper.isHorizontal()) {
      $dragEl.transform("translate3d(" + newPos + "px, 0, 0)");
      $dragEl[0].style.width = newSize + "px";
    } else {
      $dragEl.transform("translate3d(0px, " + newPos + "px, 0)");
      $dragEl[0].style.height = newSize + "px";
    }

    if (params.hide) {
      clearTimeout(swiper.scrollbar.timeout);
      $el[0].style.opacity = 1;
      swiper.scrollbar.timeout = setTimeout(function () {
        $el[0].style.opacity = 0;
        $el.transition(400);
      }, 1000);
    }
  },
  setTransition: function setTransition(duration) {
    var swiper = this;
    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;
    swiper.scrollbar.$dragEl.transition(duration);
  },
  updateSize: function updateSize() {
    var swiper = this;
    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;
    var scrollbar = swiper.scrollbar;
    var $dragEl = scrollbar.$dragEl,
        $el = scrollbar.$el;
    $dragEl[0].style.width = '';
    $dragEl[0].style.height = '';
    var trackSize = swiper.isHorizontal() ? $el[0].offsetWidth : $el[0].offsetHeight;
    var divider = swiper.size / swiper.virtualSize;
    var moveDivider = divider * (trackSize / swiper.size);
    var dragSize;

    if (swiper.params.scrollbar.dragSize === 'auto') {
      dragSize = trackSize * divider;
    } else {
      dragSize = parseInt(swiper.params.scrollbar.dragSize, 10);
    }

    if (swiper.isHorizontal()) {
      $dragEl[0].style.width = dragSize + "px";
    } else {
      $dragEl[0].style.height = dragSize + "px";
    }

    if (divider >= 1) {
      $el[0].style.display = 'none';
    } else {
      $el[0].style.display = '';
    }

    if (swiper.params.scrollbar.hide) {
      $el[0].style.opacity = 0;
    }

    (0, _utils.extend)(scrollbar, {
      trackSize: trackSize,
      divider: divider,
      moveDivider: moveDivider,
      dragSize: dragSize
    });

    if (swiper.params.watchOverflow && swiper.enabled) {
      scrollbar.$el[swiper.isLocked ? 'addClass' : 'removeClass'](swiper.params.scrollbar.lockClass);
    }
  },
  getPointerPosition: function getPointerPosition(e) {
    var swiper = this;

    if (swiper.isHorizontal()) {
      return e.type === 'touchstart' || e.type === 'touchmove' ? e.targetTouches[0].clientX : e.clientX;
    }

    return e.type === 'touchstart' || e.type === 'touchmove' ? e.targetTouches[0].clientY : e.clientY;
  },
  setDragPosition: function setDragPosition(e) {
    var swiper = this;
    var scrollbar = swiper.scrollbar,
        rtl = swiper.rtlTranslate;
    var $el = scrollbar.$el,
        dragSize = scrollbar.dragSize,
        trackSize = scrollbar.trackSize,
        dragStartPos = scrollbar.dragStartPos;
    var positionRatio;
    positionRatio = (scrollbar.getPointerPosition(e) - $el.offset()[swiper.isHorizontal() ? 'left' : 'top'] - (dragStartPos !== null ? dragStartPos : dragSize / 2)) / (trackSize - dragSize);
    positionRatio = Math.max(Math.min(positionRatio, 1), 0);

    if (rtl) {
      positionRatio = 1 - positionRatio;
    }

    var position = swiper.minTranslate() + (swiper.maxTranslate() - swiper.minTranslate()) * positionRatio;
    swiper.updateProgress(position);
    swiper.setTranslate(position);
    swiper.updateActiveIndex();
    swiper.updateSlidesClasses();
  },
  onDragStart: function onDragStart(e) {
    var swiper = this;
    var params = swiper.params.scrollbar;
    var scrollbar = swiper.scrollbar,
        $wrapperEl = swiper.$wrapperEl;
    var $el = scrollbar.$el,
        $dragEl = scrollbar.$dragEl;
    swiper.scrollbar.isTouched = true;
    swiper.scrollbar.dragStartPos = e.target === $dragEl[0] || e.target === $dragEl ? scrollbar.getPointerPosition(e) - e.target.getBoundingClientRect()[swiper.isHorizontal() ? 'left' : 'top'] : null;
    e.preventDefault();
    e.stopPropagation();
    $wrapperEl.transition(100);
    $dragEl.transition(100);
    scrollbar.setDragPosition(e);
    clearTimeout(swiper.scrollbar.dragTimeout);
    $el.transition(0);

    if (params.hide) {
      $el.css('opacity', 1);
    }

    if (swiper.params.cssMode) {
      swiper.$wrapperEl.css('scroll-snap-type', 'none');
    }

    swiper.emit('scrollbarDragStart', e);
  },
  onDragMove: function onDragMove(e) {
    var swiper = this;
    var scrollbar = swiper.scrollbar,
        $wrapperEl = swiper.$wrapperEl;
    var $el = scrollbar.$el,
        $dragEl = scrollbar.$dragEl;
    if (!swiper.scrollbar.isTouched) return;
    if (e.preventDefault) e.preventDefault();else e.returnValue = false;
    scrollbar.setDragPosition(e);
    $wrapperEl.transition(0);
    $el.transition(0);
    $dragEl.transition(0);
    swiper.emit('scrollbarDragMove', e);
  },
  onDragEnd: function onDragEnd(e) {
    var swiper = this;
    var params = swiper.params.scrollbar;
    var scrollbar = swiper.scrollbar,
        $wrapperEl = swiper.$wrapperEl;
    var $el = scrollbar.$el;
    if (!swiper.scrollbar.isTouched) return;
    swiper.scrollbar.isTouched = false;

    if (swiper.params.cssMode) {
      swiper.$wrapperEl.css('scroll-snap-type', '');
      $wrapperEl.transition('');
    }

    if (params.hide) {
      clearTimeout(swiper.scrollbar.dragTimeout);
      swiper.scrollbar.dragTimeout = (0, _utils.nextTick)(function () {
        $el.css('opacity', 0);
        $el.transition(400);
      }, 1000);
    }

    swiper.emit('scrollbarDragEnd', e);

    if (params.snapOnRelease) {
      swiper.slideToClosest();
    }
  },
  enableDraggable: function enableDraggable() {
    var swiper = this;
    if (!swiper.params.scrollbar.el) return;
    var document = (0, _ssrWindow.getDocument)();
    var scrollbar = swiper.scrollbar,
        touchEventsTouch = swiper.touchEventsTouch,
        touchEventsDesktop = swiper.touchEventsDesktop,
        params = swiper.params,
        support = swiper.support;
    var $el = scrollbar.$el;
    var target = $el[0];
    var activeListener = support.passiveListener && params.passiveListeners ? {
      passive: false,
      capture: false
    } : false;
    var passiveListener = support.passiveListener && params.passiveListeners ? {
      passive: true,
      capture: false
    } : false;
    if (!target) return;

    if (!support.touch) {
      target.addEventListener(touchEventsDesktop.start, swiper.scrollbar.onDragStart, activeListener);
      document.addEventListener(touchEventsDesktop.move, swiper.scrollbar.onDragMove, activeListener);
      document.addEventListener(touchEventsDesktop.end, swiper.scrollbar.onDragEnd, passiveListener);
    } else {
      target.addEventListener(touchEventsTouch.start, swiper.scrollbar.onDragStart, activeListener);
      target.addEventListener(touchEventsTouch.move, swiper.scrollbar.onDragMove, activeListener);
      target.addEventListener(touchEventsTouch.end, swiper.scrollbar.onDragEnd, passiveListener);
    }
  },
  disableDraggable: function disableDraggable() {
    var swiper = this;
    if (!swiper.params.scrollbar.el) return;
    var document = (0, _ssrWindow.getDocument)();
    var scrollbar = swiper.scrollbar,
        touchEventsTouch = swiper.touchEventsTouch,
        touchEventsDesktop = swiper.touchEventsDesktop,
        params = swiper.params,
        support = swiper.support;
    var $el = scrollbar.$el;
    var target = $el[0];
    var activeListener = support.passiveListener && params.passiveListeners ? {
      passive: false,
      capture: false
    } : false;
    var passiveListener = support.passiveListener && params.passiveListeners ? {
      passive: true,
      capture: false
    } : false;
    if (!target) return;

    if (!support.touch) {
      target.removeEventListener(touchEventsDesktop.start, swiper.scrollbar.onDragStart, activeListener);
      document.removeEventListener(touchEventsDesktop.move, swiper.scrollbar.onDragMove, activeListener);
      document.removeEventListener(touchEventsDesktop.end, swiper.scrollbar.onDragEnd, passiveListener);
    } else {
      target.removeEventListener(touchEventsTouch.start, swiper.scrollbar.onDragStart, activeListener);
      target.removeEventListener(touchEventsTouch.move, swiper.scrollbar.onDragMove, activeListener);
      target.removeEventListener(touchEventsTouch.end, swiper.scrollbar.onDragEnd, passiveListener);
    }
  },
  init: function init() {
    var swiper = this;
    var scrollbar = swiper.scrollbar,
        $swiperEl = swiper.$el;
    swiper.params.scrollbar = (0, _utils.createElementIfNotDefined)($swiperEl, swiper.params.scrollbar, swiper.params.createElements, {
      el: 'swiper-scrollbar'
    });
    var params = swiper.params.scrollbar;
    if (!params.el) return;
    var $el = (0, _dom2.default)(params.el);

    if (swiper.params.uniqueNavElements && typeof params.el === 'string' && $el.length > 1 && $swiperEl.find(params.el).length === 1) {
      $el = $swiperEl.find(params.el);
    }

    var $dragEl = $el.find("." + swiper.params.scrollbar.dragClass);

    if ($dragEl.length === 0) {
      $dragEl = (0, _dom2.default)("<div class=\"" + swiper.params.scrollbar.dragClass + "\"></div>");
      $el.append($dragEl);
    }

    (0, _utils.extend)(scrollbar, {
      $el: $el,
      el: $el[0],
      $dragEl: $dragEl,
      dragEl: $dragEl[0]
    });

    if (params.draggable) {
      scrollbar.enableDraggable();
    }

    if ($el) {
      $el[swiper.enabled ? 'removeClass' : 'addClass'](swiper.params.scrollbar.lockClass);
    }
  },
  destroy: function destroy() {
    var swiper = this;
    swiper.scrollbar.disableDraggable();
  }
};
exports.default = {
  name: 'scrollbar',
  params: {
    scrollbar: {
      el: null,
      dragSize: 'auto',
      hide: false,
      draggable: false,
      snapOnRelease: true,
      lockClass: 'swiper-scrollbar-lock',
      dragClass: 'swiper-scrollbar-drag'
    }
  },
  create: function create() {
    var swiper = this;
    (0, _utils.bindModuleMethods)(swiper, {
      scrollbar: _extends({
        isTouched: false,
        timeout: null,
        dragTimeout: null
      }, Scrollbar)
    });
  },
  on: {
    init: function init(swiper) {
      swiper.scrollbar.init();
      swiper.scrollbar.updateSize();
      swiper.scrollbar.setTranslate();
    },
    update: function update(swiper) {
      swiper.scrollbar.updateSize();
    },
    resize: function resize(swiper) {
      swiper.scrollbar.updateSize();
    },
    observerUpdate: function observerUpdate(swiper) {
      swiper.scrollbar.updateSize();
    },
    setTranslate: function setTranslate(swiper) {
      swiper.scrollbar.setTranslate();
    },
    setTransition: function setTransition(swiper, duration) {
      swiper.scrollbar.setTransition(duration);
    },
    'enable disable': function enableDisable(swiper) {
      var $el = swiper.scrollbar.$el;

      if ($el) {
        $el[swiper.enabled ? 'removeClass' : 'addClass'](swiper.params.scrollbar.lockClass);
      }
    },
    destroy: function destroy(swiper) {
      swiper.scrollbar.destroy();
    }
  }
};

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _dom = __webpack_require__(1);

var _dom2 = _interopRequireDefault(_dom);

var _utils = __webpack_require__(0);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }return target;
  };return _extends.apply(this, arguments);
}

var Parallax = {
  setTransform: function setTransform(el, progress) {
    var swiper = this;
    var rtl = swiper.rtl;
    var $el = (0, _dom2.default)(el);
    var rtlFactor = rtl ? -1 : 1;
    var p = $el.attr('data-swiper-parallax') || '0';
    var x = $el.attr('data-swiper-parallax-x');
    var y = $el.attr('data-swiper-parallax-y');
    var scale = $el.attr('data-swiper-parallax-scale');
    var opacity = $el.attr('data-swiper-parallax-opacity');

    if (x || y) {
      x = x || '0';
      y = y || '0';
    } else if (swiper.isHorizontal()) {
      x = p;
      y = '0';
    } else {
      y = p;
      x = '0';
    }

    if (x.indexOf('%') >= 0) {
      x = parseInt(x, 10) * progress * rtlFactor + "%";
    } else {
      x = x * progress * rtlFactor + "px";
    }

    if (y.indexOf('%') >= 0) {
      y = parseInt(y, 10) * progress + "%";
    } else {
      y = y * progress + "px";
    }

    if (typeof opacity !== 'undefined' && opacity !== null) {
      var currentOpacity = opacity - (opacity - 1) * (1 - Math.abs(progress));
      $el[0].style.opacity = currentOpacity;
    }

    if (typeof scale === 'undefined' || scale === null) {
      $el.transform("translate3d(" + x + ", " + y + ", 0px)");
    } else {
      var currentScale = scale - (scale - 1) * (1 - Math.abs(progress));
      $el.transform("translate3d(" + x + ", " + y + ", 0px) scale(" + currentScale + ")");
    }
  },
  setTranslate: function setTranslate() {
    var swiper = this;
    var $el = swiper.$el,
        slides = swiper.slides,
        progress = swiper.progress,
        snapGrid = swiper.snapGrid;
    $el.children('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]').each(function (el) {
      swiper.parallax.setTransform(el, progress);
    });
    slides.each(function (slideEl, slideIndex) {
      var slideProgress = slideEl.progress;

      if (swiper.params.slidesPerGroup > 1 && swiper.params.slidesPerView !== 'auto') {
        slideProgress += Math.ceil(slideIndex / 2) - progress * (snapGrid.length - 1);
      }

      slideProgress = Math.min(Math.max(slideProgress, -1), 1);
      (0, _dom2.default)(slideEl).find('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]').each(function (el) {
        swiper.parallax.setTransform(el, slideProgress);
      });
    });
  },
  setTransition: function setTransition(duration) {
    if (duration === void 0) {
      duration = this.params.speed;
    }

    var swiper = this;
    var $el = swiper.$el;
    $el.find('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]').each(function (parallaxEl) {
      var $parallaxEl = (0, _dom2.default)(parallaxEl);
      var parallaxDuration = parseInt($parallaxEl.attr('data-swiper-parallax-duration'), 10) || duration;
      if (duration === 0) parallaxDuration = 0;
      $parallaxEl.transition(parallaxDuration);
    });
  }
};
exports.default = {
  name: 'parallax',
  params: {
    parallax: {
      enabled: false
    }
  },
  create: function create() {
    var swiper = this;
    (0, _utils.bindModuleMethods)(swiper, {
      parallax: _extends({}, Parallax)
    });
  },
  on: {
    beforeInit: function beforeInit(swiper) {
      if (!swiper.params.parallax.enabled) return;
      swiper.params.watchSlidesProgress = true;
      swiper.originalParams.watchSlidesProgress = true;
    },
    init: function init(swiper) {
      if (!swiper.params.parallax.enabled) return;
      swiper.parallax.setTranslate();
    },
    setTranslate: function setTranslate(swiper) {
      if (!swiper.params.parallax.enabled) return;
      swiper.parallax.setTranslate();
    },
    setTransition: function setTransition(swiper, duration) {
      if (!swiper.params.parallax.enabled) return;
      swiper.parallax.setTransition(duration);
    }
  }
};

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ssrWindow = __webpack_require__(2);

var _dom = __webpack_require__(1);

var _dom2 = _interopRequireDefault(_dom);

var _utils = __webpack_require__(0);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }return target;
  };return _extends.apply(this, arguments);
}

var Zoom = {
  // Calc Scale From Multi-touches
  getDistanceBetweenTouches: function getDistanceBetweenTouches(e) {
    if (e.targetTouches.length < 2) return 1;
    var x1 = e.targetTouches[0].pageX;
    var y1 = e.targetTouches[0].pageY;
    var x2 = e.targetTouches[1].pageX;
    var y2 = e.targetTouches[1].pageY;
    var distance = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
    return distance;
  },
  // Events
  onGestureStart: function onGestureStart(e) {
    var swiper = this;
    var support = swiper.support;
    var params = swiper.params.zoom;
    var zoom = swiper.zoom;
    var gesture = zoom.gesture;
    zoom.fakeGestureTouched = false;
    zoom.fakeGestureMoved = false;

    if (!support.gestures) {
      if (e.type !== 'touchstart' || e.type === 'touchstart' && e.targetTouches.length < 2) {
        return;
      }

      zoom.fakeGestureTouched = true;
      gesture.scaleStart = Zoom.getDistanceBetweenTouches(e);
    }

    if (!gesture.$slideEl || !gesture.$slideEl.length) {
      gesture.$slideEl = (0, _dom2.default)(e.target).closest("." + swiper.params.slideClass);
      if (gesture.$slideEl.length === 0) gesture.$slideEl = swiper.slides.eq(swiper.activeIndex);
      gesture.$imageEl = gesture.$slideEl.find('img, svg, canvas, picture, .swiper-zoom-target');
      gesture.$imageWrapEl = gesture.$imageEl.parent("." + params.containerClass);
      gesture.maxRatio = gesture.$imageWrapEl.attr('data-swiper-zoom') || params.maxRatio;

      if (gesture.$imageWrapEl.length === 0) {
        gesture.$imageEl = undefined;
        return;
      }
    }

    if (gesture.$imageEl) {
      gesture.$imageEl.transition(0);
    }

    swiper.zoom.isScaling = true;
  },
  onGestureChange: function onGestureChange(e) {
    var swiper = this;
    var support = swiper.support;
    var params = swiper.params.zoom;
    var zoom = swiper.zoom;
    var gesture = zoom.gesture;

    if (!support.gestures) {
      if (e.type !== 'touchmove' || e.type === 'touchmove' && e.targetTouches.length < 2) {
        return;
      }

      zoom.fakeGestureMoved = true;
      gesture.scaleMove = Zoom.getDistanceBetweenTouches(e);
    }

    if (!gesture.$imageEl || gesture.$imageEl.length === 0) {
      if (e.type === 'gesturechange') zoom.onGestureStart(e);
      return;
    }

    if (support.gestures) {
      zoom.scale = e.scale * zoom.currentScale;
    } else {
      zoom.scale = gesture.scaleMove / gesture.scaleStart * zoom.currentScale;
    }

    if (zoom.scale > gesture.maxRatio) {
      zoom.scale = gesture.maxRatio - 1 + Math.pow(zoom.scale - gesture.maxRatio + 1, 0.5);
    }

    if (zoom.scale < params.minRatio) {
      zoom.scale = params.minRatio + 1 - Math.pow(params.minRatio - zoom.scale + 1, 0.5);
    }

    gesture.$imageEl.transform("translate3d(0,0,0) scale(" + zoom.scale + ")");
  },
  onGestureEnd: function onGestureEnd(e) {
    var swiper = this;
    var device = swiper.device;
    var support = swiper.support;
    var params = swiper.params.zoom;
    var zoom = swiper.zoom;
    var gesture = zoom.gesture;

    if (!support.gestures) {
      if (!zoom.fakeGestureTouched || !zoom.fakeGestureMoved) {
        return;
      }

      if (e.type !== 'touchend' || e.type === 'touchend' && e.changedTouches.length < 2 && !device.android) {
        return;
      }

      zoom.fakeGestureTouched = false;
      zoom.fakeGestureMoved = false;
    }

    if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;
    zoom.scale = Math.max(Math.min(zoom.scale, gesture.maxRatio), params.minRatio);
    gesture.$imageEl.transition(swiper.params.speed).transform("translate3d(0,0,0) scale(" + zoom.scale + ")");
    zoom.currentScale = zoom.scale;
    zoom.isScaling = false;
    if (zoom.scale === 1) gesture.$slideEl = undefined;
  },
  onTouchStart: function onTouchStart(e) {
    var swiper = this;
    var device = swiper.device;
    var zoom = swiper.zoom;
    var gesture = zoom.gesture,
        image = zoom.image;
    if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;
    if (image.isTouched) return;
    if (device.android && e.cancelable) e.preventDefault();
    image.isTouched = true;
    image.touchesStart.x = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;
    image.touchesStart.y = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;
  },
  onTouchMove: function onTouchMove(e) {
    var swiper = this;
    var zoom = swiper.zoom;
    var gesture = zoom.gesture,
        image = zoom.image,
        velocity = zoom.velocity;
    if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;
    swiper.allowClick = false;
    if (!image.isTouched || !gesture.$slideEl) return;

    if (!image.isMoved) {
      image.width = gesture.$imageEl[0].offsetWidth;
      image.height = gesture.$imageEl[0].offsetHeight;
      image.startX = (0, _utils.getTranslate)(gesture.$imageWrapEl[0], 'x') || 0;
      image.startY = (0, _utils.getTranslate)(gesture.$imageWrapEl[0], 'y') || 0;
      gesture.slideWidth = gesture.$slideEl[0].offsetWidth;
      gesture.slideHeight = gesture.$slideEl[0].offsetHeight;
      gesture.$imageWrapEl.transition(0);

      if (swiper.rtl) {
        image.startX = -image.startX;
        image.startY = -image.startY;
      }
    } // Define if we need image drag


    var scaledWidth = image.width * zoom.scale;
    var scaledHeight = image.height * zoom.scale;
    if (scaledWidth < gesture.slideWidth && scaledHeight < gesture.slideHeight) return;
    image.minX = Math.min(gesture.slideWidth / 2 - scaledWidth / 2, 0);
    image.maxX = -image.minX;
    image.minY = Math.min(gesture.slideHeight / 2 - scaledHeight / 2, 0);
    image.maxY = -image.minY;
    image.touchesCurrent.x = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.pageX;
    image.touchesCurrent.y = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.pageY;

    if (!image.isMoved && !zoom.isScaling) {
      if (swiper.isHorizontal() && (Math.floor(image.minX) === Math.floor(image.startX) && image.touchesCurrent.x < image.touchesStart.x || Math.floor(image.maxX) === Math.floor(image.startX) && image.touchesCurrent.x > image.touchesStart.x)) {
        image.isTouched = false;
        return;
      }

      if (!swiper.isHorizontal() && (Math.floor(image.minY) === Math.floor(image.startY) && image.touchesCurrent.y < image.touchesStart.y || Math.floor(image.maxY) === Math.floor(image.startY) && image.touchesCurrent.y > image.touchesStart.y)) {
        image.isTouched = false;
        return;
      }
    }

    if (e.cancelable) {
      e.preventDefault();
    }

    e.stopPropagation();
    image.isMoved = true;
    image.currentX = image.touchesCurrent.x - image.touchesStart.x + image.startX;
    image.currentY = image.touchesCurrent.y - image.touchesStart.y + image.startY;

    if (image.currentX < image.minX) {
      image.currentX = image.minX + 1 - Math.pow(image.minX - image.currentX + 1, 0.8);
    }

    if (image.currentX > image.maxX) {
      image.currentX = image.maxX - 1 + Math.pow(image.currentX - image.maxX + 1, 0.8);
    }

    if (image.currentY < image.minY) {
      image.currentY = image.minY + 1 - Math.pow(image.minY - image.currentY + 1, 0.8);
    }

    if (image.currentY > image.maxY) {
      image.currentY = image.maxY - 1 + Math.pow(image.currentY - image.maxY + 1, 0.8);
    } // Velocity


    if (!velocity.prevPositionX) velocity.prevPositionX = image.touchesCurrent.x;
    if (!velocity.prevPositionY) velocity.prevPositionY = image.touchesCurrent.y;
    if (!velocity.prevTime) velocity.prevTime = Date.now();
    velocity.x = (image.touchesCurrent.x - velocity.prevPositionX) / (Date.now() - velocity.prevTime) / 2;
    velocity.y = (image.touchesCurrent.y - velocity.prevPositionY) / (Date.now() - velocity.prevTime) / 2;
    if (Math.abs(image.touchesCurrent.x - velocity.prevPositionX) < 2) velocity.x = 0;
    if (Math.abs(image.touchesCurrent.y - velocity.prevPositionY) < 2) velocity.y = 0;
    velocity.prevPositionX = image.touchesCurrent.x;
    velocity.prevPositionY = image.touchesCurrent.y;
    velocity.prevTime = Date.now();
    gesture.$imageWrapEl.transform("translate3d(" + image.currentX + "px, " + image.currentY + "px,0)");
  },
  onTouchEnd: function onTouchEnd() {
    var swiper = this;
    var zoom = swiper.zoom;
    var gesture = zoom.gesture,
        image = zoom.image,
        velocity = zoom.velocity;
    if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;

    if (!image.isTouched || !image.isMoved) {
      image.isTouched = false;
      image.isMoved = false;
      return;
    }

    image.isTouched = false;
    image.isMoved = false;
    var momentumDurationX = 300;
    var momentumDurationY = 300;
    var momentumDistanceX = velocity.x * momentumDurationX;
    var newPositionX = image.currentX + momentumDistanceX;
    var momentumDistanceY = velocity.y * momentumDurationY;
    var newPositionY = image.currentY + momentumDistanceY; // Fix duration

    if (velocity.x !== 0) momentumDurationX = Math.abs((newPositionX - image.currentX) / velocity.x);
    if (velocity.y !== 0) momentumDurationY = Math.abs((newPositionY - image.currentY) / velocity.y);
    var momentumDuration = Math.max(momentumDurationX, momentumDurationY);
    image.currentX = newPositionX;
    image.currentY = newPositionY; // Define if we need image drag

    var scaledWidth = image.width * zoom.scale;
    var scaledHeight = image.height * zoom.scale;
    image.minX = Math.min(gesture.slideWidth / 2 - scaledWidth / 2, 0);
    image.maxX = -image.minX;
    image.minY = Math.min(gesture.slideHeight / 2 - scaledHeight / 2, 0);
    image.maxY = -image.minY;
    image.currentX = Math.max(Math.min(image.currentX, image.maxX), image.minX);
    image.currentY = Math.max(Math.min(image.currentY, image.maxY), image.minY);
    gesture.$imageWrapEl.transition(momentumDuration).transform("translate3d(" + image.currentX + "px, " + image.currentY + "px,0)");
  },
  onTransitionEnd: function onTransitionEnd() {
    var swiper = this;
    var zoom = swiper.zoom;
    var gesture = zoom.gesture;

    if (gesture.$slideEl && swiper.previousIndex !== swiper.activeIndex) {
      if (gesture.$imageEl) {
        gesture.$imageEl.transform('translate3d(0,0,0) scale(1)');
      }

      if (gesture.$imageWrapEl) {
        gesture.$imageWrapEl.transform('translate3d(0,0,0)');
      }

      zoom.scale = 1;
      zoom.currentScale = 1;
      gesture.$slideEl = undefined;
      gesture.$imageEl = undefined;
      gesture.$imageWrapEl = undefined;
    }
  },
  // Toggle Zoom
  toggle: function toggle(e) {
    var swiper = this;
    var zoom = swiper.zoom;

    if (zoom.scale && zoom.scale !== 1) {
      // Zoom Out
      zoom.out();
    } else {
      // Zoom In
      zoom.in(e);
    }
  },
  in: function _in(e) {
    var swiper = this;
    var window = (0, _ssrWindow.getWindow)();
    var zoom = swiper.zoom;
    var params = swiper.params.zoom;
    var gesture = zoom.gesture,
        image = zoom.image;

    if (!gesture.$slideEl) {
      if (swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual) {
        gesture.$slideEl = swiper.$wrapperEl.children("." + swiper.params.slideActiveClass);
      } else {
        gesture.$slideEl = swiper.slides.eq(swiper.activeIndex);
      }

      gesture.$imageEl = gesture.$slideEl.find('img, svg, canvas, picture, .swiper-zoom-target');
      gesture.$imageWrapEl = gesture.$imageEl.parent("." + params.containerClass);
    }

    if (!gesture.$imageEl || gesture.$imageEl.length === 0 || !gesture.$imageWrapEl || gesture.$imageWrapEl.length === 0) return;
    gesture.$slideEl.addClass("" + params.zoomedSlideClass);
    var touchX;
    var touchY;
    var offsetX;
    var offsetY;
    var diffX;
    var diffY;
    var translateX;
    var translateY;
    var imageWidth;
    var imageHeight;
    var scaledWidth;
    var scaledHeight;
    var translateMinX;
    var translateMinY;
    var translateMaxX;
    var translateMaxY;
    var slideWidth;
    var slideHeight;

    if (typeof image.touchesStart.x === 'undefined' && e) {
      touchX = e.type === 'touchend' ? e.changedTouches[0].pageX : e.pageX;
      touchY = e.type === 'touchend' ? e.changedTouches[0].pageY : e.pageY;
    } else {
      touchX = image.touchesStart.x;
      touchY = image.touchesStart.y;
    }

    zoom.scale = gesture.$imageWrapEl.attr('data-swiper-zoom') || params.maxRatio;
    zoom.currentScale = gesture.$imageWrapEl.attr('data-swiper-zoom') || params.maxRatio;

    if (e) {
      slideWidth = gesture.$slideEl[0].offsetWidth;
      slideHeight = gesture.$slideEl[0].offsetHeight;
      offsetX = gesture.$slideEl.offset().left + window.scrollX;
      offsetY = gesture.$slideEl.offset().top + window.scrollY;
      diffX = offsetX + slideWidth / 2 - touchX;
      diffY = offsetY + slideHeight / 2 - touchY;
      imageWidth = gesture.$imageEl[0].offsetWidth;
      imageHeight = gesture.$imageEl[0].offsetHeight;
      scaledWidth = imageWidth * zoom.scale;
      scaledHeight = imageHeight * zoom.scale;
      translateMinX = Math.min(slideWidth / 2 - scaledWidth / 2, 0);
      translateMinY = Math.min(slideHeight / 2 - scaledHeight / 2, 0);
      translateMaxX = -translateMinX;
      translateMaxY = -translateMinY;
      translateX = diffX * zoom.scale;
      translateY = diffY * zoom.scale;

      if (translateX < translateMinX) {
        translateX = translateMinX;
      }

      if (translateX > translateMaxX) {
        translateX = translateMaxX;
      }

      if (translateY < translateMinY) {
        translateY = translateMinY;
      }

      if (translateY > translateMaxY) {
        translateY = translateMaxY;
      }
    } else {
      translateX = 0;
      translateY = 0;
    }

    gesture.$imageWrapEl.transition(300).transform("translate3d(" + translateX + "px, " + translateY + "px,0)");
    gesture.$imageEl.transition(300).transform("translate3d(0,0,0) scale(" + zoom.scale + ")");
  },
  out: function out() {
    var swiper = this;
    var zoom = swiper.zoom;
    var params = swiper.params.zoom;
    var gesture = zoom.gesture;

    if (!gesture.$slideEl) {
      if (swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual) {
        gesture.$slideEl = swiper.$wrapperEl.children("." + swiper.params.slideActiveClass);
      } else {
        gesture.$slideEl = swiper.slides.eq(swiper.activeIndex);
      }

      gesture.$imageEl = gesture.$slideEl.find('img, svg, canvas, picture, .swiper-zoom-target');
      gesture.$imageWrapEl = gesture.$imageEl.parent("." + params.containerClass);
    }

    if (!gesture.$imageEl || gesture.$imageEl.length === 0 || !gesture.$imageWrapEl || gesture.$imageWrapEl.length === 0) return;
    zoom.scale = 1;
    zoom.currentScale = 1;
    gesture.$imageWrapEl.transition(300).transform('translate3d(0,0,0)');
    gesture.$imageEl.transition(300).transform('translate3d(0,0,0) scale(1)');
    gesture.$slideEl.removeClass("" + params.zoomedSlideClass);
    gesture.$slideEl = undefined;
  },
  toggleGestures: function toggleGestures(method) {
    var swiper = this;
    var zoom = swiper.zoom;
    var selector = zoom.slideSelector,
        passive = zoom.passiveListener;
    swiper.$wrapperEl[method]('gesturestart', selector, zoom.onGestureStart, passive);
    swiper.$wrapperEl[method]('gesturechange', selector, zoom.onGestureChange, passive);
    swiper.$wrapperEl[method]('gestureend', selector, zoom.onGestureEnd, passive);
  },
  enableGestures: function enableGestures() {
    if (this.zoom.gesturesEnabled) return;
    this.zoom.gesturesEnabled = true;
    this.zoom.toggleGestures('on');
  },
  disableGestures: function disableGestures() {
    if (!this.zoom.gesturesEnabled) return;
    this.zoom.gesturesEnabled = false;
    this.zoom.toggleGestures('off');
  },
  // Attach/Detach Events
  enable: function enable() {
    var swiper = this;
    var support = swiper.support;
    var zoom = swiper.zoom;
    if (zoom.enabled) return;
    zoom.enabled = true;
    var passiveListener = swiper.touchEvents.start === 'touchstart' && support.passiveListener && swiper.params.passiveListeners ? {
      passive: true,
      capture: false
    } : false;
    var activeListenerWithCapture = support.passiveListener ? {
      passive: false,
      capture: true
    } : true;
    var slideSelector = "." + swiper.params.slideClass;
    swiper.zoom.passiveListener = passiveListener;
    swiper.zoom.slideSelector = slideSelector; // Scale image

    if (support.gestures) {
      swiper.$wrapperEl.on(swiper.touchEvents.start, swiper.zoom.enableGestures, passiveListener);
      swiper.$wrapperEl.on(swiper.touchEvents.end, swiper.zoom.disableGestures, passiveListener);
    } else if (swiper.touchEvents.start === 'touchstart') {
      swiper.$wrapperEl.on(swiper.touchEvents.start, slideSelector, zoom.onGestureStart, passiveListener);
      swiper.$wrapperEl.on(swiper.touchEvents.move, slideSelector, zoom.onGestureChange, activeListenerWithCapture);
      swiper.$wrapperEl.on(swiper.touchEvents.end, slideSelector, zoom.onGestureEnd, passiveListener);

      if (swiper.touchEvents.cancel) {
        swiper.$wrapperEl.on(swiper.touchEvents.cancel, slideSelector, zoom.onGestureEnd, passiveListener);
      }
    } // Move image


    swiper.$wrapperEl.on(swiper.touchEvents.move, "." + swiper.params.zoom.containerClass, zoom.onTouchMove, activeListenerWithCapture);
  },
  disable: function disable() {
    var swiper = this;
    var zoom = swiper.zoom;
    if (!zoom.enabled) return;
    var support = swiper.support;
    swiper.zoom.enabled = false;
    var passiveListener = swiper.touchEvents.start === 'touchstart' && support.passiveListener && swiper.params.passiveListeners ? {
      passive: true,
      capture: false
    } : false;
    var activeListenerWithCapture = support.passiveListener ? {
      passive: false,
      capture: true
    } : true;
    var slideSelector = "." + swiper.params.slideClass; // Scale image

    if (support.gestures) {
      swiper.$wrapperEl.off(swiper.touchEvents.start, swiper.zoom.enableGestures, passiveListener);
      swiper.$wrapperEl.off(swiper.touchEvents.end, swiper.zoom.disableGestures, passiveListener);
    } else if (swiper.touchEvents.start === 'touchstart') {
      swiper.$wrapperEl.off(swiper.touchEvents.start, slideSelector, zoom.onGestureStart, passiveListener);
      swiper.$wrapperEl.off(swiper.touchEvents.move, slideSelector, zoom.onGestureChange, activeListenerWithCapture);
      swiper.$wrapperEl.off(swiper.touchEvents.end, slideSelector, zoom.onGestureEnd, passiveListener);

      if (swiper.touchEvents.cancel) {
        swiper.$wrapperEl.off(swiper.touchEvents.cancel, slideSelector, zoom.onGestureEnd, passiveListener);
      }
    } // Move image


    swiper.$wrapperEl.off(swiper.touchEvents.move, "." + swiper.params.zoom.containerClass, zoom.onTouchMove, activeListenerWithCapture);
  }
};
exports.default = {
  name: 'zoom',
  params: {
    zoom: {
      enabled: false,
      maxRatio: 3,
      minRatio: 1,
      toggle: true,
      containerClass: 'swiper-zoom-container',
      zoomedSlideClass: 'swiper-slide-zoomed'
    }
  },
  create: function create() {
    var swiper = this;
    (0, _utils.bindModuleMethods)(swiper, {
      zoom: _extends({
        enabled: false,
        scale: 1,
        currentScale: 1,
        isScaling: false,
        gesture: {
          $slideEl: undefined,
          slideWidth: undefined,
          slideHeight: undefined,
          $imageEl: undefined,
          $imageWrapEl: undefined,
          maxRatio: 3
        },
        image: {
          isTouched: undefined,
          isMoved: undefined,
          currentX: undefined,
          currentY: undefined,
          minX: undefined,
          minY: undefined,
          maxX: undefined,
          maxY: undefined,
          width: undefined,
          height: undefined,
          startX: undefined,
          startY: undefined,
          touchesStart: {},
          touchesCurrent: {}
        },
        velocity: {
          x: undefined,
          y: undefined,
          prevPositionX: undefined,
          prevPositionY: undefined,
          prevTime: undefined
        }
      }, Zoom)
    });
    var scale = 1;
    Object.defineProperty(swiper.zoom, 'scale', {
      get: function get() {
        return scale;
      },
      set: function set(value) {
        if (scale !== value) {
          var imageEl = swiper.zoom.gesture.$imageEl ? swiper.zoom.gesture.$imageEl[0] : undefined;
          var slideEl = swiper.zoom.gesture.$slideEl ? swiper.zoom.gesture.$slideEl[0] : undefined;
          swiper.emit('zoomChange', value, imageEl, slideEl);
        }

        scale = value;
      }
    });
  },
  on: {
    init: function init(swiper) {
      if (swiper.params.zoom.enabled) {
        swiper.zoom.enable();
      }
    },
    destroy: function destroy(swiper) {
      swiper.zoom.disable();
    },
    touchStart: function touchStart(swiper, e) {
      if (!swiper.zoom.enabled) return;
      swiper.zoom.onTouchStart(e);
    },
    touchEnd: function touchEnd(swiper, e) {
      if (!swiper.zoom.enabled) return;
      swiper.zoom.onTouchEnd(e);
    },
    doubleTap: function doubleTap(swiper, e) {
      if (!swiper.animating && swiper.params.zoom.enabled && swiper.zoom.enabled && swiper.params.zoom.toggle) {
        swiper.zoom.toggle(e);
      }
    },
    transitionEnd: function transitionEnd(swiper) {
      if (swiper.zoom.enabled && swiper.params.zoom.enabled) {
        swiper.zoom.onTransitionEnd();
      }
    },
    slideChange: function slideChange(swiper) {
      if (swiper.zoom.enabled && swiper.params.zoom.enabled && swiper.params.cssMode) {
        swiper.zoom.onTransitionEnd();
      }
    }
  }
};

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ssrWindow = __webpack_require__(2);

var _dom = __webpack_require__(1);

var _dom2 = _interopRequireDefault(_dom);

var _utils = __webpack_require__(0);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }return target;
  };return _extends.apply(this, arguments);
}

var Lazy = {
  loadInSlide: function loadInSlide(index, loadInDuplicate) {
    if (loadInDuplicate === void 0) {
      loadInDuplicate = true;
    }

    var swiper = this;
    var params = swiper.params.lazy;
    if (typeof index === 'undefined') return;
    if (swiper.slides.length === 0) return;
    var isVirtual = swiper.virtual && swiper.params.virtual.enabled;
    var $slideEl = isVirtual ? swiper.$wrapperEl.children("." + swiper.params.slideClass + "[data-swiper-slide-index=\"" + index + "\"]") : swiper.slides.eq(index);
    var $images = $slideEl.find("." + params.elementClass + ":not(." + params.loadedClass + "):not(." + params.loadingClass + ")");

    if ($slideEl.hasClass(params.elementClass) && !$slideEl.hasClass(params.loadedClass) && !$slideEl.hasClass(params.loadingClass)) {
      $images.push($slideEl[0]);
    }

    if ($images.length === 0) return;
    $images.each(function (imageEl) {
      var $imageEl = (0, _dom2.default)(imageEl);
      $imageEl.addClass(params.loadingClass);
      var background = $imageEl.attr('data-background');
      var src = $imageEl.attr('data-src');
      var srcset = $imageEl.attr('data-srcset');
      var sizes = $imageEl.attr('data-sizes');
      var $pictureEl = $imageEl.parent('picture');
      swiper.loadImage($imageEl[0], src || background, srcset, sizes, false, function () {
        if (typeof swiper === 'undefined' || swiper === null || !swiper || swiper && !swiper.params || swiper.destroyed) return;

        if (background) {
          $imageEl.css('background-image', "url(\"" + background + "\")");
          $imageEl.removeAttr('data-background');
        } else {
          if (srcset) {
            $imageEl.attr('srcset', srcset);
            $imageEl.removeAttr('data-srcset');
          }

          if (sizes) {
            $imageEl.attr('sizes', sizes);
            $imageEl.removeAttr('data-sizes');
          }

          if ($pictureEl.length) {
            $pictureEl.children('source').each(function (sourceEl) {
              var $source = (0, _dom2.default)(sourceEl);

              if ($source.attr('data-srcset')) {
                $source.attr('srcset', $source.attr('data-srcset'));
                $source.removeAttr('data-srcset');
              }
            });
          }

          if (src) {
            $imageEl.attr('src', src);
            $imageEl.removeAttr('data-src');
          }
        }

        $imageEl.addClass(params.loadedClass).removeClass(params.loadingClass);
        $slideEl.find("." + params.preloaderClass).remove();

        if (swiper.params.loop && loadInDuplicate) {
          var slideOriginalIndex = $slideEl.attr('data-swiper-slide-index');

          if ($slideEl.hasClass(swiper.params.slideDuplicateClass)) {
            var originalSlide = swiper.$wrapperEl.children("[data-swiper-slide-index=\"" + slideOriginalIndex + "\"]:not(." + swiper.params.slideDuplicateClass + ")");
            swiper.lazy.loadInSlide(originalSlide.index(), false);
          } else {
            var duplicatedSlide = swiper.$wrapperEl.children("." + swiper.params.slideDuplicateClass + "[data-swiper-slide-index=\"" + slideOriginalIndex + "\"]");
            swiper.lazy.loadInSlide(duplicatedSlide.index(), false);
          }
        }

        swiper.emit('lazyImageReady', $slideEl[0], $imageEl[0]);

        if (swiper.params.autoHeight) {
          swiper.updateAutoHeight();
        }
      });
      swiper.emit('lazyImageLoad', $slideEl[0], $imageEl[0]);
    });
  },
  load: function load() {
    var swiper = this;
    var $wrapperEl = swiper.$wrapperEl,
        swiperParams = swiper.params,
        slides = swiper.slides,
        activeIndex = swiper.activeIndex;
    var isVirtual = swiper.virtual && swiperParams.virtual.enabled;
    var params = swiperParams.lazy;
    var slidesPerView = swiperParams.slidesPerView;

    if (slidesPerView === 'auto') {
      slidesPerView = 0;
    }

    function slideExist(index) {
      if (isVirtual) {
        if ($wrapperEl.children("." + swiperParams.slideClass + "[data-swiper-slide-index=\"" + index + "\"]").length) {
          return true;
        }
      } else if (slides[index]) return true;

      return false;
    }

    function slideIndex(slideEl) {
      if (isVirtual) {
        return (0, _dom2.default)(slideEl).attr('data-swiper-slide-index');
      }

      return (0, _dom2.default)(slideEl).index();
    }

    if (!swiper.lazy.initialImageLoaded) swiper.lazy.initialImageLoaded = true;

    if (swiper.params.watchSlidesVisibility) {
      $wrapperEl.children("." + swiperParams.slideVisibleClass).each(function (slideEl) {
        var index = isVirtual ? (0, _dom2.default)(slideEl).attr('data-swiper-slide-index') : (0, _dom2.default)(slideEl).index();
        swiper.lazy.loadInSlide(index);
      });
    } else if (slidesPerView > 1) {
      for (var i = activeIndex; i < activeIndex + slidesPerView; i += 1) {
        if (slideExist(i)) swiper.lazy.loadInSlide(i);
      }
    } else {
      swiper.lazy.loadInSlide(activeIndex);
    }

    if (params.loadPrevNext) {
      if (slidesPerView > 1 || params.loadPrevNextAmount && params.loadPrevNextAmount > 1) {
        var amount = params.loadPrevNextAmount;
        var spv = slidesPerView;
        var maxIndex = Math.min(activeIndex + spv + Math.max(amount, spv), slides.length);
        var minIndex = Math.max(activeIndex - Math.max(spv, amount), 0); // Next Slides

        for (var _i = activeIndex + slidesPerView; _i < maxIndex; _i += 1) {
          if (slideExist(_i)) swiper.lazy.loadInSlide(_i);
        } // Prev Slides


        for (var _i2 = minIndex; _i2 < activeIndex; _i2 += 1) {
          if (slideExist(_i2)) swiper.lazy.loadInSlide(_i2);
        }
      } else {
        var nextSlide = $wrapperEl.children("." + swiperParams.slideNextClass);
        if (nextSlide.length > 0) swiper.lazy.loadInSlide(slideIndex(nextSlide));
        var prevSlide = $wrapperEl.children("." + swiperParams.slidePrevClass);
        if (prevSlide.length > 0) swiper.lazy.loadInSlide(slideIndex(prevSlide));
      }
    }
  },
  checkInViewOnLoad: function checkInViewOnLoad() {
    var window = (0, _ssrWindow.getWindow)();
    var swiper = this;
    if (!swiper || swiper.destroyed) return;
    var $scrollElement = swiper.params.lazy.scrollingElement ? (0, _dom2.default)(swiper.params.lazy.scrollingElement) : (0, _dom2.default)(window);
    var isWindow = $scrollElement[0] === window;
    var scrollElementWidth = isWindow ? window.innerWidth : $scrollElement[0].offsetWidth;
    var scrollElementHeight = isWindow ? window.innerHeight : $scrollElement[0].offsetHeight;
    var swiperOffset = swiper.$el.offset();
    var rtl = swiper.rtlTranslate;
    var inView = false;
    if (rtl) swiperOffset.left -= swiper.$el[0].scrollLeft;
    var swiperCoord = [[swiperOffset.left, swiperOffset.top], [swiperOffset.left + swiper.width, swiperOffset.top], [swiperOffset.left, swiperOffset.top + swiper.height], [swiperOffset.left + swiper.width, swiperOffset.top + swiper.height]];

    for (var i = 0; i < swiperCoord.length; i += 1) {
      var point = swiperCoord[i];

      if (point[0] >= 0 && point[0] <= scrollElementWidth && point[1] >= 0 && point[1] <= scrollElementHeight) {
        if (point[0] === 0 && point[1] === 0) continue; // eslint-disable-line

        inView = true;
      }
    }

    var passiveListener = swiper.touchEvents.start === 'touchstart' && swiper.support.passiveListener && swiper.params.passiveListeners ? {
      passive: true,
      capture: false
    } : false;

    if (inView) {
      swiper.lazy.load();
      $scrollElement.off('scroll', swiper.lazy.checkInViewOnLoad, passiveListener);
    } else if (!swiper.lazy.scrollHandlerAttached) {
      swiper.lazy.scrollHandlerAttached = true;
      $scrollElement.on('scroll', swiper.lazy.checkInViewOnLoad, passiveListener);
    }
  }
};
exports.default = {
  name: 'lazy',
  params: {
    lazy: {
      checkInView: false,
      enabled: false,
      loadPrevNext: false,
      loadPrevNextAmount: 1,
      loadOnTransitionStart: false,
      scrollingElement: '',
      elementClass: 'swiper-lazy',
      loadingClass: 'swiper-lazy-loading',
      loadedClass: 'swiper-lazy-loaded',
      preloaderClass: 'swiper-lazy-preloader'
    }
  },
  create: function create() {
    var swiper = this;
    (0, _utils.bindModuleMethods)(swiper, {
      lazy: _extends({
        initialImageLoaded: false
      }, Lazy)
    });
  },
  on: {
    beforeInit: function beforeInit(swiper) {
      if (swiper.params.lazy.enabled && swiper.params.preloadImages) {
        swiper.params.preloadImages = false;
      }
    },
    init: function init(swiper) {
      if (swiper.params.lazy.enabled && !swiper.params.loop && swiper.params.initialSlide === 0) {
        if (swiper.params.lazy.checkInView) {
          swiper.lazy.checkInViewOnLoad();
        } else {
          swiper.lazy.load();
        }
      }
    },
    scroll: function scroll(swiper) {
      if (swiper.params.freeMode && !swiper.params.freeModeSticky) {
        swiper.lazy.load();
      }
    },
    'scrollbarDragMove resize _freeModeNoMomentumRelease': function lazyLoad(swiper) {
      if (swiper.params.lazy.enabled) {
        swiper.lazy.load();
      }
    },
    transitionStart: function transitionStart(swiper) {
      if (swiper.params.lazy.enabled) {
        if (swiper.params.lazy.loadOnTransitionStart || !swiper.params.lazy.loadOnTransitionStart && !swiper.lazy.initialImageLoaded) {
          swiper.lazy.load();
        }
      }
    },
    transitionEnd: function transitionEnd(swiper) {
      if (swiper.params.lazy.enabled && !swiper.params.lazy.loadOnTransitionStart) {
        swiper.lazy.load();
      }
    },
    slideChange: function slideChange(swiper) {
      if (swiper.params.lazy.enabled && swiper.params.cssMode) {
        swiper.lazy.load();
      }
    }
  }
};

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = __webpack_require__(0);

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }return target;
  };return _extends.apply(this, arguments);
}

/* eslint no-bitwise: ["error", { "allow": [">>"] }] */

var Controller = {
  LinearSpline: function LinearSpline(x, y) {
    var binarySearch = function search() {
      var maxIndex;
      var minIndex;
      var guess;
      return function (array, val) {
        minIndex = -1;
        maxIndex = array.length;

        while (maxIndex - minIndex > 1) {
          guess = maxIndex + minIndex >> 1;

          if (array[guess] <= val) {
            minIndex = guess;
          } else {
            maxIndex = guess;
          }
        }

        return maxIndex;
      };
    }();

    this.x = x;
    this.y = y;
    this.lastIndex = x.length - 1; // Given an x value (x2), return the expected y2 value:
    // (x1,y1) is the known point before given value,
    // (x3,y3) is the known point after given value.

    var i1;
    var i3;

    this.interpolate = function interpolate(x2) {
      if (!x2) return 0; // Get the indexes of x1 and x3 (the array indexes before and after given x2):

      i3 = binarySearch(this.x, x2);
      i1 = i3 - 1; // We have our indexes i1 & i3, so we can calculate already:
      // y2 := ((x2−x1) × (y3−y1)) ÷ (x3−x1) + y1

      return (x2 - this.x[i1]) * (this.y[i3] - this.y[i1]) / (this.x[i3] - this.x[i1]) + this.y[i1];
    };

    return this;
  },
  // xxx: for now i will just save one spline function to to
  getInterpolateFunction: function getInterpolateFunction(c) {
    var swiper = this;

    if (!swiper.controller.spline) {
      swiper.controller.spline = swiper.params.loop ? new Controller.LinearSpline(swiper.slidesGrid, c.slidesGrid) : new Controller.LinearSpline(swiper.snapGrid, c.snapGrid);
    }
  },
  setTranslate: function setTranslate(_setTranslate, byController) {
    var swiper = this;
    var controlled = swiper.controller.control;
    var multiplier;
    var controlledTranslate;
    var Swiper = swiper.constructor;

    function setControlledTranslate(c) {
      // this will create an Interpolate function based on the snapGrids
      // x is the Grid of the scrolled scroller and y will be the controlled scroller
      // it makes sense to create this only once and recall it for the interpolation
      // the function does a lot of value caching for performance
      var translate = swiper.rtlTranslate ? -swiper.translate : swiper.translate;

      if (swiper.params.controller.by === 'slide') {
        swiper.controller.getInterpolateFunction(c); // i am not sure why the values have to be multiplicated this way, tried to invert the snapGrid
        // but it did not work out

        controlledTranslate = -swiper.controller.spline.interpolate(-translate);
      }

      if (!controlledTranslate || swiper.params.controller.by === 'container') {
        multiplier = (c.maxTranslate() - c.minTranslate()) / (swiper.maxTranslate() - swiper.minTranslate());
        controlledTranslate = (translate - swiper.minTranslate()) * multiplier + c.minTranslate();
      }

      if (swiper.params.controller.inverse) {
        controlledTranslate = c.maxTranslate() - controlledTranslate;
      }

      c.updateProgress(controlledTranslate);
      c.setTranslate(controlledTranslate, swiper);
      c.updateActiveIndex();
      c.updateSlidesClasses();
    }

    if (Array.isArray(controlled)) {
      for (var i = 0; i < controlled.length; i += 1) {
        if (controlled[i] !== byController && controlled[i] instanceof Swiper) {
          setControlledTranslate(controlled[i]);
        }
      }
    } else if (controlled instanceof Swiper && byController !== controlled) {
      setControlledTranslate(controlled);
    }
  },
  setTransition: function setTransition(duration, byController) {
    var swiper = this;
    var Swiper = swiper.constructor;
    var controlled = swiper.controller.control;
    var i;

    function setControlledTransition(c) {
      c.setTransition(duration, swiper);

      if (duration !== 0) {
        c.transitionStart();

        if (c.params.autoHeight) {
          (0, _utils.nextTick)(function () {
            c.updateAutoHeight();
          });
        }

        c.$wrapperEl.transitionEnd(function () {
          if (!controlled) return;

          if (c.params.loop && swiper.params.controller.by === 'slide') {
            c.loopFix();
          }

          c.transitionEnd();
        });
      }
    }

    if (Array.isArray(controlled)) {
      for (i = 0; i < controlled.length; i += 1) {
        if (controlled[i] !== byController && controlled[i] instanceof Swiper) {
          setControlledTransition(controlled[i]);
        }
      }
    } else if (controlled instanceof Swiper && byController !== controlled) {
      setControlledTransition(controlled);
    }
  }
};
exports.default = {
  name: 'controller',
  params: {
    controller: {
      control: undefined,
      inverse: false,
      by: 'slide' // or 'container'

    }
  },
  create: function create() {
    var swiper = this;
    (0, _utils.bindModuleMethods)(swiper, {
      controller: _extends({
        control: swiper.params.controller.control
      }, Controller)
    });
  },
  on: {
    update: function update(swiper) {
      if (!swiper.controller.control) return;

      if (swiper.controller.spline) {
        swiper.controller.spline = undefined;
        delete swiper.controller.spline;
      }
    },
    resize: function resize(swiper) {
      if (!swiper.controller.control) return;

      if (swiper.controller.spline) {
        swiper.controller.spline = undefined;
        delete swiper.controller.spline;
      }
    },
    observerUpdate: function observerUpdate(swiper) {
      if (!swiper.controller.control) return;

      if (swiper.controller.spline) {
        swiper.controller.spline = undefined;
        delete swiper.controller.spline;
      }
    },
    setTranslate: function setTranslate(swiper, translate, byController) {
      if (!swiper.controller.control) return;
      swiper.controller.setTranslate(translate, byController);
    },
    setTransition: function setTransition(swiper, duration, byController) {
      if (!swiper.controller.control) return;
      swiper.controller.setTransition(duration, byController);
    }
  }
};

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _dom = __webpack_require__(1);

var _dom2 = _interopRequireDefault(_dom);

var _utils = __webpack_require__(0);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }return target;
  };return _extends.apply(this, arguments);
}

var A11y = {
  getRandomNumber: function getRandomNumber(size) {
    if (size === void 0) {
      size = 16;
    }

    var randomChar = function randomChar() {
      return Math.round(16 * Math.random()).toString(16);
    };

    return 'x'.repeat(size).replace(/x/g, randomChar);
  },
  makeElFocusable: function makeElFocusable($el) {
    $el.attr('tabIndex', '0');
    return $el;
  },
  makeElNotFocusable: function makeElNotFocusable($el) {
    $el.attr('tabIndex', '-1');
    return $el;
  },
  addElRole: function addElRole($el, role) {
    $el.attr('role', role);
    return $el;
  },
  addElRoleDescription: function addElRoleDescription($el, description) {
    $el.attr('aria-roledescription', description);
    return $el;
  },
  addElControls: function addElControls($el, controls) {
    $el.attr('aria-controls', controls);
    return $el;
  },
  addElLabel: function addElLabel($el, label) {
    $el.attr('aria-label', label);
    return $el;
  },
  addElId: function addElId($el, id) {
    $el.attr('id', id);
    return $el;
  },
  addElLive: function addElLive($el, live) {
    $el.attr('aria-live', live);
    return $el;
  },
  disableEl: function disableEl($el) {
    $el.attr('aria-disabled', true);
    return $el;
  },
  enableEl: function enableEl($el) {
    $el.attr('aria-disabled', false);
    return $el;
  },
  onEnterOrSpaceKey: function onEnterOrSpaceKey(e) {
    if (e.keyCode !== 13 && e.keyCode !== 32) return;
    var swiper = this;
    var params = swiper.params.a11y;
    var $targetEl = (0, _dom2.default)(e.target);

    if (swiper.navigation && swiper.navigation.$nextEl && $targetEl.is(swiper.navigation.$nextEl)) {
      if (!(swiper.isEnd && !swiper.params.loop)) {
        swiper.slideNext();
      }

      if (swiper.isEnd) {
        swiper.a11y.notify(params.lastSlideMessage);
      } else {
        swiper.a11y.notify(params.nextSlideMessage);
      }
    }

    if (swiper.navigation && swiper.navigation.$prevEl && $targetEl.is(swiper.navigation.$prevEl)) {
      if (!(swiper.isBeginning && !swiper.params.loop)) {
        swiper.slidePrev();
      }

      if (swiper.isBeginning) {
        swiper.a11y.notify(params.firstSlideMessage);
      } else {
        swiper.a11y.notify(params.prevSlideMessage);
      }
    }

    if (swiper.pagination && $targetEl.is((0, _utils.classesToSelector)(swiper.params.pagination.bulletClass))) {
      $targetEl[0].click();
    }
  },
  notify: function notify(message) {
    var swiper = this;
    var notification = swiper.a11y.liveRegion;
    if (notification.length === 0) return;
    notification.html('');
    notification.html(message);
  },
  updateNavigation: function updateNavigation() {
    var swiper = this;
    if (swiper.params.loop || !swiper.navigation) return;
    var _swiper$navigation = swiper.navigation,
        $nextEl = _swiper$navigation.$nextEl,
        $prevEl = _swiper$navigation.$prevEl;

    if ($prevEl && $prevEl.length > 0) {
      if (swiper.isBeginning) {
        swiper.a11y.disableEl($prevEl);
        swiper.a11y.makeElNotFocusable($prevEl);
      } else {
        swiper.a11y.enableEl($prevEl);
        swiper.a11y.makeElFocusable($prevEl);
      }
    }

    if ($nextEl && $nextEl.length > 0) {
      if (swiper.isEnd) {
        swiper.a11y.disableEl($nextEl);
        swiper.a11y.makeElNotFocusable($nextEl);
      } else {
        swiper.a11y.enableEl($nextEl);
        swiper.a11y.makeElFocusable($nextEl);
      }
    }
  },
  updatePagination: function updatePagination() {
    var swiper = this;
    var params = swiper.params.a11y;

    if (swiper.pagination && swiper.params.pagination.clickable && swiper.pagination.bullets && swiper.pagination.bullets.length) {
      swiper.pagination.bullets.each(function (bulletEl) {
        var $bulletEl = (0, _dom2.default)(bulletEl);
        swiper.a11y.makeElFocusable($bulletEl);

        if (!swiper.params.pagination.renderBullet) {
          swiper.a11y.addElRole($bulletEl, 'button');
          swiper.a11y.addElLabel($bulletEl, params.paginationBulletMessage.replace(/\{\{index\}\}/, $bulletEl.index() + 1));
        }
      });
    }
  },
  init: function init() {
    var swiper = this;
    var params = swiper.params.a11y;
    swiper.$el.append(swiper.a11y.liveRegion); // Container

    var $containerEl = swiper.$el;

    if (params.containerRoleDescriptionMessage) {
      swiper.a11y.addElRoleDescription($containerEl, params.containerRoleDescriptionMessage);
    }

    if (params.containerMessage) {
      swiper.a11y.addElLabel($containerEl, params.containerMessage);
    } // Wrapper


    var $wrapperEl = swiper.$wrapperEl;
    var wrapperId = $wrapperEl.attr('id') || "swiper-wrapper-" + swiper.a11y.getRandomNumber(16);
    var live = swiper.params.autoplay && swiper.params.autoplay.enabled ? 'off' : 'polite';
    swiper.a11y.addElId($wrapperEl, wrapperId);
    swiper.a11y.addElLive($wrapperEl, live); // Slide

    if (params.itemRoleDescriptionMessage) {
      swiper.a11y.addElRoleDescription((0, _dom2.default)(swiper.slides), params.itemRoleDescriptionMessage);
    }

    swiper.a11y.addElRole((0, _dom2.default)(swiper.slides), params.slideRole);
    swiper.slides.each(function (slideEl) {
      var $slideEl = (0, _dom2.default)(slideEl);
      var ariaLabelMessage = params.slideLabelMessage.replace(/\{\{index\}\}/, $slideEl.index() + 1).replace(/\{\{slidesLength\}\}/, swiper.slides.length);
      swiper.a11y.addElLabel($slideEl, ariaLabelMessage);
    }); // Navigation

    var $nextEl;
    var $prevEl;

    if (swiper.navigation && swiper.navigation.$nextEl) {
      $nextEl = swiper.navigation.$nextEl;
    }

    if (swiper.navigation && swiper.navigation.$prevEl) {
      $prevEl = swiper.navigation.$prevEl;
    }

    if ($nextEl && $nextEl.length) {
      swiper.a11y.makeElFocusable($nextEl);

      if ($nextEl[0].tagName !== 'BUTTON') {
        swiper.a11y.addElRole($nextEl, 'button');
        $nextEl.on('keydown', swiper.a11y.onEnterOrSpaceKey);
      }

      swiper.a11y.addElLabel($nextEl, params.nextSlideMessage);
      swiper.a11y.addElControls($nextEl, wrapperId);
    }

    if ($prevEl && $prevEl.length) {
      swiper.a11y.makeElFocusable($prevEl);

      if ($prevEl[0].tagName !== 'BUTTON') {
        swiper.a11y.addElRole($prevEl, 'button');
        $prevEl.on('keydown', swiper.a11y.onEnterOrSpaceKey);
      }

      swiper.a11y.addElLabel($prevEl, params.prevSlideMessage);
      swiper.a11y.addElControls($prevEl, wrapperId);
    } // Pagination


    if (swiper.pagination && swiper.params.pagination.clickable && swiper.pagination.bullets && swiper.pagination.bullets.length) {
      swiper.pagination.$el.on('keydown', (0, _utils.classesToSelector)(swiper.params.pagination.bulletClass), swiper.a11y.onEnterOrSpaceKey);
    }
  },
  destroy: function destroy() {
    var swiper = this;
    if (swiper.a11y.liveRegion && swiper.a11y.liveRegion.length > 0) swiper.a11y.liveRegion.remove();
    var $nextEl;
    var $prevEl;

    if (swiper.navigation && swiper.navigation.$nextEl) {
      $nextEl = swiper.navigation.$nextEl;
    }

    if (swiper.navigation && swiper.navigation.$prevEl) {
      $prevEl = swiper.navigation.$prevEl;
    }

    if ($nextEl) {
      $nextEl.off('keydown', swiper.a11y.onEnterOrSpaceKey);
    }

    if ($prevEl) {
      $prevEl.off('keydown', swiper.a11y.onEnterOrSpaceKey);
    } // Pagination


    if (swiper.pagination && swiper.params.pagination.clickable && swiper.pagination.bullets && swiper.pagination.bullets.length) {
      swiper.pagination.$el.off('keydown', (0, _utils.classesToSelector)(swiper.params.pagination.bulletClass), swiper.a11y.onEnterOrSpaceKey);
    }
  }
};
exports.default = {
  name: 'a11y',
  params: {
    a11y: {
      enabled: true,
      notificationClass: 'swiper-notification',
      prevSlideMessage: 'Previous slide',
      nextSlideMessage: 'Next slide',
      firstSlideMessage: 'This is the first slide',
      lastSlideMessage: 'This is the last slide',
      paginationBulletMessage: 'Go to slide {{index}}',
      slideLabelMessage: '{{index}} / {{slidesLength}}',
      containerMessage: null,
      containerRoleDescriptionMessage: null,
      itemRoleDescriptionMessage: null,
      slideRole: 'group'
    }
  },
  create: function create() {
    var swiper = this;
    (0, _utils.bindModuleMethods)(swiper, {
      a11y: _extends({}, A11y, {
        liveRegion: (0, _dom2.default)("<span class=\"" + swiper.params.a11y.notificationClass + "\" aria-live=\"assertive\" aria-atomic=\"true\"></span>")
      })
    });
  },
  on: {
    afterInit: function afterInit(swiper) {
      if (!swiper.params.a11y.enabled) return;
      swiper.a11y.init();
      swiper.a11y.updateNavigation();
    },
    toEdge: function toEdge(swiper) {
      if (!swiper.params.a11y.enabled) return;
      swiper.a11y.updateNavigation();
    },
    fromEdge: function fromEdge(swiper) {
      if (!swiper.params.a11y.enabled) return;
      swiper.a11y.updateNavigation();
    },
    paginationUpdate: function paginationUpdate(swiper) {
      if (!swiper.params.a11y.enabled) return;
      swiper.a11y.updatePagination();
    },
    destroy: function destroy(swiper) {
      if (!swiper.params.a11y.enabled) return;
      swiper.a11y.destroy();
    }
  }
};

/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ssrWindow = __webpack_require__(2);

var _utils = __webpack_require__(0);

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }return target;
  };return _extends.apply(this, arguments);
}

var History = {
  init: function init() {
    var swiper = this;
    var window = (0, _ssrWindow.getWindow)();
    if (!swiper.params.history) return;

    if (!window.history || !window.history.pushState) {
      swiper.params.history.enabled = false;
      swiper.params.hashNavigation.enabled = true;
      return;
    }

    var history = swiper.history;
    history.initialized = true;
    history.paths = History.getPathValues(swiper.params.url);
    if (!history.paths.key && !history.paths.value) return;
    history.scrollToSlide(0, history.paths.value, swiper.params.runCallbacksOnInit);

    if (!swiper.params.history.replaceState) {
      window.addEventListener('popstate', swiper.history.setHistoryPopState);
    }
  },
  destroy: function destroy() {
    var swiper = this;
    var window = (0, _ssrWindow.getWindow)();

    if (!swiper.params.history.replaceState) {
      window.removeEventListener('popstate', swiper.history.setHistoryPopState);
    }
  },
  setHistoryPopState: function setHistoryPopState() {
    var swiper = this;
    swiper.history.paths = History.getPathValues(swiper.params.url);
    swiper.history.scrollToSlide(swiper.params.speed, swiper.history.paths.value, false);
  },
  getPathValues: function getPathValues(urlOverride) {
    var window = (0, _ssrWindow.getWindow)();
    var location;

    if (urlOverride) {
      location = new URL(urlOverride);
    } else {
      location = window.location;
    }

    var pathArray = location.pathname.slice(1).split('/').filter(function (part) {
      return part !== '';
    });
    var total = pathArray.length;
    var key = pathArray[total - 2];
    var value = pathArray[total - 1];
    return {
      key: key,
      value: value
    };
  },
  setHistory: function setHistory(key, index) {
    var swiper = this;
    var window = (0, _ssrWindow.getWindow)();
    if (!swiper.history.initialized || !swiper.params.history.enabled) return;
    var location;

    if (swiper.params.url) {
      location = new URL(swiper.params.url);
    } else {
      location = window.location;
    }

    var slide = swiper.slides.eq(index);
    var value = History.slugify(slide.attr('data-history'));

    if (swiper.params.history.root.length > 0) {
      var root = swiper.params.history.root;
      if (root[root.length - 1] === '/') root = root.slice(0, root.length - 1);
      value = root + "/" + key + "/" + value;
    } else if (!location.pathname.includes(key)) {
      value = key + "/" + value;
    }

    var currentState = window.history.state;

    if (currentState && currentState.value === value) {
      return;
    }

    if (swiper.params.history.replaceState) {
      window.history.replaceState({
        value: value
      }, null, value);
    } else {
      window.history.pushState({
        value: value
      }, null, value);
    }
  },
  slugify: function slugify(text) {
    return text.toString().replace(/\s+/g, '-').replace(/[^\w-]+/g, '').replace(/--+/g, '-').replace(/^-+/, '').replace(/-+$/, '');
  },
  scrollToSlide: function scrollToSlide(speed, value, runCallbacks) {
    var swiper = this;

    if (value) {
      for (var i = 0, length = swiper.slides.length; i < length; i += 1) {
        var slide = swiper.slides.eq(i);
        var slideHistory = History.slugify(slide.attr('data-history'));

        if (slideHistory === value && !slide.hasClass(swiper.params.slideDuplicateClass)) {
          var index = slide.index();
          swiper.slideTo(index, speed, runCallbacks);
        }
      }
    } else {
      swiper.slideTo(0, speed, runCallbacks);
    }
  }
};
exports.default = {
  name: 'history',
  params: {
    history: {
      enabled: false,
      root: '',
      replaceState: false,
      key: 'slides'
    }
  },
  create: function create() {
    var swiper = this;
    (0, _utils.bindModuleMethods)(swiper, {
      history: _extends({}, History)
    });
  },
  on: {
    init: function init(swiper) {
      if (swiper.params.history.enabled) {
        swiper.history.init();
      }
    },
    destroy: function destroy(swiper) {
      if (swiper.params.history.enabled) {
        swiper.history.destroy();
      }
    },
    'transitionEnd _freeModeNoMomentumRelease': function transitionEnd_freeModeNoMomentumRelease(swiper) {
      if (swiper.history.initialized) {
        swiper.history.setHistory(swiper.params.history.key, swiper.activeIndex);
      }
    },
    slideChange: function slideChange(swiper) {
      if (swiper.history.initialized && swiper.params.cssMode) {
        swiper.history.setHistory(swiper.params.history.key, swiper.activeIndex);
      }
    }
  }
};

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ssrWindow = __webpack_require__(2);

var _dom = __webpack_require__(1);

var _dom2 = _interopRequireDefault(_dom);

var _utils = __webpack_require__(0);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }return target;
  };return _extends.apply(this, arguments);
}

var HashNavigation = {
  onHashCange: function onHashCange() {
    var swiper = this;
    var document = (0, _ssrWindow.getDocument)();
    swiper.emit('hashChange');
    var newHash = document.location.hash.replace('#', '');
    var activeSlideHash = swiper.slides.eq(swiper.activeIndex).attr('data-hash');

    if (newHash !== activeSlideHash) {
      var newIndex = swiper.$wrapperEl.children("." + swiper.params.slideClass + "[data-hash=\"" + newHash + "\"]").index();
      if (typeof newIndex === 'undefined') return;
      swiper.slideTo(newIndex);
    }
  },
  setHash: function setHash() {
    var swiper = this;
    var window = (0, _ssrWindow.getWindow)();
    var document = (0, _ssrWindow.getDocument)();
    if (!swiper.hashNavigation.initialized || !swiper.params.hashNavigation.enabled) return;

    if (swiper.params.hashNavigation.replaceState && window.history && window.history.replaceState) {
      window.history.replaceState(null, null, "#" + swiper.slides.eq(swiper.activeIndex).attr('data-hash') || '');
      swiper.emit('hashSet');
    } else {
      var slide = swiper.slides.eq(swiper.activeIndex);
      var hash = slide.attr('data-hash') || slide.attr('data-history');
      document.location.hash = hash || '';
      swiper.emit('hashSet');
    }
  },
  init: function init() {
    var swiper = this;
    var document = (0, _ssrWindow.getDocument)();
    var window = (0, _ssrWindow.getWindow)();
    if (!swiper.params.hashNavigation.enabled || swiper.params.history && swiper.params.history.enabled) return;
    swiper.hashNavigation.initialized = true;
    var hash = document.location.hash.replace('#', '');

    if (hash) {
      var speed = 0;

      for (var i = 0, length = swiper.slides.length; i < length; i += 1) {
        var slide = swiper.slides.eq(i);
        var slideHash = slide.attr('data-hash') || slide.attr('data-history');

        if (slideHash === hash && !slide.hasClass(swiper.params.slideDuplicateClass)) {
          var index = slide.index();
          swiper.slideTo(index, speed, swiper.params.runCallbacksOnInit, true);
        }
      }
    }

    if (swiper.params.hashNavigation.watchState) {
      (0, _dom2.default)(window).on('hashchange', swiper.hashNavigation.onHashCange);
    }
  },
  destroy: function destroy() {
    var swiper = this;
    var window = (0, _ssrWindow.getWindow)();

    if (swiper.params.hashNavigation.watchState) {
      (0, _dom2.default)(window).off('hashchange', swiper.hashNavigation.onHashCange);
    }
  }
};
exports.default = {
  name: 'hash-navigation',
  params: {
    hashNavigation: {
      enabled: false,
      replaceState: false,
      watchState: false
    }
  },
  create: function create() {
    var swiper = this;
    (0, _utils.bindModuleMethods)(swiper, {
      hashNavigation: _extends({
        initialized: false
      }, HashNavigation)
    });
  },
  on: {
    init: function init(swiper) {
      if (swiper.params.hashNavigation.enabled) {
        swiper.hashNavigation.init();
      }
    },
    destroy: function destroy(swiper) {
      if (swiper.params.hashNavigation.enabled) {
        swiper.hashNavigation.destroy();
      }
    },
    'transitionEnd _freeModeNoMomentumRelease': function transitionEnd_freeModeNoMomentumRelease(swiper) {
      if (swiper.hashNavigation.initialized) {
        swiper.hashNavigation.setHash();
      }
    },
    slideChange: function slideChange(swiper) {
      if (swiper.hashNavigation.initialized && swiper.params.cssMode) {
        swiper.hashNavigation.setHash();
      }
    }
  }
};

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ssrWindow = __webpack_require__(2);

var _utils = __webpack_require__(0);

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }return target;
  };return _extends.apply(this, arguments);
}

/* eslint no-underscore-dangle: "off" */

var Autoplay = {
  run: function run() {
    var swiper = this;
    var $activeSlideEl = swiper.slides.eq(swiper.activeIndex);
    var delay = swiper.params.autoplay.delay;

    if ($activeSlideEl.attr('data-swiper-autoplay')) {
      delay = $activeSlideEl.attr('data-swiper-autoplay') || swiper.params.autoplay.delay;
    }

    clearTimeout(swiper.autoplay.timeout);
    swiper.autoplay.timeout = (0, _utils.nextTick)(function () {
      var autoplayResult;

      if (swiper.params.autoplay.reverseDirection) {
        if (swiper.params.loop) {
          swiper.loopFix();
          autoplayResult = swiper.slidePrev(swiper.params.speed, true, true);
          swiper.emit('autoplay');
        } else if (!swiper.isBeginning) {
          autoplayResult = swiper.slidePrev(swiper.params.speed, true, true);
          swiper.emit('autoplay');
        } else if (!swiper.params.autoplay.stopOnLastSlide) {
          autoplayResult = swiper.slideTo(swiper.slides.length - 1, swiper.params.speed, true, true);
          swiper.emit('autoplay');
        } else {
          swiper.autoplay.stop();
        }
      } else if (swiper.params.loop) {
        swiper.loopFix();
        autoplayResult = swiper.slideNext(swiper.params.speed, true, true);
        swiper.emit('autoplay');
      } else if (!swiper.isEnd) {
        autoplayResult = swiper.slideNext(swiper.params.speed, true, true);
        swiper.emit('autoplay');
      } else if (!swiper.params.autoplay.stopOnLastSlide) {
        autoplayResult = swiper.slideTo(0, swiper.params.speed, true, true);
        swiper.emit('autoplay');
      } else {
        swiper.autoplay.stop();
      }

      if (swiper.params.cssMode && swiper.autoplay.running) swiper.autoplay.run();else if (autoplayResult === false) {
        swiper.autoplay.run();
      }
    }, delay);
  },
  start: function start() {
    var swiper = this;
    if (typeof swiper.autoplay.timeout !== 'undefined') return false;
    if (swiper.autoplay.running) return false;
    swiper.autoplay.running = true;
    swiper.emit('autoplayStart');
    swiper.autoplay.run();
    return true;
  },
  stop: function stop() {
    var swiper = this;
    if (!swiper.autoplay.running) return false;
    if (typeof swiper.autoplay.timeout === 'undefined') return false;

    if (swiper.autoplay.timeout) {
      clearTimeout(swiper.autoplay.timeout);
      swiper.autoplay.timeout = undefined;
    }

    swiper.autoplay.running = false;
    swiper.emit('autoplayStop');
    return true;
  },
  pause: function pause(speed) {
    var swiper = this;
    if (!swiper.autoplay.running) return;
    if (swiper.autoplay.paused) return;
    if (swiper.autoplay.timeout) clearTimeout(swiper.autoplay.timeout);
    swiper.autoplay.paused = true;

    if (speed === 0 || !swiper.params.autoplay.waitForTransition) {
      swiper.autoplay.paused = false;
      swiper.autoplay.run();
    } else {
      ['transitionend', 'webkitTransitionEnd'].forEach(function (event) {
        swiper.$wrapperEl[0].addEventListener(event, swiper.autoplay.onTransitionEnd);
      });
    }
  },
  onVisibilityChange: function onVisibilityChange() {
    var swiper = this;
    var document = (0, _ssrWindow.getDocument)();

    if (document.visibilityState === 'hidden' && swiper.autoplay.running) {
      swiper.autoplay.pause();
    }

    if (document.visibilityState === 'visible' && swiper.autoplay.paused) {
      swiper.autoplay.run();
      swiper.autoplay.paused = false;
    }
  },
  onTransitionEnd: function onTransitionEnd(e) {
    var swiper = this;
    if (!swiper || swiper.destroyed || !swiper.$wrapperEl) return;
    if (e.target !== swiper.$wrapperEl[0]) return;
    ['transitionend', 'webkitTransitionEnd'].forEach(function (event) {
      swiper.$wrapperEl[0].removeEventListener(event, swiper.autoplay.onTransitionEnd);
    });
    swiper.autoplay.paused = false;

    if (!swiper.autoplay.running) {
      swiper.autoplay.stop();
    } else {
      swiper.autoplay.run();
    }
  },
  onMouseEnter: function onMouseEnter() {
    var swiper = this;

    if (swiper.params.autoplay.disableOnInteraction) {
      swiper.autoplay.stop();
    } else {
      swiper.autoplay.pause();
    }

    ['transitionend', 'webkitTransitionEnd'].forEach(function (event) {
      swiper.$wrapperEl[0].removeEventListener(event, swiper.autoplay.onTransitionEnd);
    });
  },
  onMouseLeave: function onMouseLeave() {
    var swiper = this;

    if (swiper.params.autoplay.disableOnInteraction) {
      return;
    }

    swiper.autoplay.paused = false;
    swiper.autoplay.run();
  },
  attachMouseEvents: function attachMouseEvents() {
    var swiper = this;

    if (swiper.params.autoplay.pauseOnMouseEnter) {
      swiper.$el.on('mouseenter', swiper.autoplay.onMouseEnter);
      swiper.$el.on('mouseleave', swiper.autoplay.onMouseLeave);
    }
  },
  detachMouseEvents: function detachMouseEvents() {
    var swiper = this;
    swiper.$el.off('mouseenter', swiper.autoplay.onMouseEnter);
    swiper.$el.off('mouseleave', swiper.autoplay.onMouseLeave);
  }
};
exports.default = {
  name: 'autoplay',
  params: {
    autoplay: {
      enabled: false,
      delay: 3000,
      waitForTransition: true,
      disableOnInteraction: true,
      stopOnLastSlide: false,
      reverseDirection: false,
      pauseOnMouseEnter: false
    }
  },
  create: function create() {
    var swiper = this;
    (0, _utils.bindModuleMethods)(swiper, {
      autoplay: _extends({}, Autoplay, {
        running: false,
        paused: false
      })
    });
  },
  on: {
    init: function init(swiper) {
      if (swiper.params.autoplay.enabled) {
        swiper.autoplay.start();
        var document = (0, _ssrWindow.getDocument)();
        document.addEventListener('visibilitychange', swiper.autoplay.onVisibilityChange);
        swiper.autoplay.attachMouseEvents();
      }
    },
    beforeTransitionStart: function beforeTransitionStart(swiper, speed, internal) {
      if (swiper.autoplay.running) {
        if (internal || !swiper.params.autoplay.disableOnInteraction) {
          swiper.autoplay.pause(speed);
        } else {
          swiper.autoplay.stop();
        }
      }
    },
    sliderFirstMove: function sliderFirstMove(swiper) {
      if (swiper.autoplay.running) {
        if (swiper.params.autoplay.disableOnInteraction) {
          swiper.autoplay.stop();
        } else {
          swiper.autoplay.pause();
        }
      }
    },
    touchEnd: function touchEnd(swiper) {
      if (swiper.params.cssMode && swiper.autoplay.paused && !swiper.params.autoplay.disableOnInteraction) {
        swiper.autoplay.run();
      }
    },
    destroy: function destroy(swiper) {
      swiper.autoplay.detachMouseEvents();

      if (swiper.autoplay.running) {
        swiper.autoplay.stop();
      }

      var document = (0, _ssrWindow.getDocument)();
      document.removeEventListener('visibilitychange', swiper.autoplay.onVisibilityChange);
    }
  }
};

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = __webpack_require__(0);

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }return target;
  };return _extends.apply(this, arguments);
}

var Fade = {
  setTranslate: function setTranslate() {
    var swiper = this;
    var slides = swiper.slides;

    for (var i = 0; i < slides.length; i += 1) {
      var $slideEl = swiper.slides.eq(i);
      var offset = $slideEl[0].swiperSlideOffset;
      var tx = -offset;
      if (!swiper.params.virtualTranslate) tx -= swiper.translate;
      var ty = 0;

      if (!swiper.isHorizontal()) {
        ty = tx;
        tx = 0;
      }

      var slideOpacity = swiper.params.fadeEffect.crossFade ? Math.max(1 - Math.abs($slideEl[0].progress), 0) : 1 + Math.min(Math.max($slideEl[0].progress, -1), 0);
      $slideEl.css({
        opacity: slideOpacity
      }).transform("translate3d(" + tx + "px, " + ty + "px, 0px)");
    }
  },
  setTransition: function setTransition(duration) {
    var swiper = this;
    var slides = swiper.slides,
        $wrapperEl = swiper.$wrapperEl;
    slides.transition(duration);

    if (swiper.params.virtualTranslate && duration !== 0) {
      var eventTriggered = false;
      slides.transitionEnd(function () {
        if (eventTriggered) return;
        if (!swiper || swiper.destroyed) return;
        eventTriggered = true;
        swiper.animating = false;
        var triggerEvents = ['webkitTransitionEnd', 'transitionend'];

        for (var i = 0; i < triggerEvents.length; i += 1) {
          $wrapperEl.trigger(triggerEvents[i]);
        }
      });
    }
  }
};
exports.default = {
  name: 'effect-fade',
  params: {
    fadeEffect: {
      crossFade: false
    }
  },
  create: function create() {
    var swiper = this;
    (0, _utils.bindModuleMethods)(swiper, {
      fadeEffect: _extends({}, Fade)
    });
  },
  on: {
    beforeInit: function beforeInit(swiper) {
      if (swiper.params.effect !== 'fade') return;
      swiper.classNames.push(swiper.params.containerModifierClass + "fade");
      var overwriteParams = {
        slidesPerView: 1,
        slidesPerColumn: 1,
        slidesPerGroup: 1,
        watchSlidesProgress: true,
        spaceBetween: 0,
        virtualTranslate: true
      };
      (0, _utils.extend)(swiper.params, overwriteParams);
      (0, _utils.extend)(swiper.originalParams, overwriteParams);
    },
    setTranslate: function setTranslate(swiper) {
      if (swiper.params.effect !== 'fade') return;
      swiper.fadeEffect.setTranslate();
    },
    setTransition: function setTransition(swiper, duration) {
      if (swiper.params.effect !== 'fade') return;
      swiper.fadeEffect.setTransition(duration);
    }
  }
};

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _dom = __webpack_require__(1);

var _dom2 = _interopRequireDefault(_dom);

var _utils = __webpack_require__(0);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }return target;
  };return _extends.apply(this, arguments);
}

var Cube = {
  setTranslate: function setTranslate() {
    var swiper = this;
    var $el = swiper.$el,
        $wrapperEl = swiper.$wrapperEl,
        slides = swiper.slides,
        swiperWidth = swiper.width,
        swiperHeight = swiper.height,
        rtl = swiper.rtlTranslate,
        swiperSize = swiper.size,
        browser = swiper.browser;
    var params = swiper.params.cubeEffect;
    var isHorizontal = swiper.isHorizontal();
    var isVirtual = swiper.virtual && swiper.params.virtual.enabled;
    var wrapperRotate = 0;
    var $cubeShadowEl;

    if (params.shadow) {
      if (isHorizontal) {
        $cubeShadowEl = $wrapperEl.find('.swiper-cube-shadow');

        if ($cubeShadowEl.length === 0) {
          $cubeShadowEl = (0, _dom2.default)('<div class="swiper-cube-shadow"></div>');
          $wrapperEl.append($cubeShadowEl);
        }

        $cubeShadowEl.css({
          height: swiperWidth + "px"
        });
      } else {
        $cubeShadowEl = $el.find('.swiper-cube-shadow');

        if ($cubeShadowEl.length === 0) {
          $cubeShadowEl = (0, _dom2.default)('<div class="swiper-cube-shadow"></div>');
          $el.append($cubeShadowEl);
        }
      }
    }

    for (var i = 0; i < slides.length; i += 1) {
      var $slideEl = slides.eq(i);
      var slideIndex = i;

      if (isVirtual) {
        slideIndex = parseInt($slideEl.attr('data-swiper-slide-index'), 10);
      }

      var slideAngle = slideIndex * 90;
      var round = Math.floor(slideAngle / 360);

      if (rtl) {
        slideAngle = -slideAngle;
        round = Math.floor(-slideAngle / 360);
      }

      var progress = Math.max(Math.min($slideEl[0].progress, 1), -1);
      var tx = 0;
      var ty = 0;
      var tz = 0;

      if (slideIndex % 4 === 0) {
        tx = -round * 4 * swiperSize;
        tz = 0;
      } else if ((slideIndex - 1) % 4 === 0) {
        tx = 0;
        tz = -round * 4 * swiperSize;
      } else if ((slideIndex - 2) % 4 === 0) {
        tx = swiperSize + round * 4 * swiperSize;
        tz = swiperSize;
      } else if ((slideIndex - 3) % 4 === 0) {
        tx = -swiperSize;
        tz = 3 * swiperSize + swiperSize * 4 * round;
      }

      if (rtl) {
        tx = -tx;
      }

      if (!isHorizontal) {
        ty = tx;
        tx = 0;
      }

      var transform = "rotateX(" + (isHorizontal ? 0 : -slideAngle) + "deg) rotateY(" + (isHorizontal ? slideAngle : 0) + "deg) translate3d(" + tx + "px, " + ty + "px, " + tz + "px)";

      if (progress <= 1 && progress > -1) {
        wrapperRotate = slideIndex * 90 + progress * 90;
        if (rtl) wrapperRotate = -slideIndex * 90 - progress * 90;
      }

      $slideEl.transform(transform);

      if (params.slideShadows) {
        // Set shadows
        var shadowBefore = isHorizontal ? $slideEl.find('.swiper-slide-shadow-left') : $slideEl.find('.swiper-slide-shadow-top');
        var shadowAfter = isHorizontal ? $slideEl.find('.swiper-slide-shadow-right') : $slideEl.find('.swiper-slide-shadow-bottom');

        if (shadowBefore.length === 0) {
          shadowBefore = (0, _dom2.default)("<div class=\"swiper-slide-shadow-" + (isHorizontal ? 'left' : 'top') + "\"></div>");
          $slideEl.append(shadowBefore);
        }

        if (shadowAfter.length === 0) {
          shadowAfter = (0, _dom2.default)("<div class=\"swiper-slide-shadow-" + (isHorizontal ? 'right' : 'bottom') + "\"></div>");
          $slideEl.append(shadowAfter);
        }

        if (shadowBefore.length) shadowBefore[0].style.opacity = Math.max(-progress, 0);
        if (shadowAfter.length) shadowAfter[0].style.opacity = Math.max(progress, 0);
      }
    }

    $wrapperEl.css({
      '-webkit-transform-origin': "50% 50% -" + swiperSize / 2 + "px",
      '-moz-transform-origin': "50% 50% -" + swiperSize / 2 + "px",
      '-ms-transform-origin': "50% 50% -" + swiperSize / 2 + "px",
      'transform-origin': "50% 50% -" + swiperSize / 2 + "px"
    });

    if (params.shadow) {
      if (isHorizontal) {
        $cubeShadowEl.transform("translate3d(0px, " + (swiperWidth / 2 + params.shadowOffset) + "px, " + -swiperWidth / 2 + "px) rotateX(90deg) rotateZ(0deg) scale(" + params.shadowScale + ")");
      } else {
        var shadowAngle = Math.abs(wrapperRotate) - Math.floor(Math.abs(wrapperRotate) / 90) * 90;
        var multiplier = 1.5 - (Math.sin(shadowAngle * 2 * Math.PI / 360) / 2 + Math.cos(shadowAngle * 2 * Math.PI / 360) / 2);
        var scale1 = params.shadowScale;
        var scale2 = params.shadowScale / multiplier;
        var offset = params.shadowOffset;
        $cubeShadowEl.transform("scale3d(" + scale1 + ", 1, " + scale2 + ") translate3d(0px, " + (swiperHeight / 2 + offset) + "px, " + -swiperHeight / 2 / scale2 + "px) rotateX(-90deg)");
      }
    }

    var zFactor = browser.isSafari || browser.isWebView ? -swiperSize / 2 : 0;
    $wrapperEl.transform("translate3d(0px,0," + zFactor + "px) rotateX(" + (swiper.isHorizontal() ? 0 : wrapperRotate) + "deg) rotateY(" + (swiper.isHorizontal() ? -wrapperRotate : 0) + "deg)");
  },
  setTransition: function setTransition(duration) {
    var swiper = this;
    var $el = swiper.$el,
        slides = swiper.slides;
    slides.transition(duration).find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').transition(duration);

    if (swiper.params.cubeEffect.shadow && !swiper.isHorizontal()) {
      $el.find('.swiper-cube-shadow').transition(duration);
    }
  }
};
exports.default = {
  name: 'effect-cube',
  params: {
    cubeEffect: {
      slideShadows: true,
      shadow: true,
      shadowOffset: 20,
      shadowScale: 0.94
    }
  },
  create: function create() {
    var swiper = this;
    (0, _utils.bindModuleMethods)(swiper, {
      cubeEffect: _extends({}, Cube)
    });
  },
  on: {
    beforeInit: function beforeInit(swiper) {
      if (swiper.params.effect !== 'cube') return;
      swiper.classNames.push(swiper.params.containerModifierClass + "cube");
      swiper.classNames.push(swiper.params.containerModifierClass + "3d");
      var overwriteParams = {
        slidesPerView: 1,
        slidesPerColumn: 1,
        slidesPerGroup: 1,
        watchSlidesProgress: true,
        resistanceRatio: 0,
        spaceBetween: 0,
        centeredSlides: false,
        virtualTranslate: true
      };
      (0, _utils.extend)(swiper.params, overwriteParams);
      (0, _utils.extend)(swiper.originalParams, overwriteParams);
    },
    setTranslate: function setTranslate(swiper) {
      if (swiper.params.effect !== 'cube') return;
      swiper.cubeEffect.setTranslate();
    },
    setTransition: function setTransition(swiper, duration) {
      if (swiper.params.effect !== 'cube') return;
      swiper.cubeEffect.setTransition(duration);
    }
  }
};

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _dom = __webpack_require__(1);

var _dom2 = _interopRequireDefault(_dom);

var _utils = __webpack_require__(0);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }return target;
  };return _extends.apply(this, arguments);
}

var Flip = {
  setTranslate: function setTranslate() {
    var swiper = this;
    var slides = swiper.slides,
        rtl = swiper.rtlTranslate;

    for (var i = 0; i < slides.length; i += 1) {
      var $slideEl = slides.eq(i);
      var progress = $slideEl[0].progress;

      if (swiper.params.flipEffect.limitRotation) {
        progress = Math.max(Math.min($slideEl[0].progress, 1), -1);
      }

      var offset = $slideEl[0].swiperSlideOffset;
      var rotate = -180 * progress;
      var rotateY = rotate;
      var rotateX = 0;
      var tx = -offset;
      var ty = 0;

      if (!swiper.isHorizontal()) {
        ty = tx;
        tx = 0;
        rotateX = -rotateY;
        rotateY = 0;
      } else if (rtl) {
        rotateY = -rotateY;
      }

      $slideEl[0].style.zIndex = -Math.abs(Math.round(progress)) + slides.length;

      if (swiper.params.flipEffect.slideShadows) {
        // Set shadows
        var shadowBefore = swiper.isHorizontal() ? $slideEl.find('.swiper-slide-shadow-left') : $slideEl.find('.swiper-slide-shadow-top');
        var shadowAfter = swiper.isHorizontal() ? $slideEl.find('.swiper-slide-shadow-right') : $slideEl.find('.swiper-slide-shadow-bottom');

        if (shadowBefore.length === 0) {
          shadowBefore = (0, _dom2.default)("<div class=\"swiper-slide-shadow-" + (swiper.isHorizontal() ? 'left' : 'top') + "\"></div>");
          $slideEl.append(shadowBefore);
        }

        if (shadowAfter.length === 0) {
          shadowAfter = (0, _dom2.default)("<div class=\"swiper-slide-shadow-" + (swiper.isHorizontal() ? 'right' : 'bottom') + "\"></div>");
          $slideEl.append(shadowAfter);
        }

        if (shadowBefore.length) shadowBefore[0].style.opacity = Math.max(-progress, 0);
        if (shadowAfter.length) shadowAfter[0].style.opacity = Math.max(progress, 0);
      }

      $slideEl.transform("translate3d(" + tx + "px, " + ty + "px, 0px) rotateX(" + rotateX + "deg) rotateY(" + rotateY + "deg)");
    }
  },
  setTransition: function setTransition(duration) {
    var swiper = this;
    var slides = swiper.slides,
        activeIndex = swiper.activeIndex,
        $wrapperEl = swiper.$wrapperEl;
    slides.transition(duration).find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').transition(duration);

    if (swiper.params.virtualTranslate && duration !== 0) {
      var eventTriggered = false; // eslint-disable-next-line

      slides.eq(activeIndex).transitionEnd(function onTransitionEnd() {
        if (eventTriggered) return;
        if (!swiper || swiper.destroyed) return; // if (!$(this).hasClass(swiper.params.slideActiveClass)) return;

        eventTriggered = true;
        swiper.animating = false;
        var triggerEvents = ['webkitTransitionEnd', 'transitionend'];

        for (var i = 0; i < triggerEvents.length; i += 1) {
          $wrapperEl.trigger(triggerEvents[i]);
        }
      });
    }
  }
};
exports.default = {
  name: 'effect-flip',
  params: {
    flipEffect: {
      slideShadows: true,
      limitRotation: true
    }
  },
  create: function create() {
    var swiper = this;
    (0, _utils.bindModuleMethods)(swiper, {
      flipEffect: _extends({}, Flip)
    });
  },
  on: {
    beforeInit: function beforeInit(swiper) {
      if (swiper.params.effect !== 'flip') return;
      swiper.classNames.push(swiper.params.containerModifierClass + "flip");
      swiper.classNames.push(swiper.params.containerModifierClass + "3d");
      var overwriteParams = {
        slidesPerView: 1,
        slidesPerColumn: 1,
        slidesPerGroup: 1,
        watchSlidesProgress: true,
        spaceBetween: 0,
        virtualTranslate: true
      };
      (0, _utils.extend)(swiper.params, overwriteParams);
      (0, _utils.extend)(swiper.originalParams, overwriteParams);
    },
    setTranslate: function setTranslate(swiper) {
      if (swiper.params.effect !== 'flip') return;
      swiper.flipEffect.setTranslate();
    },
    setTransition: function setTransition(swiper, duration) {
      if (swiper.params.effect !== 'flip') return;
      swiper.flipEffect.setTransition(duration);
    }
  }
};

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _dom = __webpack_require__(1);

var _dom2 = _interopRequireDefault(_dom);

var _utils = __webpack_require__(0);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }return target;
  };return _extends.apply(this, arguments);
}

var Coverflow = {
  setTranslate: function setTranslate() {
    var swiper = this;
    var swiperWidth = swiper.width,
        swiperHeight = swiper.height,
        slides = swiper.slides,
        slidesSizesGrid = swiper.slidesSizesGrid;
    var params = swiper.params.coverflowEffect;
    var isHorizontal = swiper.isHorizontal();
    var transform = swiper.translate;
    var center = isHorizontal ? -transform + swiperWidth / 2 : -transform + swiperHeight / 2;
    var rotate = isHorizontal ? params.rotate : -params.rotate;
    var translate = params.depth; // Each slide offset from center

    for (var i = 0, length = slides.length; i < length; i += 1) {
      var $slideEl = slides.eq(i);
      var slideSize = slidesSizesGrid[i];
      var slideOffset = $slideEl[0].swiperSlideOffset;
      var offsetMultiplier = (center - slideOffset - slideSize / 2) / slideSize * params.modifier;
      var rotateY = isHorizontal ? rotate * offsetMultiplier : 0;
      var rotateX = isHorizontal ? 0 : rotate * offsetMultiplier; // var rotateZ = 0

      var translateZ = -translate * Math.abs(offsetMultiplier);
      var stretch = params.stretch; // Allow percentage to make a relative stretch for responsive sliders

      if (typeof stretch === 'string' && stretch.indexOf('%') !== -1) {
        stretch = parseFloat(params.stretch) / 100 * slideSize;
      }

      var translateY = isHorizontal ? 0 : stretch * offsetMultiplier;
      var translateX = isHorizontal ? stretch * offsetMultiplier : 0;
      var scale = 1 - (1 - params.scale) * Math.abs(offsetMultiplier); // Fix for ultra small values

      if (Math.abs(translateX) < 0.001) translateX = 0;
      if (Math.abs(translateY) < 0.001) translateY = 0;
      if (Math.abs(translateZ) < 0.001) translateZ = 0;
      if (Math.abs(rotateY) < 0.001) rotateY = 0;
      if (Math.abs(rotateX) < 0.001) rotateX = 0;
      if (Math.abs(scale) < 0.001) scale = 0;
      var slideTransform = "translate3d(" + translateX + "px," + translateY + "px," + translateZ + "px)  rotateX(" + rotateX + "deg) rotateY(" + rotateY + "deg) scale(" + scale + ")";
      $slideEl.transform(slideTransform);
      $slideEl[0].style.zIndex = -Math.abs(Math.round(offsetMultiplier)) + 1;

      if (params.slideShadows) {
        // Set shadows
        var $shadowBeforeEl = isHorizontal ? $slideEl.find('.swiper-slide-shadow-left') : $slideEl.find('.swiper-slide-shadow-top');
        var $shadowAfterEl = isHorizontal ? $slideEl.find('.swiper-slide-shadow-right') : $slideEl.find('.swiper-slide-shadow-bottom');

        if ($shadowBeforeEl.length === 0) {
          $shadowBeforeEl = (0, _dom2.default)("<div class=\"swiper-slide-shadow-" + (isHorizontal ? 'left' : 'top') + "\"></div>");
          $slideEl.append($shadowBeforeEl);
        }

        if ($shadowAfterEl.length === 0) {
          $shadowAfterEl = (0, _dom2.default)("<div class=\"swiper-slide-shadow-" + (isHorizontal ? 'right' : 'bottom') + "\"></div>");
          $slideEl.append($shadowAfterEl);
        }

        if ($shadowBeforeEl.length) $shadowBeforeEl[0].style.opacity = offsetMultiplier > 0 ? offsetMultiplier : 0;
        if ($shadowAfterEl.length) $shadowAfterEl[0].style.opacity = -offsetMultiplier > 0 ? -offsetMultiplier : 0;
      }
    }
  },
  setTransition: function setTransition(duration) {
    var swiper = this;
    swiper.slides.transition(duration).find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').transition(duration);
  }
};
exports.default = {
  name: 'effect-coverflow',
  params: {
    coverflowEffect: {
      rotate: 50,
      stretch: 0,
      depth: 100,
      scale: 1,
      modifier: 1,
      slideShadows: true
    }
  },
  create: function create() {
    var swiper = this;
    (0, _utils.bindModuleMethods)(swiper, {
      coverflowEffect: _extends({}, Coverflow)
    });
  },
  on: {
    beforeInit: function beforeInit(swiper) {
      if (swiper.params.effect !== 'coverflow') return;
      swiper.classNames.push(swiper.params.containerModifierClass + "coverflow");
      swiper.classNames.push(swiper.params.containerModifierClass + "3d");
      swiper.params.watchSlidesProgress = true;
      swiper.originalParams.watchSlidesProgress = true;
    },
    setTranslate: function setTranslate(swiper) {
      if (swiper.params.effect !== 'coverflow') return;
      swiper.coverflowEffect.setTranslate();
    },
    setTransition: function setTransition(swiper, duration) {
      if (swiper.params.effect !== 'coverflow') return;
      swiper.coverflowEffect.setTransition(duration);
    }
  }
};

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = __webpack_require__(0);

var _dom = __webpack_require__(1);

var _dom2 = _interopRequireDefault(_dom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }return target;
  };return _extends.apply(this, arguments);
}

var Thumbs = {
  init: function init() {
    var swiper = this;
    var thumbsParams = swiper.params.thumbs;
    if (swiper.thumbs.initialized) return false;
    swiper.thumbs.initialized = true;
    var SwiperClass = swiper.constructor;

    if (thumbsParams.swiper instanceof SwiperClass) {
      swiper.thumbs.swiper = thumbsParams.swiper;
      (0, _utils.extend)(swiper.thumbs.swiper.originalParams, {
        watchSlidesProgress: true,
        slideToClickedSlide: false
      });
      (0, _utils.extend)(swiper.thumbs.swiper.params, {
        watchSlidesProgress: true,
        slideToClickedSlide: false
      });
    } else if ((0, _utils.isObject)(thumbsParams.swiper)) {
      swiper.thumbs.swiper = new SwiperClass((0, _utils.extend)({}, thumbsParams.swiper, {
        watchSlidesVisibility: true,
        watchSlidesProgress: true,
        slideToClickedSlide: false
      }));
      swiper.thumbs.swiperCreated = true;
    }

    swiper.thumbs.swiper.$el.addClass(swiper.params.thumbs.thumbsContainerClass);
    swiper.thumbs.swiper.on('tap', swiper.thumbs.onThumbClick);
    return true;
  },
  onThumbClick: function onThumbClick() {
    var swiper = this;
    var thumbsSwiper = swiper.thumbs.swiper;
    if (!thumbsSwiper) return;
    var clickedIndex = thumbsSwiper.clickedIndex;
    var clickedSlide = thumbsSwiper.clickedSlide;
    if (clickedSlide && (0, _dom2.default)(clickedSlide).hasClass(swiper.params.thumbs.slideThumbActiveClass)) return;
    if (typeof clickedIndex === 'undefined' || clickedIndex === null) return;
    var slideToIndex;

    if (thumbsSwiper.params.loop) {
      slideToIndex = parseInt((0, _dom2.default)(thumbsSwiper.clickedSlide).attr('data-swiper-slide-index'), 10);
    } else {
      slideToIndex = clickedIndex;
    }

    if (swiper.params.loop) {
      var currentIndex = swiper.activeIndex;

      if (swiper.slides.eq(currentIndex).hasClass(swiper.params.slideDuplicateClass)) {
        swiper.loopFix(); // eslint-disable-next-line

        swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;
        currentIndex = swiper.activeIndex;
      }

      var prevIndex = swiper.slides.eq(currentIndex).prevAll("[data-swiper-slide-index=\"" + slideToIndex + "\"]").eq(0).index();
      var nextIndex = swiper.slides.eq(currentIndex).nextAll("[data-swiper-slide-index=\"" + slideToIndex + "\"]").eq(0).index();
      if (typeof prevIndex === 'undefined') slideToIndex = nextIndex;else if (typeof nextIndex === 'undefined') slideToIndex = prevIndex;else if (nextIndex - currentIndex < currentIndex - prevIndex) slideToIndex = nextIndex;else slideToIndex = prevIndex;
    }

    swiper.slideTo(slideToIndex);
  },
  update: function update(initial) {
    var swiper = this;
    var thumbsSwiper = swiper.thumbs.swiper;
    if (!thumbsSwiper) return;
    var slidesPerView = thumbsSwiper.params.slidesPerView === 'auto' ? thumbsSwiper.slidesPerViewDynamic() : thumbsSwiper.params.slidesPerView;
    var autoScrollOffset = swiper.params.thumbs.autoScrollOffset;
    var useOffset = autoScrollOffset && !thumbsSwiper.params.loop;

    if (swiper.realIndex !== thumbsSwiper.realIndex || useOffset) {
      var currentThumbsIndex = thumbsSwiper.activeIndex;
      var newThumbsIndex;
      var direction;

      if (thumbsSwiper.params.loop) {
        if (thumbsSwiper.slides.eq(currentThumbsIndex).hasClass(thumbsSwiper.params.slideDuplicateClass)) {
          thumbsSwiper.loopFix(); // eslint-disable-next-line

          thumbsSwiper._clientLeft = thumbsSwiper.$wrapperEl[0].clientLeft;
          currentThumbsIndex = thumbsSwiper.activeIndex;
        } // Find actual thumbs index to slide to


        var prevThumbsIndex = thumbsSwiper.slides.eq(currentThumbsIndex).prevAll("[data-swiper-slide-index=\"" + swiper.realIndex + "\"]").eq(0).index();
        var nextThumbsIndex = thumbsSwiper.slides.eq(currentThumbsIndex).nextAll("[data-swiper-slide-index=\"" + swiper.realIndex + "\"]").eq(0).index();

        if (typeof prevThumbsIndex === 'undefined') {
          newThumbsIndex = nextThumbsIndex;
        } else if (typeof nextThumbsIndex === 'undefined') {
          newThumbsIndex = prevThumbsIndex;
        } else if (nextThumbsIndex - currentThumbsIndex === currentThumbsIndex - prevThumbsIndex) {
          newThumbsIndex = thumbsSwiper.params.slidesPerGroup > 1 ? nextThumbsIndex : currentThumbsIndex;
        } else if (nextThumbsIndex - currentThumbsIndex < currentThumbsIndex - prevThumbsIndex) {
          newThumbsIndex = nextThumbsIndex;
        } else {
          newThumbsIndex = prevThumbsIndex;
        }

        direction = swiper.activeIndex > swiper.previousIndex ? 'next' : 'prev';
      } else {
        newThumbsIndex = swiper.realIndex;
        direction = newThumbsIndex > swiper.previousIndex ? 'next' : 'prev';
      }

      if (useOffset) {
        newThumbsIndex += direction === 'next' ? autoScrollOffset : -1 * autoScrollOffset;
      }

      if (thumbsSwiper.visibleSlidesIndexes && thumbsSwiper.visibleSlidesIndexes.indexOf(newThumbsIndex) < 0) {
        if (thumbsSwiper.params.centeredSlides) {
          if (newThumbsIndex > currentThumbsIndex) {
            newThumbsIndex = newThumbsIndex - Math.floor(slidesPerView / 2) + 1;
          } else {
            newThumbsIndex = newThumbsIndex + Math.floor(slidesPerView / 2) - 1;
          }
        } else if (newThumbsIndex > currentThumbsIndex && thumbsSwiper.params.slidesPerGroup === 1) {// newThumbsIndex = newThumbsIndex - slidesPerView + 1;
        }

        thumbsSwiper.slideTo(newThumbsIndex, initial ? 0 : undefined);
      }
    } // Activate thumbs


    var thumbsToActivate = 1;
    var thumbActiveClass = swiper.params.thumbs.slideThumbActiveClass;

    if (swiper.params.slidesPerView > 1 && !swiper.params.centeredSlides) {
      thumbsToActivate = swiper.params.slidesPerView;
    }

    if (!swiper.params.thumbs.multipleActiveThumbs) {
      thumbsToActivate = 1;
    }

    thumbsToActivate = Math.floor(thumbsToActivate);
    thumbsSwiper.slides.removeClass(thumbActiveClass);

    if (thumbsSwiper.params.loop || thumbsSwiper.params.virtual && thumbsSwiper.params.virtual.enabled) {
      for (var i = 0; i < thumbsToActivate; i += 1) {
        thumbsSwiper.$wrapperEl.children("[data-swiper-slide-index=\"" + (swiper.realIndex + i) + "\"]").addClass(thumbActiveClass);
      }
    } else {
      for (var _i = 0; _i < thumbsToActivate; _i += 1) {
        thumbsSwiper.slides.eq(swiper.realIndex + _i).addClass(thumbActiveClass);
      }
    }
  }
};
exports.default = {
  name: 'thumbs',
  params: {
    thumbs: {
      swiper: null,
      multipleActiveThumbs: true,
      autoScrollOffset: 0,
      slideThumbActiveClass: 'swiper-slide-thumb-active',
      thumbsContainerClass: 'swiper-container-thumbs'
    }
  },
  create: function create() {
    var swiper = this;
    (0, _utils.bindModuleMethods)(swiper, {
      thumbs: _extends({
        swiper: null,
        initialized: false
      }, Thumbs)
    });
  },
  on: {
    beforeInit: function beforeInit(swiper) {
      var thumbs = swiper.params.thumbs;
      if (!thumbs || !thumbs.swiper) return;
      swiper.thumbs.init();
      swiper.thumbs.update(true);
    },
    slideChange: function slideChange(swiper) {
      if (!swiper.thumbs.swiper) return;
      swiper.thumbs.update();
    },
    update: function update(swiper) {
      if (!swiper.thumbs.swiper) return;
      swiper.thumbs.update();
    },
    resize: function resize(swiper) {
      if (!swiper.thumbs.swiper) return;
      swiper.thumbs.update();
    },
    observerUpdate: function observerUpdate(swiper) {
      if (!swiper.thumbs.swiper) return;
      swiper.thumbs.update();
    },
    setTransition: function setTransition(swiper, duration) {
      var thumbsSwiper = swiper.thumbs.swiper;
      if (!thumbsSwiper) return;
      thumbsSwiper.setTransition(duration);
    },
    beforeDestroy: function beforeDestroy(swiper) {
      var thumbsSwiper = swiper.thumbs.swiper;
      if (!thumbsSwiper) return;

      if (swiper.thumbs.swiperCreated && thumbsSwiper) {
        thumbsSwiper.destroy();
      }
    }
  }
};

/***/ }),
/* 132 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 133 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _nouislider = __webpack_require__(135);

var _nouislider2 = _interopRequireDefault(_nouislider);

__webpack_require__(136);

var _wnumb = __webpack_require__(137);

var _wnumb2 = _interopRequireDefault(_wnumb);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var COST_OF_GOLD = {
  375: 1580,
  500: 2100,
  583: 2590,
  585: 2590,
  750: 3150,
  900: 3780,
  958: 4020,
  999: 4200
};

var priceAmountOnHand = document.querySelector('.price__amount-on-hand');
var priceSamplesList = document.querySelector('.price__samples-list');
var priceInputs = document.querySelectorAll('.price__input');
var priceRange = document.getElementById('price-range');

var goldAmount = null;
var rate = null;
var amountOnHand = null;

var moneyFormat = (0, _wnumb2.default)({
  thousand: ' ',
  suffix: ' ₽',
  decimals: 0
});

function renderAmount() {
  amountOnHand = rate * goldAmount;
  priceAmountOnHand.textContent = moneyFormat.to(amountOnHand);
}

priceInputs.forEach(function (input) {
  if (input.checked) {
    rate = COST_OF_GOLD[input.dataset.value];
  }
});

if (priceSamplesList) {
  priceSamplesList.addEventListener('click', function (event) {
    if (event.target.nodeName === 'INPUT') {
      rate = COST_OF_GOLD[event.target.dataset.value];
      renderAmount();
    }
  });
}

function onUpdate(unencoded) {
  var diff = Math.round(Number(unencoded).toFixed(1)) - Number(unencoded).toFixed(1);
  var tooltips = document.querySelector('.noUi-tooltip');

  if (diff === 0) {
    tooltips.textContent = '' + Math.round(Number(unencoded).toFixed(1));
  }

  goldAmount = Number(unencoded).toFixed(1);
  amountOnHand = rate * goldAmount;

  renderAmount();
}

if (priceRange) {
  _nouislider2.default.create(priceRange, {
    start: 38,
    step: 0.5,
    connect: [true, false],
    range: {
      min: 1,
      max: 99.9
    },
    tooltips: [(0, _wnumb2.default)({
      mark: ',',
      decimals: 1
    })]
  });

  priceRange.noUiSlider.on('update', onUpdate);
}

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function (global, factory) {
    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? factory(exports) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.noUiSlider = {}));
})(undefined, function (exports) {
    'use strict';

    exports.PipsMode = void 0;
    (function (PipsMode) {
        PipsMode["Range"] = "range";
        PipsMode["Steps"] = "steps";
        PipsMode["Positions"] = "positions";
        PipsMode["Count"] = "count";
        PipsMode["Values"] = "values";
    })(exports.PipsMode || (exports.PipsMode = {}));
    exports.PipsType = void 0;
    (function (PipsType) {
        PipsType[PipsType["None"] = -1] = "None";
        PipsType[PipsType["NoValue"] = 0] = "NoValue";
        PipsType[PipsType["LargeValue"] = 1] = "LargeValue";
        PipsType[PipsType["SmallValue"] = 2] = "SmallValue";
    })(exports.PipsType || (exports.PipsType = {}));
    //region Helper Methods
    function isValidFormatter(entry) {
        return (typeof entry === 'undefined' ? 'undefined' : _typeof(entry)) === "object" && typeof entry.to === "function" && typeof entry.from === "function";
    }
    function removeElement(el) {
        el.parentElement.removeChild(el);
    }
    function isSet(value) {
        return value !== null && value !== undefined;
    }
    // Bindable version
    function preventDefault(e) {
        e.preventDefault();
    }
    // Removes duplicates from an array.
    function unique(array) {
        return array.filter(function (a) {
            return !this[a] ? this[a] = true : false;
        }, {});
    }
    // Round a value to the closest 'to'.
    function closest(value, to) {
        return Math.round(value / to) * to;
    }
    // Current position of an element relative to the document.
    function offset(elem, orientation) {
        var rect = elem.getBoundingClientRect();
        var doc = elem.ownerDocument;
        var docElem = doc.documentElement;
        var pageOffset = getPageOffset(doc);
        // getBoundingClientRect contains left scroll in Chrome on Android.
        // I haven't found a feature detection that proves this. Worst case
        // scenario on mis-match: the 'tap' feature on horizontal sliders breaks.
        if (/webkit.*Chrome.*Mobile/i.test(navigator.userAgent)) {
            pageOffset.x = 0;
        }
        return orientation ? rect.top + pageOffset.y - docElem.clientTop : rect.left + pageOffset.x - docElem.clientLeft;
    }
    // Checks whether a value is numerical.
    function isNumeric(a) {
        return typeof a === "number" && !isNaN(a) && isFinite(a);
    }
    // Sets a class and removes it after [duration] ms.
    function addClassFor(element, className, duration) {
        if (duration > 0) {
            addClass(element, className);
            setTimeout(function () {
                removeClass(element, className);
            }, duration);
        }
    }
    // Limits a value to 0 - 100
    function limit(a) {
        return Math.max(Math.min(a, 100), 0);
    }
    // Wraps a variable as an array, if it isn't one yet.
    // Note that an input array is returned by reference!
    function asArray(a) {
        return Array.isArray(a) ? a : [a];
    }
    // Counts decimals
    function countDecimals(numStr) {
        numStr = String(numStr);
        var pieces = numStr.split(".");
        return pieces.length > 1 ? pieces[1].length : 0;
    }
    // http://youmightnotneedjquery.com/#add_class
    function addClass(el, className) {
        if (el.classList && !/\s/.test(className)) {
            el.classList.add(className);
        } else {
            el.className += " " + className;
        }
    }
    // http://youmightnotneedjquery.com/#remove_class
    function removeClass(el, className) {
        if (el.classList && !/\s/.test(className)) {
            el.classList.remove(className);
        } else {
            el.className = el.className.replace(new RegExp("(^|\\b)" + className.split(" ").join("|") + "(\\b|$)", "gi"), " ");
        }
    }
    // https://plainjs.com/javascript/attributes/adding-removing-and-testing-for-classes-9/
    function hasClass(el, className) {
        return el.classList ? el.classList.contains(className) : new RegExp("\\b" + className + "\\b").test(el.className);
    }
    // https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollY#Notes
    function getPageOffset(doc) {
        var supportPageOffset = window.pageXOffset !== undefined;
        var isCSS1Compat = (doc.compatMode || "") === "CSS1Compat";
        var x = supportPageOffset ? window.pageXOffset : isCSS1Compat ? doc.documentElement.scrollLeft : doc.body.scrollLeft;
        var y = supportPageOffset ? window.pageYOffset : isCSS1Compat ? doc.documentElement.scrollTop : doc.body.scrollTop;
        return {
            x: x,
            y: y
        };
    }
    // we provide a function to compute constants instead
    // of accessing window.* as soon as the module needs it
    // so that we do not compute anything if not needed
    function getActions() {
        // Determine the events to bind. IE11 implements pointerEvents without
        // a prefix, which breaks compatibility with the IE10 implementation.
        return window.navigator.pointerEnabled ? {
            start: "pointerdown",
            move: "pointermove",
            end: "pointerup"
        } : window.navigator.msPointerEnabled ? {
            start: "MSPointerDown",
            move: "MSPointerMove",
            end: "MSPointerUp"
        } : {
            start: "mousedown touchstart",
            move: "mousemove touchmove",
            end: "mouseup touchend"
        };
    }
    // https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md
    // Issue #785
    function getSupportsPassive() {
        var supportsPassive = false;
        /* eslint-disable */
        try {
            var opts = Object.defineProperty({}, "passive", {
                get: function get() {
                    supportsPassive = true;
                }
            });
            // @ts-ignore
            window.addEventListener("test", null, opts);
        } catch (e) {}
        /* eslint-enable */
        return supportsPassive;
    }
    function getSupportsTouchActionNone() {
        return window.CSS && CSS.supports && CSS.supports("touch-action", "none");
    }
    //endregion
    //region Range Calculation
    // Determine the size of a sub-range in relation to a full range.
    function subRangeRatio(pa, pb) {
        return 100 / (pb - pa);
    }
    // (percentage) How many percent is this value of this range?
    function fromPercentage(range, value, startRange) {
        return value * 100 / (range[startRange + 1] - range[startRange]);
    }
    // (percentage) Where is this value on this range?
    function toPercentage(range, value) {
        return fromPercentage(range, range[0] < 0 ? value + Math.abs(range[0]) : value - range[0], 0);
    }
    // (value) How much is this percentage on this range?
    function isPercentage(range, value) {
        return value * (range[1] - range[0]) / 100 + range[0];
    }
    function getJ(value, arr) {
        var j = 1;
        while (value >= arr[j]) {
            j += 1;
        }
        return j;
    }
    // (percentage) Input a value, find where, on a scale of 0-100, it applies.
    function toStepping(xVal, xPct, value) {
        if (value >= xVal.slice(-1)[0]) {
            return 100;
        }
        var j = getJ(value, xVal);
        var va = xVal[j - 1];
        var vb = xVal[j];
        var pa = xPct[j - 1];
        var pb = xPct[j];
        return pa + toPercentage([va, vb], value) / subRangeRatio(pa, pb);
    }
    // (value) Input a percentage, find where it is on the specified range.
    function fromStepping(xVal, xPct, value) {
        // There is no range group that fits 100
        if (value >= 100) {
            return xVal.slice(-1)[0];
        }
        var j = getJ(value, xPct);
        var va = xVal[j - 1];
        var vb = xVal[j];
        var pa = xPct[j - 1];
        var pb = xPct[j];
        return isPercentage([va, vb], (value - pa) * subRangeRatio(pa, pb));
    }
    // (percentage) Get the step that applies at a certain value.
    function getStep(xPct, xSteps, snap, value) {
        if (value === 100) {
            return value;
        }
        var j = getJ(value, xPct);
        var a = xPct[j - 1];
        var b = xPct[j];
        // If 'snap' is set, steps are used as fixed points on the slider.
        if (snap) {
            // Find the closest position, a or b.
            if (value - a > (b - a) / 2) {
                return b;
            }
            return a;
        }
        if (!xSteps[j - 1]) {
            return value;
        }
        return xPct[j - 1] + closest(value - xPct[j - 1], xSteps[j - 1]);
    }
    //endregion
    //region Spectrum
    var Spectrum = /** @class */function () {
        function Spectrum(entry, snap, singleStep) {
            this.xPct = [];
            this.xVal = [];
            this.xSteps = [];
            this.xNumSteps = [];
            this.xHighestCompleteStep = [];
            this.xSteps = [singleStep || false];
            this.xNumSteps = [false];
            this.snap = snap;
            var index;
            var ordered = [];
            // Map the object keys to an array.
            Object.keys(entry).forEach(function (index) {
                ordered.push([asArray(entry[index]), index]);
            });
            // Sort all entries by value (numeric sort).
            ordered.sort(function (a, b) {
                return a[0][0] - b[0][0];
            });
            // Convert all entries to subranges.
            for (index = 0; index < ordered.length; index++) {
                this.handleEntryPoint(ordered[index][1], ordered[index][0]);
            }
            // Store the actual step values.
            // xSteps is sorted in the same order as xPct and xVal.
            this.xNumSteps = this.xSteps.slice(0);
            // Convert all numeric steps to the percentage of the subrange they represent.
            for (index = 0; index < this.xNumSteps.length; index++) {
                this.handleStepPoint(index, this.xNumSteps[index]);
            }
        }
        Spectrum.prototype.getDistance = function (value) {
            var index;
            var distances = [];
            for (index = 0; index < this.xNumSteps.length - 1; index++) {
                // last "range" can't contain step size as it is purely an endpoint.
                var step = this.xNumSteps[index];
                if (step && value / step % 1 !== 0) {
                    throw new Error("noUiSlider: 'limit', 'margin' and 'padding' of " + this.xPct[index] + "% range must be divisible by step.");
                }
                // Calculate percentual distance in current range of limit, margin or padding
                distances[index] = fromPercentage(this.xVal, value, index);
            }
            return distances;
        };
        // Calculate the percentual distance over the whole scale of ranges.
        // direction: 0 = backwards / 1 = forwards
        Spectrum.prototype.getAbsoluteDistance = function (value, distances, direction) {
            var xPct_index = 0;
            // Calculate range where to start calculation
            if (value < this.xPct[this.xPct.length - 1]) {
                while (value > this.xPct[xPct_index + 1]) {
                    xPct_index++;
                }
            } else if (value === this.xPct[this.xPct.length - 1]) {
                xPct_index = this.xPct.length - 2;
            }
            // If looking backwards and the value is exactly at a range separator then look one range further
            if (!direction && value === this.xPct[xPct_index + 1]) {
                xPct_index++;
            }
            if (distances === null) {
                distances = [];
            }
            var start_factor;
            var rest_factor = 1;
            var rest_rel_distance = distances[xPct_index];
            var range_pct = 0;
            var rel_range_distance = 0;
            var abs_distance_counter = 0;
            var range_counter = 0;
            // Calculate what part of the start range the value is
            if (direction) {
                start_factor = (value - this.xPct[xPct_index]) / (this.xPct[xPct_index + 1] - this.xPct[xPct_index]);
            } else {
                start_factor = (this.xPct[xPct_index + 1] - value) / (this.xPct[xPct_index + 1] - this.xPct[xPct_index]);
            }
            // Do until the complete distance across ranges is calculated
            while (rest_rel_distance > 0) {
                // Calculate the percentage of total range
                range_pct = this.xPct[xPct_index + 1 + range_counter] - this.xPct[xPct_index + range_counter];
                // Detect if the margin, padding or limit is larger then the current range and calculate
                if (distances[xPct_index + range_counter] * rest_factor + 100 - start_factor * 100 > 100) {
                    // If larger then take the percentual distance of the whole range
                    rel_range_distance = range_pct * start_factor;
                    // Rest factor of relative percentual distance still to be calculated
                    rest_factor = (rest_rel_distance - 100 * start_factor) / distances[xPct_index + range_counter];
                    // Set start factor to 1 as for next range it does not apply.
                    start_factor = 1;
                } else {
                    // If smaller or equal then take the percentual distance of the calculate percentual part of that range
                    rel_range_distance = distances[xPct_index + range_counter] * range_pct / 100 * rest_factor;
                    // No rest left as the rest fits in current range
                    rest_factor = 0;
                }
                if (direction) {
                    abs_distance_counter = abs_distance_counter - rel_range_distance;
                    // Limit range to first range when distance becomes outside of minimum range
                    if (this.xPct.length + range_counter >= 1) {
                        range_counter--;
                    }
                } else {
                    abs_distance_counter = abs_distance_counter + rel_range_distance;
                    // Limit range to last range when distance becomes outside of maximum range
                    if (this.xPct.length - range_counter >= 1) {
                        range_counter++;
                    }
                }
                // Rest of relative percentual distance still to be calculated
                rest_rel_distance = distances[xPct_index + range_counter] * rest_factor;
            }
            return value + abs_distance_counter;
        };
        Spectrum.prototype.toStepping = function (value) {
            value = toStepping(this.xVal, this.xPct, value);
            return value;
        };
        Spectrum.prototype.fromStepping = function (value) {
            return fromStepping(this.xVal, this.xPct, value);
        };
        Spectrum.prototype.getStep = function (value) {
            value = getStep(this.xPct, this.xSteps, this.snap, value);
            return value;
        };
        Spectrum.prototype.getDefaultStep = function (value, isDown, size) {
            var j = getJ(value, this.xPct);
            // When at the top or stepping down, look at the previous sub-range
            if (value === 100 || isDown && value === this.xPct[j - 1]) {
                j = Math.max(j - 1, 1);
            }
            return (this.xVal[j] - this.xVal[j - 1]) / size;
        };
        Spectrum.prototype.getNearbySteps = function (value) {
            var j = getJ(value, this.xPct);
            return {
                stepBefore: {
                    startValue: this.xVal[j - 2],
                    step: this.xNumSteps[j - 2],
                    highestStep: this.xHighestCompleteStep[j - 2]
                },
                thisStep: {
                    startValue: this.xVal[j - 1],
                    step: this.xNumSteps[j - 1],
                    highestStep: this.xHighestCompleteStep[j - 1]
                },
                stepAfter: {
                    startValue: this.xVal[j],
                    step: this.xNumSteps[j],
                    highestStep: this.xHighestCompleteStep[j]
                }
            };
        };
        Spectrum.prototype.countStepDecimals = function () {
            var stepDecimals = this.xNumSteps.map(countDecimals);
            return Math.max.apply(null, stepDecimals);
        };
        // Outside testing
        Spectrum.prototype.convert = function (value) {
            return this.getStep(this.toStepping(value));
        };
        Spectrum.prototype.handleEntryPoint = function (index, value) {
            var percentage;
            // Covert min/max syntax to 0 and 100.
            if (index === "min") {
                percentage = 0;
            } else if (index === "max") {
                percentage = 100;
            } else {
                percentage = parseFloat(index);
            }
            // Check for correct input.
            if (!isNumeric(percentage) || !isNumeric(value[0])) {
                throw new Error("noUiSlider: 'range' value isn't numeric.");
            }
            // Store values.
            this.xPct.push(percentage);
            this.xVal.push(value[0]);
            var value1 = Number(value[1]);
            // NaN will evaluate to false too, but to keep
            // logging clear, set step explicitly. Make sure
            // not to override the 'step' setting with false.
            if (!percentage) {
                if (!isNaN(value1)) {
                    this.xSteps[0] = value1;
                }
            } else {
                this.xSteps.push(isNaN(value1) ? false : value1);
            }
            this.xHighestCompleteStep.push(0);
        };
        Spectrum.prototype.handleStepPoint = function (i, n) {
            // Ignore 'false' stepping.
            if (!n) {
                return;
            }
            // Step over zero-length ranges (#948);
            if (this.xVal[i] === this.xVal[i + 1]) {
                this.xSteps[i] = this.xHighestCompleteStep[i] = this.xVal[i];
                return;
            }
            // Factor to range ratio
            this.xSteps[i] = fromPercentage([this.xVal[i], this.xVal[i + 1]], n, 0) / subRangeRatio(this.xPct[i], this.xPct[i + 1]);
            var totalSteps = (this.xVal[i + 1] - this.xVal[i]) / this.xNumSteps[i];
            var highestStep = Math.ceil(Number(totalSteps.toFixed(3)) - 1);
            var step = this.xVal[i] + this.xNumSteps[i] * highestStep;
            this.xHighestCompleteStep[i] = step;
        };
        return Spectrum;
    }();
    //endregion
    //region Options
    /*	Every input option is tested and parsed. This will prevent
        endless validation in internal methods. These tests are
        structured with an item for every option available. An
        option can be marked as required by setting the 'r' flag.
        The testing function is provided with three arguments:
            - The provided value for the option;
            - A reference to the options object;
            - The name for the option;
         The testing function returns false when an error is detected,
        or true when everything is OK. It can also modify the option
        object, to make sure all values can be correctly looped elsewhere. */
    //region Defaults
    var defaultFormatter = {
        to: function to(value) {
            return value === undefined ? "" : value.toFixed(2);
        },
        from: Number
    };
    var cssClasses = {
        target: "target",
        base: "base",
        origin: "origin",
        handle: "handle",
        handleLower: "handle-lower",
        handleUpper: "handle-upper",
        touchArea: "touch-area",
        horizontal: "horizontal",
        vertical: "vertical",
        background: "background",
        connect: "connect",
        connects: "connects",
        ltr: "ltr",
        rtl: "rtl",
        textDirectionLtr: "txt-dir-ltr",
        textDirectionRtl: "txt-dir-rtl",
        draggable: "draggable",
        drag: "state-drag",
        tap: "state-tap",
        active: "active",
        tooltip: "tooltip",
        pips: "pips",
        pipsHorizontal: "pips-horizontal",
        pipsVertical: "pips-vertical",
        marker: "marker",
        markerHorizontal: "marker-horizontal",
        markerVertical: "marker-vertical",
        markerNormal: "marker-normal",
        markerLarge: "marker-large",
        markerSub: "marker-sub",
        value: "value",
        valueHorizontal: "value-horizontal",
        valueVertical: "value-vertical",
        valueNormal: "value-normal",
        valueLarge: "value-large",
        valueSub: "value-sub"
    };
    // Namespaces of internal event listeners
    var INTERNAL_EVENT_NS = {
        tooltips: ".__tooltips",
        aria: ".__aria"
    };
    //endregion
    function validateFormat(entry) {
        // Any object with a to and from method is supported.
        if (isValidFormatter(entry)) {
            return true;
        }
        throw new Error("noUiSlider: 'format' requires 'to' and 'from' methods.");
    }
    function testStep(parsed, entry) {
        if (!isNumeric(entry)) {
            throw new Error("noUiSlider: 'step' is not numeric.");
        }
        // The step option can still be used to set stepping
        // for linear sliders. Overwritten if set in 'range'.
        parsed.singleStep = entry;
    }
    function testKeyboardPageMultiplier(parsed, entry) {
        if (!isNumeric(entry)) {
            throw new Error("noUiSlider: 'keyboardPageMultiplier' is not numeric.");
        }
        parsed.keyboardPageMultiplier = entry;
    }
    function testKeyboardDefaultStep(parsed, entry) {
        if (!isNumeric(entry)) {
            throw new Error("noUiSlider: 'keyboardDefaultStep' is not numeric.");
        }
        parsed.keyboardDefaultStep = entry;
    }
    function testRange(parsed, entry) {
        // Filter incorrect input.
        if ((typeof entry === 'undefined' ? 'undefined' : _typeof(entry)) !== "object" || Array.isArray(entry)) {
            throw new Error("noUiSlider: 'range' is not an object.");
        }
        // Catch missing start or end.
        if (entry.min === undefined || entry.max === undefined) {
            throw new Error("noUiSlider: Missing 'min' or 'max' in 'range'.");
        }
        // Catch equal start or end.
        if (entry.min === entry.max) {
            throw new Error("noUiSlider: 'range' 'min' and 'max' cannot be equal.");
        }
        parsed.spectrum = new Spectrum(entry, parsed.snap || false, parsed.singleStep);
    }
    function testStart(parsed, entry) {
        entry = asArray(entry);
        // Validate input. Values aren't tested, as the public .val method
        // will always provide a valid location.
        if (!Array.isArray(entry) || !entry.length) {
            throw new Error("noUiSlider: 'start' option is incorrect.");
        }
        // Store the number of handles.
        parsed.handles = entry.length;
        // When the slider is initialized, the .val method will
        // be called with the start options.
        parsed.start = entry;
    }
    function testSnap(parsed, entry) {
        if (typeof entry !== "boolean") {
            throw new Error("noUiSlider: 'snap' option must be a boolean.");
        }
        // Enforce 100% stepping within subranges.
        parsed.snap = entry;
    }
    function testAnimate(parsed, entry) {
        if (typeof entry !== "boolean") {
            throw new Error("noUiSlider: 'animate' option must be a boolean.");
        }
        // Enforce 100% stepping within subranges.
        parsed.animate = entry;
    }
    function testAnimationDuration(parsed, entry) {
        if (typeof entry !== "number") {
            throw new Error("noUiSlider: 'animationDuration' option must be a number.");
        }
        parsed.animationDuration = entry;
    }
    function testConnect(parsed, entry) {
        var connect = [false];
        var i;
        // Map legacy options
        if (entry === "lower") {
            entry = [true, false];
        } else if (entry === "upper") {
            entry = [false, true];
        }
        // Handle boolean options
        if (entry === true || entry === false) {
            for (i = 1; i < parsed.handles; i++) {
                connect.push(entry);
            }
            connect.push(false);
        }
        // Reject invalid input
        else if (!Array.isArray(entry) || !entry.length || entry.length !== parsed.handles + 1) {
                throw new Error("noUiSlider: 'connect' option doesn't match handle count.");
            } else {
                connect = entry;
            }
        parsed.connect = connect;
    }
    function testOrientation(parsed, entry) {
        // Set orientation to an a numerical value for easy
        // array selection.
        switch (entry) {
            case "horizontal":
                parsed.ort = 0;
                break;
            case "vertical":
                parsed.ort = 1;
                break;
            default:
                throw new Error("noUiSlider: 'orientation' option is invalid.");
        }
    }
    function testMargin(parsed, entry) {
        if (!isNumeric(entry)) {
            throw new Error("noUiSlider: 'margin' option must be numeric.");
        }
        // Issue #582
        if (entry === 0) {
            return;
        }
        parsed.margin = parsed.spectrum.getDistance(entry);
    }
    function testLimit(parsed, entry) {
        if (!isNumeric(entry)) {
            throw new Error("noUiSlider: 'limit' option must be numeric.");
        }
        parsed.limit = parsed.spectrum.getDistance(entry);
        if (!parsed.limit || parsed.handles < 2) {
            throw new Error("noUiSlider: 'limit' option is only supported on linear sliders with 2 or more handles.");
        }
    }
    function testPadding(parsed, entry) {
        var index;
        if (!isNumeric(entry) && !Array.isArray(entry)) {
            throw new Error("noUiSlider: 'padding' option must be numeric or array of exactly 2 numbers.");
        }
        if (Array.isArray(entry) && !(entry.length === 2 || isNumeric(entry[0]) || isNumeric(entry[1]))) {
            throw new Error("noUiSlider: 'padding' option must be numeric or array of exactly 2 numbers.");
        }
        if (entry === 0) {
            return;
        }
        if (!Array.isArray(entry)) {
            entry = [entry, entry];
        }
        // 'getDistance' returns false for invalid values.
        parsed.padding = [parsed.spectrum.getDistance(entry[0]), parsed.spectrum.getDistance(entry[1])];
        for (index = 0; index < parsed.spectrum.xNumSteps.length - 1; index++) {
            // last "range" can't contain step size as it is purely an endpoint.
            if (parsed.padding[0][index] < 0 || parsed.padding[1][index] < 0) {
                throw new Error("noUiSlider: 'padding' option must be a positive number(s).");
            }
        }
        var totalPadding = entry[0] + entry[1];
        var firstValue = parsed.spectrum.xVal[0];
        var lastValue = parsed.spectrum.xVal[parsed.spectrum.xVal.length - 1];
        if (totalPadding / (lastValue - firstValue) > 1) {
            throw new Error("noUiSlider: 'padding' option must not exceed 100% of the range.");
        }
    }
    function testDirection(parsed, entry) {
        // Set direction as a numerical value for easy parsing.
        // Invert connection for RTL sliders, so that the proper
        // handles get the connect/background classes.
        switch (entry) {
            case "ltr":
                parsed.dir = 0;
                break;
            case "rtl":
                parsed.dir = 1;
                break;
            default:
                throw new Error("noUiSlider: 'direction' option was not recognized.");
        }
    }
    function testBehaviour(parsed, entry) {
        // Make sure the input is a string.
        if (typeof entry !== "string") {
            throw new Error("noUiSlider: 'behaviour' must be a string containing options.");
        }
        // Check if the string contains any keywords.
        // None are required.
        var tap = entry.indexOf("tap") >= 0;
        var drag = entry.indexOf("drag") >= 0;
        var fixed = entry.indexOf("fixed") >= 0;
        var snap = entry.indexOf("snap") >= 0;
        var hover = entry.indexOf("hover") >= 0;
        var unconstrained = entry.indexOf("unconstrained") >= 0;
        if (fixed) {
            if (parsed.handles !== 2) {
                throw new Error("noUiSlider: 'fixed' behaviour must be used with 2 handles");
            }
            // Use margin to enforce fixed state
            testMargin(parsed, parsed.start[1] - parsed.start[0]);
        }
        if (unconstrained && (parsed.margin || parsed.limit)) {
            throw new Error("noUiSlider: 'unconstrained' behaviour cannot be used with margin or limit");
        }
        parsed.events = {
            tap: tap || snap,
            drag: drag,
            fixed: fixed,
            snap: snap,
            hover: hover,
            unconstrained: unconstrained
        };
    }
    function testTooltips(parsed, entry) {
        if (entry === false) {
            return;
        }
        if (entry === true || isValidFormatter(entry)) {
            parsed.tooltips = [];
            for (var i = 0; i < parsed.handles; i++) {
                parsed.tooltips.push(entry);
            }
        } else {
            entry = asArray(entry);
            if (entry.length !== parsed.handles) {
                throw new Error("noUiSlider: must pass a formatter for all handles.");
            }
            entry.forEach(function (formatter) {
                if (typeof formatter !== "boolean" && ((typeof formatter === 'undefined' ? 'undefined' : _typeof(formatter)) !== "object" || typeof formatter.to !== "function")) {
                    throw new Error("noUiSlider: 'tooltips' must be passed a formatter or 'false'.");
                }
            });
            parsed.tooltips = entry;
        }
    }
    function testAriaFormat(parsed, entry) {
        validateFormat(entry);
        parsed.ariaFormat = entry;
    }
    function testFormat(parsed, entry) {
        validateFormat(entry);
        parsed.format = entry;
    }
    function testKeyboardSupport(parsed, entry) {
        if (typeof entry !== "boolean") {
            throw new Error("noUiSlider: 'keyboardSupport' option must be a boolean.");
        }
        parsed.keyboardSupport = entry;
    }
    function testDocumentElement(parsed, entry) {
        // This is an advanced option. Passed values are used without validation.
        parsed.documentElement = entry;
    }
    function testCssPrefix(parsed, entry) {
        if (typeof entry !== "string" && entry !== false) {
            throw new Error("noUiSlider: 'cssPrefix' must be a string or `false`.");
        }
        parsed.cssPrefix = entry;
    }
    function testCssClasses(parsed, entry) {
        if ((typeof entry === 'undefined' ? 'undefined' : _typeof(entry)) !== "object") {
            throw new Error("noUiSlider: 'cssClasses' must be an object.");
        }
        if (typeof parsed.cssPrefix === "string") {
            parsed.cssClasses = {};
            Object.keys(entry).forEach(function (key) {
                parsed.cssClasses[key] = parsed.cssPrefix + entry[key];
            });
        } else {
            parsed.cssClasses = entry;
        }
    }
    // Test all developer settings and parse to assumption-safe values.
    function testOptions(options) {
        // To prove a fix for #537, freeze options here.
        // If the object is modified, an error will be thrown.
        // Object.freeze(options);
        var parsed = {
            margin: null,
            limit: null,
            padding: null,
            animate: true,
            animationDuration: 300,
            ariaFormat: defaultFormatter,
            format: defaultFormatter
        };
        // Tests are executed in the order they are presented here.
        var tests = {
            step: { r: false, t: testStep },
            keyboardPageMultiplier: { r: false, t: testKeyboardPageMultiplier },
            keyboardDefaultStep: { r: false, t: testKeyboardDefaultStep },
            start: { r: true, t: testStart },
            connect: { r: true, t: testConnect },
            direction: { r: true, t: testDirection },
            snap: { r: false, t: testSnap },
            animate: { r: false, t: testAnimate },
            animationDuration: { r: false, t: testAnimationDuration },
            range: { r: true, t: testRange },
            orientation: { r: false, t: testOrientation },
            margin: { r: false, t: testMargin },
            limit: { r: false, t: testLimit },
            padding: { r: false, t: testPadding },
            behaviour: { r: true, t: testBehaviour },
            ariaFormat: { r: false, t: testAriaFormat },
            format: { r: false, t: testFormat },
            tooltips: { r: false, t: testTooltips },
            keyboardSupport: { r: true, t: testKeyboardSupport },
            documentElement: { r: false, t: testDocumentElement },
            cssPrefix: { r: true, t: testCssPrefix },
            cssClasses: { r: true, t: testCssClasses }
        };
        var defaults = {
            connect: false,
            direction: "ltr",
            behaviour: "tap",
            orientation: "horizontal",
            keyboardSupport: true,
            cssPrefix: "noUi-",
            cssClasses: cssClasses,
            keyboardPageMultiplier: 5,
            keyboardDefaultStep: 10
        };
        // AriaFormat defaults to regular format, if any.
        if (options.format && !options.ariaFormat) {
            options.ariaFormat = options.format;
        }
        // Run all options through a testing mechanism to ensure correct
        // input. It should be noted that options might get modified to
        // be handled properly. E.g. wrapping integers in arrays.
        Object.keys(tests).forEach(function (name) {
            // If the option isn't set, but it is required, throw an error.
            if (!isSet(options[name]) && defaults[name] === undefined) {
                if (tests[name].r) {
                    throw new Error("noUiSlider: '" + name + "' is required.");
                }
                return;
            }
            tests[name].t(parsed, !isSet(options[name]) ? defaults[name] : options[name]);
        });
        // Forward pips options
        parsed.pips = options.pips;
        // All recent browsers accept unprefixed transform.
        // We need -ms- for IE9 and -webkit- for older Android;
        // Assume use of -webkit- if unprefixed and -ms- are not supported.
        // https://caniuse.com/#feat=transforms2d
        var d = document.createElement("div");
        var msPrefix = d.style.msTransform !== undefined;
        var noPrefix = d.style.transform !== undefined;
        parsed.transformRule = noPrefix ? "transform" : msPrefix ? "msTransform" : "webkitTransform";
        // Pips don't move, so we can place them using left/top.
        var styles = [["left", "top"], ["right", "bottom"]];
        parsed.style = styles[parsed.dir][parsed.ort];
        return parsed;
    }
    //endregion
    function scope(target, options, originalOptions) {
        var actions = getActions();
        var supportsTouchActionNone = getSupportsTouchActionNone();
        var supportsPassive = supportsTouchActionNone && getSupportsPassive();
        // All variables local to 'scope' are prefixed with 'scope_'
        // Slider DOM Nodes
        var scope_Target = target;
        var scope_Base;
        var scope_Handles;
        var scope_Connects;
        var scope_Pips;
        var scope_Tooltips;
        // Slider state values
        var scope_Spectrum = options.spectrum;
        var scope_Values = [];
        var scope_Locations = [];
        var scope_HandleNumbers = [];
        var scope_ActiveHandlesCount = 0;
        var scope_Events = {};
        // Document Nodes
        var scope_Document = target.ownerDocument;
        var scope_DocumentElement = options.documentElement || scope_Document.documentElement;
        var scope_Body = scope_Document.body;
        // For horizontal sliders in standard ltr documents,
        // make .noUi-origin overflow to the left so the document doesn't scroll.
        var scope_DirOffset = scope_Document.dir === "rtl" || options.ort === 1 ? 0 : 100;
        // Creates a node, adds it to target, returns the new node.
        function addNodeTo(addTarget, className) {
            var div = scope_Document.createElement("div");
            if (className) {
                addClass(div, className);
            }
            addTarget.appendChild(div);
            return div;
        }
        // Append a origin to the base
        function addOrigin(base, handleNumber) {
            var origin = addNodeTo(base, options.cssClasses.origin);
            var handle = addNodeTo(origin, options.cssClasses.handle);
            addNodeTo(handle, options.cssClasses.touchArea);
            handle.setAttribute("data-handle", String(handleNumber));
            if (options.keyboardSupport) {
                // https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
                // 0 = focusable and reachable
                handle.setAttribute("tabindex", "0");
                handle.addEventListener("keydown", function (event) {
                    return eventKeydown(event, handleNumber);
                });
            }
            handle.setAttribute("role", "slider");
            handle.setAttribute("aria-orientation", options.ort ? "vertical" : "horizontal");
            if (handleNumber === 0) {
                addClass(handle, options.cssClasses.handleLower);
            } else if (handleNumber === options.handles - 1) {
                addClass(handle, options.cssClasses.handleUpper);
            }
            return origin;
        }
        // Insert nodes for connect elements
        function addConnect(base, add) {
            if (!add) {
                return false;
            }
            return addNodeTo(base, options.cssClasses.connect);
        }
        // Add handles to the slider base.
        function addElements(connectOptions, base) {
            var connectBase = addNodeTo(base, options.cssClasses.connects);
            scope_Handles = [];
            scope_Connects = [];
            scope_Connects.push(addConnect(connectBase, connectOptions[0]));
            // [::::O====O====O====]
            // connectOptions = [0, 1, 1, 1]
            for (var i = 0; i < options.handles; i++) {
                // Keep a list of all added handles.
                scope_Handles.push(addOrigin(base, i));
                scope_HandleNumbers[i] = i;
                scope_Connects.push(addConnect(connectBase, connectOptions[i + 1]));
            }
        }
        // Initialize a single slider.
        function addSlider(addTarget) {
            // Apply classes and data to the target.
            addClass(addTarget, options.cssClasses.target);
            if (options.dir === 0) {
                addClass(addTarget, options.cssClasses.ltr);
            } else {
                addClass(addTarget, options.cssClasses.rtl);
            }
            if (options.ort === 0) {
                addClass(addTarget, options.cssClasses.horizontal);
            } else {
                addClass(addTarget, options.cssClasses.vertical);
            }
            var textDirection = getComputedStyle(addTarget).direction;
            if (textDirection === "rtl") {
                addClass(addTarget, options.cssClasses.textDirectionRtl);
            } else {
                addClass(addTarget, options.cssClasses.textDirectionLtr);
            }
            return addNodeTo(addTarget, options.cssClasses.base);
        }
        function addTooltip(handle, handleNumber) {
            if (!options.tooltips || !options.tooltips[handleNumber]) {
                return false;
            }
            return addNodeTo(handle.firstChild, options.cssClasses.tooltip);
        }
        function isSliderDisabled() {
            return scope_Target.hasAttribute("disabled");
        }
        // Disable the slider dragging if any handle is disabled
        function isHandleDisabled(handleNumber) {
            var handleOrigin = scope_Handles[handleNumber];
            return handleOrigin.hasAttribute("disabled");
        }
        function removeTooltips() {
            if (scope_Tooltips) {
                removeEvent("update" + INTERNAL_EVENT_NS.tooltips);
                scope_Tooltips.forEach(function (tooltip) {
                    if (tooltip) {
                        removeElement(tooltip);
                    }
                });
                scope_Tooltips = null;
            }
        }
        // The tooltips option is a shorthand for using the 'update' event.
        function tooltips() {
            removeTooltips();
            // Tooltips are added with options.tooltips in original order.
            scope_Tooltips = scope_Handles.map(addTooltip);
            bindEvent("update" + INTERNAL_EVENT_NS.tooltips, function (values, handleNumber, unencoded) {
                if (!scope_Tooltips || !options.tooltips) {
                    return;
                }
                if (scope_Tooltips[handleNumber] === false) {
                    return;
                }
                var formattedValue = values[handleNumber];
                if (options.tooltips[handleNumber] !== true) {
                    formattedValue = options.tooltips[handleNumber].to(unencoded[handleNumber]);
                }
                scope_Tooltips[handleNumber].innerHTML = formattedValue;
            });
        }
        function aria() {
            removeEvent("update" + INTERNAL_EVENT_NS.aria);
            bindEvent("update" + INTERNAL_EVENT_NS.aria, function (values, handleNumber, unencoded, tap, positions) {
                // Update Aria Values for all handles, as a change in one changes min and max values for the next.
                scope_HandleNumbers.forEach(function (index) {
                    var handle = scope_Handles[index];
                    var min = checkHandlePosition(scope_Locations, index, 0, true, true, true);
                    var max = checkHandlePosition(scope_Locations, index, 100, true, true, true);
                    var now = positions[index];
                    // Formatted value for display
                    var text = String(options.ariaFormat.to(unencoded[index]));
                    // Map to slider range values
                    min = scope_Spectrum.fromStepping(min).toFixed(1);
                    max = scope_Spectrum.fromStepping(max).toFixed(1);
                    now = scope_Spectrum.fromStepping(now).toFixed(1);
                    handle.children[0].setAttribute("aria-valuemin", min);
                    handle.children[0].setAttribute("aria-valuemax", max);
                    handle.children[0].setAttribute("aria-valuenow", now);
                    handle.children[0].setAttribute("aria-valuetext", text);
                });
            });
        }
        function getGroup(pips) {
            // Use the range.
            if (pips.mode === exports.PipsMode.Range || pips.mode === exports.PipsMode.Steps) {
                return scope_Spectrum.xVal;
            }
            if (pips.mode === exports.PipsMode.Count) {
                if (pips.values < 2) {
                    throw new Error("noUiSlider: 'values' (>= 2) required for mode 'count'.");
                }
                // Divide 0 - 100 in 'count' parts.
                var interval = pips.values - 1;
                var spread = 100 / interval;
                var values = [];
                // List these parts and have them handled as 'positions'.
                while (interval--) {
                    values[interval] = interval * spread;
                }
                values.push(100);
                return mapToRange(values, pips.stepped);
            }
            if (pips.mode === exports.PipsMode.Positions) {
                // Map all percentages to on-range values.
                return mapToRange(pips.values, pips.stepped);
            }
            if (pips.mode === exports.PipsMode.Values) {
                // If the value must be stepped, it needs to be converted to a percentage first.
                if (pips.stepped) {
                    return pips.values.map(function (value) {
                        // Convert to percentage, apply step, return to value.
                        return scope_Spectrum.fromStepping(scope_Spectrum.getStep(scope_Spectrum.toStepping(value)));
                    });
                }
                // Otherwise, we can simply use the values.
                return pips.values;
            }
            return []; // pips.mode = never
        }
        function mapToRange(values, stepped) {
            return values.map(function (value) {
                return scope_Spectrum.fromStepping(stepped ? scope_Spectrum.getStep(value) : value);
            });
        }
        function generateSpread(pips) {
            function safeIncrement(value, increment) {
                // Avoid floating point variance by dropping the smallest decimal places.
                return Number((value + increment).toFixed(7));
            }
            var group = getGroup(pips);
            var indexes = {};
            var firstInRange = scope_Spectrum.xVal[0];
            var lastInRange = scope_Spectrum.xVal[scope_Spectrum.xVal.length - 1];
            var ignoreFirst = false;
            var ignoreLast = false;
            var prevPct = 0;
            // Create a copy of the group, sort it and filter away all duplicates.
            group = unique(group.slice().sort(function (a, b) {
                return a - b;
            }));
            // Make sure the range starts with the first element.
            if (group[0] !== firstInRange) {
                group.unshift(firstInRange);
                ignoreFirst = true;
            }
            // Likewise for the last one.
            if (group[group.length - 1] !== lastInRange) {
                group.push(lastInRange);
                ignoreLast = true;
            }
            group.forEach(function (current, index) {
                // Get the current step and the lower + upper positions.
                var step;
                var i;
                var q;
                var low = current;
                var high = group[index + 1];
                var newPct;
                var pctDifference;
                var pctPos;
                var type;
                var steps;
                var realSteps;
                var stepSize;
                var isSteps = pips.mode === exports.PipsMode.Steps;
                // When using 'steps' mode, use the provided steps.
                // Otherwise, we'll step on to the next subrange.
                if (isSteps) {
                    step = scope_Spectrum.xNumSteps[index];
                }
                // Default to a 'full' step.
                if (!step) {
                    step = high - low;
                }
                // If high is undefined we are at the last subrange. Make sure it iterates once (#1088)
                if (high === undefined) {
                    high = low;
                }
                // Make sure step isn't 0, which would cause an infinite loop (#654)
                step = Math.max(step, 0.0000001);
                // Find all steps in the subrange.
                for (i = low; i <= high; i = safeIncrement(i, step)) {
                    // Get the percentage value for the current step,
                    // calculate the size for the subrange.
                    newPct = scope_Spectrum.toStepping(i);
                    pctDifference = newPct - prevPct;
                    steps = pctDifference / (pips.density || 1);
                    realSteps = Math.round(steps);
                    // This ratio represents the amount of percentage-space a point indicates.
                    // For a density 1 the points/percentage = 1. For density 2, that percentage needs to be re-divided.
                    // Round the percentage offset to an even number, then divide by two
                    // to spread the offset on both sides of the range.
                    stepSize = pctDifference / realSteps;
                    // Divide all points evenly, adding the correct number to this subrange.
                    // Run up to <= so that 100% gets a point, event if ignoreLast is set.
                    for (q = 1; q <= realSteps; q += 1) {
                        // The ratio between the rounded value and the actual size might be ~1% off.
                        // Correct the percentage offset by the number of points
                        // per subrange. density = 1 will result in 100 points on the
                        // full range, 2 for 50, 4 for 25, etc.
                        pctPos = prevPct + q * stepSize;
                        indexes[pctPos.toFixed(5)] = [scope_Spectrum.fromStepping(pctPos), 0];
                    }
                    // Determine the point type.
                    type = group.indexOf(i) > -1 ? exports.PipsType.LargeValue : isSteps ? exports.PipsType.SmallValue : exports.PipsType.NoValue;
                    // Enforce the 'ignoreFirst' option by overwriting the type for 0.
                    if (!index && ignoreFirst && i !== high) {
                        type = 0;
                    }
                    if (!(i === high && ignoreLast)) {
                        // Mark the 'type' of this point. 0 = plain, 1 = real value, 2 = step value.
                        indexes[newPct.toFixed(5)] = [i, type];
                    }
                    // Update the percentage count.
                    prevPct = newPct;
                }
            });
            return indexes;
        }
        function addMarking(spread, filterFunc, formatter) {
            var _a, _b;
            var element = scope_Document.createElement("div");
            var valueSizeClasses = (_a = {}, _a[exports.PipsType.None] = "", _a[exports.PipsType.NoValue] = options.cssClasses.valueNormal, _a[exports.PipsType.LargeValue] = options.cssClasses.valueLarge, _a[exports.PipsType.SmallValue] = options.cssClasses.valueSub, _a);
            var markerSizeClasses = (_b = {}, _b[exports.PipsType.None] = "", _b[exports.PipsType.NoValue] = options.cssClasses.markerNormal, _b[exports.PipsType.LargeValue] = options.cssClasses.markerLarge, _b[exports.PipsType.SmallValue] = options.cssClasses.markerSub, _b);
            var valueOrientationClasses = [options.cssClasses.valueHorizontal, options.cssClasses.valueVertical];
            var markerOrientationClasses = [options.cssClasses.markerHorizontal, options.cssClasses.markerVertical];
            addClass(element, options.cssClasses.pips);
            addClass(element, options.ort === 0 ? options.cssClasses.pipsHorizontal : options.cssClasses.pipsVertical);
            function getClasses(type, source) {
                var a = source === options.cssClasses.value;
                var orientationClasses = a ? valueOrientationClasses : markerOrientationClasses;
                var sizeClasses = a ? valueSizeClasses : markerSizeClasses;
                return source + " " + orientationClasses[options.ort] + " " + sizeClasses[type];
            }
            function addSpread(offset, value, type) {
                // Apply the filter function, if it is set.
                type = filterFunc ? filterFunc(value, type) : type;
                if (type === exports.PipsType.None) {
                    return;
                }
                // Add a marker for every point
                var node = addNodeTo(element, false);
                node.className = getClasses(type, options.cssClasses.marker);
                node.style[options.style] = offset + "%";
                // Values are only appended for points marked '1' or '2'.
                if (type > exports.PipsType.NoValue) {
                    node = addNodeTo(element, false);
                    node.className = getClasses(type, options.cssClasses.value);
                    node.setAttribute("data-value", String(value));
                    node.style[options.style] = offset + "%";
                    node.innerHTML = String(formatter.to(value));
                }
            }
            // Append all points.
            Object.keys(spread).forEach(function (offset) {
                addSpread(offset, spread[offset][0], spread[offset][1]);
            });
            return element;
        }
        function removePips() {
            if (scope_Pips) {
                removeElement(scope_Pips);
                scope_Pips = null;
            }
        }
        function pips(pips) {
            // Fix #669
            removePips();
            var spread = generateSpread(pips);
            var filter = pips.filter;
            var format = pips.format || {
                to: function to(value) {
                    return String(Math.round(value));
                },
                from: Number
            };
            scope_Pips = scope_Target.appendChild(addMarking(spread, filter, format));
            return scope_Pips;
        }
        // Shorthand for base dimensions.
        function baseSize() {
            var rect = scope_Base.getBoundingClientRect();
            var alt = "offset" + ["Width", "Height"][options.ort];
            return options.ort === 0 ? rect.width || scope_Base[alt] : rect.height || scope_Base[alt];
        }
        // Handler for attaching events trough a proxy.
        function attachEvent(events, element, callback, data) {
            // This function can be used to 'filter' events to the slider.
            // element is a node, not a nodeList
            var method = function method(event) {
                var e = fixEvent(event, data.pageOffset, data.target || element);
                // fixEvent returns false if this event has a different target
                // when handling (multi-) touch events;
                if (!e) {
                    return false;
                }
                // doNotReject is passed by all end events to make sure released touches
                // are not rejected, leaving the slider "stuck" to the cursor;
                if (isSliderDisabled() && !data.doNotReject) {
                    return false;
                }
                // Stop if an active 'tap' transition is taking place.
                if (hasClass(scope_Target, options.cssClasses.tap) && !data.doNotReject) {
                    return false;
                }
                // Ignore right or middle clicks on start #454
                if (events === actions.start && e.buttons !== undefined && e.buttons > 1) {
                    return false;
                }
                // Ignore right or middle clicks on start #454
                if (data.hover && e.buttons) {
                    return false;
                }
                // 'supportsPassive' is only true if a browser also supports touch-action: none in CSS.
                // iOS safari does not, so it doesn't get to benefit from passive scrolling. iOS does support
                // touch-action: manipulation, but that allows panning, which breaks
                // sliders after zooming/on non-responsive pages.
                // See: https://bugs.webkit.org/show_bug.cgi?id=133112
                if (!supportsPassive) {
                    e.preventDefault();
                }
                e.calcPoint = e.points[options.ort];
                // Call the event handler with the event [ and additional data ].
                callback(e, data);
                return;
            };
            var methods = [];
            // Bind a closure on the target for every event type.
            events.split(" ").forEach(function (eventName) {
                element.addEventListener(eventName, method, supportsPassive ? { passive: true } : false);
                methods.push([eventName, method]);
            });
            return methods;
        }
        // Provide a clean event with standardized offset values.
        function fixEvent(e, pageOffset, eventTarget) {
            // Filter the event to register the type, which can be
            // touch, mouse or pointer. Offset changes need to be
            // made on an event specific basis.
            var touch = e.type.indexOf("touch") === 0;
            var mouse = e.type.indexOf("mouse") === 0;
            var pointer = e.type.indexOf("pointer") === 0;
            var x = 0;
            var y = 0;
            // IE10 implemented pointer events with a prefix;
            if (e.type.indexOf("MSPointer") === 0) {
                pointer = true;
            }
            // Erroneous events seem to be passed in occasionally on iOS/iPadOS after user finishes interacting with
            // the slider. They appear to be of type MouseEvent, yet they don't have usual properties set. Ignore
            // events that have no touches or buttons associated with them. (#1057, #1079, #1095)
            if (e.type === "mousedown" && !e.buttons && !e.touches) {
                return false;
            }
            // The only thing one handle should be concerned about is the touches that originated on top of it.
            if (touch) {
                // Returns true if a touch originated on the target.
                var isTouchOnTarget = function isTouchOnTarget(checkTouch) {
                    var target = checkTouch.target;
                    return target === eventTarget || eventTarget.contains(target) || e.composed && e.composedPath().shift() === eventTarget;
                };
                // In the case of touchstart events, we need to make sure there is still no more than one
                // touch on the target so we look amongst all touches.
                if (e.type === "touchstart") {
                    var targetTouches = Array.prototype.filter.call(e.touches, isTouchOnTarget);
                    // Do not support more than one touch per handle.
                    if (targetTouches.length > 1) {
                        return false;
                    }
                    x = targetTouches[0].pageX;
                    y = targetTouches[0].pageY;
                } else {
                    // In the other cases, find on changedTouches is enough.
                    var targetTouch = Array.prototype.find.call(e.changedTouches, isTouchOnTarget);
                    // Cancel if the target touch has not moved.
                    if (!targetTouch) {
                        return false;
                    }
                    x = targetTouch.pageX;
                    y = targetTouch.pageY;
                }
            }
            pageOffset = pageOffset || getPageOffset(scope_Document);
            if (mouse || pointer) {
                x = e.clientX + pageOffset.x;
                y = e.clientY + pageOffset.y;
            }
            e.pageOffset = pageOffset;
            e.points = [x, y];
            e.cursor = mouse || pointer; // Fix #435
            return e;
        }
        // Translate a coordinate in the document to a percentage on the slider
        function calcPointToPercentage(calcPoint) {
            var location = calcPoint - offset(scope_Base, options.ort);
            var proposal = location * 100 / baseSize();
            // Clamp proposal between 0% and 100%
            // Out-of-bound coordinates may occur when .noUi-base pseudo-elements
            // are used (e.g. contained handles feature)
            proposal = limit(proposal);
            return options.dir ? 100 - proposal : proposal;
        }
        // Find handle closest to a certain percentage on the slider
        function getClosestHandle(clickedPosition) {
            var smallestDifference = 100;
            var handleNumber = false;
            scope_Handles.forEach(function (handle, index) {
                // Disabled handles are ignored
                if (isHandleDisabled(index)) {
                    return;
                }
                var handlePosition = scope_Locations[index];
                var differenceWithThisHandle = Math.abs(handlePosition - clickedPosition);
                // Initial state
                var clickAtEdge = differenceWithThisHandle === 100 && smallestDifference === 100;
                // Difference with this handle is smaller than the previously checked handle
                var isCloser = differenceWithThisHandle < smallestDifference;
                var isCloserAfter = differenceWithThisHandle <= smallestDifference && clickedPosition > handlePosition;
                if (isCloser || isCloserAfter || clickAtEdge) {
                    handleNumber = index;
                    smallestDifference = differenceWithThisHandle;
                }
            });
            return handleNumber;
        }
        // Fire 'end' when a mouse or pen leaves the document.
        function documentLeave(event, data) {
            if (event.type === "mouseout" && event.target.nodeName === "HTML" && event.relatedTarget === null) {
                eventEnd(event, data);
            }
        }
        // Handle movement on document for handle and range drag.
        function eventMove(event, data) {
            // Fix #498
            // Check value of .buttons in 'start' to work around a bug in IE10 mobile (data.buttonsProperty).
            // https://connect.microsoft.com/IE/feedback/details/927005/mobile-ie10-windows-phone-buttons-property-of-pointermove-event-always-zero
            // IE9 has .buttons and .which zero on mousemove.
            // Firefox breaks the spec MDN defines.
            if (navigator.appVersion.indexOf("MSIE 9") === -1 && event.buttons === 0 && data.buttonsProperty !== 0) {
                return eventEnd(event, data);
            }
            // Check if we are moving up or down
            var movement = (options.dir ? -1 : 1) * (event.calcPoint - data.startCalcPoint);
            // Convert the movement into a percentage of the slider width/height
            var proposal = movement * 100 / data.baseSize;
            moveHandles(movement > 0, proposal, data.locations, data.handleNumbers, data.connect);
        }
        // Unbind move events on document, call callbacks.
        function eventEnd(event, data) {
            // The handle is no longer active, so remove the class.
            if (data.handle) {
                removeClass(data.handle, options.cssClasses.active);
                scope_ActiveHandlesCount -= 1;
            }
            // Unbind the move and end events, which are added on 'start'.
            data.listeners.forEach(function (c) {
                scope_DocumentElement.removeEventListener(c[0], c[1]);
            });
            if (scope_ActiveHandlesCount === 0) {
                // Remove dragging class.
                removeClass(scope_Target, options.cssClasses.drag);
                setZindex();
                // Remove cursor styles and text-selection events bound to the body.
                if (event.cursor) {
                    scope_Body.style.cursor = "";
                    scope_Body.removeEventListener("selectstart", preventDefault);
                }
            }
            data.handleNumbers.forEach(function (handleNumber) {
                fireEvent("change", handleNumber);
                fireEvent("set", handleNumber);
                fireEvent("end", handleNumber);
            });
        }
        // Bind move events on document.
        function eventStart(event, data) {
            // Ignore event if any handle is disabled
            if (data.handleNumbers.some(isHandleDisabled)) {
                return;
            }
            var handle;
            if (data.handleNumbers.length === 1) {
                var handleOrigin = scope_Handles[data.handleNumbers[0]];
                handle = handleOrigin.children[0];
                scope_ActiveHandlesCount += 1;
                // Mark the handle as 'active' so it can be styled.
                addClass(handle, options.cssClasses.active);
            }
            // A drag should never propagate up to the 'tap' event.
            event.stopPropagation();
            // Record the event listeners.
            var listeners = [];
            // Attach the move and end events.
            var moveEvent = attachEvent(actions.move, scope_DocumentElement, eventMove, {
                // The event target has changed so we need to propagate the original one so that we keep
                // relying on it to extract target touches.
                target: event.target,
                handle: handle,
                connect: data.connect,
                listeners: listeners,
                startCalcPoint: event.calcPoint,
                baseSize: baseSize(),
                pageOffset: event.pageOffset,
                handleNumbers: data.handleNumbers,
                buttonsProperty: event.buttons,
                locations: scope_Locations.slice()
            });
            var endEvent = attachEvent(actions.end, scope_DocumentElement, eventEnd, {
                target: event.target,
                handle: handle,
                listeners: listeners,
                doNotReject: true,
                handleNumbers: data.handleNumbers
            });
            var outEvent = attachEvent("mouseout", scope_DocumentElement, documentLeave, {
                target: event.target,
                handle: handle,
                listeners: listeners,
                doNotReject: true,
                handleNumbers: data.handleNumbers
            });
            // We want to make sure we pushed the listeners in the listener list rather than creating
            // a new one as it has already been passed to the event handlers.
            listeners.push.apply(listeners, moveEvent.concat(endEvent, outEvent));
            // Text selection isn't an issue on touch devices,
            // so adding cursor styles can be skipped.
            if (event.cursor) {
                // Prevent the 'I' cursor and extend the range-drag cursor.
                scope_Body.style.cursor = getComputedStyle(event.target).cursor;
                // Mark the target with a dragging state.
                if (scope_Handles.length > 1) {
                    addClass(scope_Target, options.cssClasses.drag);
                }
                // Prevent text selection when dragging the handles.
                // In noUiSlider <= 9.2.0, this was handled by calling preventDefault on mouse/touch start/move,
                // which is scroll blocking. The selectstart event is supported by FireFox starting from version 52,
                // meaning the only holdout is iOS Safari. This doesn't matter: text selection isn't triggered there.
                // The 'cursor' flag is false.
                // See: http://caniuse.com/#search=selectstart
                scope_Body.addEventListener("selectstart", preventDefault, false);
            }
            data.handleNumbers.forEach(function (handleNumber) {
                fireEvent("start", handleNumber);
            });
        }
        // Move closest handle to tapped location.
        function eventTap(event) {
            // The tap event shouldn't propagate up
            event.stopPropagation();
            var proposal = calcPointToPercentage(event.calcPoint);
            var handleNumber = getClosestHandle(proposal);
            // Tackle the case that all handles are 'disabled'.
            if (handleNumber === false) {
                return;
            }
            // Flag the slider as it is now in a transitional state.
            // Transition takes a configurable amount of ms (default 300). Re-enable the slider after that.
            if (!options.events.snap) {
                addClassFor(scope_Target, options.cssClasses.tap, options.animationDuration);
            }
            setHandle(handleNumber, proposal, true, true);
            setZindex();
            fireEvent("slide", handleNumber, true);
            fireEvent("update", handleNumber, true);
            fireEvent("change", handleNumber, true);
            fireEvent("set", handleNumber, true);
            if (options.events.snap) {
                eventStart(event, { handleNumbers: [handleNumber] });
            }
        }
        // Fires a 'hover' event for a hovered mouse/pen position.
        function eventHover(event) {
            var proposal = calcPointToPercentage(event.calcPoint);
            var to = scope_Spectrum.getStep(proposal);
            var value = scope_Spectrum.fromStepping(to);
            Object.keys(scope_Events).forEach(function (targetEvent) {
                if ("hover" === targetEvent.split(".")[0]) {
                    scope_Events[targetEvent].forEach(function (callback) {
                        callback.call(scope_Self, value);
                    });
                }
            });
        }
        // Handles keydown on focused handles
        // Don't move the document when pressing arrow keys on focused handles
        function eventKeydown(event, handleNumber) {
            if (isSliderDisabled() || isHandleDisabled(handleNumber)) {
                return false;
            }
            var horizontalKeys = ["Left", "Right"];
            var verticalKeys = ["Down", "Up"];
            var largeStepKeys = ["PageDown", "PageUp"];
            var edgeKeys = ["Home", "End"];
            if (options.dir && !options.ort) {
                // On an right-to-left slider, the left and right keys act inverted
                horizontalKeys.reverse();
            } else if (options.ort && !options.dir) {
                // On a top-to-bottom slider, the up and down keys act inverted
                verticalKeys.reverse();
                largeStepKeys.reverse();
            }
            // Strip "Arrow" for IE compatibility. https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key
            var key = event.key.replace("Arrow", "");
            var isLargeDown = key === largeStepKeys[0];
            var isLargeUp = key === largeStepKeys[1];
            var isDown = key === verticalKeys[0] || key === horizontalKeys[0] || isLargeDown;
            var isUp = key === verticalKeys[1] || key === horizontalKeys[1] || isLargeUp;
            var isMin = key === edgeKeys[0];
            var isMax = key === edgeKeys[1];
            if (!isDown && !isUp && !isMin && !isMax) {
                return true;
            }
            event.preventDefault();
            var to;
            if (isUp || isDown) {
                var multiplier = options.keyboardPageMultiplier;
                var direction = isDown ? 0 : 1;
                var steps = getNextStepsForHandle(handleNumber);
                var step = steps[direction];
                // At the edge of a slider, do nothing
                if (step === null) {
                    return false;
                }
                // No step set, use the default of 10% of the sub-range
                if (step === false) {
                    step = scope_Spectrum.getDefaultStep(scope_Locations[handleNumber], isDown, options.keyboardDefaultStep);
                }
                if (isLargeUp || isLargeDown) {
                    step *= multiplier;
                }
                // Step over zero-length ranges (#948);
                step = Math.max(step, 0.0000001);
                // Decrement for down steps
                step = (isDown ? -1 : 1) * step;
                to = scope_Values[handleNumber] + step;
            } else if (isMax) {
                // End key
                to = options.spectrum.xVal[options.spectrum.xVal.length - 1];
            } else {
                // Home key
                to = options.spectrum.xVal[0];
            }
            setHandle(handleNumber, scope_Spectrum.toStepping(to), true, true);
            fireEvent("slide", handleNumber);
            fireEvent("update", handleNumber);
            fireEvent("change", handleNumber);
            fireEvent("set", handleNumber);
            return false;
        }
        // Attach events to several slider parts.
        function bindSliderEvents(behaviour) {
            // Attach the standard drag event to the handles.
            if (!behaviour.fixed) {
                scope_Handles.forEach(function (handle, index) {
                    // These events are only bound to the visual handle
                    // element, not the 'real' origin element.
                    attachEvent(actions.start, handle.children[0], eventStart, {
                        handleNumbers: [index]
                    });
                });
            }
            // Attach the tap event to the slider base.
            if (behaviour.tap) {
                attachEvent(actions.start, scope_Base, eventTap, {});
            }
            // Fire hover events
            if (behaviour.hover) {
                attachEvent(actions.move, scope_Base, eventHover, {
                    hover: true
                });
            }
            // Make the range draggable.
            if (behaviour.drag) {
                scope_Connects.forEach(function (connect, index) {
                    if (connect === false || index === 0 || index === scope_Connects.length - 1) {
                        return;
                    }
                    var handleBefore = scope_Handles[index - 1];
                    var handleAfter = scope_Handles[index];
                    var eventHolders = [connect];
                    addClass(connect, options.cssClasses.draggable);
                    // When the range is fixed, the entire range can
                    // be dragged by the handles. The handle in the first
                    // origin will propagate the start event upward,
                    // but it needs to be bound manually on the other.
                    if (behaviour.fixed) {
                        eventHolders.push(handleBefore.children[0]);
                        eventHolders.push(handleAfter.children[0]);
                    }
                    eventHolders.forEach(function (eventHolder) {
                        attachEvent(actions.start, eventHolder, eventStart, {
                            handles: [handleBefore, handleAfter],
                            handleNumbers: [index - 1, index],
                            connect: connect
                        });
                    });
                });
            }
        }
        // Attach an event to this slider, possibly including a namespace
        function bindEvent(namespacedEvent, callback) {
            scope_Events[namespacedEvent] = scope_Events[namespacedEvent] || [];
            scope_Events[namespacedEvent].push(callback);
            // If the event bound is 'update,' fire it immediately for all handles.
            if (namespacedEvent.split(".")[0] === "update") {
                scope_Handles.forEach(function (a, index) {
                    fireEvent("update", index);
                });
            }
        }
        function isInternalNamespace(namespace) {
            return namespace === INTERNAL_EVENT_NS.aria || namespace === INTERNAL_EVENT_NS.tooltips;
        }
        // Undo attachment of event
        function removeEvent(namespacedEvent) {
            var event = namespacedEvent && namespacedEvent.split(".")[0];
            var namespace = event ? namespacedEvent.substring(event.length) : namespacedEvent;
            Object.keys(scope_Events).forEach(function (bind) {
                var tEvent = bind.split(".")[0];
                var tNamespace = bind.substring(tEvent.length);
                if ((!event || event === tEvent) && (!namespace || namespace === tNamespace)) {
                    // only delete protected internal event if intentional
                    if (!isInternalNamespace(tNamespace) || namespace === tNamespace) {
                        delete scope_Events[bind];
                    }
                }
            });
        }
        // External event handling
        function fireEvent(eventName, handleNumber, tap) {
            Object.keys(scope_Events).forEach(function (targetEvent) {
                var eventType = targetEvent.split(".")[0];
                if (eventName === eventType) {
                    scope_Events[targetEvent].forEach(function (callback) {
                        callback.call(
                        // Use the slider public API as the scope ('this')
                        scope_Self,
                        // Return values as array, so arg_1[arg_2] is always valid.
                        scope_Values.map(options.format.to),
                        // Handle index, 0 or 1
                        handleNumber,
                        // Un-formatted slider values
                        scope_Values.slice(),
                        // Event is fired by tap, true or false
                        tap || false,
                        // Left offset of the handle, in relation to the slider
                        scope_Locations.slice(),
                        // add the slider public API to an accessible parameter when this is unavailable
                        scope_Self);
                    });
                }
            });
        }
        // Split out the handle positioning logic so the Move event can use it, too
        function checkHandlePosition(reference, handleNumber, to, lookBackward, lookForward, getValue) {
            var distance;
            // For sliders with multiple handles, limit movement to the other handle.
            // Apply the margin option by adding it to the handle positions.
            if (scope_Handles.length > 1 && !options.events.unconstrained) {
                if (lookBackward && handleNumber > 0) {
                    distance = scope_Spectrum.getAbsoluteDistance(reference[handleNumber - 1], options.margin, false);
                    to = Math.max(to, distance);
                }
                if (lookForward && handleNumber < scope_Handles.length - 1) {
                    distance = scope_Spectrum.getAbsoluteDistance(reference[handleNumber + 1], options.margin, true);
                    to = Math.min(to, distance);
                }
            }
            // The limit option has the opposite effect, limiting handles to a
            // maximum distance from another. Limit must be > 0, as otherwise
            // handles would be unmovable.
            if (scope_Handles.length > 1 && options.limit) {
                if (lookBackward && handleNumber > 0) {
                    distance = scope_Spectrum.getAbsoluteDistance(reference[handleNumber - 1], options.limit, false);
                    to = Math.min(to, distance);
                }
                if (lookForward && handleNumber < scope_Handles.length - 1) {
                    distance = scope_Spectrum.getAbsoluteDistance(reference[handleNumber + 1], options.limit, true);
                    to = Math.max(to, distance);
                }
            }
            // The padding option keeps the handles a certain distance from the
            // edges of the slider. Padding must be > 0.
            if (options.padding) {
                if (handleNumber === 0) {
                    distance = scope_Spectrum.getAbsoluteDistance(0, options.padding[0], false);
                    to = Math.max(to, distance);
                }
                if (handleNumber === scope_Handles.length - 1) {
                    distance = scope_Spectrum.getAbsoluteDistance(100, options.padding[1], true);
                    to = Math.min(to, distance);
                }
            }
            to = scope_Spectrum.getStep(to);
            // Limit percentage to the 0 - 100 range
            to = limit(to);
            // Return false if handle can't move
            if (to === reference[handleNumber] && !getValue) {
                return false;
            }
            return to;
        }
        // Uses slider orientation to create CSS rules. a = base value;
        function inRuleOrder(v, a) {
            var o = options.ort;
            return (o ? a : v) + ", " + (o ? v : a);
        }
        // Moves handle(s) by a percentage
        // (bool, % to move, [% where handle started, ...], [index in scope_Handles, ...])
        function moveHandles(upward, proposal, locations, handleNumbers, connect) {
            var proposals = locations.slice();
            // Store first handle now, so we still have it in case handleNumbers is reversed
            var firstHandle = handleNumbers[0];
            var b = [!upward, upward];
            var f = [upward, !upward];
            // Copy handleNumbers so we don't change the dataset
            handleNumbers = handleNumbers.slice();
            // Check to see which handle is 'leading'.
            // If that one can't move the second can't either.
            if (upward) {
                handleNumbers.reverse();
            }
            // Step 1: get the maximum percentage that any of the handles can move
            if (handleNumbers.length > 1) {
                handleNumbers.forEach(function (handleNumber, o) {
                    var to = checkHandlePosition(proposals, handleNumber, proposals[handleNumber] + proposal, b[o], f[o], false);
                    // Stop if one of the handles can't move.
                    if (to === false) {
                        proposal = 0;
                    } else {
                        proposal = to - proposals[handleNumber];
                        proposals[handleNumber] = to;
                    }
                });
            }
            // If using one handle, check backward AND forward
            else {
                    b = f = [true];
                }
            var state = false;
            // Step 2: Try to set the handles with the found percentage
            handleNumbers.forEach(function (handleNumber, o) {
                state = setHandle(handleNumber, locations[handleNumber] + proposal, b[o], f[o]) || state;
            });
            // Step 3: If a handle moved, fire events
            if (state) {
                handleNumbers.forEach(function (handleNumber) {
                    fireEvent("update", handleNumber);
                    fireEvent("slide", handleNumber);
                });
                // If target is a connect, then fire drag event
                if (connect != undefined) {
                    fireEvent("drag", firstHandle);
                }
            }
        }
        // Takes a base value and an offset. This offset is used for the connect bar size.
        // In the initial design for this feature, the origin element was 1% wide.
        // Unfortunately, a rounding bug in Chrome makes it impossible to implement this feature
        // in this manner: https://bugs.chromium.org/p/chromium/issues/detail?id=798223
        function transformDirection(a, b) {
            return options.dir ? 100 - a - b : a;
        }
        // Updates scope_Locations and scope_Values, updates visual state
        function updateHandlePosition(handleNumber, to) {
            // Update locations.
            scope_Locations[handleNumber] = to;
            // Convert the value to the slider stepping/range.
            scope_Values[handleNumber] = scope_Spectrum.fromStepping(to);
            var translation = 10 * (transformDirection(to, 0) - scope_DirOffset);
            var translateRule = "translate(" + inRuleOrder(translation + "%", "0") + ")";
            scope_Handles[handleNumber].style[options.transformRule] = translateRule;
            updateConnect(handleNumber);
            updateConnect(handleNumber + 1);
        }
        // Handles before the slider middle are stacked later = higher,
        // Handles after the middle later is lower
        // [[7] [8] .......... | .......... [5] [4]
        function setZindex() {
            scope_HandleNumbers.forEach(function (handleNumber) {
                var dir = scope_Locations[handleNumber] > 50 ? -1 : 1;
                var zIndex = 3 + (scope_Handles.length + dir * handleNumber);
                scope_Handles[handleNumber].style.zIndex = String(zIndex);
            });
        }
        // Test suggested values and apply margin, step.
        // if exactInput is true, don't run checkHandlePosition, then the handle can be placed in between steps (#436)
        function setHandle(handleNumber, to, lookBackward, lookForward, exactInput) {
            if (!exactInput) {
                to = checkHandlePosition(scope_Locations, handleNumber, to, lookBackward, lookForward, false);
            }
            if (to === false) {
                return false;
            }
            updateHandlePosition(handleNumber, to);
            return true;
        }
        // Updates style attribute for connect nodes
        function updateConnect(index) {
            // Skip connects set to false
            if (!scope_Connects[index]) {
                return;
            }
            var l = 0;
            var h = 100;
            if (index !== 0) {
                l = scope_Locations[index - 1];
            }
            if (index !== scope_Connects.length - 1) {
                h = scope_Locations[index];
            }
            // We use two rules:
            // 'translate' to change the left/top offset;
            // 'scale' to change the width of the element;
            // As the element has a width of 100%, a translation of 100% is equal to 100% of the parent (.noUi-base)
            var connectWidth = h - l;
            var translateRule = "translate(" + inRuleOrder(transformDirection(l, connectWidth) + "%", "0") + ")";
            var scaleRule = "scale(" + inRuleOrder(connectWidth / 100, "1") + ")";
            scope_Connects[index].style[options.transformRule] = translateRule + " " + scaleRule;
        }
        // Parses value passed to .set method. Returns current value if not parse-able.
        function resolveToValue(to, handleNumber) {
            // Setting with null indicates an 'ignore'.
            // Inputting 'false' is invalid.
            if (to === null || to === false || to === undefined) {
                return scope_Locations[handleNumber];
            }
            // If a formatted number was passed, attempt to decode it.
            if (typeof to === "number") {
                to = String(to);
            }
            to = options.format.from(to);
            if (to !== false) {
                to = scope_Spectrum.toStepping(to);
            }
            // If parsing the number failed, use the current value.
            if (to === false || isNaN(to)) {
                return scope_Locations[handleNumber];
            }
            return to;
        }
        // Set the slider value.
        function valueSet(input, fireSetEvent, exactInput) {
            var values = asArray(input);
            var isInit = scope_Locations[0] === undefined;
            // Event fires by default
            fireSetEvent = fireSetEvent === undefined ? true : fireSetEvent;
            // Animation is optional.
            // Make sure the initial values were set before using animated placement.
            if (options.animate && !isInit) {
                addClassFor(scope_Target, options.cssClasses.tap, options.animationDuration);
            }
            // First pass, without lookAhead but with lookBackward. Values are set from left to right.
            scope_HandleNumbers.forEach(function (handleNumber) {
                setHandle(handleNumber, resolveToValue(values[handleNumber], handleNumber), true, false, exactInput);
            });
            var i = scope_HandleNumbers.length === 1 ? 0 : 1;
            // Secondary passes. Now that all base values are set, apply constraints.
            // Iterate all handles to ensure constraints are applied for the entire slider (Issue #1009)
            for (; i < scope_HandleNumbers.length; ++i) {
                scope_HandleNumbers.forEach(function (handleNumber) {
                    setHandle(handleNumber, scope_Locations[handleNumber], true, true, exactInput);
                });
            }
            setZindex();
            scope_HandleNumbers.forEach(function (handleNumber) {
                fireEvent("update", handleNumber);
                // Fire the event only for handles that received a new value, as per #579
                if (values[handleNumber] !== null && fireSetEvent) {
                    fireEvent("set", handleNumber);
                }
            });
        }
        // Reset slider to initial values
        function valueReset(fireSetEvent) {
            valueSet(options.start, fireSetEvent);
        }
        // Set value for a single handle
        function valueSetHandle(handleNumber, value, fireSetEvent, exactInput) {
            // Ensure numeric input
            handleNumber = Number(handleNumber);
            if (!(handleNumber >= 0 && handleNumber < scope_HandleNumbers.length)) {
                throw new Error("noUiSlider: invalid handle number, got: " + handleNumber);
            }
            // Look both backward and forward, since we don't want this handle to "push" other handles (#960);
            // The exactInput argument can be used to ignore slider stepping (#436)
            setHandle(handleNumber, resolveToValue(value, handleNumber), true, true, exactInput);
            fireEvent("update", handleNumber);
            if (fireSetEvent) {
                fireEvent("set", handleNumber);
            }
        }
        // Get the slider value.
        function valueGet() {
            var values = scope_Values.map(options.format.to);
            // If only one handle is used, return a single value.
            if (values.length === 1) {
                return values[0];
            }
            return values;
        }
        // Removes classes from the root and empties it.
        function destroy() {
            // remove protected internal listeners
            removeEvent(INTERNAL_EVENT_NS.aria);
            removeEvent(INTERNAL_EVENT_NS.tooltips);
            Object.keys(options.cssClasses).forEach(function (key) {
                removeClass(scope_Target, options.cssClasses[key]);
            });
            while (scope_Target.firstChild) {
                scope_Target.removeChild(scope_Target.firstChild);
            }
            delete scope_Target.noUiSlider;
        }
        function getNextStepsForHandle(handleNumber) {
            var location = scope_Locations[handleNumber];
            var nearbySteps = scope_Spectrum.getNearbySteps(location);
            var value = scope_Values[handleNumber];
            var increment = nearbySteps.thisStep.step;
            var decrement = null;
            // If snapped, directly use defined step value
            if (options.snap) {
                return [value - nearbySteps.stepBefore.startValue || null, nearbySteps.stepAfter.startValue - value || null];
            }
            // If the next value in this step moves into the next step,
            // the increment is the start of the next step - the current value
            if (increment !== false) {
                if (value + increment > nearbySteps.stepAfter.startValue) {
                    increment = nearbySteps.stepAfter.startValue - value;
                }
            }
            // If the value is beyond the starting point
            if (value > nearbySteps.thisStep.startValue) {
                decrement = nearbySteps.thisStep.step;
            } else if (nearbySteps.stepBefore.step === false) {
                decrement = false;
            }
            // If a handle is at the start of a step, it always steps back into the previous step first
            else {
                    decrement = value - nearbySteps.stepBefore.highestStep;
                }
            // Now, if at the slider edges, there is no in/decrement
            if (location === 100) {
                increment = null;
            } else if (location === 0) {
                decrement = null;
            }
            // As per #391, the comparison for the decrement step can have some rounding issues.
            var stepDecimals = scope_Spectrum.countStepDecimals();
            // Round per #391
            if (increment !== null && increment !== false) {
                increment = Number(increment.toFixed(stepDecimals));
            }
            if (decrement !== null && decrement !== false) {
                decrement = Number(decrement.toFixed(stepDecimals));
            }
            return [decrement, increment];
        }
        // Get the current step size for the slider.
        function getNextSteps() {
            return scope_HandleNumbers.map(getNextStepsForHandle);
        }
        // Updatable: margin, limit, padding, step, range, animate, snap
        function updateOptions(optionsToUpdate, fireSetEvent) {
            // Spectrum is created using the range, snap, direction and step options.
            // 'snap' and 'step' can be updated.
            // If 'snap' and 'step' are not passed, they should remain unchanged.
            var v = valueGet();
            var updateAble = ["margin", "limit", "padding", "range", "animate", "snap", "step", "format", "pips", "tooltips"];
            // Only change options that we're actually passed to update.
            updateAble.forEach(function (name) {
                // Check for undefined. null removes the value.
                if (optionsToUpdate[name] !== undefined) {
                    originalOptions[name] = optionsToUpdate[name];
                }
            });
            var newOptions = testOptions(originalOptions);
            // Load new options into the slider state
            updateAble.forEach(function (name) {
                if (optionsToUpdate[name] !== undefined) {
                    options[name] = newOptions[name];
                }
            });
            scope_Spectrum = newOptions.spectrum;
            // Limit, margin and padding depend on the spectrum but are stored outside of it. (#677)
            options.margin = newOptions.margin;
            options.limit = newOptions.limit;
            options.padding = newOptions.padding;
            // Update pips, removes existing.
            if (options.pips) {
                pips(options.pips);
            } else {
                removePips();
            }
            // Update tooltips, removes existing.
            if (options.tooltips) {
                tooltips();
            } else {
                removeTooltips();
            }
            // Invalidate the current positioning so valueSet forces an update.
            scope_Locations = [];
            valueSet(isSet(optionsToUpdate.start) ? optionsToUpdate.start : v, fireSetEvent);
        }
        // Initialization steps
        function setupSlider() {
            // Create the base element, initialize HTML and set classes.
            // Add handles and connect elements.
            scope_Base = addSlider(scope_Target);
            addElements(options.connect, scope_Base);
            // Attach user events.
            bindSliderEvents(options.events);
            // Use the public value method to set the start values.
            valueSet(options.start);
            if (options.pips) {
                pips(options.pips);
            }
            if (options.tooltips) {
                tooltips();
            }
            aria();
        }
        setupSlider();
        var scope_Self = {
            destroy: destroy,
            steps: getNextSteps,
            on: bindEvent,
            off: removeEvent,
            get: valueGet,
            set: valueSet,
            setHandle: valueSetHandle,
            reset: valueReset,
            // Exposed for unit testing, don't use this in your application.
            __moveHandles: function __moveHandles(upward, proposal, handleNumbers) {
                moveHandles(upward, proposal, scope_Locations, handleNumbers);
            },
            options: originalOptions,
            updateOptions: updateOptions,
            target: scope_Target,
            removePips: removePips,
            removeTooltips: removeTooltips,
            getTooltips: function getTooltips() {
                return scope_Tooltips;
            },
            getOrigins: function getOrigins() {
                return scope_Handles;
            },
            pips: pips // Issue #594
        };
        return scope_Self;
    }
    // Run the standard initializer
    function initialize(target, originalOptions) {
        if (!target || !target.nodeName) {
            throw new Error("noUiSlider: create requires a single element, got: " + target);
        }
        // Throw an error if the slider was already initialized.
        if (target.noUiSlider) {
            throw new Error("noUiSlider: Slider was already initialized.");
        }
        // Test the options and create the slider environment;
        var options = testOptions(originalOptions);
        var api = scope(target, options, originalOptions);
        target.noUiSlider = api;
        return api;
    }
    var nouislider = {
        // Exposed for unit testing, don't use this in your application.
        __spectrum: Spectrum,
        // A reference to the default classes, allows global changes.
        // Use the cssClasses option for changes to one slider.
        cssClasses: cssClasses,
        create: initialize
    };

    exports.create = initialize;
    exports.cssClasses = cssClasses;
    exports.default = nouislider;

    Object.defineProperty(exports, '__esModule', { value: true });
});

/***/ }),
/* 136 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function (factory) {
  if (true) {
    // AMD. Register as an anonymous module.
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === "object") {
    // Node/CommonJS
    module.exports = factory();
  } else {
    // Browser globals
    window.wNumb = factory();
  }
})(function () {
  "use strict";

  var FormatOptions = ["decimals", "thousand", "mark", "prefix", "suffix", "encoder", "decoder", "negativeBefore", "negative", "edit", "undo"];

  // General

  // Reverse a string
  function strReverse(a) {
    return a.split("").reverse().join("");
  }

  // Check if a string starts with a specified prefix.
  function strStartsWith(input, match) {
    return input.substring(0, match.length) === match;
  }

  // Check is a string ends in a specified suffix.
  function strEndsWith(input, match) {
    return input.slice(-1 * match.length) === match;
  }

  // Throw an error if formatting options are incompatible.
  function throwEqualError(F, a, b) {
    if ((F[a] || F[b]) && F[a] === F[b]) {
      throw new Error(a);
    }
  }

  // Check if a number is finite and not NaN
  function isValidNumber(input) {
    return typeof input === "number" && isFinite(input);
  }

  // Provide rounding-accurate toFixed method.
  // Borrowed: http://stackoverflow.com/a/21323330/775265
  function toFixed(value, exp) {
    value = value.toString().split("e");
    value = Math.round(+(value[0] + "e" + (value[1] ? +value[1] + exp : exp)));
    value = value.toString().split("e");
    return (+(value[0] + "e" + (value[1] ? +value[1] - exp : -exp))).toFixed(exp);
  }

  // Formatting

  // Accept a number as input, output formatted string.
  function formatTo(decimals, thousand, mark, prefix, suffix, encoder, decoder, negativeBefore, negative, edit, undo, input) {
    var originalInput = input,
        inputIsNegative,
        inputPieces,
        inputBase,
        inputDecimals = "",
        output = "";

    // Apply user encoder to the input.
    // Expected outcome: number.
    if (encoder) {
      input = encoder(input);
    }

    // Stop if no valid number was provided, the number is infinite or NaN.
    if (!isValidNumber(input)) {
      return false;
    }

    // Rounding away decimals might cause a value of -0
    // when using very small ranges. Remove those cases.
    if (decimals !== false && parseFloat(input.toFixed(decimals)) === 0) {
      input = 0;
    }

    // Formatting is done on absolute numbers,
    // decorated by an optional negative symbol.
    if (input < 0) {
      inputIsNegative = true;
      input = Math.abs(input);
    }

    // Reduce the number of decimals to the specified option.
    if (decimals !== false) {
      input = toFixed(input, decimals);
    }

    // Transform the number into a string, so it can be split.
    input = input.toString();

    // Break the number on the decimal separator.
    if (input.indexOf(".") !== -1) {
      inputPieces = input.split(".");

      inputBase = inputPieces[0];

      if (mark) {
        inputDecimals = mark + inputPieces[1];
      }
    } else {
      // If it isn't split, the entire number will do.
      inputBase = input;
    }

    // Group numbers in sets of three.
    if (thousand) {
      inputBase = strReverse(inputBase).match(/.{1,3}/g);
      inputBase = strReverse(inputBase.join(strReverse(thousand)));
    }

    // If the number is negative, prefix with negation symbol.
    if (inputIsNegative && negativeBefore) {
      output += negativeBefore;
    }

    // Prefix the number
    if (prefix) {
      output += prefix;
    }

    // Normal negative option comes after the prefix. Defaults to '-'.
    if (inputIsNegative && negative) {
      output += negative;
    }

    // Append the actual number.
    output += inputBase;
    output += inputDecimals;

    // Apply the suffix.
    if (suffix) {
      output += suffix;
    }

    // Run the output through a user-specified post-formatter.
    if (edit) {
      output = edit(output, originalInput);
    }

    // All done.
    return output;
  }

  // Accept a sting as input, output decoded number.
  function formatFrom(decimals, thousand, mark, prefix, suffix, encoder, decoder, negativeBefore, negative, edit, undo, input) {
    var originalInput = input,
        inputIsNegative,
        output = "";

    // User defined pre-decoder. Result must be a non empty string.
    if (undo) {
      input = undo(input);
    }

    // Test the input. Can't be empty.
    if (!input || typeof input !== "string") {
      return false;
    }

    // If the string starts with the negativeBefore value: remove it.
    // Remember is was there, the number is negative.
    if (negativeBefore && strStartsWith(input, negativeBefore)) {
      input = input.replace(negativeBefore, "");
      inputIsNegative = true;
    }

    // Repeat the same procedure for the prefix.
    if (prefix && strStartsWith(input, prefix)) {
      input = input.replace(prefix, "");
    }

    // And again for negative.
    if (negative && strStartsWith(input, negative)) {
      input = input.replace(negative, "");
      inputIsNegative = true;
    }

    // Remove the suffix.
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice
    if (suffix && strEndsWith(input, suffix)) {
      input = input.slice(0, -1 * suffix.length);
    }

    // Remove the thousand grouping.
    if (thousand) {
      input = input.split(thousand).join("");
    }

    // Set the decimal separator back to period.
    if (mark) {
      input = input.replace(mark, ".");
    }

    // Prepend the negative symbol.
    if (inputIsNegative) {
      output += "-";
    }

    // Add the number
    output += input;

    // Trim all non-numeric characters (allow '.' and '-');
    output = output.replace(/[^0-9\.\-.]/g, "");

    // The value contains no parse-able number.
    if (output === "") {
      return false;
    }

    // Covert to number.
    output = Number(output);

    // Run the user-specified post-decoder.
    if (decoder) {
      output = decoder(output);
    }

    // Check is the output is valid, otherwise: return false.
    if (!isValidNumber(output)) {
      return false;
    }

    return output;
  }

  // Framework

  // Validate formatting options
  function validate(inputOptions) {
    var i,
        optionName,
        optionValue,
        filteredOptions = {};

    if (inputOptions["suffix"] === undefined) {
      inputOptions["suffix"] = inputOptions["postfix"];
    }

    for (i = 0; i < FormatOptions.length; i += 1) {
      optionName = FormatOptions[i];
      optionValue = inputOptions[optionName];

      if (optionValue === undefined) {
        // Only default if negativeBefore isn't set.
        if (optionName === "negative" && !filteredOptions.negativeBefore) {
          filteredOptions[optionName] = "-";
          // Don't set a default for mark when 'thousand' is set.
        } else if (optionName === "mark" && filteredOptions.thousand !== ".") {
          filteredOptions[optionName] = ".";
        } else {
          filteredOptions[optionName] = false;
        }

        // Floating points in JS are stable up to 7 decimals.
      } else if (optionName === "decimals") {
        if (optionValue >= 0 && optionValue < 8) {
          filteredOptions[optionName] = optionValue;
        } else {
          throw new Error(optionName);
        }

        // These options, when provided, must be functions.
      } else if (optionName === "encoder" || optionName === "decoder" || optionName === "edit" || optionName === "undo") {
        if (typeof optionValue === "function") {
          filteredOptions[optionName] = optionValue;
        } else {
          throw new Error(optionName);
        }

        // Other options are strings.
      } else {
        if (typeof optionValue === "string") {
          filteredOptions[optionName] = optionValue;
        } else {
          throw new Error(optionName);
        }
      }
    }

    // Some values can't be extracted from a
    // string if certain combinations are present.
    throwEqualError(filteredOptions, "mark", "thousand");
    throwEqualError(filteredOptions, "prefix", "negative");
    throwEqualError(filteredOptions, "prefix", "negativeBefore");

    return filteredOptions;
  }

  // Pass all options as function arguments
  function passAll(options, method, input) {
    var i,
        args = [];

    // Add all options in order of FormatOptions
    for (i = 0; i < FormatOptions.length; i += 1) {
      args.push(options[FormatOptions[i]]);
    }

    // Append the input, then call the method, presenting all
    // options as arguments.
    args.push(input);
    return method.apply("", args);
  }

  function wNumb(options) {
    if (!(this instanceof wNumb)) {
      return new wNumb(options);
    }

    if ((typeof options === "undefined" ? "undefined" : _typeof(options)) !== "object") {
      return;
    }

    options = validate(options);

    // Call 'formatTo' with proper arguments.
    this.to = function (input) {
      return passAll(options, formatTo, input);
    };

    // Call 'formatFrom' with proper arguments.
    this.from = function (input) {
      return passAll(options, formatFrom, input);
    };
  }

  return wNumb;
});

/***/ }),
/* 138 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 139 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 140 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 141 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 142 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function requireAll(r) {
  r.keys().forEach(r);
}

requireAll(__webpack_require__(144));

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./multicolor/icon-broken-chain.svg": 145,
	"./multicolor/icon-broken-ring.svg": 146,
	"./multicolor/icon-coins.svg": 147,
	"./multicolor/icon-gift.svg": 148,
	"./multicolor/icon-incomplete-earrings.svg": 149,
	"./multicolor/icon-new-jewelry.svg": 150,
	"./multicolor/icon-old-chain.svg": 151,
	"./multicolor/icon-old-jewelry.svg": 152,
	"./multicolor/icon-onlinebees.svg": 153,
	"./multicolor/icon-precious.svg": 154,
	"./multicolor/icon-rings.svg": 155,
	"./multicolor/icon-roket.svg": 156,
	"./multicolor/icon-start.svg": 157,
	"./multicolor/icon-stomatologocheskoe-zoloto.svg": 158,
	"./multicolor/icon-wedding.svg": 159,
	"./multicolor/icon-without-sample.svg": 160,
	"./multicolor/icon-zolotie-koronki.svg": 161,
	"./multicolor/icon-zoloto-proba.svg": 162,
	"./multicolor/telegramm.svg": 163,
	"./multicolor/whatsup.svg": 164,
	"./multicolor/wiber.svg": 165
};
function webpackContext(req) {
	return __webpack_require__(webpackContextResolve(req));
};
function webpackContextResolve(req) {
	var id = map[req];
	if(!(id + 1)) // check for number or string
		throw new Error("Cannot find module '" + req + "'.");
	return id;
};
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 144;

/***/ }),
/* 145 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build__);


var symbol = new __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol___default.a({
  "id": "icon-broken-chain",
  "use": "icon-broken-chain-usage",
  "viewBox": "0 0 510 510",
  "content": "<symbol viewBox=\"0 0 510 510\" xmlns=\"http://www.w3.org/2000/svg\" id=\"icon-broken-chain\"><path d=\"M291.666 350.729l-60.063 60.421c-27.92 28.168-73.198 28.168-101.118 0l-13.354-13.473-18.68-18.839c-5.107-5.157-9.29-10.89-12.519-17.011-14.477-27.274-10.303-61.971 12.519-84.972l59.964-60.321c3.875-3.895 10.184-3.885 14.049.01l19.395 19.564c3.825 3.865 3.825 10.095-.01 13.95l-53.356 53.635a29.658 29.658 0 0 0-7.581 13.155c-2.703 9.966-.179 21.064 7.581 28.884l15.222 15.361 9.588 9.668c11.506 11.605 30.175 11.605 41.691 0l53.247-53.535a9.897 9.897 0 0 1 14.049.01l19.385 19.554c3.827 3.854 3.827 10.084-.009 13.939z\" fill=\"#edf4ff\" /><path d=\"M153.715 361.093l-36.584 36.584-18.68-18.839c-5.107-5.157-9.29-10.89-12.519-17.011l44.98-44.98c-2.703 9.966-.179 21.064 7.581 28.884z\" fill=\"#dbeaff\" /><g fill=\"#dbeaff\"><path d=\"M177.61 221.863c3.828 3.862 3.824 10.089-.011 13.944l-53.349 53.635c-11.506 11.616-11.506 30.44 0 42.045l24.809 25.023c.51.514 1.039.998 1.575 1.466l-12.137-12.242c-11.506-11.605-11.506-30.43 0-42.045l53.349-53.635c3.835-3.855 3.84-10.083.011-13.944l-19.396-19.563a10.01 10.01 0 0 0-.936-.822zM291.676 336.788l-19.389-19.556a10.01 10.01 0 0 0-.936-.822l6.078 6.13a9.894 9.894 0 0 1-.01 13.943L217.352 396.9c-27.107 27.35-70.578 28.14-98.637 2.38l11.766 11.868c27.919 28.169 73.199 28.169 101.118 0l60.066-60.417c3.834-3.856 3.838-10.083.011-13.943z\" /></g><path d=\"M20.794 496.69l-7.704-7.704c-7.13-7.13-7.13-18.691 0-25.821l139.153-139.153c7.13-7.13 18.691-7.13 25.821 0l7.704 7.704c7.13 7.13 7.13 18.691 0 25.821L46.615 496.69c-7.13 7.13-18.691 7.13-25.821 0z\" fill=\"#edf4ff\" /><path d=\"M185.851 331.799l-7.869-7.869a18.1 18.1 0 0 0-3.605-2.773c4.119 6.959 3.208 16.069-2.773 22.05L32.285 482.525c-5.981 5.981-15.092 6.892-22.05 2.773a18.138 18.138 0 0 0 2.773 3.605l7.869 7.869c7.085 7.085 18.571 7.085 25.655 0l139.319-139.318c7.084-7.084 7.084-18.571 0-25.655z\" fill=\"#dbeaff\" /><path d=\"M411.196 231.557l-60.421 60.063c-3.855 3.835-10.085 3.835-13.94.01l-19.554-19.385a9.897 9.897 0 0 1-.01-14.049l53.535-53.247c11.605-11.516 11.605-30.186 0-41.691l-9.668-9.588-15.361-15.222c-7.819-7.76-18.918-10.284-28.884-7.581a29.662 29.662 0 0 0-13.155 7.581l-53.635 53.356c-3.855 3.835-10.085 3.835-13.95.01l-19.564-19.395c-3.895-3.865-3.905-10.174-.01-14.049L276.9 98.406c23.002-22.823 57.698-26.996 84.972-12.519 6.121 3.229 11.854 7.412 17.01 12.519l18.839 18.68 13.473 13.354c28.171 27.919 28.171 73.197.002 101.117z\" fill=\"#edf4ff\" /><path d=\"M397.723 117.085l-36.584 36.584-15.361-15.222c-7.819-7.76-18.918-10.284-28.884-7.581l44.98-44.98c6.121 3.229 11.854 7.412 17.01 12.519z\" fill=\"#dbeaff\" /><g fill=\"#dbeaff\"><path d=\"M411.193 130.436l-11.868-11.766c25.76 28.058 24.97 71.53-2.38 98.637l-60.417 60.066c-3.856 3.833-10.082 3.838-13.943.01l-6.13-6.078c.254.324.522.639.822.937l19.556 19.389a9.895 9.895 0 0 0 13.943-.009l60.417-60.066c28.169-27.92 28.169-73.201 0-101.12zM345.781 138.451l12.241 12.137a30.072 30.072 0 0 0-1.466-1.575l-25.023-24.809c-11.605-11.506-30.43-11.506-42.045 0l-53.635 53.349c-3.855 3.835-10.083 3.84-13.944.011l-6.137-6.085c.254.324.522.639.822.936l19.563 19.396c3.861 3.829 10.089 3.824 13.944-.011l53.635-53.349c11.616-11.506 30.44-11.506 42.045 0z\" /></g><path d=\"M496.736 20.748l-7.704-7.704c-7.13-7.13-18.691-7.13-25.821 0L324.058 152.197c-7.13 7.13-7.13 18.691 0 25.821l7.704 7.704c7.13 7.13 18.691 7.13 25.821 0L496.736 46.569c7.13-7.13 7.13-18.691 0-25.821z\" fill=\"#edf4ff\" /><path d=\"M496.819 20.831l-7.869-7.869a18.1 18.1 0 0 0-3.605-2.773c4.119 6.959 3.208 16.069-2.773 22.05L343.253 171.557c-5.981 5.982-15.092 6.892-22.05 2.773a18.138 18.138 0 0 0 2.773 3.605l7.869 7.869c7.084 7.084 18.571 7.084 25.655 0L496.819 46.486c7.085-7.084 7.085-18.571 0-25.655z\" fill=\"#dbeaff\" /><g><path d=\"M277.581 311.985c-6.465-6.791-18.148-6.798-24.623-.016l-53.252 53.539c-4.844 4.879-11.382 7.072-17.779 6.407 21.217-18.28 23.207-34.344 1.323-53.254-16.96-15.325-33.146-5.308-45.677 9.482-1.047-6.849 1.095-14.037 6.203-19.196l53.356-53.634c6.694-6.729 6.704-17.697.018-24.452-11.293-9.989-26.977-35.889-44.022-19.58-45 48.054-118.149 93.164-65.408 166.713l-37.638 37.638c-6.934 6.75 3.8 17.467 10.54 10.539l96.972-96.972c3.978-4.147 11.138-4.148 15.115.001 6.148 5.679 16.311 14.585 7.869 22.985L41.262 491.504c-8.406 8.441-17.307-1.726-22.985-7.871-11.487-11.066 11.378-24.743 17.052-32.167 6.955-6.739-3.814-17.473-10.538-10.538C9.566 455.59-11.597 472.59 7.738 494.174c6.848 7.179 15.104 16.067 25.967 15.364 15.74 5.048 86.516-79.744 97.929-87.328 72.88 52.774 118.088-21.631 165.316-66.227 16.078-16.687-9.586-32.812-19.369-43.998zm-173.844-29.876l59.96-60.318c1.371-1.023 2.105-1.022 3.475 0l19.391 19.56c.946.956.947 2.504.004 3.453l-53.368 53.646c-10.966 11.074-13.733 27.734-7.513 41.582l-27.341 27.341c-19.406-25.335-17.576-62.116 5.392-85.264zm182.644 63.368c-40.516 35.664-81.634 110.492-144.13 66.115l27.586-27.587c13.584 5.709 29.785 2.741 40.44-7.99l53.246-53.534c1.346-1.039 2.19-1.002 3.476 0l19.387 19.557c.94.948.939 2.49-.005 3.439zM509.585 33.659c.673-10.826-8.142-19.167-15.367-25.967-9.527-9.928-26.667-9.928-36.194 0l-79.983 79.984c-73.611-52.749-118.666 20.443-166.717 65.412-16.296 16.997 9.594 32.761 19.588 44.023 6.747 6.679 17.714 6.672 24.447-.023l53.622-53.345c5.167-5.117 12.357-7.261 19.208-6.214-14.795 12.544-24.807 28.709-9.483 45.677 18.915 21.893 34.995 19.878 53.254-1.322.664 6.396-1.529 12.934-6.41 17.782l-53.536 53.248c-16.298 16.994 9.579 32.747 19.573 44.008 6.742 6.69 17.707 6.682 24.442-.015l60.413-60.055c19.876-19.699 27.839-48.713 20.783-75.72a7.453 7.453 0 0 0-14.421 3.767c16.977 48.029-51.376 91.374-77.283 121.44a2.447 2.447 0 0 1-3.439.001l-19.552-19.382c-1.005-1.288-1.043-2.129-.004-3.478l53.531-53.242c10.734-10.66 13.702-26.861 7.994-40.444 6.074-10.192 134.144-123.449 125.534-136.135zm-211.102 99.505l-53.634 53.356a2.457 2.457 0 0 1-3.448.001l-19.562-19.394c-1.024-1.369-1.025-2.104-.005-3.474l60.316-59.958c23.152-22.974 59.934-24.803 85.268-5.397l-27.341 27.341c-13.848-6.221-30.51-3.452-41.594 7.525zm193.066-91.947L352.23 180.536a10.617 10.617 0 0 1-7.558 3.131c-6.004.678-11.516-7.662-15.428-11.001-4.144-3.98-4.149-11.136.001-15.115L468.563 18.232c3.977-4.147 11.139-4.147 15.115 0 6.149 5.678 16.311 14.584 7.871 22.985zM95.252 181.378l21.772 8.236c3.748 1.448 8.154-.445 9.606-4.333a7.452 7.452 0 0 0-4.333-9.606l-21.772-8.236c-8.983-3.554-14.373 10.65-5.273 13.939zM144.805 146.527c6.652 7.011 17.523-3.592 10.663-10.414l-16.931-17.339a7.453 7.453 0 0 0-10.664 10.414zM185.759 117.71c2.38 9.424 17.003 5.485 14.411-3.798l-6.027-22.867a7.451 7.451 0 1 0-14.411 3.797z\" /></g></symbol>"
});
var result = __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build___default.a.add(symbol);
/* harmony default export */ __webpack_exports__["default"] = (symbol);

/***/ }),
/* 146 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build__);


var symbol = new __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol___default.a({
  "id": "icon-broken-ring",
  "use": "icon-broken-ring-usage",
  "viewBox": "0 0 512 512",
  "content": "<symbol viewBox=\"0 0 512 512\" xmlns=\"http://www.w3.org/2000/svg\" id=\"icon-broken-ring\"><circle cx=\"417.249\" cy=\"416.81\" r=\"10\" /><path d=\"M456.716 304.68c-2.74-1.91-6.34-2.33-9.45-1.08-6.46 2.58-12.01 5.98-16.48 10.101-2.6 2.38-6.49 6.939-6.67 7.149-2.58 3.021-3.78 4.2-5.789 5.21-2.417 1.213-6.14 1.908-11.081 2.085-.844.03-3.609.045-4.239.036-2.36-.02-4.66.75-6.48 2.23a10.092 10.092 0 0 0-3.49 5.699C379.457 400.36 321.858 447 256.088 447h-.04c-37.4-.01-72.559-14.57-99.019-41.01-26.449-26.45-41.009-61.61-41.02-98.99.01-37.38 14.57-72.54 41.02-98.99 26.46-26.44 61.62-41.01 99.019-41.01h.04c62.41 0 117.819 41.91 134.739 101.92a10.021 10.021 0 0 0 6.25 6.7c3.03 1.09 6.45.63 9.09-1.2a61.556 61.556 0 0 0 6.689-5.401l.005-.002c2.414-2.228 9.755-9.012 28.469-2.389a9.998 9.998 0 1 0 13.005-11.973c-1.206-4.581-5.084-16.431-5.099-16.471a204.054 204.054 0 0 0-28.37-53.153 205.813 205.813 0 0 0-44.319-43.921 205.197 205.197 0 0 0-18.474-11.963L408.06 79.26a10 10 0 0 0 0-14.156L345.754 2.922c-3.903-3.896-10.225-3.896-14.128 0l-7.072 7.058H187.442l-7.072-7.058c-3.903-3.896-10.224-3.895-14.128 0l-62.307 62.182a10 10 0 0 0 0 14.156l50.019 49.919a205.38 205.38 0 0 0-12.556 7.831 205.427 205.427 0 0 0-30.34 25.03 205.908 205.908 0 0 0-25.04 30.34 203.946 203.946 0 0 0-18.9 34.82 203.187 203.187 0 0 0-11.95 38.479C52.4 279.19 51 293.09 51 307s1.4 27.81 4.17 41.319a203.22 203.22 0 0 0 11.95 38.48 203.946 203.946 0 0 0 18.9 34.82 206.533 206.533 0 0 0 25.04 30.34c9.27 9.27 19.48 17.7 30.34 25.03a205.43 205.43 0 0 0 34.83 18.899c12.38 5.23 25.33 9.25 38.489 11.94 13.51 2.77 27.41 4.17 41.33 4.17l.03-.05V512c51.449 0 100.649-19.141 138.529-53.891 4.06-3.729 4.34-10.069.61-14.13a10.015 10.015 0 0 0-7.37-3.239c-2.51 0-4.91.93-6.76 2.63-34.2 31.35-78.609 48.62-125.039 48.63-49.419-.01-95.889-19.25-130.849-54.181C90.25 402.86 71 356.4 71 307s19.25-95.86 54.199-130.82c34.96-34.93 81.429-54.18 130.849-54.18h.03c78.013 0 147.483 48.847 173.968 121.908-10.506-.642-18.569 2.054-24.592 5.755a159.327 159.327 0 0 0-22.477-40.113 160.683 160.683 0 0 0-34.42-33.12 159.047 159.047 0 0 0-43.13-21.66c-15.89-5.149-32.509-7.77-49.379-7.77-21.61 0-42.569 4.229-62.299 12.58-9.48 4.01-18.63 8.97-27.18 14.75a161.045 161.045 0 0 0-23.68 19.529 161.078 161.078 0 0 0-19.55 23.681 160.2 160.2 0 0 0-14.75 27.18c-8.35 19.73-12.58 40.68-12.58 62.28s4.23 42.56 12.58 62.279c4.01 9.48 8.97 18.62 14.75 27.181a160.925 160.925 0 0 0 43.23 43.21c8.55 5.78 17.7 10.74 27.18 14.75 19.73 8.35 40.69 12.58 62.299 12.58 18.15-.01 35.97-3.021 52.939-8.971a159.455 159.455 0 0 0 45.47-24.85 160.643 160.643 0 0 0 34.949-37.71c9.71-14.6 16.9-30.58 21.36-47.479 5.63-.4 10.35-1.421 14.43-3.091 4.57-1.87 7.93-4.58 9.94-6.529 1.61-1.57 2.91-3.04 3.98-4.271a184.426 184.426 0 0 1-10.329 39.36c-.96 2.49-.89 5.21.19 7.649a9.921 9.921 0 0 0 5.55 5.28c3.04 1.17 6.5.76 9.19-1.05a9.914 9.914 0 0 0 3.73-4.69c8.3-21.54 12.86-44.239 13.55-67.47.089-3.387-1.5-6.568-4.281-8.498zM386.841 72.182l-47.528 47.433a203.935 203.935 0 0 0-18.815-7.274c-.244-.081-.489-.155-.733-.234l32.912-32.846a10 10 0 0 0 0-14.156l-27.523-27.467 13.536-13.509zm-261.685 0l48.151-48.054 13.536 13.509-27.523 27.467a10 10 0 0 0 0 14.156l32.94 32.874c-5.426 1.773-18.376 6.993-19.544 7.513zM256.048 102c-13.92 0-27.82 1.399-41.33 4.17l-.1.022-34.078-34.01 27.522-27.467a10 10 0 0 0 0-14.156l-.58-.579h97.031l-.58.579a10 10 0 0 0 0 14.156l27.522 27.467-34.064 33.996A205.842 205.842 0 0 0 256.048 102z\" /></symbol>"
});
var result = __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build___default.a.add(symbol);
/* harmony default export */ __webpack_exports__["default"] = (symbol);

/***/ }),
/* 147 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build__);


var symbol = new __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol___default.a({
  "id": "icon-coins",
  "use": "icon-coins-usage",
  "viewBox": "0 0 512 512",
  "content": "<symbol xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" id=\"icon-coins\"><path d=\"M256 386c-5.52 0-10 4.48-10 10s4.48 10 10 10 10-4.48 10-10-4.48-10-10-10z\" /><path d=\"M469.087 61.37C444.479 51.459 412.485 46 379 46s-65.479 5.459-90.087 15.37C274.371 67.227 263.268 74.385 256 82.417c-7.268-8.032-18.371-15.189-32.913-21.046C198.479 51.459 166.485 46 133 46s-65.479 5.459-90.087 15.37C15.24 72.516 0 88.366 0 106v240c0 17.634 15.24 33.484 42.913 44.63C65.8 399.848 95.078 405.208 126 405.914V406c0 34.206 55.888 60 130 60s130-25.794 130-60v-.086c30.922-.706 60.2-6.066 83.087-15.284C496.76 379.484 512 363.634 512 346V106c0-17.634-15.24-33.484-42.913-44.63zM492 286c0 8.537-11.643 18.529-30.385 26.078-20.285 8.17-47.519 13.113-75.615 13.823V286l-.002-.086c30.923-.705 60.201-6.065 83.09-15.284 8.983-3.618 16.646-7.734 22.913-12.244L492 286zM246 166c0 8.537-11.643 18.529-30.385 26.078C193.648 200.926 163.536 206 133 206s-60.648-5.074-82.615-13.922C31.643 184.529 20 174.537 20 166v-27.614c6.267 4.51 13.93 8.626 22.913 12.244C67.521 160.541 99.515 166 133 166s65.479-5.459 90.087-15.37c8.983-3.618 16.646-7.734 22.913-12.244V166zM42.913 210.63C67.521 220.541 99.515 226 133 226s65.479-5.459 90.087-15.37c8.983-3.618 16.646-7.734 22.913-12.244v27.791c-25.87.876-50.68 5.122-70.747 12.189-20.127 7.089-34.61 16.542-42.486 27.631-30.456-.026-60.471-5.094-82.382-13.919C31.643 244.529 20 234.537 20 226v-27.614c6.267 4.51 13.93 8.626 22.913 12.244zM20 258.386c6.267 4.51 13.93 8.626 22.913 12.244 22.888 9.218 52.167 14.578 83.09 15.284l-.002.086v39.901c-28.097-.71-55.33-5.653-75.615-13.823C31.643 304.529 20 294.537 20 286v-27.614zm127.058 22.701C154.469 263.84 197.244 246 256 246s101.531 17.84 108.934 35.067c.718 1.681 1.066 3.294 1.066 4.933 0 8.792-10.839 18.558-28.995 26.123C315.529 321.072 286.761 326 256 326s-59.529-4.928-81.005-13.877C156.839 304.558 146 294.792 146 286c0-1.639.349-3.252 1.058-4.913zM492 226c0 8.537-11.643 18.529-30.385 26.078-21.91 8.825-51.924 13.893-82.379 13.919-7.87-11.083-22.355-20.54-42.489-27.631-20.067-7.068-44.877-11.313-70.747-12.189v-27.791c6.267 4.51 13.93 8.626 22.913 12.244C313.521 220.541 345.515 226 379 226s65.479-5.459 90.087-15.37c8.983-3.618 16.646-7.734 22.913-12.244V226zm0-60c0 8.537-11.643 18.529-30.385 26.078C439.648 200.926 409.536 206 379 206s-60.648-5.074-82.615-13.922C277.643 184.529 266 174.537 266 166v-27.614c6.267 4.51 13.93 8.626 22.913 12.244C313.521 160.541 345.515 166 379 166s65.479-5.459 90.087-15.37c8.983-3.618 16.646-7.734 22.913-12.244V166zM296.385 79.922C318.352 71.074 348.464 66 379 66s60.648 5.074 82.615 13.922C480.357 87.471 492 97.463 492 106s-11.643 18.529-30.385 26.078C439.648 140.926 409.536 146 379 146s-60.648-5.074-82.615-13.922C277.643 124.529 266 114.537 266 106s11.643-18.529 30.385-26.078zm-246 0C72.352 71.074 102.464 66 133 66s60.648 5.074 82.615 13.922C234.357 87.471 246 97.463 246 106s-11.643 18.529-30.385 26.078C193.648 140.926 163.536 146 133 146s-60.648-5.074-82.615-13.922C31.643 124.529 20 114.537 20 106s11.643-18.529 30.385-26.078zm0 292.156C31.643 364.529 20 354.537 20 346v-27.614c6.267 4.51 13.93 8.626 22.913 12.244C65.8 339.848 95.078 345.208 126 345.914v39.988c-28.097-.711-55.33-5.653-75.615-13.824zm286.62 60.045C315.529 441.072 286.761 446 256 446s-59.529-4.928-81.005-13.877C156.839 424.558 146 414.792 146 406v-27.031a88.108 88.108 0 0 0 7.544 4.874c15.529 8.986 36.658 15.633 61.104 19.221.493.072.981.107 1.465.107 4.88 0 9.151-3.577 9.881-8.549.802-5.464-2.978-10.544-8.441-11.346C171.078 376.453 146 358.979 146 346v-27.12C168.634 335.442 208.587 346 256 346s87.366-10.558 110-27.12V346c0 12.979-25.078 30.453-71.553 37.276-5.464.802-9.244 5.882-8.441 11.346.73 4.973 5.001 8.549 9.881 8.549.483 0 .973-.035 1.465-.107 24.445-3.588 45.574-10.234 61.104-19.221a88.266 88.266 0 0 0 7.544-4.874V406c0 8.792-10.839 18.558-28.995 26.123zm124.61-60.045c-20.285 8.17-47.519 13.113-75.615 13.823v-39.988c30.922-.706 60.2-6.066 83.087-15.284 8.983-3.618 16.646-7.734 22.913-12.244V346c0 8.537-11.643 18.529-30.385 26.078z\" /></symbol>"
});
var result = __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build___default.a.add(symbol);
/* harmony default export */ __webpack_exports__["default"] = (symbol);

/***/ }),
/* 148 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build__);


var symbol = new __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol___default.a({
  "id": "icon-gift",
  "use": "icon-gift-usage",
  "viewBox": "0 0 64 65",
  "content": "<symbol viewBox=\"0 0 64 65\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" id=\"icon-gift\"><path d=\"M57.428 16.177H45.734c.115-.079.231-.144.321-.21 3.239-2.285 4.035-6.831 1.786-10.123a7.119 7.119 0 0 0-5.885-3.123 6.99 6.99 0 0 0-4.087 1.307c-1.22.862-4.112 3.827-5.886 6.976-1.773-3.149-4.665-6.114-5.886-6.976a7.083 7.083 0 0 0-4.086-1.307 7.113 7.113 0 0 0-5.873 3.123 7.326 7.326 0 0 0-1.17 5.434 7.25 7.25 0 0 0 2.956 4.69c.103.065.206.143.322.209H6.55c-.848 0-1.555.718-1.555 1.593v11.927c0 .876.707 1.594 1.568 1.594h1.375v29.837c0 .875.707 1.593 1.568 1.593H54.51c.861 0 1.568-.718 1.568-1.593V31.29h1.35c.86 0 1.567-.718 1.567-1.594v-11.94c0-.862-.707-1.58-1.568-1.58zm-2.93 3.187h1.375v8.753h-22.31v-8.753h20.935zM39.668 6.64a3.913 3.913 0 0 1 2.288-.731c1.323 0 2.557.653 3.315 1.75a4.144 4.144 0 0 1-1.002 5.696c-1.607 1.136-6.092 2.822-8.996 2.822-1.092 0-1.504-.248-1.568-.34-.784-1.163 3.11-7.185 5.963-9.197zm-19.945 6.715a4.003 4.003 0 0 1-1.657-2.639 4.093 4.093 0 0 1 .655-3.057 4.022 4.022 0 0 1 3.303-1.75c.822 0 1.619.248 2.287.731 2.853 2.025 6.747 8.034 5.963 9.197-.064.091-.475.34-1.568.34-2.891 0-7.376-1.685-8.983-2.822zm-11.591 6.01h22.31v8.752H8.131v-8.753zm2.93 11.926h19.366v28.243H11.062V31.291zM52.93 59.534H33.564V31.291H52.93v28.243z\" fill=\"#886A5A\" /></symbol>"
});
var result = __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build___default.a.add(symbol);
/* harmony default export */ __webpack_exports__["default"] = (symbol);

/***/ }),
/* 149 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build__);


var symbol = new __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol___default.a({
  "id": "icon-incomplete-earrings",
  "use": "icon-incomplete-earrings-usage",
  "viewBox": "0 0 512 512",
  "content": "<symbol viewBox=\"0 0 512 512\" xmlns=\"http://www.w3.org/2000/svg\" id=\"icon-incomplete-earrings\"><path d=\"M309.627 299.606c-14.63-20.584-33.168-37.486-46.127-42.83v-7.628c17.096-3.484 30-18.635 30-36.745s-12.904-33.261-30-36.745v-8.742c19.804-3.553 34.885-20.896 34.885-41.707 0-3.411-.407-6.808-1.212-10.096a7.498 7.498 0 0 0-9.066-5.504 7.5 7.5 0 0 0-5.504 9.066c.519 2.124.782 4.321.782 6.533 0 15.1-12.285 27.385-27.385 27.385s-27.385-12.285-27.385-27.385S240.9 97.823 256 97.823c3.701 0 7.287.723 10.657 2.148a7.5 7.5 0 0 0 5.844-13.814 42.089 42.089 0 0 0-9.001-2.661V62.657c0-4.698 2.508-9.108 6.546-11.511a27.468 27.468 0 0 0 13.415-25.116C282.735 12.181 271.318.764 257.47.039c-7.627-.399-14.872 2.268-20.397 7.511A27.62 27.62 0 0 0 228.5 27.5c0 4.143 3.358 7.5 7.5 7.5s7.5-3.357 7.5-7.5c0-3.463 1.384-6.684 3.898-9.069 2.512-2.384 5.815-3.595 9.287-3.413 6.286.33 11.468 5.512 11.798 11.798a12.51 12.51 0 0 1-6.105 11.439c-8.56 5.092-13.877 14.442-13.877 24.402v20.844c-19.804 3.553-34.885 20.896-34.885 41.707s15.081 38.154 34.885 41.707v8.742c-17.096 3.484-30 18.635-30 36.745s12.904 33.261 30 36.745v7.591c-10.249 4.198-22.825 15.286-31.794 25.081a7.5 7.5 0 0 0 11.062 10.131c14.558-15.897 25.644-21.583 28.234-21.942 4.653.593 23.646 12.93 42.128 39.321 15.679 22.389 34.369 59.8 34.369 110.881 0 42.342-34.317 76.79-76.5 76.79-42.182 0-76.5-34.448-76.5-76.79 0-47.129 16.144-82.489 29.686-103.854a7.501 7.501 0 0 0-12.669-8.032C181.911 331.367 164.5 369.483 164.5 420.21c0 50.613 41.047 91.79 91.5 91.79s91.5-41.177 91.5-91.79c0-55.642-20.596-96.297-37.873-120.604zM233.5 212.402c0-12.406 10.093-22.5 22.5-22.5 12.406 0 22.5 10.094 22.5 22.5s-10.094 22.5-22.5 22.5c-12.407 0-22.5-10.093-22.5-22.5z\" /><path d=\"M288.719 441.727a7.498 7.498 0 0 0 9.604-4.499A44.858 44.858 0 0 0 301 421.912c0-24.813-20.187-45-45-45s-45 20.187-45 45 20.187 45 45 45c5.528 0 10.931-.993 16.058-2.952a7.5 7.5 0 0 0 4.329-9.683 7.495 7.495 0 0 0-9.683-4.329A29.884 29.884 0 0 1 256 451.912c-16.542 0-30-13.458-30-30s13.458-30 30-30 30 13.458 30 30c0 3.512-.599 6.947-1.78 10.211a7.499 7.499 0 0 0 4.499 9.604z\" /></symbol>"
});
var result = __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build___default.a.add(symbol);
/* harmony default export */ __webpack_exports__["default"] = (symbol);

/***/ }),
/* 150 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build__);


var symbol = new __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol___default.a({
  "id": "icon-new-jewelry",
  "use": "icon-new-jewelry-usage",
  "viewBox": "0 0 512.019 512.019",
  "content": "<symbol xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512.019 512.019\" id=\"icon-new-jewelry\"><path d=\"M486.329 69.385c.099-.367.173-.741.222-1.118V25.6c0-14.138-11.462-25.6-25.6-25.6H51.35c-14.138 0-25.6 11.461-25.6 25.6v42.667c.048.377.123.751.222 1.118-.001.391.027.782.085 1.169L67.973 221.44l-41.66 108.297a8.526 8.526 0 0 0-.265 1.587 7.821 7.821 0 0 0-.299 1.476v155.785a24.744 24.744 0 0 0 4.907 18.884A16.466 16.466 0 0 0 42.816 512H460.95c14.138 0 25.6-11.461 25.6-25.6V332.8a7.913 7.913 0 0 0-.299-1.485 8.362 8.362 0 0 0-.265-1.579l-41.66-108.297 41.916-150.886c.059-.386.088-.777.087-1.168zM82.813 230.4h30.285l-25.6 93.867h-40.79L82.813 230.4zm105.071-49.075a18.027 18.027 0 0 0-3.507 2.33c-14.626 12.706-39.159 37.743-39.159 62.583a49.066 49.066 0 0 0 51.2 52.428 49.067 49.067 0 0 0 51.2-52.428c0-24.841-24.533-49.877-39.151-62.575a17.86 17.86 0 0 0-3.516-2.338V153.6h102.4v27.725a18.027 18.027 0 0 0-3.507 2.33c-14.626 12.706-39.159 37.743-39.159 62.583a49.066 49.066 0 0 0 51.2 52.428 49.067 49.067 0 0 0 51.2-52.428c0-24.841-24.533-49.877-39.151-62.575a17.86 17.86 0 0 0-3.516-2.338V153.6h29.636a8.534 8.534 0 0 1 8.235 6.289l44.826 164.378H105.187l44.834-164.378a8.533 8.533 0 0 1 8.226-6.289h29.636v27.725zm7.68 15.206a1.451 1.451 0 0 1 1.707 0c20.847 18.108 33.28 36.693 33.28 49.698 0 22.153-12.757 35.371-34.133 35.371s-34.133-13.218-34.133-35.362c-.001-13.005 12.44-31.591 33.279-49.707zm119.466 0a1.451 1.451 0 0 1 1.707 0c20.847 18.108 33.28 36.693 33.28 49.698 0 22.153-12.757 35.371-34.133 35.371s-34.133-13.218-34.133-35.362c-.001-13.005 12.441-31.591 33.279-49.707zM469.484 486.4a8.533 8.533 0 0 1-8.533 8.533H42.971a55.985 55.985 0 0 1-.154-6.212V341.333h426.667V486.4zm-3.891-162.133h-40.789l-25.6-93.867h30.285l36.104 93.867zm-36.728-110.934h-34.313l-15.804-57.941a25.652 25.652 0 0 0-24.695-18.859h-29.636c0-4.713-3.82-8.533-8.533-8.533s-8.533 3.82-8.533 8.533h-102.4c0-4.713-3.82-8.533-8.533-8.533s-8.533 3.82-8.533 8.533h-29.636a25.65 25.65 0 0 0-24.695 18.859l-15.804 57.941H83.436L45.514 76.8h421.274l-37.923 136.533zm40.619-153.6H42.817V25.6a8.533 8.533 0 0 1 8.533-8.533h409.6a8.533 8.533 0 0 1 8.533 8.533v34.133z\" /><path d=\"M179.615 251.657a8.533 8.533 0 0 0 8.422 7.04 8.029 8.029 0 0 0 1.493-.128 8.533 8.533 0 0 0 6.886-9.89c-.418-2.372 3.354-7.125 5.606-9.967l1.084-1.374a8.531 8.531 0 0 0-5.471-13.903 8.535 8.535 0 0 0-7.978 3.408l-.998 1.254a30.439 30.439 0 0 0-9.044 23.56zM299.082 251.657a8.533 8.533 0 0 0 8.422 7.04 8.029 8.029 0 0 0 1.493-.128 8.533 8.533 0 0 0 6.886-9.89c-.418-2.372 3.354-7.125 5.606-9.967l1.084-1.374a8.533 8.533 0 0 0-13.448-10.496l-.998 1.254a30.44 30.44 0 0 0-9.045 23.561z\" /></symbol>"
});
var result = __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build___default.a.add(symbol);
/* harmony default export */ __webpack_exports__["default"] = (symbol);

/***/ }),
/* 151 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build__);


var symbol = new __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol___default.a({
  "id": "icon-old-chain",
  "use": "icon-old-chain-usage",
  "viewBox": "0 0 512 512",
  "content": "<symbol xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" id=\"icon-old-chain\"><g xmlns=\"http://www.w3.org/2000/svg\" fill=\"#fde575\"><rect height=\"32\" rx=\"16\" transform=\"rotate(180 256 472)\" width=\"64\" x=\"224\" y=\"456\" fill=\"#ffffff00\" data-original=\"#fde575\" /><rect height=\"32\" rx=\"16\" transform=\"rotate(-152.38 155.653 447.289)\" width=\"64\" x=\"123.731\" y=\"431.317\" fill=\"#ffffff00\" data-original=\"#fde575\" /><rect height=\"32\" rx=\"16\" transform=\"scale(-1) rotate(55.3 723.3 -149.556)\" width=\"64\" x=\"46.379\" y=\"362.909\" fill=\"#ffffff00\" data-original=\"#fde575\" /><rect height=\"32\" rx=\"16\" transform=\"scale(-1) rotate(82.99 319.464 -47.116)\" width=\"64\" x=\"9.621\" y=\"266.411\" fill=\"#ffffff00\" data-original=\"#fde575\" /><rect height=\"32\" rx=\"16\" transform=\"rotate(-69.39 53.8 179.83)\" width=\"64\" x=\"21.858\" y=\"163.877\" fill=\"#ffffff00\" data-original=\"#fde575\" /><rect height=\"32\" rx=\"16\" transform=\"rotate(-41.67 112.403 94.752)\" width=\"64\" x=\"80.295\" y=\"78.74\" fill=\"#ffffff00\" data-original=\"#fde575\" /><rect height=\"32\" rx=\"16\" transform=\"rotate(-27.63 356.67 447.406)\" width=\"64\" x=\"324.269\" y=\"431.317\" fill=\"#ffffff00\" data-original=\"#fde575\" /><rect height=\"32\" rx=\"16\" transform=\"rotate(-55.3 433.84 379.038)\" width=\"64\" x=\"401.621\" y=\"362.909\" fill=\"#ffffff00\" data-original=\"#fde575\" /><rect height=\"32\" rx=\"16\" transform=\"rotate(-82.99 470.54 282.576)\" width=\"64\" x=\"438.379\" y=\"266.411\" fill=\"#ffffff00\" data-original=\"#fde575\" /><rect height=\"32\" rx=\"16\" transform=\"rotate(-110.61 458.254 179.801)\" width=\"64\" x=\"426.142\" y=\"163.877\" fill=\"#ffffff00\" data-original=\"#fde575\" /><rect height=\"32\" rx=\"16\" transform=\"rotate(-138.33 399.621 94.818)\" width=\"64\" x=\"367.705\" y=\"78.74\" fill=\"#ffffff00\" data-original=\"#fde575\" /></g><path xmlns=\"http://www.w3.org/2000/svg\" d=\"M477.978 243.207l-4.412-26.472a23.949 23.949 0 0 0 12.675-30.343l-11.278-29.947a24.027 24.027 0 0 0-29.393-14.513L430.815 119.8a24.019 24.019 0 0 0-3.2-32.334l-23.89-21.29a23.994 23.994 0 0 0-31.846-.074L338.95 51.989l12.2-24.411a8 8 0 1 0-14.31-7.156l-32 64a8 8 0 1 0 14.31 7.156l12.627-25.254 32.3 13.843a24.234 24.234 0 0 0-.282 5.308 23.84 23.84 0 0 0 7.993 16.538l23.891 21.29a23.9 23.9 0 0 0 15.954 6.071 24.207 24.207 0 0 0 5.848-.723l15.18 22.77a23.983 23.983 0 0 0-2.624 21.94l11.278 29.947A23.97 23.97 0 0 0 457.557 218l4.478 26.867a24 24 0 0 0-13.519 18.733l-3.916 31.756A23.981 23.981 0 0 0 452.25 316l-7.383 25.842a24.157 24.157 0 0 0-6.44.295 23.845 23.845 0 0 0-15.437 9.963l-18.209 26.31a24 24 0 0 0-2.605 22.4l-21.645 17.32a23.971 23.971 0 0 0-21.232.5l-28.342 14.855a23.843 23.843 0 0 0-11.769 14.1 24.186 24.186 0 0 0-1.011 5.181l-25.391 7.254A24.008 24.008 0 0 0 272 448h-32a24.008 24.008 0 0 0-20.786 12.026l-25.391-7.254a24.186 24.186 0 0 0-1.011-5.181 23.843 23.843 0 0 0-11.769-14.1L152.7 418.632a23.974 23.974 0 0 0-21.232-.5l-21.645-17.316a24 24 0 0 0-2.605-22.4L89.01 352.1a23.845 23.845 0 0 0-15.437-9.956 24.118 24.118 0 0 0-6.44-.3L59.75 316a23.981 23.981 0 0 0 7.65-20.644L63.484 263.6a23.994 23.994 0 0 0-13.519-18.727l4.473-26.834a24.3 24.3 0 0 0 3.683-1.322 23.847 23.847 0 0 0 12.559-13.4l11.278-29.947a23.983 23.983 0 0 0-2.624-21.94l15.18-22.77a24.207 24.207 0 0 0 5.848.723 23.905 23.905 0 0 0 15.954-6.071l23.891-21.29a23.84 23.84 0 0 0 7.993-16.547 24.234 24.234 0 0 0-.282-5.308l10.775-4.617a31.818 31.818 0 1 0-6.325-14.7l-12.25 5.25a23.994 23.994 0 0 0-31.846.074l-23.89 21.29a24.019 24.019 0 0 0-3.2 32.334L66.43 141.933a24.027 24.027 0 0 0-29.393 14.512l-11.278 29.947a23.949 23.949 0 0 0 12.675 30.343l-4.412 26.472a23.992 23.992 0 0 0-18.177 26.258l3.912 31.761a24.035 24.035 0 0 0 23.8 21.066c.442 0 .888-.016 1.334-.041l7.548 26.416a23.96 23.96 0 0 0-2.9 30.742l18.209 26.314a23.841 23.841 0 0 0 15.437 9.956 24.366 24.366 0 0 0 4.349.394 23.758 23.758 0 0 0 11.812-3.151l20.625 16.5a24.024 24.024 0 0 0 10.447 31.725L158.762 476a23.977 23.977 0 0 0 30.97-7.758l26.579 7.594A24.036 24.036 0 0 0 240 496h32a24.036 24.036 0 0 0 23.689-20.162l26.579-7.594a23.993 23.993 0 0 0 30.97 7.756l28.344-14.855a24.024 24.024 0 0 0 10.447-31.725l20.625-16.5a23.758 23.758 0 0 0 11.812 3.151 24.366 24.366 0 0 0 4.349-.394 23.841 23.841 0 0 0 15.437-9.956l18.209-26.314a23.96 23.96 0 0 0-2.9-30.742l7.548-26.416c.446.025.891.041 1.334.041a24.036 24.036 0 0 0 23.8-21.066l3.912-31.76a23.992 23.992 0 0 0-18.177-26.259zM184 40a16 16 0 1 1-16 16 16.019 16.019 0 0 1 16-16zm198.438 50.068a7.932 7.932 0 0 1-2.061-2.917l.472.2a8 8 0 0 0 10.557-10.372 8.032 8.032 0 0 1 1.677 1.142l23.89 21.29a7.971 7.971 0 0 1 2.655 5.461 7.991 7.991 0 0 0-11.606 7.634 8.029 8.029 0 0 1-1.694-1.151zm62.578 77.655c-.045-.119-.076-.24-.115-.36a7.985 7.985 0 0 0 10.706-9.821 7.968 7.968 0 0 1 4.383 4.542l11.277 29.947a7.986 7.986 0 0 1-2.834 9.321 7.951 7.951 0 0 0-9.085.149 7.929 7.929 0 0 1-3.054-3.832zM95.027 99.413l23.89-21.29a8 8 0 0 1 1.68-1.148 8 8 0 0 0 10.554 10.378l.472-.2a7.932 7.932 0 0 1-2.061 2.917l-23.89 21.289a8.071 8.071 0 0 1-1.694 1.152 7.991 7.991 0 0 0-11.606-7.635 7.967 7.967 0 0 1 2.655-5.463zm-54.294 92.618l11.277-29.947a7.96 7.96 0 0 1 4.378-4.527 7.976 7.976 0 0 0 10.712 9.806c-.039.12-.07.241-.115.36l-11.279 29.946a7.929 7.929 0 0 1-3.054 3.832 7.951 7.951 0 0 0-9.082-.151 8.008 8.008 0 0 1-2.837-9.319zm-5.1 107.239l-3.912-31.761a7.943 7.943 0 0 1 1.633-5.9c.147-.188.3-.365.464-.537a7.962 7.962 0 0 0 4.863 2.82 7.969 7.969 0 0 0 7.156-2.433 7.938 7.938 0 0 1 1.763 4.095l3.849 31.241a7.986 7.986 0 0 0-11.3 8.714 7.99 7.99 0 0 1-4.512-6.239zM86.05 399.937a7.944 7.944 0 0 1-5.145-3.318L62.7 370.3a7.974 7.974 0 0 1-1.2-2.709 7.99 7.99 0 0 0 10.284-9.433 7.93 7.93 0 0 1 4.077 3.038L94.07 387.51a7.947 7.947 0 0 1 1.419 4.512A7.978 7.978 0 0 0 88 400.044a7.981 7.981 0 0 1-1.95-.107zm80.139 61.893l-28.343-14.854a7.97 7.97 0 0 1-4.276-7.357 7.982 7.982 0 0 0 10.416-7.339 7.97 7.97 0 0 1 1.287.524l28.344 14.855a8.013 8.013 0 0 1 .82.5 7.991 7.991 0 0 0-2.967 14.428 7.938 7.938 0 0 1-5.281-.757zM240 480a7.939 7.939 0 0 1-4.01-1.089 7.969 7.969 0 0 0 .01-13.829 7.939 7.939 0 0 1 4-1.082h32a7.939 7.939 0 0 1 4 1.082 7.969 7.969 0 0 0 .011 13.829A7.936 7.936 0 0 1 272 480zm138.077-37.726a7.955 7.955 0 0 1-3.923 4.7l-28.343 14.856a7.944 7.944 0 0 1-5.281.758 7.991 7.991 0 0 0-2.967-14.428 7.921 7.921 0 0 1 .821-.5l28.343-14.86a7.97 7.97 0 0 1 1.287-.524 7.981 7.981 0 0 0 10.416 7.338 8 8 0 0 1-.353 2.66zm53.023-45.655a7.958 7.958 0 0 1-7.1 3.425 7.978 7.978 0 0 0-7.478-8.018 7.949 7.949 0 0 1 1.419-4.512l18.206-26.314a7.93 7.93 0 0 1 4.077-3.038 7.985 7.985 0 0 0 10.284 9.433 7.974 7.974 0 0 1-1.2 2.709zm49.18-129.11l-3.912 31.76a8 8 0 0 1-4.509 6.233 7.986 7.986 0 0 0-11.307-8.708l3.849-31.241a7.934 7.934 0 0 1 1.765-4.093 8 8 0 0 0 5.824 2.54 8.076 8.076 0 0 0 1.325-.11 7.962 7.962 0 0 0 4.863-2.82c.161.172.317.349.464.537a7.943 7.943 0 0 1 1.633 5.902z\" data-original=\"#000000\" /></symbol>"
});
var result = __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build___default.a.add(symbol);
/* harmony default export */ __webpack_exports__["default"] = (symbol);

/***/ }),
/* 152 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build__);


var symbol = new __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol___default.a({
  "id": "icon-old-jewelry",
  "use": "icon-old-jewelry-usage",
  "viewBox": "0 0 512 512",
  "content": "<symbol viewBox=\"0 0 512 512\" xmlns=\"http://www.w3.org/2000/svg\" id=\"icon-old-jewelry\"><path d=\"M492.68 275.413C504.522 266.991 512 253.2 512 238.067c0-15.384-7.644-29.013-19.335-37.337 8.658-11.671 11.498-27.102 6.807-41.498-4.77-14.629-16.271-25.234-29.977-29.545 4.616-13.767 2.532-29.321-6.398-41.571-9.073-12.437-23.301-18.974-37.673-18.848.129-14.521-6.672-28.677-18.962-37.576-19.082-13.807-45.335-10.826-60.902 6.099a219.124 219.124 0 0 0-47.675-14.962c-5.426-1.04-10.665 2.512-11.705 7.936-1.042 5.424 2.512 10.665 7.936 11.706 14.213 2.728 28.081 7.028 41.366 12.763a45.536 45.536 0 0 0-1.487 20.725c1.919 12.117 8.46 22.759 18.421 29.966a45.975 45.975 0 0 0 26.984 8.758c.163 0 .327-.009.49-.011-.111 9.797 2.92 19.331 8.802 27.393a45.844 45.844 0 0 0 23.402 16.784c-3.137 9.276-3.211 19.27-.121 28.745a45.702 45.702 0 0 0 17.078 23.188c-5.683 7.63-9.051 17.072-9.051 27.284a45.598 45.598 0 0 0 9.051 27.309c-7.776 5.505-13.91 13.447-17.077 23.16a45.586 45.586 0 0 0 .138 28.767c-9.1 2.84-17.396 8.503-23.42 16.766a45.64 45.64 0 0 0-8.785 27.415c-9.543-.11-19.197 2.72-27.491 8.726a45.71 45.71 0 0 0-16.862 23.377 45.877 45.877 0 0 0-28.859-.175 45.81 45.81 0 0 0-23.289 17.055c-7.66-5.684-17.145-9.052-27.405-9.052s-19.745 3.369-27.405 9.052a45.812 45.812 0 0 0-23.288-17.055 45.88 45.88 0 0 0-28.86.175 45.695 45.695 0 0 0-16.858-23.375c-8.296-6.008-17.952-8.838-27.496-8.728a45.63 45.63 0 0 0-8.785-27.416c-6.024-8.263-14.319-13.926-23.419-16.766a45.58 45.58 0 0 0 .138-28.765c-3.167-9.714-9.302-17.656-17.079-23.16A45.598 45.598 0 0 0 92 238.066c0-10.213-3.368-19.654-9.051-27.285a45.691 45.691 0 0 0 17.078-23.186c3.09-9.477 3.017-19.471-.121-28.747a45.84 45.84 0 0 0 23.4-16.781c5.885-8.066 8.916-17.6 8.805-27.397.163.002.326.011.489.011a45.986 45.986 0 0 0 26.986-8.758c9.96-7.206 16.501-17.849 18.42-29.966 1.116-7.05.578-14.104-1.487-20.725 13.286-5.735 27.153-10.035 41.366-12.763 5.424-1.041 8.977-6.282 7.936-11.706-1.042-5.424-6.285-8.976-11.706-7.936a219.141 219.141 0 0 0-47.675 14.962c-15.57-16.926-41.822-19.905-60.904-6.097-12.288 8.898-19.089 23.052-18.96 37.573-14.373-.123-28.602 6.415-37.677 18.855-8.927 12.247-11.01 27.801-6.394 41.567-13.705 4.311-25.205 14.917-29.976 29.546-4.692 14.395-1.851 29.825 6.807 41.497C7.644 209.055 0 222.683 0 238.067c0 15.133 7.478 28.923 19.321 37.346a46.39 46.39 0 0 0-4.058 6.539c-5.556 10.905-6.527 23.318-2.734 34.949 4.687 14.381 16.08 25.197 29.959 29.567a46.287 46.287 0 0 0-1.82 7.409c-1.918 12.102 1.005 24.225 8.234 34.141 8.841 12.119 22.85 18.884 37.262 18.884.135 0 .271-.008.406-.009a46.302 46.302 0 0 0 .56 7.588c1.918 12.113 8.455 22.753 18.41 29.962 8.063 5.832 17.554 8.729 27.03 8.729 4.959 0 9.911-.801 14.653-2.384a46.338 46.338 0 0 0 2.875 7.033c5.577 10.943 15.096 19.057 26.805 22.847a45.95 45.95 0 0 0 14.153 2.234 46.31 46.31 0 0 0 27.475-9.067c8.347 11.674 22.027 19.309 37.469 19.309 15.443 0 29.123-7.635 37.47-19.31a46.31 46.31 0 0 0 27.475 9.067c4.719 0 9.491-.726 14.154-2.234 11.709-3.79 21.228-11.903 26.805-22.847a46.3 46.3 0 0 0 2.874-7.03 46.309 46.309 0 0 0 14.652 2.383c9.476 0 18.972-2.9 27.035-8.733 9.951-7.206 16.487-17.846 18.405-29.959a46.28 46.28 0 0 0 .559-7.587c.135.001.271.009.406.009 14.411 0 28.423-6.767 37.264-18.887 7.227-9.913 10.151-22.036 8.233-34.137a46.313 46.313 0 0 0-1.821-7.411c13.88-4.371 25.273-15.186 29.959-29.565 3.794-11.632 2.823-24.044-2.732-34.95a46.402 46.402 0 0 0-4.058-6.54zm-12.224-109.981c3.213 9.857.145 20.571-7.456 27.301a46.304 46.304 0 0 0-7-.53 45.813 45.813 0 0 0-20.669 4.91c-6.784-2.929-12.021-8.589-14.344-15.716-2.135-6.545-1.588-13.531 1.539-19.669 3.148-6.179 8.527-10.762 15.145-12.905 13.65-4.421 28.358 3.032 32.785 16.609zm-116.317-75.71c-5.62-4.066-9.31-10.065-10.391-16.891-1.078-6.807.569-13.627 4.64-19.208 8.432-11.562 24.735-14.129 36.348-5.729 8.415 6.093 12.261 16.546 10.093 26.427a46.268 46.268 0 0 0-5.966 3.664c-5.912 4.281-10.606 9.781-13.855 16.074a26.02 26.02 0 0 1-20.869-4.337zm40.712 40.559c-4.068-5.577-5.717-12.397-4.64-19.206 1.079-6.826 4.767-12.825 10.379-16.89 11.613-8.403 27.921-5.836 36.349 5.715 6.113 8.386 6.526 19.514 1.394 28.242-2.28.371-4.559.918-6.822 1.651-6.956 2.253-13.13 6.042-18.173 11.034a25.878 25.878 0 0 1-18.487-10.546zM440 238.067c0-9.018 4.666-16.968 11.72-21.599l.002-.001A25.939 25.939 0 0 1 466 212.203c2.207 0 4.351.277 6.399.795.08.025.162.041.243.064C483.771 215.989 492 226.089 492 238.067c0 10.381-6.256 19.634-15.592 23.68a46.75 46.75 0 0 0-6.477-2.649 45.842 45.842 0 0 0-21.172-1.696A25.668 25.668 0 0 1 440 238.067zM42.067 259.099a46.843 46.843 0 0 0-6.475 2.648C26.255 257.701 20 248.448 20 238.067c0-11.971 8.219-22.065 19.338-25 .091-.026.185-.044.275-.072a26.067 26.067 0 0 1 6.387-.792 25.938 25.938 0 0 1 14.263 4.255l.03.02C67.34 221.109 72 229.055 72 238.067a25.675 25.675 0 0 1-8.76 19.337 45.857 45.857 0 0 0-21.173 1.695zm75.195-211.203c11.613-8.406 27.92-5.834 36.351 5.73 4.069 5.577 5.717 12.398 4.639 19.205-1.081 6.826-4.771 12.824-10.39 16.89a26.021 26.021 0 0 1-20.87 4.337c-3.249-6.294-7.945-11.794-13.858-16.077a46.229 46.229 0 0 0-5.963-3.663c-2.168-9.878 1.678-20.331 10.091-26.422zM65.059 99.904c8.431-11.556 24.738-14.123 36.348-5.721 5.616 4.066 9.303 10.065 10.383 16.891 1.077 6.809-.571 13.629-4.643 19.21a25.918 25.918 0 0 1-18.486 10.542c-5.043-4.991-11.217-8.781-18.174-11.034a46.189 46.189 0 0 0-6.82-1.651c-5.131-8.726-4.718-19.854 1.392-28.237zm-33.515 65.529c4.428-13.578 19.133-21.031 32.784-16.612 6.62 2.144 11.999 6.727 15.146 12.905 3.128 6.139 3.674 13.124 1.539 19.672-2.322 7.126-7.56 12.785-14.343 15.714a45.813 45.813 0 0 0-20.669-4.91c-2.379 0-4.717.181-7 .53-7.603-6.729-10.67-17.444-7.457-27.299zm0 145.269c-2.135-6.546-1.588-13.531 1.539-19.67 3.147-6.178 8.526-10.761 15.144-12.904 13.649-4.418 28.358 3.034 32.786 16.612a25.66 25.66 0 0 1-2.306 21.048 45.736 45.736 0 0 0-19.621 8.134 46.505 46.505 0 0 0-5.361 4.534c-10.146-.998-18.965-7.884-22.181-17.754zm33.517 65.532c-4.072-5.586-5.72-12.413-4.64-19.224 1.082-6.825 4.772-12.822 10.393-16.889 11.605-8.403 27.904-5.833 36.334 5.729a25.685 25.685 0 0 1 4.339 20.73 45.661 45.661 0 0 0-16.123 13.766 46.556 46.556 0 0 0-3.683 5.947c-9.957 2.179-20.49-1.656-26.62-10.059zm52.204 52.008c-5.614-4.066-9.301-10.063-10.382-16.888-1.079-6.813.569-13.64 4.639-19.222 8.433-11.557 24.733-14.124 36.341-5.718a25.732 25.732 0 0 1 10.565 18.372 45.542 45.542 0 0 0-11.067 18.066 46.396 46.396 0 0 0-1.658 6.782c-8.789 5.128-19.996 4.714-28.438-1.392zm65.794 33.397c-6.618-2.142-11.995-6.723-15.143-12.898-3.131-6.144-3.678-13.136-1.542-19.687 4.43-13.576 19.135-21.027 32.775-16.613 7.147 2.312 12.824 7.512 15.767 14.245a45.454 45.454 0 0 0-4.917 20.594c0 2.361.18 4.68.527 6.946-6.769 7.572-17.547 10.623-27.467 7.413zM256 473.144c-12.013 0-22.144-8.148-25.115-19.179-.031-.111-.055-.223-.09-.333a25.71 25.71 0 0 1-.796-6.353c0-14.262 11.664-25.865 26-25.865 14.337 0 26 11.603 26 25.865 0 2.193-.278 4.323-.797 6.358-.031.1-.053.202-.081.303-2.961 11.044-13.099 19.204-25.121 19.204zm88.084-24.404c-3.148 6.177-8.525 10.758-15.143 12.9-9.926 3.209-20.7.158-27.469-7.415.347-2.265.527-4.585.527-6.945a45.442 45.442 0 0 0-4.918-20.594c2.944-6.732 8.622-11.933 15.769-14.245 13.646-4.412 28.345 3.038 32.773 16.612 2.139 6.551 1.591 13.544-1.539 19.687zm61.032-37.387c-1.08 6.825-4.768 12.823-10.378 16.886-8.446 6.111-19.652 6.523-28.441 1.395a46.421 46.421 0 0 0-1.658-6.784 45.54 45.54 0 0 0-11.066-18.065 25.738 25.738 0 0 1 10.569-18.374c11.603-8.401 27.902-5.837 36.334 5.718 4.071 5.584 5.719 12.411 4.64 19.224zm41.824-35.122c-6.131 8.407-16.664 12.243-26.622 10.062a46.561 46.561 0 0 0-3.685-5.95 45.646 45.646 0 0 0-16.12-13.764 25.686 25.686 0 0 1 4.339-20.728c8.431-11.564 24.729-14.133 36.337-5.728 5.618 4.065 9.308 10.063 10.39 16.887 1.08 6.812-.568 13.638-4.639 19.221zm33.516-65.528c-3.216 9.868-12.039 16.758-22.178 17.752a46.505 46.505 0 0 0-5.361-4.534 45.74 45.74 0 0 0-19.622-8.134 25.656 25.656 0 0 1-2.307-21.05c4.428-13.577 19.133-21.029 32.783-16.611 6.62 2.143 11.999 6.727 15.146 12.905 3.128 6.139 3.675 13.125 1.539 19.672z\" /><circle cx=\"256\" cy=\"28.856\" r=\"10\" /></symbol>"
});
var result = __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build___default.a.add(symbol);
/* harmony default export */ __webpack_exports__["default"] = (symbol);

/***/ }),
/* 153 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build__);


var symbol = new __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol___default.a({
  "id": "icon-onlinebees",
  "use": "icon-onlinebees-usage",
  "viewBox": "0 0 126 24",
  "content": "<symbol viewBox=\"0 0 126 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" id=\"icon-onlinebees\"><g clip-path=\"url(#icon-onlinebees_a)\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M23.923 5.309a2.837 2.837 0 0 0-4.008 0l-.289.289a3.744 3.744 0 0 0-.163-.176l-.885-.885a3.777 3.777 0 0 0-.175-.163l.289-.29a2.837 2.837 0 0 0 0-4.007L18.614 0l-.994.994.076.077a1.43 1.43 0 0 1 0 2.02l-.56.56a3.655 3.655 0 0 0-3.718.886A3.63 3.63 0 0 0 12.38 6.67l-1.516-1.516a5.48 5.48 0 0 0-3.9-1.616 5.48 5.48 0 0 0-3.902 1.616L1.574 6.642l4.34 4.34-2.327 2.325a7.23 7.23 0 0 0-2.018 3.878 7.225 7.225 0 0 0 .377 3.875L0 23.006.994 24l1.947-1.947a7.212 7.212 0 0 0 3.874.377 7.23 7.23 0 0 0 3.878-2.017l2.326-2.327 4.339 4.34 1.488-1.488a5.48 5.48 0 0 0 1.616-3.901c0-1.474-.574-2.86-1.616-3.902l-1.514-1.514a3.62 3.62 0 0 0 2.13-1.04 3.655 3.655 0 0 0 .887-3.719l.56-.56a1.43 1.43 0 0 1 2.02 0l.077.077.994-.994-.077-.076zm-19.867.84a4.084 4.084 0 0 1 2.907-1.205c1.098 0 2.13.428 2.907 1.205l3.494 3.493-1.275 1.274a2.988 2.988 0 0 1-2.126.881 2.988 2.988 0 0 1-2.126-.88L3.563 6.641l.493-.493zm5.907 7.054c.319 0 .632-.034.936-.1a4.412 4.412 0 0 0 1.127 3.988l-.684.683-5.117-5.117.683-.682a4.383 4.383 0 0 0 3.055 1.228zm-6.651 7.485a5.866 5.866 0 0 1-.268-3.662l3.93 3.93a5.868 5.868 0 0 1-3.662-.268zm5.089-.293l-4.796-4.796c.26-.469.586-.907.977-1.298l.65-.65 5.116 5.118-.65.65c-.39.39-.828.716-1.297.976zm10.655-3.358c0 1.098-.428 2.13-1.204 2.907l-.494.493-4.274-4.274a3.01 3.01 0 0 1 0-4.253l1.274-1.274 3.494 3.494a4.084 4.084 0 0 1 1.204 2.907zm-4.644-8.335a2.245 2.245 0 0 1 .001-3.17 2.228 2.228 0 0 1 1.586-.657c.599 0 1.162.233 1.585.656l.884.885a2.245 2.245 0 0 1 0 3.171 2.227 2.227 0 0 1-1.585.657 2.228 2.228 0 0 1-1.585-.656l-.886-.886z\" fill=\"#AC9182\" /></g><path d=\"M30.928 12.448c0-.95.139-1.787.416-2.512.288-.725.672-1.328 1.152-1.808a4.81 4.81 0 0 1 1.696-1.104 5.802 5.802 0 0 1 2.064-.368 5.5 5.5 0 0 1 2.016.368c.64.245 1.2.613 1.68 1.104.48.48.859 1.083 1.136 1.808.288.725.432 1.563.432 2.512 0 .95-.144 1.787-.432 2.512-.277.725-.656 1.333-1.136 1.824-.48.48-1.04.843-1.68 1.088a5.502 5.502 0 0 1-2.016.368 5.802 5.802 0 0 1-2.064-.368 4.918 4.918 0 0 1-1.696-1.088c-.48-.49-.864-1.099-1.152-1.824-.277-.725-.416-1.563-.416-2.512zm1.632 0c0 .672.085 1.285.256 1.84.17.544.41 1.008.72 1.392.32.384.704.683 1.152.896.459.203.97.304 1.536.304.565 0 1.072-.101 1.52-.304a3.214 3.214 0 0 0 1.136-.896c.32-.384.565-.848.736-1.392.17-.555.256-1.168.256-1.84 0-.672-.085-1.28-.256-1.824a4.014 4.014 0 0 0-.736-1.408 3.058 3.058 0 0 0-1.136-.88 3.493 3.493 0 0 0-1.52-.32c-.565 0-1.077.107-1.536.32a3.2 3.2 0 0 0-1.152.88c-.31.384-.55.853-.72 1.408a6.077 6.077 0 0 0-.256 1.824zM51.59 18a59.91 59.91 0 0 0-.817-1.328c-.299-.49-.624-.997-.976-1.52a62.624 62.624 0 0 0-1.104-1.616 49.7 49.7 0 0 0-1.12-1.568 50.267 50.267 0 0 0-1.088-1.44 29.28 29.28 0 0 0-.976-1.184V18h-1.52V6.912h1.232a29.119 29.119 0 0 1 1.6 1.872 51.688 51.688 0 0 1 1.696 2.192 50.952 50.952 0 0 1 1.584 2.208c.502.725.923 1.37 1.264 1.936V6.912h1.52V18H51.59zm10.872-1.344V18H55.79V6.912h1.552v9.744h5.12zm1.785-9.744h1.552V18h-1.552V6.912zM76.303 18a60.677 60.677 0 0 0-.816-1.328c-.298-.49-.623-.997-.975-1.52a62.624 62.624 0 0 0-1.105-1.616 49.864 49.864 0 0 0-1.12-1.568 50.267 50.267 0 0 0-1.088-1.44 29.28 29.28 0 0 0-.975-1.184V18h-1.52V6.912h1.232a29.15 29.15 0 0 1 1.6 1.872 51.77 51.77 0 0 1 1.695 2.192 51.124 51.124 0 0 1 1.585 2.208c.5.725.922 1.37 1.263 1.936V6.912h1.52V18h-1.296zm4.201 0V6.912h6.768V8.24h-5.216v3.296h4.64v1.296h-4.64v3.84h5.616V18h-7.168zm12.293.096a18.458 18.458 0 0 1-2.288-.144 5.968 5.968 0 0 1-.704-.128V7.072c.213-.053.448-.096.704-.128A18.729 18.729 0 0 1 92.78 6.8c.64 0 1.237.048 1.792.144.565.096 1.05.261 1.456.496.416.224.741.523.976.896.234.373.352.832.352 1.376 0 .608-.144 1.11-.432 1.504a2.62 2.62 0 0 1-1.152.864c.65.192 1.168.496 1.552.912.384.416.576 1.003.576 1.76 0 1.11-.41 1.947-1.232 2.512-.81.555-2.102.832-3.872.832zm-1.456-5.264v3.904c.117.01.256.021.416.032.138.01.298.021.48.032h.656c.458 0 .89-.027 1.296-.08a3.84 3.84 0 0 0 1.088-.32c.31-.15.554-.357.736-.624.192-.267.288-.603.288-1.008 0-.363-.07-.667-.208-.912a1.515 1.515 0 0 0-.608-.608 2.796 2.796 0 0 0-.928-.32 7.029 7.029 0 0 0-1.216-.096h-2zm0-1.248h1.632c.384 0 .746-.027 1.088-.08.341-.053.634-.15.88-.288a1.54 1.54 0 0 0 .592-.544c.15-.224.224-.507.224-.848 0-.32-.075-.587-.224-.8a1.52 1.52 0 0 0-.624-.528 3.055 3.055 0 0 0-.912-.304 6.257 6.257 0 0 0-1.12-.096c-.395 0-.704.005-.928.016-.224.01-.427.027-.608.048v3.424zM100.246 18V6.912h6.768V8.24h-5.216v3.296h4.64v1.296h-4.64v3.84h5.616V18h-7.168zm9.301 0V6.912h6.768V8.24h-5.216v3.296h4.64v1.296h-4.64v3.84h5.616V18h-7.168zm11.876-1.104c1.622 0 2.432-.555 2.432-1.664 0-.341-.074-.63-.224-.864a1.874 1.874 0 0 0-.576-.624 3.775 3.775 0 0 0-.848-.464c-.309-.128-.64-.256-.992-.384a11.336 11.336 0 0 1-1.152-.464 4.417 4.417 0 0 1-.944-.624 2.859 2.859 0 0 1-.64-.864c-.149-.33-.224-.73-.224-1.2 0-.97.331-1.728.992-2.272.662-.544 1.574-.816 2.736-.816.672 0 1.28.075 1.824.224.555.139.96.293 1.216.464l-.496 1.264c-.224-.139-.56-.272-1.008-.4-.437-.139-.949-.208-1.536-.208-.298 0-.576.032-.832.096s-.48.16-.672.288a1.483 1.483 0 0 0-.464.496c-.106.192-.16.421-.16.688 0 .299.059.55.176.752.118.203.283.384.496.544.214.15.459.288.736.416.288.128.603.256.944.384.48.192.918.384 1.312.576.406.192.752.421 1.04.688.299.267.528.587.688.96.16.363.24.805.24 1.328 0 .97-.357 1.717-1.072 2.24-.704.523-1.701.784-2.992.784-.437 0-.842-.032-1.216-.096a9.33 9.33 0 0 1-.976-.192 8.786 8.786 0 0 1-.752-.256 10.567 10.567 0 0 1-.48-.24l.464-1.28c.246.139.619.293 1.12.464.502.17 1.115.256 1.84.256z\" fill=\"#AC9182\" /><defs><clipPath id=\"icon-onlinebees_a\"><path fill=\"#fff\" d=\"M0 0h24v24H0z\" /></clipPath></defs></symbol>"
});
var result = __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build___default.a.add(symbol);
/* harmony default export */ __webpack_exports__["default"] = (symbol);

/***/ }),
/* 154 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build__);


var symbol = new __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol___default.a({
  "id": "icon-precious",
  "use": "icon-precious-usage",
  "viewBox": "0 0 56 56",
  "content": "<symbol viewBox=\"0 0 56 56\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" id=\"icon-precious\"><path d=\"M55.828 17.572C46.134 5.143 46.548 5.454 46.03 5.404L30.856 3.36c-3.825-.515-6.423.154-7.75.274a.814.814 0 0 0 .217 1.613c1.346-.124 3.759-.753 7.316-.275l10.42 1.404-13.06 2.661-13.058-2.661 4.514-.608a.814.814 0 0 0-.217-1.613L9.97 5.403l-.004.001-.012.002-.037.006-.024.005-.02.004-.027.008-.043.012-.017.007a.164.164 0 0 0-.007.003c-.008.003-.017.005-.025.009a.77.77 0 0 0-.043.02l-.018.008a.87.87 0 0 0-.02.01l-.02.012c-.353.206-.18.22-9.481 12.062a.813.813 0 0 0-.085.867c.327.65-.544-.633 17.41 23.198a.814.814 0 1 0 1.3-.98l-15.77-20.9 12.742 4.013 9.812 25.88-4.49-5.951a.813.813 0 1 0-1.299.98c4.702 6.23 5.186 6.876 5.22 6.914a3.864 3.864 0 0 0 2.2 1.225c.117.02 1.48.02 1.594-.003.991-.192 1.828-.752 2.223-1.272l15.88-21.049a.814.814 0 0 0-1.298-.98L30.418 49.651l9.813-25.881 12.742-4.014-5.076 6.728a.814.814 0 0 0 1.3.98c6.814-9.04 6.446-8.493 6.715-9.024a.813.813 0 0 0-.084-.868zM28 11.102l9.815 11.197h-19.63L28 11.102zM2.092 17.755L9.81 7.859l5.233 13.976-12.95-4.08zM11.34 7.302l15.125 3.083-9.79 11.168-5.335-14.25zm16.75 43.901h-.18L17.568 23.926h20.864L28.09 51.203zm11.235-29.65l-9.79-11.168L44.66 7.302l-5.335 14.251zm1.632.282l5.232-13.977 7.719 9.898-12.951 4.08z\" fill=\"#000\" /></symbol>"
});
var result = __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build___default.a.add(symbol);
/* harmony default export */ __webpack_exports__["default"] = (symbol);

/***/ }),
/* 155 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build__);


var symbol = new __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol___default.a({
  "id": "icon-rings",
  "use": "icon-rings-usage",
  "viewBox": "0 0 57 56",
  "content": "<symbol viewBox=\"0 0 57 56\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" id=\"icon-rings\"><g clip-path=\"url(#icon-rings_a)\" fill=\"#000\"><path d=\"M28.5 11.212c-11.34 0-20.532 9.193-20.532 20.533 0 11.34 9.193 20.534 20.532 20.534 11.34 0 20.532-9.194 20.532-20.534-.013-11.334-9.198-20.52-20.532-20.533zm0 39.2c-10.309 0-18.665-8.357-18.665-18.667 0-10.309 8.356-18.666 18.665-18.666s18.665 8.357 18.665 18.666C47.154 42.05 38.804 50.4 28.5 50.412z\" /><path d=\"M44.39 4.96L41.412.434a.933.933 0 0 0-.78-.42H16.369a.933.933 0 0 0-.78.42L12.61 4.96A28 28 0 0 0 28.5 56.014 28 28 0 0 0 44.39 4.96zm-4.26-3.08l1.842 2.8h-6.025a.849.849 0 0 0-.005-.212l-.605-2.588h4.792zm-23.263 0h4.792l-.605 2.588a.844.844 0 0 0-.001.212h-6.025l1.839-2.8zm36.568 33.94A26.132 26.132 0 0 1 28.5 54.147a26.134 26.134 0 0 1-14.9-47.6h13.033a.933.933 0 1 0 0-1.866h-3.707l.653-2.8h9.841l.653 2.8h-3.707a.933.933 0 1 0 0 1.867h13.035A26.134 26.134 0 0 1 53.434 35.82z\" /></g><defs><clipPath id=\"icon-rings_a\"><path fill=\"#fff\" transform=\"translate(.5)\" d=\"M0 0h56v56H0z\" /></clipPath></defs></symbol>"
});
var result = __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build___default.a.add(symbol);
/* harmony default export */ __webpack_exports__["default"] = (symbol);

/***/ }),
/* 156 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build__);


var symbol = new __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol___default.a({
  "id": "icon-roket",
  "use": "icon-roket-usage",
  "viewBox": "0 0 64 65",
  "content": "<symbol viewBox=\"0 0 64 65\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" id=\"icon-roket\"><path d=\"M31.994 28.824a6.641 6.641 0 0 0 6.634-6.635c0-3.653-2.981-6.623-6.634-6.623-3.653 0-6.635 2.982-6.635 6.635 0 3.654 2.97 6.623 6.635 6.623zm0-10.594a3.973 3.973 0 0 1 3.971 3.971 3.973 3.973 0 0 1-3.971 3.972 3.973 3.973 0 0 1-3.971-3.972 3.973 3.973 0 0 1 3.97-3.971z\" fill=\"#886A5A\" /><path d=\"M62.657 56.731h-3.995V27.398a3.99 3.99 0 0 0-3.995-3.995H47.89a1.33 1.33 0 0 0-1.332 1.332 1.33 1.33 0 0 0 1.332 1.332h6.776a1.33 1.33 0 0 1 1.331 1.331v29.333H8.002V27.398a1.33 1.33 0 0 1 1.332-1.331h6.788a1.33 1.33 0 0 0 1.331-1.332 1.33 1.33 0 0 0-1.331-1.332H9.333a3.99 3.99 0 0 0-3.995 3.995V56.72H1.332C.6 56.72 0 57.32 0 58.051a6.68 6.68 0 0 0 6.67 6.67h50.66a6.68 6.68 0 0 0 6.67-6.67 1.354 1.354 0 0 0-1.343-1.32zm-5.339 5.339H6.67a3.991 3.991 0 0 1-3.771-2.675h58.19a4.007 4.007 0 0 1-3.77 2.675z\" fill=\"#886A5A\" /><path d=\"M15.968 38.064c0 1.98.365 3.936 1.108 5.822.2.506.695.848 1.237.848a1.33 1.33 0 0 0 1.237-.849 13.317 13.317 0 0 1 3.017-4.596c.66 1.627 1.414 3.241 2.345 4.785.236.4.684.648 1.155.648h11.855a1.36 1.36 0 0 0 1.155-.648 36.036 36.036 0 0 0 2.333-4.737 13.285 13.285 0 0 1 2.97 4.548c.2.507.695.85 1.237.85a1.33 1.33 0 0 0 1.237-.85 16.057 16.057 0 0 0 1.108-5.821c0-3.937-1.45-7.684-4.066-10.619.012-.341.036-.671.036-1.013 0-9.581-3.913-18.573-11.007-25.338a1.335 1.335 0 0 0-1.838-.012c-7.448 7.095-11.23 16.676-10.995 26.27-2.651 2.957-4.124 6.728-4.124 10.712zm2.77 1.697c-.437-3.383.518-6.364 1.696-8.391.024.141.271 2.392 1.167 5.197a15.433 15.433 0 0 0-2.864 3.194zm26.443 0a16.096 16.096 0 0 0-2.805-3.135 34.103 34.103 0 0 0 1.155-5.138c1.155 1.98 2.074 4.76 1.65 8.273zM31.994 3.946a33.591 33.591 0 0 1 5.445 7.39H26.62a32.695 32.695 0 0 1 5.373-7.39zM25.324 14h13.387a31.678 31.678 0 0 1 2.546 12.445c0 .471.389 7.424-4.113 15.615H26.833c-3.806-7.165-3.936-12.775-3.971-13.14a32.004 32.004 0 0 1 2.462-14.92zM30.662 47.397v3.995a1.33 1.33 0 0 0 1.332 1.332c.73 0 1.331-.6 1.331-1.331v-3.996a1.33 1.33 0 0 0-1.331-1.331c-.73 0-1.332.6-1.332 1.331zM25.324 50.049v4.007a1.33 1.33 0 0 0 1.332 1.332c.73 0 1.343-.59 1.343-1.332v-4.007c0-.73-.6-1.332-1.331-1.332-.731.012-1.344.601-1.344 1.332zM35.988 50.049v4.007a1.33 1.33 0 0 0 1.332 1.332 1.33 1.33 0 0 0 1.331-1.332v-4.007a1.33 1.33 0 0 0-1.331-1.332c-.73.012-1.332.601-1.332 1.332z\" fill=\"#886A5A\" /></symbol>"
});
var result = __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build___default.a.add(symbol);
/* harmony default export */ __webpack_exports__["default"] = (symbol);

/***/ }),
/* 157 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build__);


var symbol = new __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol___default.a({
  "id": "icon-start",
  "use": "icon-start-usage",
  "viewBox": "0 0 64 65",
  "content": "<symbol viewBox=\"0 0 64 65\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" id=\"icon-start\"><path d=\"M57.318.721H6.67C2.993.721 0 3.715 0 7.393v50.67c0 3.665 2.993 6.658 6.67 6.658h50.66c3.677 0 6.67-2.993 6.67-6.67V7.392C63.988 3.715 61.007.72 57.318.72zm4.007 57.33a3.991 3.991 0 0 1-3.995 3.995H6.67a3.991 3.991 0 0 1-3.995-3.996V7.393A3.991 3.991 0 0 1 6.67 3.397h50.66a3.991 3.991 0 0 1 3.995 3.996V58.05z\" fill=\"#886A5A\" /><path d=\"M55.987 19.391H8.002a1.33 1.33 0 0 0-1.332 1.332V56.73a1.33 1.33 0 0 0 1.332 1.332h47.997a1.33 1.33 0 0 0 1.331-1.332V20.723a1.34 1.34 0 0 0-1.343-1.332zM54.667 55.4H9.333V22.054h45.322l.012 33.343zM10.665 15.396A3.991 3.991 0 0 0 14.66 11.4a4.001 4.001 0 0 0-3.995-4.007 3.991 3.991 0 0 0-3.995 3.995 4.001 4.001 0 0 0 3.995 4.008zm0-5.34a1.33 1.33 0 0 1 1.331 1.332 1.34 1.34 0 0 1-1.331 1.344A1.33 1.33 0 0 1 9.333 11.4a1.318 1.318 0 0 1 1.332-1.344zM21.329 15.396a3.991 3.991 0 0 0 3.995-3.996 3.999 3.999 0 0 0-3.995-3.996c-2.204 0-4.007 1.78-4.007 3.984a4.019 4.019 0 0 0 4.007 4.008zm0-5.34a1.33 1.33 0 0 1 1.331 1.332 1.33 1.33 0 0 1-1.331 1.332 1.32 1.32 0 0 1-1.332-1.32c0-.755.601-1.344 1.332-1.344zM31.994 15.396a3.991 3.991 0 0 0 3.995-3.996 4.001 4.001 0 0 0-3.995-4.007 3.991 3.991 0 0 0-3.995 3.995c0 2.204 1.791 4.008 3.995 4.008zm0-5.34a1.33 1.33 0 0 1 1.331 1.332 1.33 1.33 0 0 1-1.331 1.332 1.33 1.33 0 0 1-1.332-1.332c0-.742.59-1.332 1.332-1.332z\" fill=\"#886A5A\" /><path d=\"M25.442 41.526l-2.781 8.557a1.332 1.332 0 0 0 2.05 1.485l7.283-5.292 7.294 5.292c.601.483 1.332.165 1.568 0 .471-.342.66-.943.483-1.485l-2.781-8.557 7.294-5.292a1.33 1.33 0 0 0-.79-2.404H36.06l-2.78-8.558a1.33 1.33 0 0 0-1.273-.919 1.33 1.33 0 0 0-1.273.92l-2.781 8.556h-9.003a1.33 1.33 0 0 0-.79 2.405l7.283 5.292zm3.476-5.045a1.33 1.33 0 0 0 1.273-.92l1.815-5.586 1.814 5.575c.177.554.696.92 1.273.92h5.869l-4.75 3.453c-.47.342-.66.943-.483 1.485l1.815 5.575-4.749-3.453a1.353 1.353 0 0 0-.778-.248c-.27 0-.553.082-.777.248l-4.75 3.453 1.815-5.575a1.332 1.332 0 0 0-.483-1.485l-4.749-3.454 5.845.012z\" fill=\"#886A5A\" /></symbol>"
});
var result = __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build___default.a.add(symbol);
/* harmony default export */ __webpack_exports__["default"] = (symbol);

/***/ }),
/* 158 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build__);


var symbol = new __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol___default.a({
  "id": "icon-stomatologocheskoe-zoloto",
  "use": "icon-stomatologocheskoe-zoloto-usage",
  "viewBox": "0 0 128 128",
  "content": "<symbol viewBox=\"0 0 128 128\" xmlns=\"http://www.w3.org/2000/svg\" id=\"icon-stomatologocheskoe-zoloto\"><path d=\"M75.507 41.5A15.371 15.371 0 0 0 64 46.653a15.44 15.44 0 0 0-26.954 10.294v10.507a55.369 55.369 0 0 0 4.442 21.787l3.95 9.284a7.705 7.705 0 0 0 14.795-3.017V86.1a3.929 3.929 0 0 1 3.391-3.987 3.77 3.77 0 0 1 4.143 3.749v9.645a7.705 7.705 0 0 0 14.8 3.017l3.95-9.284a55.369 55.369 0 0 0 4.442-21.787V56.947A15.465 15.465 0 0 0 75.507 41.5zM52.493 45a11.906 11.906 0 0 1 10.036 5.483 1.751 1.751 0 0 0 2.942 0A11.943 11.943 0 1 1 75.507 68.9H52.493a11.948 11.948 0 0 1 0-23.895zm34.961 22.454a51.85 51.85 0 0 1-4.163 20.416l-3.95 9.284a4.2 4.2 0 0 1-8.074-1.646v-9.645a7.268 7.268 0 0 0-7.975-7.233 7.452 7.452 0 0 0-6.559 7.47v9.407a4.2 4.2 0 0 1-8.074 1.646l-3.95-9.284a51.85 51.85 0 0 1-4.163-20.416v-.729A15.421 15.421 0 0 0 52.493 72.4h23.014a15.421 15.421 0 0 0 11.947-5.67zM64 35.25a1.749 1.749 0 0 0 1.75-1.75v-6.963a1.75 1.75 0 0 0-3.5 0V33.5A1.749 1.749 0 0 0 64 35.25zM54.347 38.224a1.75 1.75 0 1 0 2.474-2.475L51.9 30.825a1.75 1.75 0 1 0-2.477 2.475zM72.416 38.736a1.744 1.744 0 0 0 1.237-.512l4.924-4.924a1.75 1.75 0 1 0-2.477-2.475l-4.924 4.924a1.75 1.75 0 0 0 1.237 2.987z\" /></symbol>"
});
var result = __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build___default.a.add(symbol);
/* harmony default export */ __webpack_exports__["default"] = (symbol);

/***/ }),
/* 159 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build__);


var symbol = new __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol___default.a({
  "id": "icon-wedding",
  "use": "icon-wedding-usage",
  "viewBox": "0 0 57 56",
  "content": "<symbol viewBox=\"0 0 57 56\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" id=\"icon-wedding\"><g clip-path=\"url(#icon-wedding_a)\"><path d=\"M55.917 32.531a18.983 18.983 0 0 0-19.208-14.47 18.897 18.897 0 0 0-9.641-9.372.83.83 0 0 0-.662 1.522 17.243 17.243 0 0 1 9.018 9.038 17.494 17.494 0 0 1 1.09 3.533c.83 4.24.049 8.614-2.202 12.314a17.259 17.259 0 0 1-9.246 7.405c-.07-.158-.136-.318-.2-.479l-.002-.005c-.122-.31-.233-.625-.332-.944l-.024-.077c-.046-.15-.09-.302-.13-.454l-.004-.012c7.25-2.433 11.634-9.981 10.05-17.545a15.309 15.309 0 0 0-1.307-3.748l-.003-.006-.01-.02a15.292 15.292 0 0 0-7.124-6.903 15.188 15.188 0 0 0-4.645-1.327l5.894-5.48a.83.83 0 0 0 .124-1.07l-.004-.005L24.624.367A.83.83 0 0 0 23.935 0h-8.832a.83.83 0 0 0-.689.367l-2.729 4.065a.83.83 0 0 0 .124 1.07l5.894 5.479c-.6.071-1.197.178-1.788.322-8.158 1.987-13.178 10.241-11.19 18.4a15.266 15.266 0 0 0 5.521 8.475A15.305 15.305 0 0 0 19 41.32a22.16 22.16 0 0 0 .163.646l.029.105c.033.12.067.24.102.358l.03.098a19.466 19.466 0 0 0 .292.889A17.367 17.367 0 0 1 9.38 40.135a17.315 17.315 0 0 1-5.33-21.82 17.33 17.33 0 0 1 8.578-8.106.83.83 0 0 0-.659-1.523A18.981 18.981 0 0 0 1.083 30.589 18.977 18.977 0 0 0 20.29 45.058C23.404 51.728 30.162 56 37.48 56c1.483 0 2.988-.175 4.491-.541 10.166-2.477 16.422-12.762 13.945-22.928zM35.73 35.958a18.913 18.913 0 0 0 2.582-12.479c2.7.168 5.332 1.153 7.487 2.824a13.424 13.424 0 0 1 4.865 7.508c1.77 7.27-2.703 14.623-9.972 16.394a13.479 13.479 0 0 1-10.262-1.59 13.501 13.501 0 0 1-4.598-4.624 18.912 18.912 0 0 0 9.898-8.033zM24.041 38.89a13.487 13.487 0 0 1 1.74-8.739 13.487 13.487 0 0 1 7.176-5.92c.89 6.358-2.86 12.523-8.916 14.659zM15.546 1.66h7.947l1.61 2.398H13.936l1.61-2.398zm-1.067 4.058h10.08l-5.04 4.685-5.04-4.685zm4.208 33.924a13.638 13.638 0 0 1-7.43-2.782 13.418 13.418 0 0 1-4.92-7.55c-1.771-7.27 2.702-14.624 9.97-16.395 3.041-.74 6.142-.43 8.969.896a13.645 13.645 0 0 1 5.887 5.319 18.875 18.875 0 0 0-10.102 8.383 18.873 18.873 0 0 0-2.374 12.13zM41.58 53.846a17.287 17.287 0 0 1-4.099.494c-6.89 0-13.235-4.15-15.948-10.57l-.088-.211-.034-.086-.104-.265-.015-.04a16.946 16.946 0 0 1-.113-.308l-.004-.01c-.04-.111-.078-.223-.116-.335v-.002a16.986 16.986 0 0 1-.11-.342l-.008-.024a17.514 17.514 0 0 1-.096-.32l-.03-.106-.066-.243a17.228 17.228 0 0 1-.175-.72l-.031-.145a18.71 18.71 0 0 1-.034-.165l-.022-.11-.004-.014a17.226 17.226 0 0 1 2.014-11.979 17.224 17.224 0 0 1 9.437-7.726c.28.636.51 1.296.691 1.97a15.139 15.139 0 0 0-8.274 6.722 15.142 15.142 0 0 0-1.775 10.824l.001.006a16.854 16.854 0 0 0 .213.887l.028.098c.029.104.058.207.09.31.008.03.018.06.028.092a16.644 16.644 0 0 0 .255.756l.004.013a15.113 15.113 0 0 0 6.373 7.736 15.13 15.13 0 0 0 11.518 1.784c8.158-1.987 13.178-10.24 11.19-18.399a15.066 15.066 0 0 0-5.46-8.427 15.314 15.314 0 0 0-8.815-3.19l-.046-.194a19.096 19.096 0 0 0-.57-1.903 17.321 17.321 0 0 1 16.92 13.22c2.26 9.277-3.449 18.662-12.725 20.922z\" fill=\"#000\" /></g><defs><clipPath id=\"icon-wedding_a\"><path fill=\"#fff\" transform=\"translate(.5)\" d=\"M0 0h56v56H0z\" /></clipPath></defs></symbol>"
});
var result = __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build___default.a.add(symbol);
/* harmony default export */ __webpack_exports__["default"] = (symbol);

/***/ }),
/* 160 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build__);


var symbol = new __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol___default.a({
  "id": "icon-without-sample",
  "use": "icon-without-sample-usage",
  "viewBox": "0 0 57 56",
  "content": "<symbol viewBox=\"0 0 57 56\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" id=\"icon-without-sample\"><g clip-path=\"url(#icon-without-sample_a)\"><path d=\"M21.424 48.14a23.241 23.241 0 0 1-14.64-21.633c0-12.858 10.43-23.278 23.302-23.278s23.303 10.42 23.303 23.278c0 12.857-10.431 23.277-23.303 23.277-1.342 0-2.684-.121-3.965-.304M1.415 55.086l12.384-11.943M55.585 45.58c-3.843 0-6.484-.357-10.023-1.392M12.75 10.938C11 7.874 10.125 5.08 10.125.874M55.585 38.634c-1.647 0-3.44-.145-5.21-.572M18.063 5.767c-.5-.955-.938-3.58-.938-4.892\" stroke=\"#000\" stroke-width=\"1.8\" stroke-miterlimit=\"10\" stroke-linecap=\"round\" /><path d=\"M20.63 26.202l1.16-.975.793.914-1.16.975-.792-.914zm1.953-1.645a3.06 3.06 0 0 1 .854-.487c.305-.061.61-.061 1.037.06.122.061.244.122.427.183l.549.183c.183.061.366.061.55.061.182 0 .365-.122.548-.244.122-.122.183-.182.244-.304s.061-.244.061-.366 0-.244-.06-.366l-.184-.365c-.122-.122-.244-.244-.366-.305-.122-.06-.244-.122-.366-.122s-.244-.06-.427-.06h-.366l-.122-1.098c.244-.06.488-.121.732-.121s.488.06.671.121c.244.061.427.183.61.305s.366.305.55.488c.182.243.304.426.426.73.122.245.183.55.183.793 0 .305-.06.548-.183.853-.122.305-.305.549-.61.792-.183.122-.366.244-.549.305-.183.06-.366.122-.549.122h-.549c-.183-.061-.366-.061-.549-.122-.183-.061-.305-.122-.488-.183-.183-.06-.305-.122-.488-.122s-.305-.06-.427 0a.66.66 0 0 0-.427.183l-.732-.914zM24.596 30.65l1.037-1.096.915.792-1.037 1.158-.915-.853zm1.708-1.888c.244-.244.488-.488.793-.61.305-.122.61-.183 1.037-.06.122 0 .305.06.427.121.183.061.366.061.55.122.182 0 .365 0 .548-.06.183-.062.366-.123.488-.305.122-.122.183-.244.183-.366a.388.388 0 0 0 0-.366c0-.122-.06-.244-.122-.365-.06-.122-.122-.244-.244-.305-.122-.122-.244-.183-.366-.244-.122-.06-.244-.06-.427-.06h-.427c-.122 0-.244.06-.366.06l-.244-1.158c.244-.121.427-.182.671-.182.244 0 .488 0 .671.06.244.061.427.122.671.244.244.122.427.244.61.427s.366.426.55.67c.121.244.243.488.304.792.061.305 0 .549-.06.853-.062.305-.245.61-.489.854-.183.182-.305.304-.488.426s-.305.183-.488.183c-.183.06-.366.06-.549.06-.183 0-.366 0-.549-.06-.183-.061-.305-.061-.488-.122-.183-.06-.305-.06-.488-.06s-.305 0-.427.06c-.122.061-.305.122-.427.244l-.854-.853zM29.232 34.55l.855-1.28 1.037.671-.854 1.28-1.038-.67zm1.404-2.132c.183-.305.427-.549.67-.731.244-.183.61-.244 1.037-.244.122 0 .305 0 .489.06.183.062.366 0 .549 0 .183 0 .366-.06.549-.121.183-.061.305-.183.427-.366.06-.122.122-.243.183-.365v-.366c0-.122-.122-.244-.183-.366-.061-.121-.183-.182-.305-.243s-.244-.122-.427-.183c-.122 0-.305-.061-.427 0-.122.06-.244.06-.366.06-.123.062-.245.062-.367.123l-.427-1.036c.184-.122.428-.244.672-.305.244-.06.488-.06.67-.06.245 0 .489.06.672.121.183.061.427.183.67.305.245.183.428.365.61.548.184.183.306.488.367.731.06.244.122.549.06.854-.06.304-.182.609-.365.913-.122.183-.244.366-.427.488a1.825 1.825 0 0 1-.488.244c-.183.06-.366.122-.55.122h-.61c-.182 0-.365 0-.487-.061h-.489c-.183 0-.305.06-.427.121s-.183.244-.305.427l-.976-.67z\" fill=\"#000\" /><path d=\"M8.918 16.757c5.063 15.478 15.373 25.776 30.806 30.956M52.84 31.504C38.32 27.787 27.95 18.28 23.193 4.265\" stroke=\"#000\" stroke-width=\"1.8\" stroke-miterlimit=\"10\" stroke-linecap=\"round\" /></g><defs><clipPath id=\"icon-without-sample_a\"><path fill=\"#fff\" transform=\"translate(.5)\" d=\"M0 0h56v56H0z\" /></clipPath></defs></symbol>"
});
var result = __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build___default.a.add(symbol);
/* harmony default export */ __webpack_exports__["default"] = (symbol);

/***/ }),
/* 161 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build__);


var symbol = new __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol___default.a({
  "id": "icon-zolotie-koronki",
  "use": "icon-zolotie-koronki-usage",
  "viewBox": "0 0 74 74",
  "content": "<symbol viewBox=\"0 0 74 74\" xmlns=\"http://www.w3.org/2000/svg\" id=\"icon-zolotie-koronki\"><path d=\"M53.065 47.738a.488.488 0 0 1-.206-.045.5.5 0 0 1-.249-.661c.352-.778.7-1.629 1.044-2.529a.5.5 0 0 1 .936.355 45.21 45.21 0 0 1-1.069 2.586.5.5 0 0 1-.456.294zM46.1 69a2.479 2.479 0 0 1-1.791-.764c-.607-.744-1.212-2.753-1.978-5.3-1.28-4.248-3.215-10.669-5.349-10.737-2.1.068-3.992 6.359-5.246 10.521a24.168 24.168 0 0 1-2.006 5.459 2.466 2.466 0 0 1-3.061.478c-4.666-2.775-5.126-12.986-5.107-17.247a7.3 7.3 0 0 0-.739-3.211c-.719-1.519-3.75-11.047-2.84-17.981a.5.5 0 0 1 .993.13C18.1 37.07 21.033 46.3 21.729 47.774a8.3 8.3 0 0 1 .835 3.646c-.018 4.088.4 13.871 4.621 16.383a1.45 1.45 0 0 0 1.782-.259 27.4 27.4 0 0 0 1.813-5.108c1.574-5.223 3.358-11.141 6.2-11.232 2.884.091 4.7 6.124 6.306 11.447a23.844 23.844 0 0 0 1.77 4.924 1.444 1.444 0 0 0 1.753.229c1.39-.826 2.494-2.536 3.283-5.084a.5.5 0 1 1 .955.3c-.864 2.792-2.117 4.692-3.724 5.646A2.369 2.369 0 0 1 46.1 69zM51.723 56.938a.37.37 0 0 1-.048 0 .5.5 0 0 1-.451-.545c.086-.9.144-1.829.174-2.749a.481.481 0 0 1 .517-.483.5.5 0 0 1 .483.516c-.031.94-.091 1.886-.178 2.81a.5.5 0 0 1-.497.451zM55.67 38.871h-.051a.5.5 0 0 1-.447-.548c.027-.3.06-6.024-.151-7.981a.5.5 0 0 1 .995-.107c.213 1.98.192 7.776.15 8.188a.5.5 0 0 1-.496.448z\" /><path d=\"M55.519 30.787H18.481a.5.5 0 0 1-.493-.416L14.817 11.78a.5.5 0 0 1 .745-.516l12 7 9.027-13.05a.52.52 0 0 1 .822 0l9.032 13.046 12-7a.5.5 0 0 1 .745.516l-3.176 18.595a.5.5 0 0 1-.493.416zm-36.616-1H55.1l2.92-17.12-11.469 6.69a.5.5 0 0 1-.663-.147L37 6.377 28.115 19.21a.5.5 0 0 1-.663.147l-11.469-6.69z\" /></symbol>"
});
var result = __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build___default.a.add(symbol);
/* harmony default export */ __webpack_exports__["default"] = (symbol);

/***/ }),
/* 162 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build__);


var symbol = new __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol___default.a({
  "id": "icon-zoloto-proba",
  "use": "icon-zoloto-proba-usage",
  "viewBox": "0 0 417.921 417.921",
  "content": "<symbol xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 417.921 417.921\" id=\"icon-zoloto-proba\"><path d=\"M365.625 79.422C364.481 35.55 327.925 0 284.049 0l-.368.001-1.053.005c-17.821.078-34.245 9.443-43.936 25.05-6.436 10.365-17.55 16.552-29.732 16.552s-23.296-6.188-29.732-16.552C169.538 9.449 153.113.085 135.29.006l-1.05-.005-.367-.001C90 0 53.439 35.553 52.295 79.422a81.748 81.748 0 0 0 3.674 26.538l28.988 90.604c.023 35.458 7.548 89.387 24.163 125.251l37.25 80.404c3.207 9.32 11.734 15.611 21.348 15.7 6.07.07 11.833-2.274 16.161-6.562a22.501 22.501 0 0 0 6.711-16.097c0-.603-.084-1.203-.249-1.783-7.377-25.865-22.161-98.769-2.251-125.151 4.956-6.567 11.783-9.76 20.87-9.76 8.862 0 15.544 3.127 20.427 9.561 19.852 26.156 5.44 99.052-1.788 124.934a6.51 6.51 0 0 0-.24 1.75c0 11.756 9.322 22.088 20.78 23.032.638.053 1.271.078 1.901.078a22.576 22.576 0 0 0 21.396-15.262l37.426-80.902c16.576-35.832 24.081-89.721 24.102-125.194l29.001-90.648c2.665-8.544 3.896-17.457 3.66-26.493zm-16.056 22.576l-29.298 91.573a6.967 6.967 0 0 0-.309 2.079c.119 34.01-6.997 86.272-22.899 120.647l-37.575 81.225a6.573 6.573 0 0 0-.283.721 9.643 9.643 0 0 1-9.999 6.643c-4.473-.368-8.424-4.627-8.815-9.316 2.985-11.03 25.981-100.204-.645-135.297-7.404-9.759-17.762-14.707-30.786-14.707-13.258 0-23.771 5.023-31.247 14.929-26.667 35.336-3.209 124.48-.154 135.546a9.582 9.582 0 0 1-2.831 6.081c-1.844 1.828-4.275 2.801-6.89 2.797-4.091-.038-7.889-2.964-9.238-7.116a6.506 6.506 0 0 0-.284-.724l-37.401-80.73c-14.568-31.445-21.777-77.833-22.822-111.577 17.797 5.829 60.006 17.588 110.866 17.588 25.26 0 51.562-2.982 78.175-8.864a6.5 6.5 0 0 0 4.944-7.75 6.5 6.5 0 0 0-7.75-4.944 383.296 383.296 0 0 1-9.55 1.984l14.176-35.973a6.5 6.5 0 0 0-12.095-4.767l-17.08 43.341c-17.273 2.636-34.288 3.971-50.821 3.971-18.656 0-36.226-1.693-51.76-4.088l-17.034-43.224a6.5 6.5 0 0 0-12.095 4.767l14.119 35.826c-22.668-4.453-39.176-9.869-45.511-12.103L68.363 102.04c-2.239-7.179-3.273-14.676-3.075-22.283C66.253 42.883 96.985 13 133.874 13l.31.001 1.053.005c13.316.058 25.633 7.126 32.948 18.907 8.824 14.211 24.067 22.695 40.776 22.695s31.952-8.484 40.776-22.695c7.315-11.781 19.632-18.849 32.946-18.907l1.057-.005.31-.001c36.884 0 67.62 29.885 68.582 66.761.196 7.607-.838 15.104-3.063 22.237zm-8.761-19.895a6.498 6.498 0 0 1-6.328 6.667l-.173.002a6.5 6.5 0 0 1-6.494-6.331c-.683-26.173-22.499-47.385-48.679-47.385h-.25a6.5 6.5 0 0 1-.029-13h.278c33.173.001 60.81 26.878 61.675 60.047zm-6.239 30.878l-8.289 25.908a6.502 6.502 0 0 1-6.189 4.521 6.5 6.5 0 0 1-6.192-8.482l8.289-25.908a6.5 6.5 0 0 1 12.381 3.961zM151.836 82.276c-9.711 0-17.612 7.901-17.612 17.613 0 9.711 7.901 17.612 17.612 17.612 1.598 0 3.139-.233 4.612-.634v5.246a4.617 4.617 0 0 1-4.612 4.612 4.604 4.604 0 0 1-3.566-1.687 6.5 6.5 0 0 0-10.039 8.259 17.562 17.562 0 0 0 13.605 6.427c9.711 0 17.612-7.901 17.612-17.612V99.888c0-.225-.011-.447-.034-.666-.353-9.401-8.091-16.946-17.578-16.946zm0 22.224a4.617 4.617 0 0 1-4.612-4.612c0-2.543 2.069-4.613 4.612-4.613s4.612 2.069 4.612 4.613a4.616 4.616 0 0 1-4.612 4.612zm38.083-22.224c-9.711 0-17.612 7.901-17.612 17.613 0 9.711 7.901 17.612 17.612 17.612 1.598 0 3.139-.233 4.612-.634v5.246a4.617 4.617 0 0 1-4.612 4.612 4.604 4.604 0 0 1-3.566-1.687 6.5 6.5 0 0 0-10.039 8.259 17.562 17.562 0 0 0 13.605 6.427c9.711 0 17.612-7.901 17.612-17.612V99.888c0-.225-.011-.447-.034-.666-.354-9.401-8.091-16.946-17.578-16.946zm0 22.224a4.617 4.617 0 0 1-4.612-4.612c0-2.543 2.069-4.613 4.612-4.613s4.612 2.069 4.612 4.613a4.617 4.617 0 0 1-4.612 4.612zm38.083-22.224c-9.711 0-17.612 7.901-17.612 17.613 0 9.711 7.901 17.612 17.612 17.612 1.598 0 3.139-.233 4.612-.634v5.246a4.617 4.617 0 0 1-4.612 4.612 4.604 4.604 0 0 1-3.566-1.687 6.5 6.5 0 0 0-10.039 8.259 17.562 17.562 0 0 0 13.605 6.427c9.711 0 17.612-7.901 17.612-17.612V99.888c0-.225-.011-.447-.034-.666-.353-9.401-8.091-16.946-17.578-16.946zm0 22.224a4.617 4.617 0 0 1-4.612-4.612c0-2.543 2.069-4.613 4.612-4.613s4.612 2.069 4.612 4.613a4.617 4.617 0 0 1-4.612 4.612zm38.082-22.224c-9.711 0-17.612 7.901-17.612 17.613 0 9.711 7.901 17.612 17.612 17.612 1.598 0 3.139-.233 4.612-.634v5.246a4.617 4.617 0 0 1-4.612 4.612 4.604 4.604 0 0 1-3.566-1.687 6.5 6.5 0 0 0-10.039 8.259 17.562 17.562 0 0 0 13.605 6.427c9.711 0 17.612-7.901 17.612-17.612V99.888c0-.225-.011-.447-.034-.666-.353-9.401-8.091-16.946-17.578-16.946zm0 22.224a4.617 4.617 0 0 1-4.612-4.612c0-2.543 2.069-4.613 4.612-4.613s4.612 2.069 4.612 4.613a4.616 4.616 0 0 1-4.612 4.612zM128.56 125.36c1.21 1.21 1.9 2.89 1.9 4.6s-.69 3.39-1.9 4.6c-1.21 1.21-2.89 1.9-4.6 1.9s-3.39-.69-4.6-1.9-1.9-2.89-1.9-4.6.69-3.39 1.9-4.6 2.89-1.9 4.6-1.9 3.39.69 4.6 1.9z\" /></symbol>"
});
var result = __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build___default.a.add(symbol);
/* harmony default export */ __webpack_exports__["default"] = (symbol);

/***/ }),
/* 163 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build__);


var symbol = new __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol___default.a({
  "id": "telegramm",
  "use": "telegramm-usage",
  "viewBox": "0 0 60 60",
  "content": "<symbol viewBox=\"0 0 60 60\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" id=\"telegramm\"><g clip-path=\"url(#telegramm_a)\"><circle cx=\"30\" cy=\"30\" r=\"30\" fill=\"#2DA5E1\" /><path d=\"M13.32 29.94s14.926-6.585 20.103-8.904c1.984-.928 8.714-3.896 8.714-3.896s3.107-1.299 2.848 1.855c-.087 1.299-.777 5.843-1.467 10.76-1.035 6.956-2.157 14.562-2.157 14.562s-.172 2.133-1.64 2.505c-1.466.37-3.882-1.299-4.313-1.67-.346-.278-6.472-4.452-8.715-6.493-.604-.556-1.294-1.67.086-2.968 3.107-3.06 6.817-6.864 9.06-9.275 1.035-1.113 2.07-3.71-2.243-.557-6.126 4.545-12.166 8.812-12.166 8.812s-1.38.928-3.97.093c-2.588-.835-5.608-1.948-5.608-1.948s-2.07-1.392 1.467-2.876z\" fill=\"#fff\" /></g><defs><clipPath id=\"telegramm_a\"><path fill=\"#fff\" d=\"M0 0h60v60H0z\" /></clipPath></defs></symbol>"
});
var result = __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build___default.a.add(symbol);
/* harmony default export */ __webpack_exports__["default"] = (symbol);

/***/ }),
/* 164 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build__);


var symbol = new __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol___default.a({
  "id": "whatsup",
  "use": "whatsup-usage",
  "viewBox": "0 0 60 60",
  "content": "<symbol viewBox=\"0 0 60 60\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" id=\"whatsup\"><g clip-path=\"url(#whatsup_a)\"><circle cx=\"30\" cy=\"30\" r=\"30\" fill=\"#4FCE5D\" /><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M30.273 44.227C38.407 44.227 45 37.685 45 29.614S38.408 15 30.273 15c-8.134 0-14.728 6.543-14.728 14.614 0 2.76.772 5.343 2.113 7.545L15 45l8.154-2.591a14.752 14.752 0 0 0 7.119 1.818zm6.941-11.571c.253.121.423.203.497.323.09.15.09.867-.21 1.704-.303.836-1.777 1.642-2.438 1.702-.114.01-.208.033-.304.056-.466.112-.987.237-4.029-.951-3.391-1.326-5.627-4.616-6.089-5.296-.037-.055-.063-.094-.077-.112-.184-.242-1.474-1.944-1.474-3.704 0-1.65.816-2.514 1.192-2.912l.07-.076c.332-.358.723-.448.964-.448.124 0 .249.008.369.016.112.007.221.014.323.014l.08-.003c.203-.013.467-.03.732.6l.384.926c.315.76.668 1.612.73 1.733.09.18.15.39.03.628l-.05.098a2.02 2.02 0 0 1-.312.5l-.183.218c-.125.15-.25.302-.358.41-.18.177-.369.371-.159.73.211.358.936 1.53 2.009 2.48 1.154 1.021 2.157 1.453 2.665 1.671.099.043.179.077.238.106.36.18.571.15.782-.09.21-.239.903-1.045 1.143-1.404.24-.358.482-.298.813-.179.33.12 2.105.986 2.467 1.165l.195.095z\" fill=\"#fff\" /></g><defs><clipPath id=\"whatsup_a\"><path fill=\"#fff\" d=\"M0 0h60v60H0z\" /></clipPath></defs></symbol>"
});
var result = __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build___default.a.add(symbol);
/* harmony default export */ __webpack_exports__["default"] = (symbol);

/***/ }),
/* 165 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build__);


var symbol = new __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol___default.a({
  "id": "wiber",
  "use": "wiber-usage",
  "viewBox": "0 0 60 60",
  "content": "<symbol viewBox=\"0 0 60 60\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" id=\"wiber\"><g clip-path=\"url(#wiber_a)\"><path d=\"M30 0c16.569 0 30 13.431 30 30 0 16.569-13.431 30-30 30C13.431 60 0 46.569 0 30 0 13.431 13.431 0 30 0z\" fill=\"#7F4DA0\" /><path d=\"M37.506 26.824c-.133-1.082-.466-1.931-1.056-2.684-.767-.969-1.747-1.55-3.198-1.893-.946-.23-1.328-.203-1.67.109-.319.293-.38.88-.137 1.26.17.275.368.374.918.482.731.134 1.237.309 1.697.572.976.563 1.43 1.445 1.479 2.873.023.67.08.877.315 1.115.434.434 1.206.35 1.534-.17.12-.197.138-.282.151-.737a7.267 7.267 0 0 0-.033-.927z\" fill=\"#fff\" /><path d=\"M41.33 28.044c-.194-3.315-1.49-5.982-3.81-7.858-1.308-1.055-2.889-1.78-4.621-2.133-.635-.126-1.803-.228-2.004-.17-.189.055-.456.26-.575.445-.127.2-.155.65-.047.909.173.433.496.586 1.4.665 1.395.122 2.834.612 3.92 1.338a8.22 8.22 0 0 1 2.865 3.282c.551 1.14.89 2.784.881 4.256-.003.532.08.832.293 1.052a.983.983 0 0 0 1.21.188c.46-.243.568-.668.487-1.974z\" fill=\"#fff\" /><path d=\"M45.22 28.806c-.069-1.875-.384-3.413-1.043-5.128-.65-1.687-1.307-2.788-2.55-4.277-1.174-1.395-2.087-2.192-3.533-3.08-2.019-1.236-4.476-2.054-7.229-2.398-.938-.12-1.15-.112-1.439.08-.558.365-.55 1.273.01 1.631.185.114.35.156 1.1.254 1.153.156 1.894.302 2.774.542 3.45.943 6.102 2.87 7.875 5.731 1.484 2.385 2.1 4.77 2.013 7.816-.03 1.03-.009 1.21.149 1.458.301.461 1.096.552 1.504.17.254-.233.302-.409.352-1.29.023-.46.029-1.138.018-1.509zM45.56 40.811a3.646 3.646 0 0 0-.325-.65c-.68-1.028-4.34-3.891-6.166-4.828-1.044-.535-1.817-.714-2.39-.546-.616.173-.94.46-1.972 1.743-.416.514-.843.996-.957 1.072-.28.194-.832.351-1.221.351-.903-.005-2.54-.59-3.8-1.358-.978-.596-2.232-1.662-3.194-2.718-1.135-1.239-1.907-2.332-2.518-3.567-.79-1.585-.99-2.554-.66-3.263.081-.18.19-.369.238-.428.049-.054.557-.471 1.119-.926 1.102-.877 1.28-1.077 1.486-1.678.26-.763.19-1.542-.21-2.327-.309-.596-1.114-1.895-1.698-2.734-.773-1.104-2.697-3.464-3.08-3.783-.692-.563-1.578-.66-2.557-.282-1.032.4-2.967 1.96-3.794 3.048-.746.985-1.032 1.683-1.075 2.603-.038.758.027 1.072.427 2.04 3.129 7.6 7.799 13.668 14.214 18.486 3.35 2.517 6.826 4.433 10.43 5.743 2.103.763 3.017.8 4.092.173.454-.27 1.578-1.424 2.205-2.263 1.038-1.396 1.422-2.04 1.53-2.554.075-.352.016-.964-.124-1.354z\" fill=\"#fff\" /></g><defs><clipPath id=\"wiber_a\"><path fill=\"#fff\" d=\"M0 0h60v60H0z\" /></clipPath></defs></symbol>"
});
var result = __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build___default.a.add(symbol);
/* harmony default export */ __webpack_exports__["default"] = (symbol);

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgOTNhZThmMzU4NTQ0MDk2YjhlMzQiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vdXRpbHMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vdXRpbHMvZG9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zc3Itd2luZG93L3Nzci13aW5kb3cuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdmctYmFrZXItcnVudGltZS9icm93c2VyLXN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3ZnLXNwcml0ZS1sb2FkZXIvcnVudGltZS9icm93c2VyLXNwcml0ZS5idWlsZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uLmJsb2Nrcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uLmJsb2Nrcy9zbGlkZXIvc2xpZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL3V0aWxzL2dldC1zdXBwb3J0LmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy92ZW5kb3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL25vcm1hbGl6ZS5jc3Mvbm9ybWFsaXplLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvbGVzcy9zdHlsZXMubGVzcz8wZjk1Iiwid2VicGFjazovLy8uL3NyYy9jb21tb24uYmxvY2tzIFxcLihqc3xsZXNzKSQiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbW1vbi5ibG9ja3MvYWJvdXQvYWJvdXQubGVzcz9lNDMwIiwid2VicGFjazovLy8uL3NyYy9jb21tb24uYmxvY2tzL2FjY29yZGlvbi9hY2NvcmRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbW1vbi5ibG9ja3MvYWNjb3JkaW9uL2FjY29yZGlvbi5sZXNzPzNjMzEiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbW1vbi5ibG9ja3MvYWR2YW50YWdlcy9hZHZhbnRhZ2VzLmxlc3M/MmFlNiIsIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uLmJsb2Nrcy9hbW91bnQvYW1vdW50Lmxlc3M/MmMyNCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uLmJsb2Nrcy9idG4tY3Jvc3MvYnRuLWNyb3NzLmxlc3M/OWMxYSIsIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uLmJsb2Nrcy9idG4tbWVudS9idG4tbWVudS5sZXNzPzUxYTIiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbW1vbi5ibG9ja3MvYnRuL2J0bi5sZXNzPzViYmEiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbW1vbi5ibG9ja3MvY2FyZC9jYXJkLmxlc3M/NWUxMSIsIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uLmJsb2Nrcy9jaGFyb2l0L2NoYXJvaXQubGVzcz9lMzcxIiwid2VicGFjazovLy8uL3NyYy9jb21tb24uYmxvY2tzL2NvbnRhaW5lci9jb250YWluZXIubGVzcz9iY2MzIiwid2VicGFjazovLy8uL3NyYy9jb21tb24uYmxvY2tzL2V2YWwvZXZhbC5sZXNzP2E0MTQiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbW1vbi5ibG9ja3MvZXhhbXBsZS9leGFtcGxlLmxlc3M/ZmY1ZSIsIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uLmJsb2Nrcy9mYXEvZmFxLmxlc3M/Mjk0YiIsIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uLmJsb2Nrcy9mZWVkYmFjay1mb3JtL2ZlZWRiYWNrLWZvcm0uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbW1vbi5ibG9ja3MvZmVlZGJhY2stZm9ybS9mZWVkYmFjay1mb3JtLmxlc3M/YTEwZiIsIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uLmJsb2Nrcy9mZWVkYmFjay9mZWVkYmFjay5sZXNzPzBhMGYiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbW1vbi5ibG9ja3MvZm9vdGVyL2Zvb3Rlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uLmJsb2Nrcy9mb290ZXIvZm9vdGVyLmxlc3M/MzJjNyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uLmJsb2Nrcy9oZWFkZXIvaGVhZGVyLmxlc3M/Yzk2NCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uLmJsb2Nrcy9oZXJvLWV2YWwvaGVyby1ldmFsLmxlc3M/NDBlYyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uLmJsb2Nrcy9oZXJvL2hlcm8ubGVzcz80Yjk1Iiwid2VicGFjazovLy8uL3NyYy9jb21tb24uYmxvY2tzL2luZm8tYmxvY2svaW5mby1ibG9jay5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uLmJsb2Nrcy9pbmZvLWJsb2NrL2luZm8tYmxvY2subGVzcz9lY2JkIiwid2VicGFjazovLy8uL3NyYy9jb21tb24uYmxvY2tzL21hcC9tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbW1vbi5ibG9ja3MvbWFwL21hcC5sZXNzP2M2M2MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbW1vbi5ibG9ja3MvbWVudS9tZW51LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21tb24uYmxvY2tzL21lbnUvbWVudS5sZXNzP2NjZGQiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbW1vbi5ibG9ja3MvbW9kYWwvbW9kYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21pY3JvbW9kYWwvZGlzdC9taWNyb21vZGFsLmVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvc3dpcGVyLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvY29yZS1jbGFzcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tNy9kb203LmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS91dGlscy9nZXQtZGV2aWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL3V0aWxzL2dldC1icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL21vZHVsZXMvcmVzaXplL3Jlc2l6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9tb2R1bGVzL29ic2VydmVyL29ic2VydmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9tb2R1bGFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9ldmVudHMtZW1pdHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvdXBkYXRlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS91cGRhdGUvdXBkYXRlU2l6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvdXBkYXRlL3VwZGF0ZVNsaWRlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvdXBkYXRlL3VwZGF0ZUF1dG9IZWlnaHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL3VwZGF0ZS91cGRhdGVTbGlkZXNPZmZzZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL3VwZGF0ZS91cGRhdGVTbGlkZXNQcm9ncmVzcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvdXBkYXRlL3VwZGF0ZVByb2dyZXNzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS91cGRhdGUvdXBkYXRlU2xpZGVzQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvdXBkYXRlL3VwZGF0ZUFjdGl2ZUluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS91cGRhdGUvdXBkYXRlQ2xpY2tlZFNsaWRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS90cmFuc2xhdGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL3RyYW5zbGF0ZS9nZXRUcmFuc2xhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL3RyYW5zbGF0ZS9zZXRUcmFuc2xhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL3RyYW5zbGF0ZS9taW5UcmFuc2xhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL3RyYW5zbGF0ZS9tYXhUcmFuc2xhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL3RyYW5zbGF0ZS90cmFuc2xhdGVUby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvdHJhbnNpdGlvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvdHJhbnNpdGlvbi9zZXRUcmFuc2l0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS90cmFuc2l0aW9uL3RyYW5zaXRpb25TdGFydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvdHJhbnNpdGlvbi90cmFuc2l0aW9uRW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9zbGlkZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvc2xpZGUvc2xpZGVUby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvc2xpZGUvc2xpZGVUb0xvb3AuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL3NsaWRlL3NsaWRlTmV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvc2xpZGUvc2xpZGVQcmV2LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9zbGlkZS9zbGlkZVJlc2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9zbGlkZS9zbGlkZVRvQ2xvc2VzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvc2xpZGUvc2xpZGVUb0NsaWNrZWRTbGlkZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvbG9vcC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvbG9vcC9sb29wQ3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9sb29wL2xvb3BGaXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL2xvb3AvbG9vcERlc3Ryb3kuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL2dyYWItY3Vyc29yL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9ncmFiLWN1cnNvci9zZXRHcmFiQ3Vyc29yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9ncmFiLWN1cnNvci91bnNldEdyYWJDdXJzb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL21hbmlwdWxhdGlvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvbWFuaXB1bGF0aW9uL2FwcGVuZFNsaWRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9tYW5pcHVsYXRpb24vcHJlcGVuZFNsaWRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9tYW5pcHVsYXRpb24vYWRkU2xpZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL21hbmlwdWxhdGlvbi9yZW1vdmVTbGlkZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvbWFuaXB1bGF0aW9uL3JlbW92ZUFsbFNsaWRlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvZXZlbnRzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9ldmVudHMvb25Ub3VjaFN0YXJ0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9ldmVudHMvb25Ub3VjaE1vdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL2V2ZW50cy9vblRvdWNoRW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9ldmVudHMvb25SZXNpemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL2V2ZW50cy9vbkNsaWNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9ldmVudHMvb25TY3JvbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL2JyZWFrcG9pbnRzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9icmVha3BvaW50cy9zZXRCcmVha3BvaW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9icmVha3BvaW50cy9nZXRCcmVha3BvaW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9jbGFzc2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9jbGFzc2VzL2FkZENsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL2NsYXNzZXMvcmVtb3ZlQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvaW1hZ2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9pbWFnZXMvbG9hZEltYWdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9pbWFnZXMvcHJlbG9hZEltYWdlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvY2hlY2stb3ZlcmZsb3cvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL2RlZmF1bHRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvdmlydHVhbC92aXJ0dWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMva2V5Ym9hcmQva2V5Ym9hcmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9tb3VzZXdoZWVsL21vdXNld2hlZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9uYXZpZ2F0aW9uL25hdmlnYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9wYWdpbmF0aW9uL3BhZ2luYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9zY3JvbGxiYXIvc2Nyb2xsYmFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvcGFyYWxsYXgvcGFyYWxsYXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy96b29tL3pvb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9sYXp5L2xhenkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb250cm9sbGVyL2NvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9hMTF5L2ExMXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9oaXN0b3J5L2hpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9oYXNoLW5hdmlnYXRpb24vaGFzaC1uYXZpZ2F0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvYXV0b3BsYXkvYXV0b3BsYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9lZmZlY3QtZmFkZS9lZmZlY3QtZmFkZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2VmZmVjdC1jdWJlL2VmZmVjdC1jdWJlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvZWZmZWN0LWZsaXAvZWZmZWN0LWZsaXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9lZmZlY3QtY292ZXJmbG93L2VmZmVjdC1jb3ZlcmZsb3cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy90aHVtYnMvdGh1bWJzLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21tb24uYmxvY2tzL21vZGFsL21vZGFsLmxlc3M/YWU4NSIsIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uLmJsb2Nrcy9wYWdlLXNlY3Rpb24vcGFnZS1zZWN0aW9uLmxlc3M/ZmM5ZSIsIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uLmJsb2Nrcy9wcmljZS9wcmljZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbm91aXNsaWRlci9kaXN0L25vdWlzbGlkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL25vdWlzbGlkZXIvZGlzdC9ub3Vpc2xpZGVyLmNzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd251bWIvd051bWIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbW1vbi5ibG9ja3MvcHJpY2UvcHJpY2UubGVzcz8zZGZjIiwid2VicGFjazovLy8uL3NyYy9jb21tb24uYmxvY2tzL3JlY29tbWVuZGF0aW9ucy9yZWNvbW1lbmRhdGlvbnMubGVzcz84ZjhhIiwid2VicGFjazovLy8uL3NyYy9jb21tb24uYmxvY2tzL3NlY3Rpb24vc2VjdGlvbi5sZXNzP2ZkOTYiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbW1vbi5ibG9ja3Mvc2xpZGVyL3NsaWRlci5sZXNzPzgxZDkiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbW1vbi5ibG9ja3Mvc29jaWFsL3NvY2lhbC5sZXNzPzU0MTciLCJ3ZWJwYWNrOi8vLy4vc3JjL2Fzc2V0cy9zdmcvc3ZnLXNwcml0ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYXNzZXRzL3N2ZyBcXC5zdmckIiwid2VicGFjazovLy8uL3NyYy9hc3NldHMvc3ZnL211bHRpY29sb3IvaWNvbi1icm9rZW4tY2hhaW4uc3ZnIiwid2VicGFjazovLy8uL3NyYy9hc3NldHMvc3ZnL211bHRpY29sb3IvaWNvbi1icm9rZW4tcmluZy5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2Fzc2V0cy9zdmcvbXVsdGljb2xvci9pY29uLWNvaW5zLnN2ZyIsIndlYnBhY2s6Ly8vLi9zcmMvYXNzZXRzL3N2Zy9tdWx0aWNvbG9yL2ljb24tZ2lmdC5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2Fzc2V0cy9zdmcvbXVsdGljb2xvci9pY29uLWluY29tcGxldGUtZWFycmluZ3Muc3ZnIiwid2VicGFjazovLy8uL3NyYy9hc3NldHMvc3ZnL211bHRpY29sb3IvaWNvbi1uZXctamV3ZWxyeS5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2Fzc2V0cy9zdmcvbXVsdGljb2xvci9pY29uLW9sZC1jaGFpbi5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2Fzc2V0cy9zdmcvbXVsdGljb2xvci9pY29uLW9sZC1qZXdlbHJ5LnN2ZyIsIndlYnBhY2s6Ly8vLi9zcmMvYXNzZXRzL3N2Zy9tdWx0aWNvbG9yL2ljb24tb25saW5lYmVlcy5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2Fzc2V0cy9zdmcvbXVsdGljb2xvci9pY29uLXByZWNpb3VzLnN2ZyIsIndlYnBhY2s6Ly8vLi9zcmMvYXNzZXRzL3N2Zy9tdWx0aWNvbG9yL2ljb24tcmluZ3Muc3ZnIiwid2VicGFjazovLy8uL3NyYy9hc3NldHMvc3ZnL211bHRpY29sb3IvaWNvbi1yb2tldC5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2Fzc2V0cy9zdmcvbXVsdGljb2xvci9pY29uLXN0YXJ0LnN2ZyIsIndlYnBhY2s6Ly8vLi9zcmMvYXNzZXRzL3N2Zy9tdWx0aWNvbG9yL2ljb24tc3RvbWF0b2xvZ29jaGVza29lLXpvbG90by5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2Fzc2V0cy9zdmcvbXVsdGljb2xvci9pY29uLXdlZGRpbmcuc3ZnIiwid2VicGFjazovLy8uL3NyYy9hc3NldHMvc3ZnL211bHRpY29sb3IvaWNvbi13aXRob3V0LXNhbXBsZS5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2Fzc2V0cy9zdmcvbXVsdGljb2xvci9pY29uLXpvbG90aWUta29yb25raS5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2Fzc2V0cy9zdmcvbXVsdGljb2xvci9pY29uLXpvbG90by1wcm9iYS5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2Fzc2V0cy9zdmcvbXVsdGljb2xvci90ZWxlZ3JhbW0uc3ZnIiwid2VicGFjazovLy8uL3NyYy9hc3NldHMvc3ZnL211bHRpY29sb3Ivd2hhdHN1cC5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2Fzc2V0cy9zdmcvbXVsdGljb2xvci93aWJlci5zdmciXSwibmFtZXMiOlsiZGVsZXRlUHJvcHMiLCJvYmoiLCJvYmplY3QiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsImtleSIsImUiLCJuZXh0VGljayIsImNhbGxiYWNrIiwiZGVsYXkiLCJzZXRUaW1lb3V0Iiwibm93IiwiRGF0ZSIsImdldENvbXB1dGVkU3R5bGUiLCJlbCIsIndpbmRvdyIsInN0eWxlIiwiY3VycmVudFN0eWxlIiwiZ2V0VHJhbnNsYXRlIiwiYXhpcyIsIm1hdHJpeCIsImN1clRyYW5zZm9ybSIsInRyYW5zZm9ybU1hdHJpeCIsImN1clN0eWxlIiwiV2ViS2l0Q1NTTWF0cml4IiwidHJhbnNmb3JtIiwid2Via2l0VHJhbnNmb3JtIiwic3BsaXQiLCJsZW5ndGgiLCJtYXAiLCJhIiwicmVwbGFjZSIsImpvaW4iLCJNb3pUcmFuc2Zvcm0iLCJPVHJhbnNmb3JtIiwiTXNUcmFuc2Zvcm0iLCJtc1RyYW5zZm9ybSIsImdldFByb3BlcnR5VmFsdWUiLCJ0b1N0cmluZyIsIm00MSIsInBhcnNlRmxvYXQiLCJtNDIiLCJpc09iamVjdCIsIm8iLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsImNhbGwiLCJzbGljZSIsImV4dGVuZCIsInRvIiwiYXJndW1lbnRzIiwidW5kZWZpbmVkIiwibm9FeHRlbmQiLCJpIiwibmV4dFNvdXJjZSIsImtleXNBcnJheSIsImZpbHRlciIsImluZGV4T2YiLCJuZXh0SW5kZXgiLCJsZW4iLCJuZXh0S2V5IiwiZGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJfX3N3aXBlcl9fIiwiYmluZE1vZHVsZU1ldGhvZHMiLCJpbnN0YW5jZSIsInN1YktleSIsImJpbmQiLCJjbGFzc2VzVG9TZWxlY3RvciIsImNsYXNzZXMiLCJ0cmltIiwiY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZCIsIiRjb250YWluZXIiLCJwYXJhbXMiLCJjcmVhdGVFbGVtZW50cyIsImNoZWNrUHJvcHMiLCJkb2N1bWVudCIsImF1dG8iLCJlbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsImFwcGVuZCIsIk1ldGhvZHMiLCJhZGRDbGFzcyIsInJlbW92ZUNsYXNzIiwiaGFzQ2xhc3MiLCJ0b2dnbGVDbGFzcyIsImF0dHIiLCJyZW1vdmVBdHRyIiwidHJhbnNpdGlvbiIsIm9uIiwib2ZmIiwidHJpZ2dlciIsInRyYW5zaXRpb25FbmQiLCJvdXRlcldpZHRoIiwib3V0ZXJIZWlnaHQiLCJzdHlsZXMiLCJvZmZzZXQiLCJjc3MiLCJlYWNoIiwiaHRtbCIsInRleHQiLCJpcyIsImluZGV4IiwiZXEiLCJwcmVwZW5kIiwibmV4dCIsIm5leHRBbGwiLCJwcmV2IiwicHJldkFsbCIsInBhcmVudCIsInBhcmVudHMiLCJjbG9zZXN0IiwiZmluZCIsImNoaWxkcmVuIiwicmVtb3ZlIiwibWV0aG9kTmFtZSIsImRlZmluZVByb3BlcnR5IiwiJCIsImZuIiwidmFsdWUiLCJ3cml0YWJsZSIsInRhcmdldCIsInNyYyIsInNzckRvY3VtZW50IiwiYm9keSIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiYWN0aXZlRWxlbWVudCIsImJsdXIiLCJub2RlTmFtZSIsInF1ZXJ5U2VsZWN0b3IiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZ2V0RWxlbWVudEJ5SWQiLCJjcmVhdGVFdmVudCIsImluaXRFdmVudCIsImNoaWxkTm9kZXMiLCJzZXRBdHRyaWJ1dGUiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImNyZWF0ZUVsZW1lbnROUyIsImltcG9ydE5vZGUiLCJsb2NhdGlvbiIsImhhc2giLCJob3N0IiwiaG9zdG5hbWUiLCJocmVmIiwib3JpZ2luIiwicGF0aG5hbWUiLCJwcm90b2NvbCIsInNlYXJjaCIsImdldERvY3VtZW50IiwiZG9jIiwic3NyV2luZG93IiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiaGlzdG9yeSIsInJlcGxhY2VTdGF0ZSIsInB1c2hTdGF0ZSIsImdvIiwiYmFjayIsIkN1c3RvbUV2ZW50IiwiSW1hZ2UiLCJzY3JlZW4iLCJjbGVhclRpbWVvdXQiLCJtYXRjaE1lZGlhIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJpZCIsImdldFdpbmRvdyIsIndpbiIsImdsb2JhbCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmaW5lIiwiQnJvd3NlclNwcml0ZVN5bWJvbCIsIlNwcml0ZVN5bWJvbCIsInJlZiIsInZpZXdCb3giLCJjb250ZW50Iiwic3RyaW5naWZ5IiwiZGVzdHJveSIsInRoaXMkMSIsInByb3AiLCJwYXJzZSIsImhhc0ltcG9ydE5vZGUiLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJkb2N1bWVudEVsZW1lbnQiLCJjb21tb25qc0dsb2JhbCIsInNlbGYiLCJjcmVhdGVDb21tb25qc01vZHVsZSIsImRlZXBtZXJnZSIsInJvb3QiLCJpc01lcmdlYWJsZU9iamVjdCIsInZhbCIsIm5vbk51bGxPYmplY3QiLCJlbXB0eVRhcmdldCIsIkFycmF5IiwiaXNBcnJheSIsImNsb25lSWZOZWNlc3NhcnkiLCJvcHRpb25zQXJndW1lbnQiLCJjbG9uZSIsImRlZmF1bHRBcnJheU1lcmdlIiwic291cmNlIiwiZGVzdGluYXRpb24iLCJwdXNoIiwibWVyZ2VPYmplY3QiLCJhcnJheSIsIm9wdGlvbnMiLCJhcnJheU1lcmdlIiwiYWxsIiwiZGVlcG1lcmdlQWxsIiwiRXJyb3IiLCJyZWR1Y2UiLCJuYW1lc3BhY2VzXzEiLCJuYW1lc3BhY2VzIiwic3ZnIiwibmFtZSIsInVyaSIsInhsaW5rIiwiZGVmYXVsdCIsIm9iamVjdFRvQXR0cnNTdHJpbmciLCJhdHRycyIsImRlZmF1bHRBdHRycyIsIndyYXBJblN2Z1N0cmluZyIsImF0dHJpYnV0ZXMiLCJhdHRyc1JlbmRlcmVkIiwiU3ByaXRlU3ltYm9sJCQxIiwiYXBwbHkiLCJfX3Byb3RvX18iLCJjcmVhdGUiLCJwcm90b3R5cGVBY2Nlc3NvcnMiLCJpc01vdW50ZWQiLCJnZXQiLCJub2RlIiwiY3JlYXRlRnJvbUV4aXN0aW5nTm9kZSIsImdldEF0dHJpYnV0ZSIsIm91dGVySFRNTCIsInVubW91bnQiLCJtb3VudCIsIm1vdW50VGFyZ2V0IiwicmVuZGVyIiwiYXBwZW5kQ2hpbGQiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiQnJvd3NlclNwcml0ZSIsIm1pdHQiLCJ0eXBlIiwiaGFuZGxlciIsInNwbGljZSIsImVtaXQiLCJldnQiLCJzdmckMSIsInhsaW5rJDEiLCJkZWZhdWx0Q29uZmlnIiwiU3ByaXRlIiwiY29uZmlnIiwic3ltYm9scyIsImFkZCIsInN5bWJvbCIsImV4aXN0aW5nIiwicyIsImhhcyIsInN0cmluZ2lmaWVkU3ltYm9scyIsImRlZmF1bHRDb25maWckMSIsImF1dG9Db25maWd1cmUiLCJtb3VudFRvIiwic3luY1VybHNXaXRoQmFzZVRhZyIsImxpc3RlbkxvY2F0aW9uQ2hhbmdlRXZlbnQiLCJsb2NhdGlvbkNoYW5nZUV2ZW50IiwibG9jYXRpb25DaGFuZ2VBbmd1bGFyRW1pdHRlciIsInVzYWdlc1RvVXBkYXRlIiwibW92ZUdyYWRpZW50c091dHNpZGVTeW1ib2wiLCJhcnJheUZyb20iLCJhcnJheUxpa2UiLCJ1YSIsImJyb3dzZXIiLCJpc0Nocm9tZSIsInRlc3QiLCJpc0ZpcmVmb3giLCJpc0lFIiwiaXNFZGdlIiwiZGlzcGF0Y2hFdmVudCIsImRhdGEiLCJldmVudCIsImluaXRDdXN0b21FdmVudCIsImV2YWxTdHlsZXNJRVdvcmthcm91bmQiLCJ1cGRhdGVkTm9kZXMiLCJ0ZXh0Q29udGVudCIsImdldFVybFdpdGhvdXRGcmFnbWVudCIsInVybCIsImV2ZW50TmFtZSIsImFuZ3VsYXIiLCJydW4iLCIkcm9vdFNjb3BlIiwiJG9uIiwibmV3VXJsIiwib2xkVXJsIiwiZGVmYXVsdFNlbGVjdG9yIiwic2VsZWN0b3IiLCJpbnNlcnRCZWZvcmUiLCJzZWxlY3RBdHRyaWJ1dGVzIiwibm9kZXMiLCJtYXRjaGVyIiwiYWNjIiwiYXJyYXlmaWVkIiwibWF0Y2hlZCIsImNvbmNhdCIsInhMaW5rTlMiLCJ4TGlua0F0dHJOYW1lIiwic3BlY2lhbFVybENoYXJzUGF0dGVybiIsImVuY29kZXIiLCJtYXRjaCIsImNoYXJDb2RlQXQiLCJ0b1VwcGVyQ2FzZSIsInVwZGF0ZVJlZmVyZW5jZXMiLCJzdGFydHNXaXRoIiwicmVwbGFjZVdpdGgiLCJzZXRBdHRyaWJ1dGVOUyIsImF0dExpc3QiLCJhdHRTZWxlY3RvciIsInVwZGF0ZVVybHMiLCJyZWZlcmVuY2VzIiwic3RhcnRzV2l0aEVuY29kZWQiLCJyZXBsYWNlV2l0aEVuY29kZWQiLCJsb2NhbE5hbWUiLCJFdmVudHMiLCJNT1VOVCIsIlNZTUJPTF9NT1VOVCIsIlNwcml0ZSQkMSIsImNmZyIsImVtaXR0ZXIiLCJfZW1pdHRlciIsIl9hdXRvQ29uZmlndXJlIiwiYmFzZVVybCIsImhhbmRsZUxvY2F0aW9uQ2hhbmdlIiwiX2hhbmRsZUxvY2F0aW9uQ2hhbmdlIiwic3ByaXRlTm9kZSIsInN5bWJvbE5vZGUiLCJkZXRhaWwiLCJzcHJpdGUiLCJpc05ld1N5bWJvbCIsImF0dGFjaCIsIm1vdW50Tm9kZSIsInVwZGF0ZVVybHMkMSIsInVzYWdlcyIsInJlYWR5JDEiLCJkZWZpbml0aW9uIiwiZm5zIiwibGlzdGVuZXIiLCJoYWNrIiwiZG9TY3JvbGwiLCJkb21Db250ZW50TG9hZGVkIiwibG9hZGVkIiwicmVhZHlTdGF0ZSIsInNoaWZ0Iiwic3ByaXRlTm9kZUlkIiwic3ByaXRlR2xvYmFsVmFyTmFtZSIsImlzU3ByaXRlRXhpc3RzIiwibG9hZFNwcml0ZSIsInNwcml0ZSQxIiwicmVxdWlyZUFsbCIsInIiLCJyZXF1aXJlIiwiY2FyZFNsaWRlciIsIlN3aXBlciIsIndyYXBwZXJDbGFzcyIsInNsaWRlQ2xhc3MiLCJkaXJlY3Rpb24iLCJzbGlkZXNQZXJWaWV3Iiwic3VwcG9ydCIsImNhbGNTdXBwb3J0IiwidG91Y2giLCJEb2N1bWVudFRvdWNoIiwicG9pbnRlckV2ZW50cyIsIlBvaW50ZXJFdmVudCIsIm1heFRvdWNoUG9pbnRzIiwib2JzZXJ2ZXIiLCJjaGVja09ic2VydmVyIiwicGFzc2l2ZUxpc3RlbmVyIiwiY2hlY2tQYXNzaXZlTGlzdGVuZXIiLCJzdXBwb3J0c1Bhc3NpdmUiLCJvcHRzIiwiZ2VzdHVyZXMiLCJjaGVja0dlc3R1cmVzIiwiZ2V0U3VwcG9ydCIsImciLCJGdW5jdGlvbiIsImV2YWwiLCJhY2NvcmRpb25JdGVtcyIsImFjY29yZGlvblRyaWdnZXJzIiwib25BY2NvcmRpb25UcmlnZ2VyIiwiY3VycmVudEFjY29yZGlvblRyaWdnZXIiLCJjdXJyZW50QWNjb3JkaW9uSXRlbSIsImN1cnJlbnRBY2NvcmRpb25Db250ZW50IiwibmV4dEVsZW1lbnRTaWJsaW5nIiwiZGF0YXNldCIsIm9wZW4iLCJjbGFzc0xpc3QiLCJtYXhIZWlnaHQiLCJzY3JvbGxIZWlnaHQiLCJhY2NvcmRpb25zSW5pdCIsIml0ZW0iLCJpbnB1dHMiLCJpbnB1dCIsImZvb3Rlck5hdkxpbmtzIiwibGluayIsImNvbnRhaW5zIiwicHJldmVudERlZmF1bHQiLCJwYXJlbnRFbGVtZW50IiwidG9nZ2xlIiwidmlkZW8iLCJwbGF5YmFja1JhdGUiLCJERVNUT1BfX1dJRFRIIiwibWFwRGF0YSIsImNoYXJvaXRNYXBzIiwibWFwRGF0YUl0ZW0iLCJjaGFyb2l0RGF0YSIsInNsaWRlckNhcmRzIiwibWFya2VyQ29vcnRkcyIsImN1cnJlbnRQaW5EYXRhIiwi0YFvb3JkaW5hdGVzIiwiTnVtYmVyIiwieCIsInkiLCJvcGVuaW5nIiwicGhvbmUiLCJsb2FkTWFwcyIsInltYXBzIiwibG9hZCIsInRoZW4iLCJtYXBzIiwiY2hhcm9pdE1hcCIsImN1cnJlbnRNYXAiLCJNYXAiLCJjZW50ZXIiLCJ6b29tIiwiYmVoYXZpb3JzIiwiZW5hYmxlIiwiaW5uZXJXaWR0aCIsImRpc2FibGUiLCJ6b29tQ29udHJvbE9iaiIsImNvbnRyb2xzIiwic2V0IiwibGVmdCIsInRvcCIsIm1hcmtlcnNDb2xsZWN0aW9uIiwiR2VvT2JqZWN0Q29sbGVjdGlvbiIsInBpbiIsImJhbGxvb25Db250ZW50SGVhZGVyIiwiYmFsbG9vbkNvbnRlbnRCb2R5IiwiYmFsbG9vbkNvbnRlbnRGb290ZXIiLCJoaW50Q29udGVudCIsIlBsYWNlbWFyayIsImdlb09iamVjdHMiLCJjdXJyZW50SXRlbSIsImNvb3JkcyIsInBhblRvIiwiZmx5aW5nIiwiYmFsbG9vbiIsImVycm9yIiwiY29uc29sZSIsIkVTQ19LRVlDT0RFIiwibWVudU9wZW4iLCJtZW51Q2xvc2UiLCJtZW51IiwibWVudUJvZHkiLCJvbkVzY1ByZXNzIiwia2V5Q29kZSIsImhpZGVNZW51Iiwic2Nyb2xsVG9wIiwic2hvd01lbnUiLCJNaWNyb01vZGFsIiwiaW5pdCIsIm9wZW5UcmlnZ2VyIiwiY2xvc2VUcmlnZ2VyIiwiZGlzYWJsZUZvY3VzIiwiZGlzYWJsZVNjcm9sbCIsImF3YWl0T3BlbkFuaW1hdGlvbiIsImF3YWl0Q2xvc2VBbmltYXRpb24iLCJvblNob3ciLCJtb2RhbCIsInVwZGF0ZSIsIl9jbGFzc0NhbGxDaGVjayIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiX2RlZmluZVByb3BlcnRpZXMiLCJwcm9wcyIsImRlc2NyaXB0b3IiLCJjb25maWd1cmFibGUiLCJfY3JlYXRlQ2xhc3MiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJhcnIiLCJfYXJyYXlXaXRob3V0SG9sZXMiLCJfaXRlcmFibGVUb0FycmF5IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiX25vbkl0ZXJhYmxlU3ByZWFkIiwiX2FycmF5TGlrZVRvQXJyYXkiLCJpdGVyIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJmcm9tIiwibWluTGVuIiwibiIsImFycjIiLCJGT0NVU0FCTEVfRUxFTUVOVFMiLCJNb2RhbCIsIl9yZWYiLCJ0YXJnZXRNb2RhbCIsIl9yZWYkdHJpZ2dlcnMiLCJ0cmlnZ2VycyIsIl9yZWYkb25TaG93IiwiX3JlZiRvbkNsb3NlIiwib25DbG9zZSIsIl9yZWYkb3BlblRyaWdnZXIiLCJfcmVmJGNsb3NlVHJpZ2dlciIsIl9yZWYkb3BlbkNsYXNzIiwib3BlbkNsYXNzIiwiX3JlZiRkaXNhYmxlU2Nyb2xsIiwiX3JlZiRkaXNhYmxlRm9jdXMiLCJfcmVmJGF3YWl0Q2xvc2VBbmltYXQiLCJfcmVmJGF3YWl0T3BlbkFuaW1hdGkiLCJfcmVmJGRlYnVnTW9kZSIsImRlYnVnTW9kZSIsInJlZ2lzdGVyVHJpZ2dlcnMiLCJvbkNsaWNrIiwib25LZXlkb3duIiwiX3RoaXMiLCJfbGVuIiwiX2tleSIsIkJvb2xlYW4iLCJzaG93TW9kYWwiLCJfdGhpczIiLCJzY3JvbGxCZWhhdmlvdXIiLCJhZGRFdmVudExpc3RlbmVycyIsInNldEZvY3VzVG9GaXJzdE5vZGUiLCJjbG9zZU1vZGFsIiwicmVtb3ZlRXZlbnRMaXN0ZW5lcnMiLCJmb2N1cyIsImNsb3NlTW9kYWxCeUlkIiwiYXNzaWduIiwib3ZlcmZsb3ciLCJoYXNBdHRyaWJ1dGUiLCJyZXRhaW5Gb2N1cyIsImdldEZvY3VzYWJsZU5vZGVzIiwiX3RoaXMzIiwiZm9jdXNhYmxlTm9kZXMiLCJub2Rlc1doaWNoQXJlTm90Q2xvc2VUYXJnZXRzIiwib2Zmc2V0UGFyZW50IiwiZm9jdXNlZEl0ZW1JbmRleCIsInNoaWZ0S2V5IiwiYWN0aXZlTW9kYWwiLCJnZW5lcmF0ZVRyaWdnZXJNYXAiLCJ0cmlnZ2VyQXR0ciIsInRyaWdnZXJNYXAiLCJ2YWxpZGF0ZU1vZGFsUHJlc2VuY2UiLCJ3YXJuIiwidmFsaWRhdGVUcmlnZ2VyUHJlc2VuY2UiLCJ2YWxpZGF0ZUFyZ3MiLCJzaG93IiwiY2xvc2UiLCJwcm90b3R5cGVzIiwibW9kdWxhciIsImV2ZW50c0VtaXR0ZXIiLCJ0cmFuc2xhdGUiLCJzbGlkZSIsImxvb3AiLCJncmFiQ3Vyc29yIiwibWFuaXB1bGF0aW9uIiwiZXZlbnRzIiwiYnJlYWtwb2ludHMiLCJjaGVja092ZXJmbG93IiwiaW1hZ2VzIiwiZXh0ZW5kZWREZWZhdWx0cyIsImFyZ3MiLCJzd2lwZXJzIiwiY29udGFpbmVyRWwiLCJuZXdQYXJhbXMiLCJzd2lwZXIiLCJkZXZpY2UiLCJldmVudHNMaXN0ZW5lcnMiLCJldmVudHNBbnlMaXN0ZW5lcnMiLCJtb2R1bGVzIiwibW9kdWxlTmFtZSIsIm1vZHVsZVBhcmFtTmFtZSIsIm1vZHVsZVBhcmFtcyIsImVuYWJsZWQiLCJzd2lwZXJQYXJhbXMiLCJkZWZhdWx0cyIsInVzZVBhcmFtcyIsIm9yaWdpbmFsUGFyYW1zIiwicGFzc2VkUGFyYW1zIiwib25BbnkiLCJjbGFzc05hbWVzIiwic2xpZGVzIiwic2xpZGVzR3JpZCIsInNuYXBHcmlkIiwic2xpZGVzU2l6ZXNHcmlkIiwiaXNIb3Jpem9udGFsIiwiaXNWZXJ0aWNhbCIsImFjdGl2ZUluZGV4IiwicmVhbEluZGV4IiwiaXNCZWdpbm5pbmciLCJpc0VuZCIsInByZXZpb3VzVHJhbnNsYXRlIiwicHJvZ3Jlc3MiLCJ2ZWxvY2l0eSIsImFuaW1hdGluZyIsImFsbG93U2xpZGVOZXh0IiwiYWxsb3dTbGlkZVByZXYiLCJ0b3VjaEV2ZW50cyIsImRlc2t0b3AiLCJ0b3VjaEV2ZW50c1RvdWNoIiwic3RhcnQiLCJtb3ZlIiwiZW5kIiwiY2FuY2VsIiwidG91Y2hFdmVudHNEZXNrdG9wIiwic2ltdWxhdGVUb3VjaCIsInRvdWNoRXZlbnRzRGF0YSIsImlzVG91Y2hlZCIsImlzTW92ZWQiLCJhbGxvd1RvdWNoQ2FsbGJhY2tzIiwidG91Y2hTdGFydFRpbWUiLCJpc1Njcm9sbGluZyIsImN1cnJlbnRUcmFuc2xhdGUiLCJzdGFydFRyYW5zbGF0ZSIsImFsbG93VGhyZXNob2xkTW92ZSIsImZvcm1FbGVtZW50cyIsImxhc3RDbGlja1RpbWUiLCJjbGlja1RpbWVvdXQiLCJ2ZWxvY2l0aWVzIiwiYWxsb3dNb21lbnR1bUJvdW5jZSIsImlzVG91Y2hFdmVudCIsInN0YXJ0TW92aW5nIiwiYWxsb3dDbGljayIsImFsbG93VG91Y2hNb3ZlIiwidG91Y2hlcyIsInN0YXJ0WCIsInN0YXJ0WSIsImN1cnJlbnRYIiwiY3VycmVudFkiLCJkaWZmIiwiaW1hZ2VzVG9Mb2FkIiwiaW1hZ2VzTG9hZGVkIiwidXNlTW9kdWxlcyIsIl9wcm90byIsInNldEdyYWJDdXJzb3IiLCJ1bnNldEdyYWJDdXJzb3IiLCJzZXRQcm9ncmVzcyIsInNwZWVkIiwiTWF0aCIsIm1pbiIsIm1heCIsIm1pblRyYW5zbGF0ZSIsIm1heFRyYW5zbGF0ZSIsImN1cnJlbnQiLCJ0cmFuc2xhdGVUbyIsInVwZGF0ZUFjdGl2ZUluZGV4IiwidXBkYXRlU2xpZGVzQ2xhc3NlcyIsImVtaXRDb250YWluZXJDbGFzc2VzIiwiX2VtaXRDbGFzc2VzIiwiY29udGFpbmVyTW9kaWZpZXJDbGFzcyIsImdldFNsaWRlQ2xhc3NlcyIsInNsaWRlRWwiLCJlbWl0U2xpZGVzQ2xhc3NlcyIsInVwZGF0ZXMiLCJzbGlkZXNQZXJWaWV3RHluYW1pYyIsInN3aXBlclNpemUiLCJzaXplIiwic3B2IiwiY2VudGVyZWRTbGlkZXMiLCJzbGlkZVNpemUiLCJzd2lwZXJTbGlkZVNpemUiLCJicmVha0xvb3AiLCJfaSIsIl9pMiIsImRlc3Ryb3llZCIsInNldEJyZWFrcG9pbnQiLCJ1cGRhdGVTaXplIiwidXBkYXRlU2xpZGVzIiwidXBkYXRlUHJvZ3Jlc3MiLCJzZXRUcmFuc2xhdGUiLCJ0cmFuc2xhdGVWYWx1ZSIsInJ0bFRyYW5zbGF0ZSIsIm5ld1RyYW5zbGF0ZSIsInRyYW5zbGF0ZWQiLCJmcmVlTW9kZSIsImF1dG9IZWlnaHQiLCJ1cGRhdGVBdXRvSGVpZ2h0Iiwic2xpZGVUbyIsIndhdGNoT3ZlcmZsb3ciLCJjaGFuZ2VEaXJlY3Rpb24iLCJuZXdEaXJlY3Rpb24iLCJuZWVkVXBkYXRlIiwiY3VycmVudERpcmVjdGlvbiIsIiRlbCIsIndpZHRoIiwiaGVpZ2h0IiwibW91bnRlZCIsImdldFdyYXBwZXIiLCJzaGFkb3dSb290IiwicmVzIiwiJHdyYXBwZXJFbCIsIndyYXBwZXIiLCJ3cmFwcGVyRWwiLCJydGwiLCJkaXIiLCJ0b0xvd2VyQ2FzZSIsIndyb25nUlRMIiwiaW5pdGlhbGl6ZWQiLCJhZGRDbGFzc2VzIiwibG9vcENyZWF0ZSIsInByZWxvYWRJbWFnZXMiLCJpbml0aWFsU2xpZGUiLCJsb29wZWRTbGlkZXMiLCJydW5DYWxsYmFja3NPbkluaXQiLCJhdHRhY2hFdmVudHMiLCJkZWxldGVJbnN0YW5jZSIsImNsZWFuU3R5bGVzIiwiZGV0YWNoRXZlbnRzIiwibG9vcERlc3Ryb3kiLCJyZW1vdmVDbGFzc2VzIiwic2xpZGVWaXNpYmxlQ2xhc3MiLCJzbGlkZUFjdGl2ZUNsYXNzIiwic2xpZGVOZXh0Q2xhc3MiLCJzbGlkZVByZXZDbGFzcyIsImV4dGVuZERlZmF1bHRzIiwibmV3RGVmYXVsdHMiLCJpbnN0YWxsTW9kdWxlIiwidXNlIiwibSIsInByb3RvdHlwZUdyb3VwIiwicHJvdG9NZXRob2QiLCJSZXNpemUiLCJPYnNlcnZlciIsIl9pbmhlcml0c0xvb3NlIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiX2dldFByb3RvdHlwZU9mIiwic2V0UHJvdG90eXBlT2YiLCJnZXRQcm90b3R5cGVPZiIsIl9zZXRQcm90b3R5cGVPZiIsInAiLCJfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsInNoYW0iLCJQcm94eSIsIl9jb25zdHJ1Y3QiLCJQYXJlbnQiLCJDbGFzcyIsIl9pc05hdGl2ZUZ1bmN0aW9uIiwiX3dyYXBOYXRpdmVTdXBlciIsIl9jYWNoZSIsIldyYXBwZXIiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwiUmVmZXJlbmNlRXJyb3IiLCJtYWtlUmVhY3RpdmUiLCJwcm90byIsIkRvbTciLCJfQXJyYXkiLCJpdGVtcyIsImFycmF5RmxhdCIsImFycmF5RmlsdGVyIiwiYXJyYXlVbmlxdWUiLCJ1bmlxdWVBcnJheSIsInRvQ2FtZWxDYXNlIiwic3RyaW5nIiwiZ3JvdXAiLCJxc2EiLCJjb250ZXh0IiwidG9DcmVhdGUiLCJ0ZW1wUGFyZW50IiwiaW5uZXJIVE1MIiwibm9kZVR5cGUiLCJjIiwiX2VsJGNsYXNzTGlzdCIsIl9sZW4yIiwiX2tleTIiLCJfZWwkY2xhc3NMaXN0MiIsIl9sZW4zIiwiX2tleTMiLCJfbGVuNCIsIl9rZXk0IiwiYXR0ck5hbWUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJwcm9wTmFtZSIsImRvbTdFbGVtZW50RGF0YVN0b3JhZ2UiLCJkYXRhS2V5IiwicmVtb3ZlRGF0YSIsIl9hdHRyIiwibXVsdGlwbGUiLCJ2YWx1ZXMiLCJzZWxlY3RlZE9wdGlvbnMiLCJfZWwiLCJqIiwic2VsZWN0ZWQiLCJkdXJhdGlvbiIsInRyYW5zaXRpb25EdXJhdGlvbiIsIl9sZW41IiwiX2tleTUiLCJldmVudFR5cGUiLCJ0YXJnZXRTZWxlY3RvciIsImNhcHR1cmUiLCJoYW5kbGVMaXZlRXZlbnQiLCJldmVudERhdGEiLCJkb203RXZlbnREYXRhIiwidW5zaGlmdCIsIl9wYXJlbnRzIiwiayIsImhhbmRsZUV2ZW50IiwiZG9tN0xpc3RlbmVycyIsInByb3h5TGlzdGVuZXIiLCJfZXZlbnQiLCJkb203TGl2ZUxpc3RlbmVycyIsIl9sZW42IiwiX2tleTYiLCJoYW5kbGVycyIsImRvbTdwcm94eSIsIm9uY2UiLCJkb20iLCJfbGVuNyIsIl9rZXk3Iiwib25jZUhhbmRsZXIiLCJfbGVuOCIsImV2ZW50QXJncyIsIl9rZXk4IiwiX2xlbjkiLCJfa2V5OSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiZGF0YUluZGV4IiwiZmlyZUNhbGxCYWNrIiwiYW5pbWF0aW9uRW5kIiwiaW5jbHVkZU1hcmdpbnMiLCJfc3R5bGVzIiwib2Zmc2V0V2lkdGgiLCJpbm5lckhlaWdodCIsIl9zdHlsZXMyIiwib2Zmc2V0SGVpZ2h0IiwiYm94IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiY2xpZW50VG9wIiwiY2xpZW50TGVmdCIsInNjcm9sbFkiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsWCIsImhpZGUiLCJkaXNwbGF5IiwiX3Byb3AiLCJyZXN1bHQiLCJjb21wYXJlV2l0aCIsIm1hdGNoZXMiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsImNoaWxkIiwicHJldmlvdXNTaWJsaW5nIiwicmV0dXJuSW5kZXgiLCJuZXdDaGlsZCIsInRlbXBEaXYiLCJmaXJzdENoaWxkIiwiYXBwZW5kVG8iLCJwcmVwZW5kVG8iLCJiZWZvcmUiLCJjbG9uZU5vZGUiLCJpbnNlcnRBZnRlciIsImFmdGVyIiwibmV4dFNpYmxpbmciLCJuZXh0RWxzIiwiX25leHQiLCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwicHJldkVscyIsIl9wcmV2Iiwic2libGluZ3MiLCJfcGFyZW50IiwiZm91bmRFbGVtZW50cyIsImZvdW5kIiwiZGV0YWNoIiwiX2xlbjEwIiwiZWxzIiwiX2tleTEwIiwidG9BZGQiLCJlbXB0eSIsInNjcm9sbFRvIiwiZWFzaW5nIiwiYW5pbWF0ZSIsImN1cnJlbnRUb3AiLCJjdXJyZW50TGVmdCIsIm1heFRvcCIsIm1heExlZnQiLCJuZXdUb3AiLCJuZXdMZWZ0IiwiYW5pbWF0ZVRvcCIsImFuaW1hdGVMZWZ0Iiwic2Nyb2xsV2lkdGgiLCJzdGFydFRpbWUiLCJ0aW1lIiwiZ2V0VGltZSIsImVhc2VQcm9ncmVzcyIsImNvcyIsIlBJIiwiZG9uZSIsImluaXRpYWxQcm9wcyIsImluaXRpYWxQYXJhbXMiLCJlbGVtZW50cyIsInF1ZSIsImVhc2luZ1Byb2dyZXNzIiwic3RvcCIsImZyYW1lSWQiLCJkb203QW5pbWF0ZUluc3RhbmNlIiwiY29tcGxldGUiLCJpbml0aWFsRnVsbFZhbHVlIiwiaW5pdGlhbFZhbHVlIiwidW5pdCIsImZpbmFsVmFsdWUiLCJmaW5hbEZ1bGxWYWx1ZSIsImNvbnRhaW5lciIsImN1cnJlbnRWYWx1ZSIsImVsZW1lbnRzRG9uZSIsInByb3BzRG9uZSIsImJlZ2FuIiwiYmVnaW4iLCJfZWwkcHJvcCIsImFuaW1hdGVJbnN0YW5jZSIsIm5vVHJpZ2dlciIsInNob3J0Y3V0IiwiZXZlbnRIYW5kbGVyIiwiY2xpY2siLCJmb2N1c2luIiwiZm9jdXNvdXQiLCJrZXl1cCIsImtleWRvd24iLCJrZXlwcmVzcyIsInN1Ym1pdCIsImNoYW5nZSIsIm1vdXNlZG93biIsIm1vdXNlbW92ZSIsIm1vdXNldXAiLCJtb3VzZWVudGVyIiwibW91c2VsZWF2ZSIsIm1vdXNlb3V0IiwibW91c2VvdmVyIiwidG91Y2hzdGFydCIsInRvdWNoZW5kIiwidG91Y2htb3ZlIiwicmVzaXplIiwic2Nyb2xsIiwiY2FsY0RldmljZSIsIl90ZW1wIiwicGxhdGZvcm0iLCJpb3MiLCJhbmRyb2lkIiwic2NyZWVuV2lkdGgiLCJzY3JlZW5IZWlnaHQiLCJpcGFkIiwiaXBvZCIsImlwaG9uZSIsIndpbmRvd3MiLCJtYWNvcyIsImlQYWRTY3JlZW5zIiwib3MiLCJnZXREZXZpY2UiLCJvdmVycmlkZXMiLCJjYWxjQnJvd3NlciIsImlzU2FmYXJpIiwiaXNXZWJWaWV3IiwiZ2V0QnJvd3NlciIsInN1cHBvcnRzUmVzaXplT2JzZXJ2ZXIiLCJSZXNpemVPYnNlcnZlciIsImNyZWF0ZU9ic2VydmVyIiwiZW50cmllcyIsIm5ld1dpZHRoIiwibmV3SGVpZ2h0IiwiY29udGVudEJveFNpemUiLCJjb250ZW50UmVjdCIsImlubGluZVNpemUiLCJibG9ja1NpemUiLCJyZXNpemVIYW5kbGVyIiwib2JzZXJ2ZSIsInJlbW92ZU9ic2VydmVyIiwidW5vYnNlcnZlIiwib3JpZW50YXRpb25DaGFuZ2VIYW5kbGVyIiwicmVzaXplT2JzZXJ2ZXIiLCJfZXh0ZW5kcyIsImhhc093blByb3BlcnR5IiwiT2JzZXJ2ZXJGdW5jIiwiTXV0YXRpb25PYnNlcnZlciIsIldlYmtpdE11dGF0aW9uT2JzZXJ2ZXIiLCJtdXRhdGlvbnMiLCJvYnNlcnZlclVwZGF0ZSIsImNoaWxkTGlzdCIsImNoYXJhY3RlckRhdGEiLCJvYnNlcnZlcnMiLCJvYnNlcnZlUGFyZW50cyIsImNvbnRhaW5lclBhcmVudHMiLCJvYnNlcnZlU2xpZGVDaGlsZHJlbiIsImRpc2Nvbm5lY3QiLCJpbnN0YW5jZVBhcmFtcyIsIm1vZHVsZXNQYXJhbXMiLCJtb2R1bGVFdmVudE5hbWUiLCJwcmlvcml0eSIsIm1ldGhvZCIsIl9fZW1pdHRlclByb3h5Iiwib2ZmQW55IiwiZXZlbnRzQXJyYXkiLCJ1cGRhdGVTbGlkZXNPZmZzZXQiLCJ1cGRhdGVTbGlkZXNQcm9ncmVzcyIsInVwZGF0ZUNsaWNrZWRTbGlkZSIsImNsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0IiwicGFyc2VJbnQiLCJpc05hTiIsImdldERpcmVjdGlvbkxhYmVsIiwicHJvcGVydHkiLCJnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlIiwibGFiZWwiLCJpc1ZpcnR1YWwiLCJ2aXJ0dWFsIiwicHJldmlvdXNTbGlkZXNMZW5ndGgiLCJzbGlkZXNMZW5ndGgiLCJvZmZzZXRCZWZvcmUiLCJzbGlkZXNPZmZzZXRCZWZvcmUiLCJvZmZzZXRBZnRlciIsInNsaWRlc09mZnNldEFmdGVyIiwicHJldmlvdXNTbmFwR3JpZExlbmd0aCIsInByZXZpb3VzU2xpZGVzR3JpZExlbmd0aCIsInNwYWNlQmV0d2VlbiIsInNsaWRlUG9zaXRpb24iLCJwcmV2U2xpZGVTaXplIiwidmlydHVhbFNpemUiLCJtYXJnaW5MZWZ0IiwibWFyZ2luVG9wIiwibWFyZ2luUmlnaHQiLCJtYXJnaW5Cb3R0b20iLCJzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzIiwic2xpZGVzUGVyQ29sdW1uIiwiZmxvb3IiLCJjZWlsIiwic2xpZGVzUGVyQ29sdW1uRmlsbCIsInNsaWRlc1BlclJvdyIsIm51bUZ1bGxDb2x1bW5zIiwibmV3U2xpZGVPcmRlckluZGV4IiwiY29sdW1uIiwicm93Iiwic2xpZGVzUGVyR3JvdXAiLCJncm91cEluZGV4Iiwic2xpZGVJbmRleEluR3JvdXAiLCJjb2x1bW5zSW5Hcm91cCIsIm9yZGVyIiwic2xpZGVTdHlsZXMiLCJjdXJyZW50VHJhbnNmb3JtIiwiY3VycmVudFdlYktpdFRyYW5zZm9ybSIsInJvdW5kTGVuZ3RocyIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwiYm94U2l6aW5nIiwiX3NsaWRlJCIsImFicyIsInNsaWRlc1Blckdyb3VwU2tpcCIsIm5ld1NsaWRlc0dyaWQiLCJlZmZlY3QiLCJzZXRXcmFwcGVyU2l6ZSIsIl8kd3JhcHBlckVsJGNzcyIsIl8kd3JhcHBlckVsJGNzczIiLCJzbGlkZXNHcmlkSXRlbSIsIl9zbGlkZXNHcmlkSXRlbSIsIl9zbGlkZXMkZmlsdGVyJGNzcyIsIl8iLCJzbGlkZUluZGV4IiwiY3NzTW9kZSIsImNlbnRlcmVkU2xpZGVzQm91bmRzIiwiYWxsU2xpZGVzU2l6ZSIsInNsaWRlU2l6ZVZhbHVlIiwibWF4U25hcCIsInNuYXAiLCJjZW50ZXJJbnN1ZmZpY2llbnRTbGlkZXMiLCJfYWxsU2xpZGVzU2l6ZSIsImFsbFNsaWRlc09mZnNldCIsInNuYXBJbmRleCIsIndhdGNoU2xpZGVzUHJvZ3Jlc3MiLCJ3YXRjaFNsaWRlc1Zpc2liaWxpdHkiLCJhY3RpdmVTbGlkZXMiLCJzZXRUcmFuc2l0aW9uIiwiZ2V0U2xpZGVCeUluZGV4IiwidmlzaWJsZVNsaWRlcyIsInN3aXBlclNsaWRlT2Zmc2V0Iiwib2Zmc2V0TGVmdCIsIm9mZnNldFRvcCIsIm9mZnNldENlbnRlciIsInZpc2libGVTbGlkZXNJbmRleGVzIiwic2xpZGVQcm9ncmVzcyIsInNsaWRlQmVmb3JlIiwic2xpZGVBZnRlciIsImlzVmlzaWJsZSIsIm11bHRpcGxpZXIiLCJ0cmFuc2xhdGVzRGlmZiIsIndhc0JlZ2lubmluZyIsIndhc0VuZCIsInNsaWRlRHVwbGljYXRlQWN0aXZlQ2xhc3MiLCJzbGlkZUR1cGxpY2F0ZU5leHRDbGFzcyIsInNsaWRlRHVwbGljYXRlUHJldkNsYXNzIiwiYWN0aXZlU2xpZGUiLCJzbGlkZUR1cGxpY2F0ZUNsYXNzIiwibmV4dFNsaWRlIiwicHJldlNsaWRlIiwibmV3QWN0aXZlSW5kZXgiLCJwcmV2aW91c0luZGV4IiwicHJldmlvdXNSZWFsSW5kZXgiLCJwcmV2aW91c1NuYXBJbmRleCIsIm5vcm1hbGl6ZVNsaWRlSW5kZXgiLCJza2lwIiwic2xpZGVGb3VuZCIsImNsaWNrZWRTbGlkZSIsImNsaWNrZWRJbmRleCIsInNsaWRlVG9DbGlja2VkU2xpZGUiLCJnZXRTd2lwZXJUcmFuc2xhdGUiLCJ2aXJ0dWFsVHJhbnNsYXRlIiwiYnlDb250cm9sbGVyIiwieiIsIm5ld1Byb2dyZXNzIiwicnVuQ2FsbGJhY2tzIiwidHJhbnNsYXRlQm91bmRzIiwiaW50ZXJuYWwiLCJwcmV2ZW50SW50ZXJhY3Rpb25PblRyYW5zaXRpb24iLCJpc0giLCJfd3JhcHBlckVsJHNjcm9sbFRvIiwiYmVoYXZpb3IiLCJvblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQiLCJ0cmFuc2l0aW9uU3RhcnQiLCJzbGlkZVRvTG9vcCIsInNsaWRlTmV4dCIsInNsaWRlUHJldiIsInNsaWRlUmVzZXQiLCJzbGlkZVRvQ2xvc2VzdCIsImluaXRpYWwiLCJpbmRleEFzTnVtYmVyIiwiaXNWYWxpZE51bWJlciIsImlzRmluaXRlIiwibm9ybWFsaXplZFRyYW5zbGF0ZSIsIm5vcm1hbGl6ZWRHaXJkIiwibm9ybWFsaXplZEdyaWROZXh0IiwidCIsIm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kIiwibmV3SW5kZXgiLCJpbmNyZW1lbnQiLCJsb29wUHJldmVudHNTbGlkZSIsImxvb3BGaXgiLCJfY2xpZW50TGVmdCIsIm5vcm1hbGl6ZSIsIm5vcm1hbGl6ZWRTbmFwR3JpZCIsImN1cnJlbnRTbmFwIiwicHJldlNuYXAiLCJwcmV2SW5kZXgiLCJ0aHJlc2hvbGQiLCJuZXh0U25hcCIsIl9jdXJyZW50U25hcCIsInNsaWRlVG9JbmRleCIsImxvb3BGaWxsR3JvdXBXaXRoQmxhbmsiLCJibGFua1NsaWRlc051bSIsImJsYW5rTm9kZSIsInNsaWRlQmxhbmtDbGFzcyIsImxvb3BBZGRpdGlvbmFsU2xpZGVzIiwicHJlcGVuZFNsaWRlcyIsImFwcGVuZFNsaWRlcyIsInNuYXBUcmFuc2xhdGUiLCJzbGlkZUNoYW5nZWQiLCJfc2xpZGVDaGFuZ2VkIiwibW92aW5nIiwiaXNMb2NrZWQiLCJjdXJzb3IiLCJhcHBlbmRTbGlkZSIsInByZXBlbmRTbGlkZSIsImFkZFNsaWRlIiwicmVtb3ZlU2xpZGUiLCJyZW1vdmVBbGxTbGlkZXMiLCJhY3RpdmVJbmRleEJ1ZmZlciIsImJhc2VMZW5ndGgiLCJzbGlkZXNCdWZmZXIiLCJjdXJyZW50U2xpZGUiLCJzbGlkZXNJbmRleGVzIiwiaW5kZXhUb1JlbW92ZSIsImR1bW15RXZlbnRBdHRhY2hlZCIsImR1bW15RXZlbnRMaXN0ZW5lciIsIm9uVG91Y2hTdGFydCIsIm9uVG91Y2hNb3ZlIiwib25Ub3VjaEVuZCIsIm9uU2Nyb2xsIiwibmVzdGVkIiwicGFzc2l2ZUxpc3RlbmVycyIsInBhc3NpdmUiLCJwcmV2ZW50Q2xpY2tzIiwicHJldmVudENsaWNrc1Byb3BhZ2F0aW9uIiwidXBkYXRlT25XaW5kb3dSZXNpemUiLCJvblJlc2l6ZSIsIm9yaWdpbmFsRXZlbnQiLCIkdGFyZ2V0RWwiLCJ0b3VjaEV2ZW50c1RhcmdldCIsIndoaWNoIiwiYnV0dG9uIiwic3dpcGluZ0NsYXNzSGFzVmFsdWUiLCJub1N3aXBpbmdDbGFzcyIsInBhdGgiLCJub1N3aXBpbmciLCJub1N3aXBpbmdTZWxlY3RvciIsInN3aXBlSGFuZGxlciIsInRhcmdldFRvdWNoZXMiLCJwYWdlWCIsInBhZ2VZIiwiZWRnZVN3aXBlRGV0ZWN0aW9uIiwiaU9TRWRnZVN3aXBlRGV0ZWN0aW9uIiwiZWRnZVN3aXBlVGhyZXNob2xkIiwiaU9TRWRnZVN3aXBlVGhyZXNob2xkIiwic3dpcGVEaXJlY3Rpb24iLCJzaG91bGRQcmV2ZW50RGVmYXVsdCIsInRvdWNoU3RhcnRQcmV2ZW50RGVmYXVsdCIsInRvdWNoU3RhcnRGb3JjZVByZXZlbnREZWZhdWx0IiwiaXNDb250ZW50RWRpdGFibGUiLCJ0YXJnZXRUb3VjaCIsImNoYW5nZWRUb3VjaGVzIiwicHJldmVudGVkQnlOZXN0ZWRTd2lwZXIiLCJ0b3VjaFJlbGVhc2VPbkVkZ2VzIiwiZGlmZlgiLCJkaWZmWSIsInNxcnQiLCJwb3ciLCJ0b3VjaEFuZ2xlIiwiYXRhbjIiLCJ0b3VjaE1vdmVTdG9wUHJvcGFnYXRpb24iLCJzdG9wUHJvcGFnYXRpb24iLCJ0b3VjaFJhdGlvIiwiZGlzYWJsZVBhcmVudFN3aXBlciIsInJlc2lzdGFuY2VSYXRpbyIsInJlc2lzdGFuY2UiLCJmb2xsb3dGaW5nZXIiLCJwb3NpdGlvbiIsInRvdWNoRW5kVGltZSIsInRpbWVEaWZmIiwiY3VycmVudFBvcyIsImZyZWVNb2RlTW9tZW50dW0iLCJsYXN0TW92ZUV2ZW50IiwicG9wIiwidmVsb2NpdHlFdmVudCIsImRpc3RhbmNlIiwiZnJlZU1vZGVNaW5pbXVtVmVsb2NpdHkiLCJmcmVlTW9kZU1vbWVudHVtVmVsb2NpdHlSYXRpbyIsIm1vbWVudHVtRHVyYXRpb24iLCJmcmVlTW9kZU1vbWVudHVtUmF0aW8iLCJtb21lbnR1bURpc3RhbmNlIiwibmV3UG9zaXRpb24iLCJkb0JvdW5jZSIsImFmdGVyQm91bmNlUG9zaXRpb24iLCJib3VuY2VBbW91bnQiLCJmcmVlTW9kZU1vbWVudHVtQm91bmNlUmF0aW8iLCJuZWVkc0xvb3BGaXgiLCJmcmVlTW9kZU1vbWVudHVtQm91bmNlIiwiZnJlZU1vZGVTdGlja3kiLCJtb3ZlRGlzdGFuY2UiLCJjdXJyZW50U2xpZGVTaXplIiwibG9uZ1N3aXBlc01zIiwic3RvcEluZGV4IiwiZ3JvdXBTaXplIiwiX2luY3JlbWVudCIsInJhdGlvIiwibG9uZ1N3aXBlcyIsImxvbmdTd2lwZXNSYXRpbyIsInNob3J0U3dpcGVzIiwiaXNOYXZCdXR0b25UYXJnZXQiLCJuYXZpZ2F0aW9uIiwibmV4dEVsIiwicHJldkVsIiwiYXV0b3BsYXkiLCJydW5uaW5nIiwicGF1c2VkIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwiZ2V0QnJlYWtwb2ludCIsIl9zd2lwZXIkbG9vcGVkU2xpZGVzIiwiYnJlYWtwb2ludCIsImJyZWFrcG9pbnRzQmFzZSIsImN1cnJlbnRCcmVha3BvaW50IiwiYnJlYWtwb2ludE9ubHlQYXJhbXMiLCJwYXJhbSIsInBhcmFtVmFsdWUiLCJicmVha3BvaW50UGFyYW1zIiwid2FzTXVsdGlSb3ciLCJpc011bHRpUm93Iiwid2FzRW5hYmxlZCIsImRpcmVjdGlvbkNoYW5nZWQiLCJuZWVkc1JlTG9vcCIsImlzRW5hYmxlZCIsImJhc2UiLCJjdXJyZW50V2lkdGgiLCJjdXJyZW50SGVpZ2h0IiwicG9pbnRzIiwicG9pbnQiLCJtaW5SYXRpbyIsInN1YnN0ciIsInNvcnQiLCJiIiwiX3BvaW50cyRpIiwicHJlcGFyZUNsYXNzZXMiLCJwcmVmaXgiLCJyZXN1bHRDbGFzc2VzIiwic3VmZml4ZXMiLCJsb2FkSW1hZ2UiLCJpbWFnZUVsIiwic3Jjc2V0Iiwic2l6ZXMiLCJjaGVja0ZvckNvbXBsZXRlIiwiaW1hZ2UiLCJvblJlYWR5IiwiaXNQaWN0dXJlIiwib25sb2FkIiwib25lcnJvciIsInVwZGF0ZU9uSW1hZ2VzUmVhZHkiLCJjdXJyZW50U3JjIiwid2FzTG9ja2VkIiwibGFzdFNsaWRlUG9zaXRpb24iLCJ1bmlxdWVOYXZFbGVtZW50cyIsIlZpcnR1YWwiLCJmb3JjZSIsIl9zd2lwZXIkcGFyYW1zIiwiX3N3aXBlciRwYXJhbXMkdmlydHVhIiwiYWRkU2xpZGVzQmVmb3JlIiwiYWRkU2xpZGVzQWZ0ZXIiLCJfc3dpcGVyJHZpcnR1YWwiLCJwcmV2aW91c0Zyb20iLCJwcmV2aW91c1RvIiwicHJldmlvdXNTbGlkZXNHcmlkIiwicmVuZGVyU2xpZGUiLCJwcmV2aW91c09mZnNldCIsIm9mZnNldFByb3AiLCJzbGlkZXNBZnRlciIsInNsaWRlc0JlZm9yZSIsIm9uUmVuZGVyZWQiLCJsYXp5IiwicmVuZGVyRXh0ZXJuYWwiLCJnZXRTbGlkZXMiLCJzbGlkZXNUb1JlbmRlciIsInJlbmRlckV4dGVybmFsVXBkYXRlIiwicHJlcGVuZEluZGV4ZXMiLCJhcHBlbmRJbmRleGVzIiwiY2FjaGUiLCIkc2xpZGVFbCIsIm51bWJlck9mTmV3U2xpZGVzIiwibmV3Q2FjaGUiLCJjYWNoZWRJbmRleCIsIiRjYWNoZWRFbCIsImNhY2hlZEVsSW5kZXgiLCJiZWZvcmVJbml0Iiwib3ZlcndyaXRlUGFyYW1zIiwiS2V5Ym9hcmQiLCJoYW5kbGUiLCJrYyIsImNoYXJDb2RlIiwicGFnZVVwRG93biIsImtleWJvYXJkIiwiaXNQYWdlVXAiLCJpc1BhZ2VEb3duIiwiaXNBcnJvd0xlZnQiLCJpc0Fycm93UmlnaHQiLCJpc0Fycm93VXAiLCJpc0Fycm93RG93biIsImFsdEtleSIsImN0cmxLZXkiLCJtZXRhS2V5Iiwib25seUluVmlld3BvcnQiLCJpblZpZXciLCJzd2lwZXJXaWR0aCIsInN3aXBlckhlaWdodCIsIndpbmRvd1dpZHRoIiwid2luZG93SGVpZ2h0Iiwic3dpcGVyT2Zmc2V0Iiwic3dpcGVyQ29vcmQiLCJyZXR1cm5WYWx1ZSIsImlzRXZlbnRTdXBwb3J0ZWQiLCJpc1N1cHBvcnRlZCIsImltcGxlbWVudGF0aW9uIiwiaGFzRmVhdHVyZSIsIk1vdXNld2hlZWwiLCJsYXN0U2Nyb2xsVGltZSIsImxhc3RFdmVudEJlZm9yZVNuYXAiLCJyZWNlbnRXaGVlbEV2ZW50cyIsIlBJWEVMX1NURVAiLCJMSU5FX0hFSUdIVCIsIlBBR0VfSEVJR0hUIiwic1giLCJzWSIsInBYIiwicFkiLCJ3aGVlbERlbHRhIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhWCIsIkhPUklaT05UQUxfQVhJUyIsImRlbHRhWSIsImRlbHRhWCIsImRlbHRhTW9kZSIsInNwaW5YIiwic3BpblkiLCJwaXhlbFgiLCJwaXhlbFkiLCJoYW5kbGVNb3VzZUVudGVyIiwibW91c2VFbnRlcmVkIiwiaGFuZGxlTW91c2VMZWF2ZSIsIm1vdXNld2hlZWwiLCJldmVudHNUYXJnZXQiLCJyZWxlYXNlT25FZGdlcyIsImRlbHRhIiwicnRsRmFjdG9yIiwiZm9yY2VUb0F4aXMiLCJpbnZlcnQiLCJwb3NpdGlvbnMiLCJzZW5zaXRpdml0eSIsIm5ld0V2ZW50Iiwic2lnbiIsInJhdyIsInByZXZFdmVudCIsImFuaW1hdGVTbGlkZXIiLCJyZWxlYXNlU2Nyb2xsIiwiX25ld0V2ZW50IiwiaWdub3JlV2hlZWxFdmVudHMiLCJ0aW1lb3V0IiwiX3JlY2VudFdoZWVsRXZlbnRzIiwiX3ByZXZFdmVudCIsImZpcnN0RXZlbnQiLCJzbmFwVG9UaHJlc2hvbGQiLCJhdXRvcGxheURpc2FibGVPbkludGVyYWN0aW9uIiwidGhyZXNob2xkRGVsdGEiLCJ0aHJlc2hvbGRUaW1lIiwiTmF2aWdhdGlvbiIsInRvZ2dsZUVsIiwiZGlzYWJsZWQiLCJkaXNhYmxlZENsYXNzIiwidGFnTmFtZSIsIl9zd2lwZXIkbmF2aWdhdGlvbiIsIiRuZXh0RWwiLCIkcHJldkVsIiwibG9ja0NsYXNzIiwib25QcmV2Q2xpY2siLCJvbk5leHRDbGljayIsIl9zd2lwZXIkbmF2aWdhdGlvbjIiLCJoaWRlT25DbGljayIsImhpZGRlbkNsYXNzIiwidG9FZGdlIiwiZnJvbUVkZ2UiLCJlbmFibGVEaXNhYmxlIiwiX3N3aXBlciRuYXZpZ2F0aW9uMyIsIl9zd2lwZXIkbmF2aWdhdGlvbjQiLCJ0YXJnZXRFbCIsInBhZ2luYXRpb24iLCJjbGlja2FibGUiLCJpc0hpZGRlbiIsIlBhZ2luYXRpb24iLCJ0b3RhbCIsInBhZ2luYXRpb25UeXBlIiwiYnVsbGV0cyIsImZpcnN0SW5kZXgiLCJsYXN0SW5kZXgiLCJtaWRJbmRleCIsImR5bmFtaWNCdWxsZXRzIiwiYnVsbGV0U2l6ZSIsImR5bmFtaWNNYWluQnVsbGV0cyIsImR5bmFtaWNCdWxsZXRJbmRleCIsImJ1bGxldEFjdGl2ZUNsYXNzIiwiYnVsbGV0IiwiJGJ1bGxldCIsImJ1bGxldEluZGV4IiwiJGZpcnN0RGlzcGxheWVkQnVsbGV0IiwiJGxhc3REaXNwbGF5ZWRCdWxsZXQiLCJkeW5hbWljQnVsbGV0c0xlbmd0aCIsImJ1bGxldHNPZmZzZXQiLCJjdXJyZW50Q2xhc3MiLCJmb3JtYXRGcmFjdGlvbkN1cnJlbnQiLCJ0b3RhbENsYXNzIiwiZm9ybWF0RnJhY3Rpb25Ub3RhbCIsInByb2dyZXNzYmFyRGlyZWN0aW9uIiwicHJvZ3Jlc3NiYXJPcHBvc2l0ZSIsInNjYWxlIiwic2NhbGVYIiwic2NhbGVZIiwicHJvZ3Jlc3NiYXJGaWxsQ2xhc3MiLCJyZW5kZXJDdXN0b20iLCJwYWdpbmF0aW9uSFRNTCIsIm51bWJlck9mQnVsbGV0cyIsInJlbmRlckJ1bGxldCIsImJ1bGxldENsYXNzIiwiYnVsbGV0RWxlbWVudCIsInJlbmRlckZyYWN0aW9uIiwicmVuZGVyUHJvZ3Jlc3NiYXIiLCJjbGlja2FibGVDbGFzcyIsIm1vZGlmaWVyQ2xhc3MiLCJwcm9ncmVzc2Jhck9wcG9zaXRlQ2xhc3MiLCJudW1iZXIiLCJhY3RpdmVJbmRleENoYW5nZSIsInNuYXBJbmRleENoYW5nZSIsInNsaWRlc0xlbmd0aENoYW5nZSIsInNuYXBHcmlkTGVuZ3RoQ2hhbmdlIiwiU2Nyb2xsYmFyIiwic2Nyb2xsYmFyIiwiZHJhZ1NpemUiLCJ0cmFja1NpemUiLCIkZHJhZ0VsIiwibmV3U2l6ZSIsIm5ld1BvcyIsIm9wYWNpdHkiLCJkaXZpZGVyIiwibW92ZURpdmlkZXIiLCJnZXRQb2ludGVyUG9zaXRpb24iLCJjbGllbnRYIiwiY2xpZW50WSIsInNldERyYWdQb3NpdGlvbiIsImRyYWdTdGFydFBvcyIsInBvc2l0aW9uUmF0aW8iLCJvbkRyYWdTdGFydCIsImRyYWdUaW1lb3V0Iiwib25EcmFnTW92ZSIsIm9uRHJhZ0VuZCIsInNuYXBPblJlbGVhc2UiLCJlbmFibGVEcmFnZ2FibGUiLCJhY3RpdmVMaXN0ZW5lciIsImRpc2FibGVEcmFnZ2FibGUiLCIkc3dpcGVyRWwiLCJkcmFnQ2xhc3MiLCJkcmFnRWwiLCJkcmFnZ2FibGUiLCJQYXJhbGxheCIsInNldFRyYW5zZm9ybSIsImN1cnJlbnRPcGFjaXR5IiwiY3VycmVudFNjYWxlIiwicGFyYWxsYXgiLCJwYXJhbGxheEVsIiwiJHBhcmFsbGF4RWwiLCJwYXJhbGxheER1cmF0aW9uIiwiWm9vbSIsImdldERpc3RhbmNlQmV0d2VlblRvdWNoZXMiLCJ4MSIsInkxIiwieDIiLCJ5MiIsIm9uR2VzdHVyZVN0YXJ0IiwiZ2VzdHVyZSIsImZha2VHZXN0dXJlVG91Y2hlZCIsImZha2VHZXN0dXJlTW92ZWQiLCJzY2FsZVN0YXJ0IiwiJGltYWdlRWwiLCIkaW1hZ2VXcmFwRWwiLCJjb250YWluZXJDbGFzcyIsIm1heFJhdGlvIiwiaXNTY2FsaW5nIiwib25HZXN0dXJlQ2hhbmdlIiwic2NhbGVNb3ZlIiwib25HZXN0dXJlRW5kIiwidG91Y2hlc1N0YXJ0Iiwic2xpZGVXaWR0aCIsInNsaWRlSGVpZ2h0Iiwic2NhbGVkV2lkdGgiLCJzY2FsZWRIZWlnaHQiLCJtaW5YIiwibWF4WCIsIm1pblkiLCJtYXhZIiwidG91Y2hlc0N1cnJlbnQiLCJwcmV2UG9zaXRpb25YIiwicHJldlBvc2l0aW9uWSIsInByZXZUaW1lIiwibW9tZW50dW1EdXJhdGlvblgiLCJtb21lbnR1bUR1cmF0aW9uWSIsIm1vbWVudHVtRGlzdGFuY2VYIiwibmV3UG9zaXRpb25YIiwibW9tZW50dW1EaXN0YW5jZVkiLCJuZXdQb3NpdGlvblkiLCJvblRyYW5zaXRpb25FbmQiLCJvdXQiLCJpbiIsIl9pbiIsInpvb21lZFNsaWRlQ2xhc3MiLCJ0b3VjaFgiLCJ0b3VjaFkiLCJvZmZzZXRYIiwib2Zmc2V0WSIsInRyYW5zbGF0ZVgiLCJ0cmFuc2xhdGVZIiwiaW1hZ2VXaWR0aCIsImltYWdlSGVpZ2h0IiwidHJhbnNsYXRlTWluWCIsInRyYW5zbGF0ZU1pblkiLCJ0cmFuc2xhdGVNYXhYIiwidHJhbnNsYXRlTWF4WSIsInRvZ2dsZUdlc3R1cmVzIiwic2xpZGVTZWxlY3RvciIsImVuYWJsZUdlc3R1cmVzIiwiZ2VzdHVyZXNFbmFibGVkIiwiZGlzYWJsZUdlc3R1cmVzIiwiYWN0aXZlTGlzdGVuZXJXaXRoQ2FwdHVyZSIsInRvdWNoU3RhcnQiLCJ0b3VjaEVuZCIsImRvdWJsZVRhcCIsInNsaWRlQ2hhbmdlIiwiTGF6eSIsImxvYWRJblNsaWRlIiwibG9hZEluRHVwbGljYXRlIiwiJGltYWdlcyIsImVsZW1lbnRDbGFzcyIsImxvYWRlZENsYXNzIiwibG9hZGluZ0NsYXNzIiwiYmFja2dyb3VuZCIsIiRwaWN0dXJlRWwiLCJzb3VyY2VFbCIsIiRzb3VyY2UiLCJwcmVsb2FkZXJDbGFzcyIsInNsaWRlT3JpZ2luYWxJbmRleCIsIm9yaWdpbmFsU2xpZGUiLCJkdXBsaWNhdGVkU2xpZGUiLCJzbGlkZUV4aXN0IiwiaW5pdGlhbEltYWdlTG9hZGVkIiwibG9hZFByZXZOZXh0IiwibG9hZFByZXZOZXh0QW1vdW50IiwiYW1vdW50IiwibWF4SW5kZXgiLCJtaW5JbmRleCIsImNoZWNrSW5WaWV3T25Mb2FkIiwiJHNjcm9sbEVsZW1lbnQiLCJzY3JvbGxpbmdFbGVtZW50IiwiaXNXaW5kb3ciLCJzY3JvbGxFbGVtZW50V2lkdGgiLCJzY3JvbGxFbGVtZW50SGVpZ2h0Iiwic2Nyb2xsSGFuZGxlckF0dGFjaGVkIiwiY2hlY2tJblZpZXciLCJsb2FkT25UcmFuc2l0aW9uU3RhcnQiLCJsYXp5TG9hZCIsIkNvbnRyb2xsZXIiLCJMaW5lYXJTcGxpbmUiLCJiaW5hcnlTZWFyY2giLCJndWVzcyIsImkxIiwiaTMiLCJpbnRlcnBvbGF0ZSIsImdldEludGVycG9sYXRlRnVuY3Rpb24iLCJjb250cm9sbGVyIiwic3BsaW5lIiwiX3NldFRyYW5zbGF0ZSIsImNvbnRyb2xsZWQiLCJjb250cm9sIiwiY29udHJvbGxlZFRyYW5zbGF0ZSIsInNldENvbnRyb2xsZWRUcmFuc2xhdGUiLCJieSIsImludmVyc2UiLCJzZXRDb250cm9sbGVkVHJhbnNpdGlvbiIsIkExMXkiLCJnZXRSYW5kb21OdW1iZXIiLCJyYW5kb21DaGFyIiwicm91bmQiLCJyYW5kb20iLCJyZXBlYXQiLCJtYWtlRWxGb2N1c2FibGUiLCJtYWtlRWxOb3RGb2N1c2FibGUiLCJhZGRFbFJvbGUiLCJyb2xlIiwiYWRkRWxSb2xlRGVzY3JpcHRpb24iLCJkZXNjcmlwdGlvbiIsImFkZEVsQ29udHJvbHMiLCJhZGRFbExhYmVsIiwiYWRkRWxJZCIsImFkZEVsTGl2ZSIsImxpdmUiLCJkaXNhYmxlRWwiLCJlbmFibGVFbCIsIm9uRW50ZXJPclNwYWNlS2V5IiwiYTExeSIsIm5vdGlmeSIsImxhc3RTbGlkZU1lc3NhZ2UiLCJuZXh0U2xpZGVNZXNzYWdlIiwiZmlyc3RTbGlkZU1lc3NhZ2UiLCJwcmV2U2xpZGVNZXNzYWdlIiwibWVzc2FnZSIsIm5vdGlmaWNhdGlvbiIsImxpdmVSZWdpb24iLCJ1cGRhdGVOYXZpZ2F0aW9uIiwidXBkYXRlUGFnaW5hdGlvbiIsImJ1bGxldEVsIiwiJGJ1bGxldEVsIiwicGFnaW5hdGlvbkJ1bGxldE1lc3NhZ2UiLCIkY29udGFpbmVyRWwiLCJjb250YWluZXJSb2xlRGVzY3JpcHRpb25NZXNzYWdlIiwiY29udGFpbmVyTWVzc2FnZSIsIndyYXBwZXJJZCIsIml0ZW1Sb2xlRGVzY3JpcHRpb25NZXNzYWdlIiwic2xpZGVSb2xlIiwiYXJpYUxhYmVsTWVzc2FnZSIsInNsaWRlTGFiZWxNZXNzYWdlIiwibm90aWZpY2F0aW9uQ2xhc3MiLCJhZnRlckluaXQiLCJwYWdpbmF0aW9uVXBkYXRlIiwiSGlzdG9yeSIsImhhc2hOYXZpZ2F0aW9uIiwicGF0aHMiLCJnZXRQYXRoVmFsdWVzIiwic2Nyb2xsVG9TbGlkZSIsInNldEhpc3RvcnlQb3BTdGF0ZSIsInVybE92ZXJyaWRlIiwiVVJMIiwicGF0aEFycmF5IiwicGFydCIsInNldEhpc3RvcnkiLCJzbHVnaWZ5IiwiaW5jbHVkZXMiLCJjdXJyZW50U3RhdGUiLCJzdGF0ZSIsInNsaWRlSGlzdG9yeSIsInRyYW5zaXRpb25FbmRfZnJlZU1vZGVOb01vbWVudHVtUmVsZWFzZSIsIkhhc2hOYXZpZ2F0aW9uIiwib25IYXNoQ2FuZ2UiLCJuZXdIYXNoIiwiYWN0aXZlU2xpZGVIYXNoIiwic2V0SGFzaCIsInNsaWRlSGFzaCIsIndhdGNoU3RhdGUiLCJBdXRvcGxheSIsIiRhY3RpdmVTbGlkZUVsIiwiYXV0b3BsYXlSZXN1bHQiLCJyZXZlcnNlRGlyZWN0aW9uIiwic3RvcE9uTGFzdFNsaWRlIiwicGF1c2UiLCJ3YWl0Rm9yVHJhbnNpdGlvbiIsIm9uVmlzaWJpbGl0eUNoYW5nZSIsInZpc2liaWxpdHlTdGF0ZSIsIm9uTW91c2VFbnRlciIsImRpc2FibGVPbkludGVyYWN0aW9uIiwib25Nb3VzZUxlYXZlIiwiYXR0YWNoTW91c2VFdmVudHMiLCJwYXVzZU9uTW91c2VFbnRlciIsImRldGFjaE1vdXNlRXZlbnRzIiwiYmVmb3JlVHJhbnNpdGlvblN0YXJ0Iiwic2xpZGVyRmlyc3RNb3ZlIiwiRmFkZSIsInR4IiwidHkiLCJzbGlkZU9wYWNpdHkiLCJmYWRlRWZmZWN0IiwiY3Jvc3NGYWRlIiwiZXZlbnRUcmlnZ2VyZWQiLCJ0cmlnZ2VyRXZlbnRzIiwiQ3ViZSIsImN1YmVFZmZlY3QiLCJ3cmFwcGVyUm90YXRlIiwiJGN1YmVTaGFkb3dFbCIsInNoYWRvdyIsInNsaWRlQW5nbGUiLCJ0eiIsInNsaWRlU2hhZG93cyIsInNoYWRvd0JlZm9yZSIsInNoYWRvd0FmdGVyIiwic2hhZG93T2Zmc2V0Iiwic2hhZG93U2NhbGUiLCJzaGFkb3dBbmdsZSIsInNpbiIsInNjYWxlMSIsInNjYWxlMiIsInpGYWN0b3IiLCJGbGlwIiwiZmxpcEVmZmVjdCIsImxpbWl0Um90YXRpb24iLCJyb3RhdGUiLCJyb3RhdGVZIiwicm90YXRlWCIsInpJbmRleCIsIkNvdmVyZmxvdyIsImNvdmVyZmxvd0VmZmVjdCIsImRlcHRoIiwic2xpZGVPZmZzZXQiLCJvZmZzZXRNdWx0aXBsaWVyIiwibW9kaWZpZXIiLCJ0cmFuc2xhdGVaIiwic3RyZXRjaCIsInNsaWRlVHJhbnNmb3JtIiwiJHNoYWRvd0JlZm9yZUVsIiwiJHNoYWRvd0FmdGVyRWwiLCJUaHVtYnMiLCJ0aHVtYnNQYXJhbXMiLCJ0aHVtYnMiLCJTd2lwZXJDbGFzcyIsInN3aXBlckNyZWF0ZWQiLCJ0aHVtYnNDb250YWluZXJDbGFzcyIsIm9uVGh1bWJDbGljayIsInRodW1ic1N3aXBlciIsInNsaWRlVGh1bWJBY3RpdmVDbGFzcyIsImN1cnJlbnRJbmRleCIsImF1dG9TY3JvbGxPZmZzZXQiLCJ1c2VPZmZzZXQiLCJjdXJyZW50VGh1bWJzSW5kZXgiLCJuZXdUaHVtYnNJbmRleCIsInByZXZUaHVtYnNJbmRleCIsIm5leHRUaHVtYnNJbmRleCIsInRodW1ic1RvQWN0aXZhdGUiLCJ0aHVtYkFjdGl2ZUNsYXNzIiwibXVsdGlwbGVBY3RpdmVUaHVtYnMiLCJiZWZvcmVEZXN0cm95IiwiQ09TVF9PRl9HT0xEIiwicHJpY2VBbW91bnRPbkhhbmQiLCJwcmljZVNhbXBsZXNMaXN0IiwicHJpY2VJbnB1dHMiLCJwcmljZVJhbmdlIiwiZ29sZEFtb3VudCIsInJhdGUiLCJhbW91bnRPbkhhbmQiLCJtb25leUZvcm1hdCIsInRob3VzYW5kIiwic3VmZml4IiwiZGVjaW1hbHMiLCJyZW5kZXJBbW91bnQiLCJjaGVja2VkIiwib25VcGRhdGUiLCJ1bmVuY29kZWQiLCJ0b0ZpeGVkIiwidG9vbHRpcHMiLCJub1VpU2xpZGVyIiwic3RlcCIsImNvbm5lY3QiLCJyYW5nZSIsIm1hcmsiLCJnbG9iYWxUaGlzIiwiUGlwc01vZGUiLCJQaXBzVHlwZSIsImlzVmFsaWRGb3JtYXR0ZXIiLCJlbnRyeSIsInJlbW92ZUVsZW1lbnQiLCJpc1NldCIsInVuaXF1ZSIsImVsZW0iLCJvcmllbnRhdGlvbiIsInJlY3QiLCJvd25lckRvY3VtZW50IiwiZG9jRWxlbSIsInBhZ2VPZmZzZXQiLCJnZXRQYWdlT2Zmc2V0IiwiaXNOdW1lcmljIiwiYWRkQ2xhc3NGb3IiLCJsaW1pdCIsImFzQXJyYXkiLCJjb3VudERlY2ltYWxzIiwibnVtU3RyIiwiU3RyaW5nIiwicGllY2VzIiwiUmVnRXhwIiwic3VwcG9ydFBhZ2VPZmZzZXQiLCJwYWdlWE9mZnNldCIsImlzQ1NTMUNvbXBhdCIsImNvbXBhdE1vZGUiLCJwYWdlWU9mZnNldCIsImdldEFjdGlvbnMiLCJwb2ludGVyRW5hYmxlZCIsIm1zUG9pbnRlckVuYWJsZWQiLCJnZXRTdXBwb3J0c1Bhc3NpdmUiLCJnZXRTdXBwb3J0c1RvdWNoQWN0aW9uTm9uZSIsIkNTUyIsInN1cHBvcnRzIiwic3ViUmFuZ2VSYXRpbyIsInBhIiwicGIiLCJmcm9tUGVyY2VudGFnZSIsInN0YXJ0UmFuZ2UiLCJ0b1BlcmNlbnRhZ2UiLCJpc1BlcmNlbnRhZ2UiLCJnZXRKIiwidG9TdGVwcGluZyIsInhWYWwiLCJ4UGN0IiwidmEiLCJ2YiIsImZyb21TdGVwcGluZyIsImdldFN0ZXAiLCJ4U3RlcHMiLCJTcGVjdHJ1bSIsInNpbmdsZVN0ZXAiLCJ4TnVtU3RlcHMiLCJ4SGlnaGVzdENvbXBsZXRlU3RlcCIsIm9yZGVyZWQiLCJoYW5kbGVFbnRyeVBvaW50IiwiaGFuZGxlU3RlcFBvaW50IiwiZ2V0RGlzdGFuY2UiLCJkaXN0YW5jZXMiLCJnZXRBYnNvbHV0ZURpc3RhbmNlIiwieFBjdF9pbmRleCIsInN0YXJ0X2ZhY3RvciIsInJlc3RfZmFjdG9yIiwicmVzdF9yZWxfZGlzdGFuY2UiLCJyYW5nZV9wY3QiLCJyZWxfcmFuZ2VfZGlzdGFuY2UiLCJhYnNfZGlzdGFuY2VfY291bnRlciIsInJhbmdlX2NvdW50ZXIiLCJnZXREZWZhdWx0U3RlcCIsImlzRG93biIsImdldE5lYXJieVN0ZXBzIiwic3RlcEJlZm9yZSIsInN0YXJ0VmFsdWUiLCJoaWdoZXN0U3RlcCIsInRoaXNTdGVwIiwic3RlcEFmdGVyIiwiY291bnRTdGVwRGVjaW1hbHMiLCJzdGVwRGVjaW1hbHMiLCJjb252ZXJ0IiwicGVyY2VudGFnZSIsInZhbHVlMSIsInRvdGFsU3RlcHMiLCJkZWZhdWx0Rm9ybWF0dGVyIiwiY3NzQ2xhc3NlcyIsImhhbmRsZUxvd2VyIiwiaGFuZGxlVXBwZXIiLCJ0b3VjaEFyZWEiLCJob3Jpem9udGFsIiwidmVydGljYWwiLCJjb25uZWN0cyIsImx0ciIsInRleHREaXJlY3Rpb25MdHIiLCJ0ZXh0RGlyZWN0aW9uUnRsIiwiZHJhZyIsInRhcCIsImFjdGl2ZSIsInRvb2x0aXAiLCJwaXBzIiwicGlwc0hvcml6b250YWwiLCJwaXBzVmVydGljYWwiLCJtYXJrZXIiLCJtYXJrZXJIb3Jpem9udGFsIiwibWFya2VyVmVydGljYWwiLCJtYXJrZXJOb3JtYWwiLCJtYXJrZXJMYXJnZSIsIm1hcmtlclN1YiIsInZhbHVlSG9yaXpvbnRhbCIsInZhbHVlVmVydGljYWwiLCJ2YWx1ZU5vcm1hbCIsInZhbHVlTGFyZ2UiLCJ2YWx1ZVN1YiIsIklOVEVSTkFMX0VWRU5UX05TIiwiYXJpYSIsInZhbGlkYXRlRm9ybWF0IiwidGVzdFN0ZXAiLCJwYXJzZWQiLCJ0ZXN0S2V5Ym9hcmRQYWdlTXVsdGlwbGllciIsImtleWJvYXJkUGFnZU11bHRpcGxpZXIiLCJ0ZXN0S2V5Ym9hcmREZWZhdWx0U3RlcCIsImtleWJvYXJkRGVmYXVsdFN0ZXAiLCJ0ZXN0UmFuZ2UiLCJzcGVjdHJ1bSIsInRlc3RTdGFydCIsImhhbmRsZXMiLCJ0ZXN0U25hcCIsInRlc3RBbmltYXRlIiwidGVzdEFuaW1hdGlvbkR1cmF0aW9uIiwiYW5pbWF0aW9uRHVyYXRpb24iLCJ0ZXN0Q29ubmVjdCIsInRlc3RPcmllbnRhdGlvbiIsIm9ydCIsInRlc3RNYXJnaW4iLCJtYXJnaW4iLCJ0ZXN0TGltaXQiLCJ0ZXN0UGFkZGluZyIsInBhZGRpbmciLCJ0b3RhbFBhZGRpbmciLCJmaXJzdFZhbHVlIiwibGFzdFZhbHVlIiwidGVzdERpcmVjdGlvbiIsInRlc3RCZWhhdmlvdXIiLCJmaXhlZCIsImhvdmVyIiwidW5jb25zdHJhaW5lZCIsInRlc3RUb29sdGlwcyIsImZvcm1hdHRlciIsInRlc3RBcmlhRm9ybWF0IiwiYXJpYUZvcm1hdCIsInRlc3RGb3JtYXQiLCJmb3JtYXQiLCJ0ZXN0S2V5Ym9hcmRTdXBwb3J0Iiwia2V5Ym9hcmRTdXBwb3J0IiwidGVzdERvY3VtZW50RWxlbWVudCIsInRlc3RDc3NQcmVmaXgiLCJjc3NQcmVmaXgiLCJ0ZXN0Q3NzQ2xhc3NlcyIsInRlc3RPcHRpb25zIiwidGVzdHMiLCJiZWhhdmlvdXIiLCJkIiwibXNQcmVmaXgiLCJub1ByZWZpeCIsInRyYW5zZm9ybVJ1bGUiLCJzY29wZSIsIm9yaWdpbmFsT3B0aW9ucyIsImFjdGlvbnMiLCJzdXBwb3J0c1RvdWNoQWN0aW9uTm9uZSIsInNjb3BlX1RhcmdldCIsInNjb3BlX0Jhc2UiLCJzY29wZV9IYW5kbGVzIiwic2NvcGVfQ29ubmVjdHMiLCJzY29wZV9QaXBzIiwic2NvcGVfVG9vbHRpcHMiLCJzY29wZV9TcGVjdHJ1bSIsInNjb3BlX1ZhbHVlcyIsInNjb3BlX0xvY2F0aW9ucyIsInNjb3BlX0hhbmRsZU51bWJlcnMiLCJzY29wZV9BY3RpdmVIYW5kbGVzQ291bnQiLCJzY29wZV9FdmVudHMiLCJzY29wZV9Eb2N1bWVudCIsInNjb3BlX0RvY3VtZW50RWxlbWVudCIsInNjb3BlX0JvZHkiLCJzY29wZV9EaXJPZmZzZXQiLCJhZGROb2RlVG8iLCJhZGRUYXJnZXQiLCJkaXYiLCJhZGRPcmlnaW4iLCJoYW5kbGVOdW1iZXIiLCJldmVudEtleWRvd24iLCJhZGRDb25uZWN0IiwiYWRkRWxlbWVudHMiLCJjb25uZWN0T3B0aW9ucyIsImNvbm5lY3RCYXNlIiwiYWRkU2xpZGVyIiwidGV4dERpcmVjdGlvbiIsImFkZFRvb2x0aXAiLCJpc1NsaWRlckRpc2FibGVkIiwiaXNIYW5kbGVEaXNhYmxlZCIsImhhbmRsZU9yaWdpbiIsInJlbW92ZVRvb2x0aXBzIiwicmVtb3ZlRXZlbnQiLCJiaW5kRXZlbnQiLCJmb3JtYXR0ZWRWYWx1ZSIsImNoZWNrSGFuZGxlUG9zaXRpb24iLCJnZXRHcm91cCIsIm1vZGUiLCJSYW5nZSIsIlN0ZXBzIiwiQ291bnQiLCJpbnRlcnZhbCIsInNwcmVhZCIsIm1hcFRvUmFuZ2UiLCJzdGVwcGVkIiwiUG9zaXRpb25zIiwiVmFsdWVzIiwiZ2VuZXJhdGVTcHJlYWQiLCJzYWZlSW5jcmVtZW50IiwiaW5kZXhlcyIsImZpcnN0SW5SYW5nZSIsImxhc3RJblJhbmdlIiwiaWdub3JlRmlyc3QiLCJpZ25vcmVMYXN0IiwicHJldlBjdCIsInEiLCJsb3ciLCJoaWdoIiwibmV3UGN0IiwicGN0RGlmZmVyZW5jZSIsInBjdFBvcyIsInN0ZXBzIiwicmVhbFN0ZXBzIiwic3RlcFNpemUiLCJpc1N0ZXBzIiwiZGVuc2l0eSIsIkxhcmdlVmFsdWUiLCJTbWFsbFZhbHVlIiwiTm9WYWx1ZSIsImFkZE1hcmtpbmciLCJmaWx0ZXJGdW5jIiwiX2EiLCJfYiIsInZhbHVlU2l6ZUNsYXNzZXMiLCJOb25lIiwibWFya2VyU2l6ZUNsYXNzZXMiLCJ2YWx1ZU9yaWVudGF0aW9uQ2xhc3NlcyIsIm1hcmtlck9yaWVudGF0aW9uQ2xhc3NlcyIsImdldENsYXNzZXMiLCJvcmllbnRhdGlvbkNsYXNzZXMiLCJzaXplQ2xhc3NlcyIsImFkZFNwcmVhZCIsInJlbW92ZVBpcHMiLCJiYXNlU2l6ZSIsImFsdCIsImF0dGFjaEV2ZW50IiwiZml4RXZlbnQiLCJkb05vdFJlamVjdCIsImJ1dHRvbnMiLCJjYWxjUG9pbnQiLCJtZXRob2RzIiwiZXZlbnRUYXJnZXQiLCJtb3VzZSIsInBvaW50ZXIiLCJpc1RvdWNoT25UYXJnZXQiLCJjaGVja1RvdWNoIiwiY29tcG9zZWQiLCJjb21wb3NlZFBhdGgiLCJjYWxjUG9pbnRUb1BlcmNlbnRhZ2UiLCJwcm9wb3NhbCIsImdldENsb3Nlc3RIYW5kbGUiLCJjbGlja2VkUG9zaXRpb24iLCJzbWFsbGVzdERpZmZlcmVuY2UiLCJoYW5kbGVQb3NpdGlvbiIsImRpZmZlcmVuY2VXaXRoVGhpc0hhbmRsZSIsImNsaWNrQXRFZGdlIiwiaXNDbG9zZXIiLCJpc0Nsb3NlckFmdGVyIiwiZG9jdW1lbnRMZWF2ZSIsInJlbGF0ZWRUYXJnZXQiLCJldmVudEVuZCIsImV2ZW50TW92ZSIsImFwcFZlcnNpb24iLCJidXR0b25zUHJvcGVydHkiLCJtb3ZlbWVudCIsInN0YXJ0Q2FsY1BvaW50IiwibW92ZUhhbmRsZXMiLCJsb2NhdGlvbnMiLCJoYW5kbGVOdW1iZXJzIiwibGlzdGVuZXJzIiwic2V0WmluZGV4IiwiZmlyZUV2ZW50IiwiZXZlbnRTdGFydCIsInNvbWUiLCJtb3ZlRXZlbnQiLCJlbmRFdmVudCIsIm91dEV2ZW50IiwiZXZlbnRUYXAiLCJzZXRIYW5kbGUiLCJldmVudEhvdmVyIiwidGFyZ2V0RXZlbnQiLCJzY29wZV9TZWxmIiwiaG9yaXpvbnRhbEtleXMiLCJ2ZXJ0aWNhbEtleXMiLCJsYXJnZVN0ZXBLZXlzIiwiZWRnZUtleXMiLCJyZXZlcnNlIiwiaXNMYXJnZURvd24iLCJpc0xhcmdlVXAiLCJpc1VwIiwiaXNNaW4iLCJpc01heCIsImdldE5leHRTdGVwc0ZvckhhbmRsZSIsImJpbmRTbGlkZXJFdmVudHMiLCJoYW5kbGVCZWZvcmUiLCJoYW5kbGVBZnRlciIsImV2ZW50SG9sZGVycyIsImV2ZW50SG9sZGVyIiwibmFtZXNwYWNlZEV2ZW50IiwiaXNJbnRlcm5hbE5hbWVzcGFjZSIsIm5hbWVzcGFjZSIsInN1YnN0cmluZyIsInRFdmVudCIsInROYW1lc3BhY2UiLCJyZWZlcmVuY2UiLCJsb29rQmFja3dhcmQiLCJsb29rRm9yd2FyZCIsImdldFZhbHVlIiwiaW5SdWxlT3JkZXIiLCJ2IiwidXB3YXJkIiwicHJvcG9zYWxzIiwiZmlyc3RIYW5kbGUiLCJmIiwidHJhbnNmb3JtRGlyZWN0aW9uIiwidXBkYXRlSGFuZGxlUG9zaXRpb24iLCJ0cmFuc2xhdGlvbiIsInRyYW5zbGF0ZVJ1bGUiLCJ1cGRhdGVDb25uZWN0IiwiZXhhY3RJbnB1dCIsImwiLCJoIiwiY29ubmVjdFdpZHRoIiwic2NhbGVSdWxlIiwicmVzb2x2ZVRvVmFsdWUiLCJ2YWx1ZVNldCIsImZpcmVTZXRFdmVudCIsImlzSW5pdCIsInZhbHVlUmVzZXQiLCJ2YWx1ZVNldEhhbmRsZSIsInZhbHVlR2V0IiwibmVhcmJ5U3RlcHMiLCJkZWNyZW1lbnQiLCJnZXROZXh0U3RlcHMiLCJ1cGRhdGVPcHRpb25zIiwib3B0aW9uc1RvVXBkYXRlIiwidXBkYXRlQWJsZSIsIm5ld09wdGlvbnMiLCJzZXR1cFNsaWRlciIsInJlc2V0IiwiX19tb3ZlSGFuZGxlcyIsImdldFRvb2x0aXBzIiwiZ2V0T3JpZ2lucyIsImluaXRpYWxpemUiLCJhcGkiLCJub3Vpc2xpZGVyIiwiX19zcGVjdHJ1bSIsIndOdW1iIiwiRm9ybWF0T3B0aW9ucyIsInN0clJldmVyc2UiLCJzdHJTdGFydHNXaXRoIiwic3RyRW5kc1dpdGgiLCJ0aHJvd0VxdWFsRXJyb3IiLCJGIiwiZXhwIiwiZm9ybWF0VG8iLCJkZWNvZGVyIiwibmVnYXRpdmVCZWZvcmUiLCJuZWdhdGl2ZSIsImVkaXQiLCJ1bmRvIiwib3JpZ2luYWxJbnB1dCIsImlucHV0SXNOZWdhdGl2ZSIsImlucHV0UGllY2VzIiwiaW5wdXRCYXNlIiwiaW5wdXREZWNpbWFscyIsIm91dHB1dCIsImZvcm1hdEZyb20iLCJ2YWxpZGF0ZSIsImlucHV0T3B0aW9ucyIsIm9wdGlvbk5hbWUiLCJvcHRpb25WYWx1ZSIsImZpbHRlcmVkT3B0aW9ucyIsInBhc3NBbGwiXSwibWFwcGluZ3MiOiI7UUFBQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTs7O1FBR0E7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0EsS0FBSztRQUNMO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0EsMkJBQTJCLDBCQUEwQixFQUFFO1FBQ3ZELGlDQUFpQyxlQUFlO1FBQ2hEO1FBQ0E7UUFDQTs7UUFFQTtRQUNBLHNEQUFzRCwrREFBK0Q7O1FBRXJIO1FBQ0E7O1FBRUE7UUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7QUM3REE7O0FBRUEsU0FBU0EsV0FBVCxDQUFxQkMsR0FBckIsRUFBMEI7QUFDeEIsTUFBSUMsU0FBU0QsR0FBYjtBQUNBRSxTQUFPQyxJQUFQLENBQVlG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eUIsTyxHQUFBQSxPO1FBQVNwRCxZLEdBQUFBLFk7UUFBY3J2QixNLEdBQUFBLE07UUFBUWl4QixRLEdBQUFBLFE7UUFBVTN3QixJLEdBQUFBLEk7UUFBTTBDLEksR0FBQUEsSTtRQUFNMHlCLE0sR0FBQUEsTTtRQUFRenpCLFEsR0FBQUEsUTtRQUFVa3pCLEssR0FBQUEsSztRQUFPcHpCLE8sR0FBQUEsTztRQUFTZCxHLEdBQUFBLEc7UUFBSzJMLEksR0FBQUEsSTtRQUFNaUgsTyxHQUFBQSxPO1FBQVNvZSxNLEdBQUFBLE07UUFBUS93QixJLEdBQUFBLEk7UUFBTW94QixLLEdBQUFBLEs7UUFBTy93QixFLEdBQUFBLEU7UUFBSWpELE0sR0FBQUEsTTtRQUFRMEQsSSxHQUFBQSxJO1FBQU02YSxLLEdBQUFBLEs7UUFBT3VZLE8sR0FBQUEsTztRQUFTQyxRLEdBQUFBLFE7UUFBVWoxQixRLEdBQUFBLFE7UUFBVXltQixNLEdBQUFBLE07UUFBUXNKLEksR0FBQUEsSTtRQUFNaHZCLEksR0FBQUEsSTtRQUFNRyxLLEdBQUFBLEs7UUFBTyt2QixXLEdBQUFBLFc7UUFBYXhqQixZLEdBQUFBLFk7UUFBY3hNLEUsR0FBQUEsRTtRQUFJazBCLE8sR0FBQUEsTztRQUFTQyxRLEdBQUFBLFE7UUFBVUYsSyxHQUFBQSxLO1FBQU9LLFMsR0FBQUEsUztRQUFXRyxVLEdBQUFBLFU7UUFBWUMsVSxHQUFBQSxVO1FBQVlILFMsR0FBQUEsUztRQUFXSSxRLEdBQUFBLFE7UUFBVUMsUyxHQUFBQSxTO1FBQVdKLE8sR0FBQUEsTztRQUFTcDBCLEksR0FBQUEsSTtRQUFNQyxPLEdBQUFBLE87UUFBU2hCLEcsR0FBQUEsRztRQUFLTSxNLEdBQUFBLE07UUFBUVAsRSxHQUFBQSxFO1FBQUk4dEIsSSxHQUFBQSxJO1FBQU16dEIsVyxHQUFBQSxXO1FBQWFELFUsR0FBQUEsVTtRQUFZZ0IsTSxHQUFBQSxNO1FBQVFDLE8sR0FBQUEsTztRQUFTTixPLEdBQUFBLE87UUFBUzB2QixTLEdBQUFBLFM7UUFBV3Z2QixJLEdBQUFBLEk7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QUNRO0FBQ3BFLGlCQUFpQix3RUFBWTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxhQUFhLHNGQUFNO0FBQ0oscUU7Ozs7Ozs7QUNUZjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQTREO0FBQ1E7QUFDcEUsaUJBQWlCLHdFQUFZO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELGFBQWEsc0ZBQU07QUFDSixxRTs7Ozs7OztBQ1RmO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBNEQ7QUFDUTtBQUNwRSxpQkFBaUIsd0VBQVk7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsYUFBYSxzRkFBTTtBQUNKLHFFOzs7Ozs7O0FDVGY7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUE0RDtBQUNRO0FBQ3BFLGlCQUFpQix3RUFBWTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxhQUFhLHNGQUFNO0FBQ0oscUU7Ozs7Ozs7QUNUZjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQTREO0FBQ1E7QUFDcEUsaUJBQWlCLHdFQUFZO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELGFBQWEsc0ZBQU07QUFDSixxRSIsImZpbGUiOiJqcy9jb21tb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbiBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbiBcdFx0XHR9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCIvXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gOSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gd2VicGFjay9ib290c3RyYXAgOTNhZThmMzU4NTQ0MDk2YjhlMzQiLCJpbXBvcnQgeyBnZXREb2N1bWVudCwgZ2V0V2luZG93IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5cbmZ1bmN0aW9uIGRlbGV0ZVByb3BzKG9iaikge1xuICB2YXIgb2JqZWN0ID0gb2JqO1xuICBPYmplY3Qua2V5cyhvYmplY3QpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHRyeSB7XG4gICAgICBvYmplY3Rba2V5XSA9IG51bGw7XG4gICAgfSBjYXRjaCAoZSkgey8vIG5vIGdldHRlciBmb3Igb2JqZWN0XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGRlbGV0ZSBvYmplY3Rba2V5XTtcbiAgICB9IGNhdGNoIChlKSB7Ly8gc29tZXRoaW5nIGdvdCB3cm9uZ1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIG5leHRUaWNrKGNhbGxiYWNrLCBkZWxheSkge1xuICBpZiAoZGVsYXkgPT09IHZvaWQgMCkge1xuICAgIGRlbGF5ID0gMDtcbiAgfVxuXG4gIHJldHVybiBzZXRUaW1lb3V0KGNhbGxiYWNrLCBkZWxheSk7XG59XG5cbmZ1bmN0aW9uIG5vdygpIHtcbiAgcmV0dXJuIERhdGUubm93KCk7XG59XG5cbmZ1bmN0aW9uIGdldENvbXB1dGVkU3R5bGUoZWwpIHtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICB2YXIgc3R5bGU7XG5cbiAgaWYgKHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKSB7XG4gICAgc3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgbnVsbCk7XG4gIH1cblxuICBpZiAoIXN0eWxlICYmIGVsLmN1cnJlbnRTdHlsZSkge1xuICAgIHN0eWxlID0gZWwuY3VycmVudFN0eWxlO1xuICB9XG5cbiAgaWYgKCFzdHlsZSkge1xuICAgIHN0eWxlID0gZWwuc3R5bGU7XG4gIH1cblxuICByZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIGdldFRyYW5zbGF0ZShlbCwgYXhpcykge1xuICBpZiAoYXhpcyA9PT0gdm9pZCAwKSB7XG4gICAgYXhpcyA9ICd4JztcbiAgfVxuXG4gIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgdmFyIG1hdHJpeDtcbiAgdmFyIGN1clRyYW5zZm9ybTtcbiAgdmFyIHRyYW5zZm9ybU1hdHJpeDtcbiAgdmFyIGN1clN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShlbCwgbnVsbCk7XG5cbiAgaWYgKHdpbmRvdy5XZWJLaXRDU1NNYXRyaXgpIHtcbiAgICBjdXJUcmFuc2Zvcm0gPSBjdXJTdHlsZS50cmFuc2Zvcm0gfHwgY3VyU3R5bGUud2Via2l0VHJhbnNmb3JtO1xuXG4gICAgaWYgKGN1clRyYW5zZm9ybS5zcGxpdCgnLCcpLmxlbmd0aCA+IDYpIHtcbiAgICAgIGN1clRyYW5zZm9ybSA9IGN1clRyYW5zZm9ybS5zcGxpdCgnLCAnKS5tYXAoZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgcmV0dXJuIGEucmVwbGFjZSgnLCcsICcuJyk7XG4gICAgICB9KS5qb2luKCcsICcpO1xuICAgIH0gLy8gU29tZSBvbGQgdmVyc2lvbnMgb2YgV2Via2l0IGNob2tlIHdoZW4gJ25vbmUnIGlzIHBhc3NlZDsgcGFzc1xuICAgIC8vIGVtcHR5IHN0cmluZyBpbnN0ZWFkIGluIHRoaXMgY2FzZVxuXG5cbiAgICB0cmFuc2Zvcm1NYXRyaXggPSBuZXcgd2luZG93LldlYktpdENTU01hdHJpeChjdXJUcmFuc2Zvcm0gPT09ICdub25lJyA/ICcnIDogY3VyVHJhbnNmb3JtKTtcbiAgfSBlbHNlIHtcbiAgICB0cmFuc2Zvcm1NYXRyaXggPSBjdXJTdHlsZS5Nb3pUcmFuc2Zvcm0gfHwgY3VyU3R5bGUuT1RyYW5zZm9ybSB8fCBjdXJTdHlsZS5Nc1RyYW5zZm9ybSB8fCBjdXJTdHlsZS5tc1RyYW5zZm9ybSB8fCBjdXJTdHlsZS50cmFuc2Zvcm0gfHwgY3VyU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgndHJhbnNmb3JtJykucmVwbGFjZSgndHJhbnNsYXRlKCcsICdtYXRyaXgoMSwgMCwgMCwgMSwnKTtcbiAgICBtYXRyaXggPSB0cmFuc2Zvcm1NYXRyaXgudG9TdHJpbmcoKS5zcGxpdCgnLCcpO1xuICB9XG5cbiAgaWYgKGF4aXMgPT09ICd4Jykge1xuICAgIC8vIExhdGVzdCBDaHJvbWUgYW5kIHdlYmtpdHMgRml4XG4gICAgaWYgKHdpbmRvdy5XZWJLaXRDU1NNYXRyaXgpIGN1clRyYW5zZm9ybSA9IHRyYW5zZm9ybU1hdHJpeC5tNDE7IC8vIENyYXp5IElFMTAgTWF0cml4XG4gICAgZWxzZSBpZiAobWF0cml4Lmxlbmd0aCA9PT0gMTYpIGN1clRyYW5zZm9ybSA9IHBhcnNlRmxvYXQobWF0cml4WzEyXSk7IC8vIE5vcm1hbCBCcm93c2Vyc1xuICAgICAgZWxzZSBjdXJUcmFuc2Zvcm0gPSBwYXJzZUZsb2F0KG1hdHJpeFs0XSk7XG4gIH1cblxuICBpZiAoYXhpcyA9PT0gJ3knKSB7XG4gICAgLy8gTGF0ZXN0IENocm9tZSBhbmQgd2Via2l0cyBGaXhcbiAgICBpZiAod2luZG93LldlYktpdENTU01hdHJpeCkgY3VyVHJhbnNmb3JtID0gdHJhbnNmb3JtTWF0cml4Lm00MjsgLy8gQ3JhenkgSUUxMCBNYXRyaXhcbiAgICBlbHNlIGlmIChtYXRyaXgubGVuZ3RoID09PSAxNikgY3VyVHJhbnNmb3JtID0gcGFyc2VGbG9hdChtYXRyaXhbMTNdKTsgLy8gTm9ybWFsIEJyb3dzZXJzXG4gICAgICBlbHNlIGN1clRyYW5zZm9ybSA9IHBhcnNlRmxvYXQobWF0cml4WzVdKTtcbiAgfVxuXG4gIHJldHVybiBjdXJUcmFuc2Zvcm0gfHwgMDtcbn1cblxuZnVuY3Rpb24gaXNPYmplY3Qobykge1xuICByZXR1cm4gdHlwZW9mIG8gPT09ICdvYmplY3QnICYmIG8gIT09IG51bGwgJiYgby5jb25zdHJ1Y3RvciAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpID09PSAnT2JqZWN0Jztcbn1cblxuZnVuY3Rpb24gZXh0ZW5kKCkge1xuICB2YXIgdG8gPSBPYmplY3QoYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdKTtcbiAgdmFyIG5vRXh0ZW5kID0gWydfX3Byb3RvX18nLCAnY29uc3RydWN0b3InLCAncHJvdG90eXBlJ107XG5cbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB2YXIgbmV4dFNvdXJjZSA9IGkgPCAwIHx8IGFyZ3VtZW50cy5sZW5ndGggPD0gaSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1tpXTtcblxuICAgIGlmIChuZXh0U291cmNlICE9PSB1bmRlZmluZWQgJiYgbmV4dFNvdXJjZSAhPT0gbnVsbCkge1xuICAgICAgdmFyIGtleXNBcnJheSA9IE9iamVjdC5rZXlzKE9iamVjdChuZXh0U291cmNlKSkuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgcmV0dXJuIG5vRXh0ZW5kLmluZGV4T2Yoa2V5KSA8IDA7XG4gICAgICB9KTtcblxuICAgICAgZm9yICh2YXIgbmV4dEluZGV4ID0gMCwgbGVuID0ga2V5c0FycmF5Lmxlbmd0aDsgbmV4dEluZGV4IDwgbGVuOyBuZXh0SW5kZXggKz0gMSkge1xuICAgICAgICB2YXIgbmV4dEtleSA9IGtleXNBcnJheVtuZXh0SW5kZXhdO1xuICAgICAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobmV4dFNvdXJjZSwgbmV4dEtleSk7XG5cbiAgICAgICAgaWYgKGRlc2MgIT09IHVuZGVmaW5lZCAmJiBkZXNjLmVudW1lcmFibGUpIHtcbiAgICAgICAgICBpZiAoaXNPYmplY3QodG9bbmV4dEtleV0pICYmIGlzT2JqZWN0KG5leHRTb3VyY2VbbmV4dEtleV0pKSB7XG4gICAgICAgICAgICBpZiAobmV4dFNvdXJjZVtuZXh0S2V5XS5fX3N3aXBlcl9fKSB7XG4gICAgICAgICAgICAgIHRvW25leHRLZXldID0gbmV4dFNvdXJjZVtuZXh0S2V5XTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGV4dGVuZCh0b1tuZXh0S2V5XSwgbmV4dFNvdXJjZVtuZXh0S2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmICghaXNPYmplY3QodG9bbmV4dEtleV0pICYmIGlzT2JqZWN0KG5leHRTb3VyY2VbbmV4dEtleV0pKSB7XG4gICAgICAgICAgICB0b1tuZXh0S2V5XSA9IHt9O1xuXG4gICAgICAgICAgICBpZiAobmV4dFNvdXJjZVtuZXh0S2V5XS5fX3N3aXBlcl9fKSB7XG4gICAgICAgICAgICAgIHRvW25leHRLZXldID0gbmV4dFNvdXJjZVtuZXh0S2V5XTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGV4dGVuZCh0b1tuZXh0S2V5XSwgbmV4dFNvdXJjZVtuZXh0S2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRvW25leHRLZXldID0gbmV4dFNvdXJjZVtuZXh0S2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdG87XG59XG5cbmZ1bmN0aW9uIGJpbmRNb2R1bGVNZXRob2RzKGluc3RhbmNlLCBvYmopIHtcbiAgT2JqZWN0LmtleXMob2JqKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoaXNPYmplY3Qob2JqW2tleV0pKSB7XG4gICAgICBPYmplY3Qua2V5cyhvYmpba2V5XSkuZm9yRWFjaChmdW5jdGlvbiAoc3ViS2V5KSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JqW2tleV1bc3ViS2V5XSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIG9ialtrZXldW3N1YktleV0gPSBvYmpba2V5XVtzdWJLZXldLmJpbmQoaW5zdGFuY2UpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpbnN0YW5jZVtrZXldID0gb2JqW2tleV07XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBjbGFzc2VzVG9TZWxlY3RvcihjbGFzc2VzKSB7XG4gIGlmIChjbGFzc2VzID09PSB2b2lkIDApIHtcbiAgICBjbGFzc2VzID0gJyc7XG4gIH1cblxuICByZXR1cm4gXCIuXCIgKyBjbGFzc2VzLnRyaW0oKS5yZXBsYWNlKC8oW1xcLjpcXC9dKS9nLCAnXFxcXCQxJykgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAucmVwbGFjZSgvIC9nLCAnLicpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50SWZOb3REZWZpbmVkKCRjb250YWluZXIsIHBhcmFtcywgY3JlYXRlRWxlbWVudHMsIGNoZWNrUHJvcHMpIHtcbiAgdmFyIGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcblxuICBpZiAoY3JlYXRlRWxlbWVudHMpIHtcbiAgICBPYmplY3Qua2V5cyhjaGVja1Byb3BzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIGlmICghcGFyYW1zW2tleV0gJiYgcGFyYW1zLmF1dG8gPT09IHRydWUpIHtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgZWxlbWVudC5jbGFzc05hbWUgPSBjaGVja1Byb3BzW2tleV07XG4gICAgICAgICRjb250YWluZXIuYXBwZW5kKGVsZW1lbnQpO1xuICAgICAgICBwYXJhbXNba2V5XSA9IGVsZW1lbnQ7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gcGFyYW1zO1xufVxuXG5leHBvcnQgeyBkZWxldGVQcm9wcywgbmV4dFRpY2ssIG5vdywgZ2V0VHJhbnNsYXRlLCBpc09iamVjdCwgZXh0ZW5kLCBiaW5kTW9kdWxlTWV0aG9kcywgZ2V0Q29tcHV0ZWRTdHlsZSwgY2xhc3Nlc1RvU2VsZWN0b3IsIGNyZWF0ZUVsZW1lbnRJZk5vdERlZmluZWQgfTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS91dGlscy91dGlscy5qcyIsImltcG9ydCB7ICQsIGFkZENsYXNzLCByZW1vdmVDbGFzcywgaGFzQ2xhc3MsIHRvZ2dsZUNsYXNzLCBhdHRyLCByZW1vdmVBdHRyLCB0cmFuc2Zvcm0sIHRyYW5zaXRpb24sIG9uLCBvZmYsIHRyaWdnZXIsIHRyYW5zaXRpb25FbmQsIG91dGVyV2lkdGgsIG91dGVySGVpZ2h0LCBzdHlsZXMsIG9mZnNldCwgY3NzLCBlYWNoLCBodG1sLCB0ZXh0LCBpcywgaW5kZXgsIGVxLCBhcHBlbmQsIHByZXBlbmQsIG5leHQsIG5leHRBbGwsIHByZXYsIHByZXZBbGwsIHBhcmVudCwgcGFyZW50cywgY2xvc2VzdCwgZmluZCwgY2hpbGRyZW4sIGZpbHRlciwgcmVtb3ZlIH0gZnJvbSAnZG9tNyc7XG52YXIgTWV0aG9kcyA9IHtcbiAgYWRkQ2xhc3M6IGFkZENsYXNzLFxuICByZW1vdmVDbGFzczogcmVtb3ZlQ2xhc3MsXG4gIGhhc0NsYXNzOiBoYXNDbGFzcyxcbiAgdG9nZ2xlQ2xhc3M6IHRvZ2dsZUNsYXNzLFxuICBhdHRyOiBhdHRyLFxuICByZW1vdmVBdHRyOiByZW1vdmVBdHRyLFxuICB0cmFuc2Zvcm06IHRyYW5zZm9ybSxcbiAgdHJhbnNpdGlvbjogdHJhbnNpdGlvbixcbiAgb246IG9uLFxuICBvZmY6IG9mZixcbiAgdHJpZ2dlcjogdHJpZ2dlcixcbiAgdHJhbnNpdGlvbkVuZDogdHJhbnNpdGlvbkVuZCxcbiAgb3V0ZXJXaWR0aDogb3V0ZXJXaWR0aCxcbiAgb3V0ZXJIZWlnaHQ6IG91dGVySGVpZ2h0LFxuICBzdHlsZXM6IHN0eWxlcyxcbiAgb2Zmc2V0OiBvZmZzZXQsXG4gIGNzczogY3NzLFxuICBlYWNoOiBlYWNoLFxuICBodG1sOiBodG1sLFxuICB0ZXh0OiB0ZXh0LFxuICBpczogaXMsXG4gIGluZGV4OiBpbmRleCxcbiAgZXE6IGVxLFxuICBhcHBlbmQ6IGFwcGVuZCxcbiAgcHJlcGVuZDogcHJlcGVuZCxcbiAgbmV4dDogbmV4dCxcbiAgbmV4dEFsbDogbmV4dEFsbCxcbiAgcHJldjogcHJldixcbiAgcHJldkFsbDogcHJldkFsbCxcbiAgcGFyZW50OiBwYXJlbnQsXG4gIHBhcmVudHM6IHBhcmVudHMsXG4gIGNsb3Nlc3Q6IGNsb3Nlc3QsXG4gIGZpbmQ6IGZpbmQsXG4gIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgZmlsdGVyOiBmaWx0ZXIsXG4gIHJlbW92ZTogcmVtb3ZlXG59O1xuT2JqZWN0LmtleXMoTWV0aG9kcykuZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kTmFtZSkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoJC5mbiwgbWV0aG9kTmFtZSwge1xuICAgIHZhbHVlOiBNZXRob2RzW21ldGhvZE5hbWVdLFxuICAgIHdyaXRhYmxlOiB0cnVlXG4gIH0pO1xufSk7XG5leHBvcnQgZGVmYXVsdCAkO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL3V0aWxzL2RvbS5qcyIsIi8qKlxuICogU1NSIFdpbmRvdyAzLjAuMFxuICogQmV0dGVyIGhhbmRsaW5nIGZvciB3aW5kb3cgb2JqZWN0IGluIFNTUiBlbnZpcm9ubWVudFxuICogaHR0cHM6Ly9naXRodWIuY29tL25vbGltaXRzNHdlYi9zc3Itd2luZG93XG4gKlxuICogQ29weXJpZ2h0IDIwMjAsIFZsYWRpbWlyIEtoYXJsYW1waWRpXG4gKlxuICogTGljZW5zZWQgdW5kZXIgTUlUXG4gKlxuICogUmVsZWFzZWQgb246IE5vdmVtYmVyIDksIDIwMjBcbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KG9iaikge1xuICAgIHJldHVybiAob2JqICE9PSBudWxsICYmXG4gICAgICAgIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmXG4gICAgICAgICdjb25zdHJ1Y3RvcicgaW4gb2JqICYmXG4gICAgICAgIG9iai5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0KTtcbn1cbmZ1bmN0aW9uIGV4dGVuZCh0YXJnZXQsIHNyYykge1xuICAgIGlmICh0YXJnZXQgPT09IHZvaWQgMCkgeyB0YXJnZXQgPSB7fTsgfVxuICAgIGlmIChzcmMgPT09IHZvaWQgMCkgeyBzcmMgPSB7fTsgfVxuICAgIE9iamVjdC5rZXlzKHNyYykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0W2tleV0gPT09ICd1bmRlZmluZWQnKVxuICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSBzcmNba2V5XTtcbiAgICAgICAgZWxzZSBpZiAoaXNPYmplY3Qoc3JjW2tleV0pICYmXG4gICAgICAgICAgICBpc09iamVjdCh0YXJnZXRba2V5XSkgJiZcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHNyY1trZXldKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBleHRlbmQodGFyZ2V0W2tleV0sIHNyY1trZXldKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG52YXIgc3NyRG9jdW1lbnQgPSB7XG4gICAgYm9keToge30sXG4gICAgYWRkRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gKCkgeyB9LFxuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICBhY3RpdmVFbGVtZW50OiB7XG4gICAgICAgIGJsdXI6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICAgICAgbm9kZU5hbWU6ICcnLFxuICAgIH0sXG4gICAgcXVlcnlTZWxlY3RvcjogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuICAgIHF1ZXJ5U2VsZWN0b3JBbGw6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH0sXG4gICAgZ2V0RWxlbWVudEJ5SWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcbiAgICBjcmVhdGVFdmVudDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaW5pdEV2ZW50OiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBjcmVhdGVFbGVtZW50OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjaGlsZHJlbjogW10sXG4gICAgICAgICAgICBjaGlsZE5vZGVzOiBbXSxcbiAgICAgICAgICAgIHN0eWxlOiB7fSxcbiAgICAgICAgICAgIHNldEF0dHJpYnV0ZTogZnVuY3Rpb24gKCkgeyB9LFxuICAgICAgICAgICAgZ2V0RWxlbWVudHNCeVRhZ05hbWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgY3JlYXRlRWxlbWVudE5TOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9LFxuICAgIGltcG9ydE5vZGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcbiAgICBsb2NhdGlvbjoge1xuICAgICAgICBoYXNoOiAnJyxcbiAgICAgICAgaG9zdDogJycsXG4gICAgICAgIGhvc3RuYW1lOiAnJyxcbiAgICAgICAgaHJlZjogJycsXG4gICAgICAgIG9yaWdpbjogJycsXG4gICAgICAgIHBhdGhuYW1lOiAnJyxcbiAgICAgICAgcHJvdG9jb2w6ICcnLFxuICAgICAgICBzZWFyY2g6ICcnLFxuICAgIH0sXG59O1xuZnVuY3Rpb24gZ2V0RG9jdW1lbnQoKSB7XG4gICAgdmFyIGRvYyA9IHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgPyBkb2N1bWVudCA6IHt9O1xuICAgIGV4dGVuZChkb2MsIHNzckRvY3VtZW50KTtcbiAgICByZXR1cm4gZG9jO1xufVxuXG52YXIgc3NyV2luZG93ID0ge1xuICAgIGRvY3VtZW50OiBzc3JEb2N1bWVudCxcbiAgICBuYXZpZ2F0b3I6IHtcbiAgICAgICAgdXNlckFnZW50OiAnJyxcbiAgICB9LFxuICAgIGxvY2F0aW9uOiB7XG4gICAgICAgIGhhc2g6ICcnLFxuICAgICAgICBob3N0OiAnJyxcbiAgICAgICAgaG9zdG5hbWU6ICcnLFxuICAgICAgICBocmVmOiAnJyxcbiAgICAgICAgb3JpZ2luOiAnJyxcbiAgICAgICAgcGF0aG5hbWU6ICcnLFxuICAgICAgICBwcm90b2NvbDogJycsXG4gICAgICAgIHNlYXJjaDogJycsXG4gICAgfSxcbiAgICBoaXN0b3J5OiB7XG4gICAgICAgIHJlcGxhY2VTdGF0ZTogZnVuY3Rpb24gKCkgeyB9LFxuICAgICAgICBwdXNoU3RhdGU6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICAgICAgZ286IGZ1bmN0aW9uICgpIHsgfSxcbiAgICAgICAgYmFjazogZnVuY3Rpb24gKCkgeyB9LFxuICAgIH0sXG4gICAgQ3VzdG9tRXZlbnQ6IGZ1bmN0aW9uIEN1c3RvbUV2ZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGFkZEV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICByZW1vdmVFdmVudExpc3RlbmVyOiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgZ2V0Q29tcHV0ZWRTdHlsZTogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZ2V0UHJvcGVydHlWYWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBJbWFnZTogZnVuY3Rpb24gKCkgeyB9LFxuICAgIERhdGU6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICBzY3JlZW46IHt9LFxuICAgIHNldFRpbWVvdXQ6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICBjbGVhclRpbWVvdXQ6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICBtYXRjaE1lZGlhOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9LFxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZTogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2V0VGltZW91dChjYWxsYmFjaywgMCk7XG4gICAgfSxcbiAgICBjYW5jZWxBbmltYXRpb25GcmFtZTogZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjbGVhclRpbWVvdXQoaWQpO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gZ2V0V2luZG93KCkge1xuICAgIHZhciB3aW4gPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHt9O1xuICAgIGV4dGVuZCh3aW4sIHNzcldpbmRvdyk7XG4gICAgcmV0dXJuIHdpbjtcbn1cblxuZXhwb3J0IHsgZXh0ZW5kLCBnZXREb2N1bWVudCwgZ2V0V2luZG93LCBzc3JEb2N1bWVudCwgc3NyV2luZG93IH07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvc3NyLXdpbmRvdy9zc3Itd2luZG93LmVzbS5qcyIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG5cdHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcblx0dHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcblx0KGdsb2JhbC5Ccm93c2VyU3ByaXRlU3ltYm9sID0gZmFjdG9yeSgpKTtcbn0odGhpcywgKGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO1xuXG52YXIgU3ByaXRlU3ltYm9sID0gZnVuY3Rpb24gU3ByaXRlU3ltYm9sKHJlZikge1xuICB2YXIgaWQgPSByZWYuaWQ7XG4gIHZhciB2aWV3Qm94ID0gcmVmLnZpZXdCb3g7XG4gIHZhciBjb250ZW50ID0gcmVmLmNvbnRlbnQ7XG5cbiAgdGhpcy5pZCA9IGlkO1xuICB0aGlzLnZpZXdCb3ggPSB2aWV3Qm94O1xuICB0aGlzLmNvbnRlbnQgPSBjb250ZW50O1xufTtcblxuLyoqXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cblNwcml0ZVN5bWJvbC5wcm90b3R5cGUuc3RyaW5naWZ5ID0gZnVuY3Rpb24gc3RyaW5naWZ5ICgpIHtcbiAgcmV0dXJuIHRoaXMuY29udGVudDtcbn07XG5cbi8qKlxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5TcHJpdGVTeW1ib2wucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICByZXR1cm4gdGhpcy5zdHJpbmdpZnkoKTtcbn07XG5cblNwcml0ZVN5bWJvbC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3kgKCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIFsnaWQnLCAndmlld0JveCcsICdjb250ZW50J10uZm9yRWFjaChmdW5jdGlvbiAocHJvcCkgeyByZXR1cm4gZGVsZXRlIHRoaXMkMVtwcm9wXTsgfSk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50XG4gKiBAcmV0dXJuIHtFbGVtZW50fVxuICovXG52YXIgcGFyc2UgPSBmdW5jdGlvbiAoY29udGVudCkge1xuICB2YXIgaGFzSW1wb3J0Tm9kZSA9ICEhZG9jdW1lbnQuaW1wb3J0Tm9kZTtcbiAgdmFyIGRvYyA9IG5ldyBET01QYXJzZXIoKS5wYXJzZUZyb21TdHJpbmcoY29udGVudCwgJ2ltYWdlL3N2Zyt4bWwnKS5kb2N1bWVudEVsZW1lbnQ7XG5cbiAgLyoqXG4gICAqIEZpeCBmb3IgYnJvd3NlciB3aGljaCBhcmUgdGhyb3dpbmcgV3JvbmdEb2N1bWVudEVycm9yXG4gICAqIGlmIHlvdSBpbnNlcnQgYW4gZWxlbWVudCB3aGljaCBpcyBub3QgcGFydCBvZiB0aGUgZG9jdW1lbnRcbiAgICogQHNlZSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS83OTg2NTE5LzQ2MjQ0MDNcbiAgICovXG4gIGlmIChoYXNJbXBvcnROb2RlKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmltcG9ydE5vZGUoZG9jLCB0cnVlKTtcbiAgfVxuXG4gIHJldHVybiBkb2M7XG59O1xuXG52YXIgY29tbW9uanNHbG9iYWwgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6IHt9O1xuXG5cblxuXG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZuLCBtb2R1bGUpIHtcblx0cmV0dXJuIG1vZHVsZSA9IHsgZXhwb3J0czoge30gfSwgZm4obW9kdWxlLCBtb2R1bGUuZXhwb3J0cyksIG1vZHVsZS5leHBvcnRzO1xufVxuXG52YXIgZGVlcG1lcmdlID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XG4gICAgaWYgKHR5cGVvZiB1bmRlZmluZWQgPT09ICdmdW5jdGlvbicgJiYgdW5kZWZpbmVkLmFtZCkge1xuICAgICAgICB1bmRlZmluZWQoZmFjdG9yeSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG4gICAgfVxufShjb21tb25qc0dsb2JhbCwgZnVuY3Rpb24gKCkge1xuXG5mdW5jdGlvbiBpc01lcmdlYWJsZU9iamVjdCh2YWwpIHtcbiAgICB2YXIgbm9uTnVsbE9iamVjdCA9IHZhbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0JztcblxuICAgIHJldHVybiBub25OdWxsT2JqZWN0XG4gICAgICAgICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWwpICE9PSAnW29iamVjdCBSZWdFeHBdJ1xuICAgICAgICAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsKSAhPT0gJ1tvYmplY3QgRGF0ZV0nXG59XG5cbmZ1bmN0aW9uIGVtcHR5VGFyZ2V0KHZhbCkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KHZhbCkgPyBbXSA6IHt9XG59XG5cbmZ1bmN0aW9uIGNsb25lSWZOZWNlc3NhcnkodmFsdWUsIG9wdGlvbnNBcmd1bWVudCkge1xuICAgIHZhciBjbG9uZSA9IG9wdGlvbnNBcmd1bWVudCAmJiBvcHRpb25zQXJndW1lbnQuY2xvbmUgPT09IHRydWU7XG4gICAgcmV0dXJuIChjbG9uZSAmJiBpc01lcmdlYWJsZU9iamVjdCh2YWx1ZSkpID8gZGVlcG1lcmdlKGVtcHR5VGFyZ2V0KHZhbHVlKSwgdmFsdWUsIG9wdGlvbnNBcmd1bWVudCkgOiB2YWx1ZVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0QXJyYXlNZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9uc0FyZ3VtZW50KSB7XG4gICAgdmFyIGRlc3RpbmF0aW9uID0gdGFyZ2V0LnNsaWNlKCk7XG4gICAgc291cmNlLmZvckVhY2goZnVuY3Rpb24oZSwgaSkge1xuICAgICAgICBpZiAodHlwZW9mIGRlc3RpbmF0aW9uW2ldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgZGVzdGluYXRpb25baV0gPSBjbG9uZUlmTmVjZXNzYXJ5KGUsIG9wdGlvbnNBcmd1bWVudCk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNNZXJnZWFibGVPYmplY3QoZSkpIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uW2ldID0gZGVlcG1lcmdlKHRhcmdldFtpXSwgZSwgb3B0aW9uc0FyZ3VtZW50KTtcbiAgICAgICAgfSBlbHNlIGlmICh0YXJnZXQuaW5kZXhPZihlKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uLnB1c2goY2xvbmVJZk5lY2Vzc2FyeShlLCBvcHRpb25zQXJndW1lbnQpKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBkZXN0aW5hdGlvblxufVxuXG5mdW5jdGlvbiBtZXJnZU9iamVjdCh0YXJnZXQsIHNvdXJjZSwgb3B0aW9uc0FyZ3VtZW50KSB7XG4gICAgdmFyIGRlc3RpbmF0aW9uID0ge307XG4gICAgaWYgKGlzTWVyZ2VhYmxlT2JqZWN0KHRhcmdldCkpIHtcbiAgICAgICAgT2JqZWN0LmtleXModGFyZ2V0KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uW2tleV0gPSBjbG9uZUlmTmVjZXNzYXJ5KHRhcmdldFtrZXldLCBvcHRpb25zQXJndW1lbnQpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgT2JqZWN0LmtleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCFpc01lcmdlYWJsZU9iamVjdChzb3VyY2Vba2V5XSkgfHwgIXRhcmdldFtrZXldKSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbltrZXldID0gY2xvbmVJZk5lY2Vzc2FyeShzb3VyY2Vba2V5XSwgb3B0aW9uc0FyZ3VtZW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uW2tleV0gPSBkZWVwbWVyZ2UodGFyZ2V0W2tleV0sIHNvdXJjZVtrZXldLCBvcHRpb25zQXJndW1lbnQpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGRlc3RpbmF0aW9uXG59XG5cbmZ1bmN0aW9uIGRlZXBtZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9uc0FyZ3VtZW50KSB7XG4gICAgdmFyIGFycmF5ID0gQXJyYXkuaXNBcnJheShzb3VyY2UpO1xuICAgIHZhciBvcHRpb25zID0gb3B0aW9uc0FyZ3VtZW50IHx8IHsgYXJyYXlNZXJnZTogZGVmYXVsdEFycmF5TWVyZ2UgfTtcbiAgICB2YXIgYXJyYXlNZXJnZSA9IG9wdGlvbnMuYXJyYXlNZXJnZSB8fCBkZWZhdWx0QXJyYXlNZXJnZTtcblxuICAgIGlmIChhcnJheSkge1xuICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh0YXJnZXQpID8gYXJyYXlNZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9uc0FyZ3VtZW50KSA6IGNsb25lSWZOZWNlc3Nhcnkoc291cmNlLCBvcHRpb25zQXJndW1lbnQpXG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG1lcmdlT2JqZWN0KHRhcmdldCwgc291cmNlLCBvcHRpb25zQXJndW1lbnQpXG4gICAgfVxufVxuXG5kZWVwbWVyZ2UuYWxsID0gZnVuY3Rpb24gZGVlcG1lcmdlQWxsKGFycmF5LCBvcHRpb25zQXJndW1lbnQpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoYXJyYXkpIHx8IGFycmF5Lmxlbmd0aCA8IDIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdmaXJzdCBhcmd1bWVudCBzaG91bGQgYmUgYW4gYXJyYXkgd2l0aCBhdCBsZWFzdCB0d28gZWxlbWVudHMnKVxuICAgIH1cblxuICAgIC8vIHdlIGFyZSBzdXJlIHRoZXJlIGFyZSBhdCBsZWFzdCAyIHZhbHVlcywgc28gaXQgaXMgc2FmZSB0byBoYXZlIG5vIGluaXRpYWwgdmFsdWVcbiAgICByZXR1cm4gYXJyYXkucmVkdWNlKGZ1bmN0aW9uKHByZXYsIG5leHQpIHtcbiAgICAgICAgcmV0dXJuIGRlZXBtZXJnZShwcmV2LCBuZXh0LCBvcHRpb25zQXJndW1lbnQpXG4gICAgfSlcbn07XG5cbnJldHVybiBkZWVwbWVyZ2VcblxufSkpO1xufSk7XG5cbnZhciBuYW1lc3BhY2VzXzEgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG52YXIgbmFtZXNwYWNlcyA9IHtcbiAgc3ZnOiB7XG4gICAgbmFtZTogJ3htbG5zJyxcbiAgICB1cmk6ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZydcbiAgfSxcbiAgeGxpbms6IHtcbiAgICBuYW1lOiAneG1sbnM6eGxpbmsnLFxuICAgIHVyaTogJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnXG4gIH1cbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IG5hbWVzcGFjZXM7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbn0pO1xuXG4vKipcbiAqIEBwYXJhbSB7T2JqZWN0fSBhdHRyc1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG52YXIgb2JqZWN0VG9BdHRyc1N0cmluZyA9IGZ1bmN0aW9uIChhdHRycykge1xuICByZXR1cm4gT2JqZWN0LmtleXMoYXR0cnMpLm1hcChmdW5jdGlvbiAoYXR0cikge1xuICAgIHZhciB2YWx1ZSA9IGF0dHJzW2F0dHJdLnRvU3RyaW5nKCkucmVwbGFjZSgvXCIvZywgJyZxdW90OycpO1xuICAgIHJldHVybiAoYXR0ciArIFwiPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiXCIpO1xuICB9KS5qb2luKCcgJyk7XG59O1xuXG52YXIgc3ZnID0gbmFtZXNwYWNlc18xLnN2ZztcbnZhciB4bGluayA9IG5hbWVzcGFjZXNfMS54bGluaztcblxudmFyIGRlZmF1bHRBdHRycyA9IHt9O1xuZGVmYXVsdEF0dHJzW3N2Zy5uYW1lXSA9IHN2Zy51cmk7XG5kZWZhdWx0QXR0cnNbeGxpbmsubmFtZV0gPSB4bGluay51cmk7XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb250ZW50XVxuICogQHBhcmFtIHtPYmplY3R9IFthdHRyaWJ1dGVzXVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG52YXIgd3JhcEluU3ZnU3RyaW5nID0gZnVuY3Rpb24gKGNvbnRlbnQsIGF0dHJpYnV0ZXMpIHtcbiAgaWYgKCBjb250ZW50ID09PSB2b2lkIDAgKSBjb250ZW50ID0gJyc7XG5cbiAgdmFyIGF0dHJzID0gZGVlcG1lcmdlKGRlZmF1bHRBdHRycywgYXR0cmlidXRlcyB8fCB7fSk7XG4gIHZhciBhdHRyc1JlbmRlcmVkID0gb2JqZWN0VG9BdHRyc1N0cmluZyhhdHRycyk7XG4gIHJldHVybiAoXCI8c3ZnIFwiICsgYXR0cnNSZW5kZXJlZCArIFwiPlwiICsgY29udGVudCArIFwiPC9zdmc+XCIpO1xufTtcblxudmFyIEJyb3dzZXJTcHJpdGVTeW1ib2wgPSAoZnVuY3Rpb24gKFNwcml0ZVN5bWJvbCQkMSkge1xuICBmdW5jdGlvbiBCcm93c2VyU3ByaXRlU3ltYm9sICgpIHtcbiAgICBTcHJpdGVTeW1ib2wkJDEuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIGlmICggU3ByaXRlU3ltYm9sJCQxICkgQnJvd3NlclNwcml0ZVN5bWJvbC5fX3Byb3RvX18gPSBTcHJpdGVTeW1ib2wkJDE7XG4gIEJyb3dzZXJTcHJpdGVTeW1ib2wucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggU3ByaXRlU3ltYm9sJCQxICYmIFNwcml0ZVN5bWJvbCQkMS5wcm90b3R5cGUgKTtcbiAgQnJvd3NlclNwcml0ZVN5bWJvbC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBCcm93c2VyU3ByaXRlU3ltYm9sO1xuXG4gIHZhciBwcm90b3R5cGVBY2Nlc3NvcnMgPSB7IGlzTW91bnRlZDoge30gfTtcblxuICBwcm90b3R5cGVBY2Nlc3NvcnMuaXNNb3VudGVkLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gISF0aGlzLm5vZGU7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gbm9kZVxuICAgKiBAcmV0dXJuIHtCcm93c2VyU3ByaXRlU3ltYm9sfVxuICAgKi9cbiAgQnJvd3NlclNwcml0ZVN5bWJvbC5jcmVhdGVGcm9tRXhpc3RpbmdOb2RlID0gZnVuY3Rpb24gY3JlYXRlRnJvbUV4aXN0aW5nTm9kZSAobm9kZSkge1xuICAgIHJldHVybiBuZXcgQnJvd3NlclNwcml0ZVN5bWJvbCh7XG4gICAgICBpZDogbm9kZS5nZXRBdHRyaWJ1dGUoJ2lkJyksXG4gICAgICB2aWV3Qm94OiBub2RlLmdldEF0dHJpYnV0ZSgndmlld0JveCcpLFxuICAgICAgY29udGVudDogbm9kZS5vdXRlckhUTUxcbiAgICB9KTtcbiAgfTtcblxuICBCcm93c2VyU3ByaXRlU3ltYm9sLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSAoKSB7XG4gICAgaWYgKHRoaXMuaXNNb3VudGVkKSB7XG4gICAgICB0aGlzLnVubW91bnQoKTtcbiAgICB9XG4gICAgU3ByaXRlU3ltYm9sJCQxLnByb3RvdHlwZS5kZXN0cm95LmNhbGwodGhpcyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7RWxlbWVudHxzdHJpbmd9IHRhcmdldFxuICAgKiBAcmV0dXJuIHtFbGVtZW50fVxuICAgKi9cbiAgQnJvd3NlclNwcml0ZVN5bWJvbC5wcm90b3R5cGUubW91bnQgPSBmdW5jdGlvbiBtb3VudCAodGFyZ2V0KSB7XG4gICAgaWYgKHRoaXMuaXNNb3VudGVkKSB7XG4gICAgICByZXR1cm4gdGhpcy5ub2RlO1xuICAgIH1cblxuICAgIHZhciBtb3VudFRhcmdldCA9IHR5cGVvZiB0YXJnZXQgPT09ICdzdHJpbmcnID8gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpIDogdGFyZ2V0O1xuICAgIHZhciBub2RlID0gdGhpcy5yZW5kZXIoKTtcbiAgICB0aGlzLm5vZGUgPSBub2RlO1xuXG4gICAgbW91bnRUYXJnZXQuYXBwZW5kQ2hpbGQobm9kZSk7XG5cbiAgICByZXR1cm4gbm9kZTtcbiAgfTtcblxuICAvKipcbiAgICogQHJldHVybiB7RWxlbWVudH1cbiAgICovXG4gIEJyb3dzZXJTcHJpdGVTeW1ib2wucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlciAoKSB7XG4gICAgdmFyIGNvbnRlbnQgPSB0aGlzLnN0cmluZ2lmeSgpO1xuICAgIHJldHVybiBwYXJzZSh3cmFwSW5TdmdTdHJpbmcoY29udGVudCkpLmNoaWxkTm9kZXNbMF07XG4gIH07XG5cbiAgQnJvd3NlclNwcml0ZVN5bWJvbC5wcm90b3R5cGUudW5tb3VudCA9IGZ1bmN0aW9uIHVubW91bnQgKCkge1xuICAgIHRoaXMubm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMubm9kZSk7XG4gIH07XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIEJyb3dzZXJTcHJpdGVTeW1ib2wucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMgKTtcblxuICByZXR1cm4gQnJvd3NlclNwcml0ZVN5bWJvbDtcbn0oU3ByaXRlU3ltYm9sKSk7XG5cbnJldHVybiBCcm93c2VyU3ByaXRlU3ltYm9sO1xuXG59KSkpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3N2Zy1iYWtlci1ydW50aW1lL2Jyb3dzZXItc3ltYm9sLmpzIiwiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcblx0dHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuXHR0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuXHQoZ2xvYmFsLkJyb3dzZXJTcHJpdGUgPSBmYWN0b3J5KCkpO1xufSh0aGlzLCAoZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbnZhciBjb21tb25qc0dsb2JhbCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDoge307XG5cblxuXG5cblxuZnVuY3Rpb24gY3JlYXRlQ29tbW9uanNNb2R1bGUoZm4sIG1vZHVsZSkge1xuXHRyZXR1cm4gbW9kdWxlID0geyBleHBvcnRzOiB7fSB9LCBmbihtb2R1bGUsIG1vZHVsZS5leHBvcnRzKSwgbW9kdWxlLmV4cG9ydHM7XG59XG5cbnZhciBkZWVwbWVyZ2UgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG4oZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHtcbiAgICBpZiAodHlwZW9mIHVuZGVmaW5lZCA9PT0gJ2Z1bmN0aW9uJyAmJiB1bmRlZmluZWQuYW1kKSB7XG4gICAgICAgIHVuZGVmaW5lZChmYWN0b3J5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcbiAgICB9XG59KGNvbW1vbmpzR2xvYmFsLCBmdW5jdGlvbiAoKSB7XG5cbmZ1bmN0aW9uIGlzTWVyZ2VhYmxlT2JqZWN0KHZhbCkge1xuICAgIHZhciBub25OdWxsT2JqZWN0ID0gdmFsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnO1xuXG4gICAgcmV0dXJuIG5vbk51bGxPYmplY3RcbiAgICAgICAgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbCkgIT09ICdbb2JqZWN0IFJlZ0V4cF0nXG4gICAgICAgICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWwpICE9PSAnW29iamVjdCBEYXRlXSdcbn1cblxuZnVuY3Rpb24gZW1wdHlUYXJnZXQodmFsKSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsKSA/IFtdIDoge31cbn1cblxuZnVuY3Rpb24gY2xvbmVJZk5lY2Vzc2FyeSh2YWx1ZSwgb3B0aW9uc0FyZ3VtZW50KSB7XG4gICAgdmFyIGNsb25lID0gb3B0aW9uc0FyZ3VtZW50ICYmIG9wdGlvbnNBcmd1bWVudC5jbG9uZSA9PT0gdHJ1ZTtcbiAgICByZXR1cm4gKGNsb25lICYmIGlzTWVyZ2VhYmxlT2JqZWN0KHZhbHVlKSkgPyBkZWVwbWVyZ2UoZW1wdHlUYXJnZXQodmFsdWUpLCB2YWx1ZSwgb3B0aW9uc0FyZ3VtZW50KSA6IHZhbHVlXG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRBcnJheU1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zQXJndW1lbnQpIHtcbiAgICB2YXIgZGVzdGluYXRpb24gPSB0YXJnZXQuc2xpY2UoKTtcbiAgICBzb3VyY2UuZm9yRWFjaChmdW5jdGlvbihlLCBpKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZGVzdGluYXRpb25baV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbltpXSA9IGNsb25lSWZOZWNlc3NhcnkoZSwgb3B0aW9uc0FyZ3VtZW50KTtcbiAgICAgICAgfSBlbHNlIGlmIChpc01lcmdlYWJsZU9iamVjdChlKSkge1xuICAgICAgICAgICAgZGVzdGluYXRpb25baV0gPSBkZWVwbWVyZ2UodGFyZ2V0W2ldLCBlLCBvcHRpb25zQXJndW1lbnQpO1xuICAgICAgICB9IGVsc2UgaWYgKHRhcmdldC5pbmRleE9mKGUpID09PSAtMSkge1xuICAgICAgICAgICAgZGVzdGluYXRpb24ucHVzaChjbG9uZUlmTmVjZXNzYXJ5KGUsIG9wdGlvbnNBcmd1bWVudCkpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGRlc3RpbmF0aW9uXG59XG5cbmZ1bmN0aW9uIG1lcmdlT2JqZWN0KHRhcmdldCwgc291cmNlLCBvcHRpb25zQXJndW1lbnQpIHtcbiAgICB2YXIgZGVzdGluYXRpb24gPSB7fTtcbiAgICBpZiAoaXNNZXJnZWFibGVPYmplY3QodGFyZ2V0KSkge1xuICAgICAgICBPYmplY3Qua2V5cyh0YXJnZXQpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgZGVzdGluYXRpb25ba2V5XSA9IGNsb25lSWZOZWNlc3NhcnkodGFyZ2V0W2tleV0sIG9wdGlvbnNBcmd1bWVudCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBPYmplY3Qua2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoIWlzTWVyZ2VhYmxlT2JqZWN0KHNvdXJjZVtrZXldKSB8fCAhdGFyZ2V0W2tleV0pIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uW2tleV0gPSBjbG9uZUlmTmVjZXNzYXJ5KHNvdXJjZVtrZXldLCBvcHRpb25zQXJndW1lbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGVzdGluYXRpb25ba2V5XSA9IGRlZXBtZXJnZSh0YXJnZXRba2V5XSwgc291cmNlW2tleV0sIG9wdGlvbnNBcmd1bWVudCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gZGVzdGluYXRpb25cbn1cblxuZnVuY3Rpb24gZGVlcG1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zQXJndW1lbnQpIHtcbiAgICB2YXIgYXJyYXkgPSBBcnJheS5pc0FycmF5KHNvdXJjZSk7XG4gICAgdmFyIG9wdGlvbnMgPSBvcHRpb25zQXJndW1lbnQgfHwgeyBhcnJheU1lcmdlOiBkZWZhdWx0QXJyYXlNZXJnZSB9O1xuICAgIHZhciBhcnJheU1lcmdlID0gb3B0aW9ucy5hcnJheU1lcmdlIHx8IGRlZmF1bHRBcnJheU1lcmdlO1xuXG4gICAgaWYgKGFycmF5KSB7XG4gICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KHRhcmdldCkgPyBhcnJheU1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zQXJndW1lbnQpIDogY2xvbmVJZk5lY2Vzc2FyeShzb3VyY2UsIG9wdGlvbnNBcmd1bWVudClcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbWVyZ2VPYmplY3QodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnNBcmd1bWVudClcbiAgICB9XG59XG5cbmRlZXBtZXJnZS5hbGwgPSBmdW5jdGlvbiBkZWVwbWVyZ2VBbGwoYXJyYXksIG9wdGlvbnNBcmd1bWVudCkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShhcnJheSkgfHwgYXJyYXkubGVuZ3RoIDwgMikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ZpcnN0IGFyZ3VtZW50IHNob3VsZCBiZSBhbiBhcnJheSB3aXRoIGF0IGxlYXN0IHR3byBlbGVtZW50cycpXG4gICAgfVxuXG4gICAgLy8gd2UgYXJlIHN1cmUgdGhlcmUgYXJlIGF0IGxlYXN0IDIgdmFsdWVzLCBzbyBpdCBpcyBzYWZlIHRvIGhhdmUgbm8gaW5pdGlhbCB2YWx1ZVxuICAgIHJldHVybiBhcnJheS5yZWR1Y2UoZnVuY3Rpb24ocHJldiwgbmV4dCkge1xuICAgICAgICByZXR1cm4gZGVlcG1lcmdlKHByZXYsIG5leHQsIG9wdGlvbnNBcmd1bWVudClcbiAgICB9KVxufTtcblxucmV0dXJuIGRlZXBtZXJnZVxuXG59KSk7XG59KTtcblxuLy8gICAgICBcbi8vIEFuIGV2ZW50IGhhbmRsZXIgY2FuIHRha2UgYW4gb3B0aW9uYWwgZXZlbnQgYXJndW1lbnRcbi8vIGFuZCBzaG91bGQgbm90IHJldHVybiBhIHZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbi8vIEFuIGFycmF5IG9mIGFsbCBjdXJyZW50bHkgcmVnaXN0ZXJlZCBldmVudCBoYW5kbGVycyBmb3IgYSB0eXBlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuLy8gQSBtYXAgb2YgZXZlbnQgdHlwZXMgYW5kIHRoZWlyIGNvcnJlc3BvbmRpbmcgZXZlbnQgaGFuZGxlcnMuXG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gIFxuXG4vKiogTWl0dDogVGlueSAofjIwMGIpIGZ1bmN0aW9uYWwgZXZlbnQgZW1pdHRlciAvIHB1YnN1Yi5cbiAqICBAbmFtZSBtaXR0XG4gKiAgQHJldHVybnMge01pdHR9XG4gKi9cbmZ1bmN0aW9uIG1pdHQoYWxsICAgICAgICAgICAgICAgICApIHtcblx0YWxsID0gYWxsIHx8IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cblx0cmV0dXJuIHtcblx0XHQvKipcblx0XHQgKiBSZWdpc3RlciBhbiBldmVudCBoYW5kbGVyIGZvciB0aGUgZ2l2ZW4gdHlwZS5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSAge1N0cmluZ30gdHlwZVx0VHlwZSBvZiBldmVudCB0byBsaXN0ZW4gZm9yLCBvciBgXCIqXCJgIGZvciBhbGwgZXZlbnRzXG5cdFx0ICogQHBhcmFtICB7RnVuY3Rpb259IGhhbmRsZXIgRnVuY3Rpb24gdG8gY2FsbCBpbiByZXNwb25zZSB0byBnaXZlbiBldmVudFxuXHRcdCAqIEBtZW1iZXJPZiBtaXR0XG5cdFx0ICovXG5cdFx0b246IGZ1bmN0aW9uIG9uKHR5cGUgICAgICAgICwgaGFuZGxlciAgICAgICAgICAgICAgKSB7XG5cdFx0XHQoYWxsW3R5cGVdIHx8IChhbGxbdHlwZV0gPSBbXSkpLnB1c2goaGFuZGxlcik7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFJlbW92ZSBhbiBldmVudCBoYW5kbGVyIGZvciB0aGUgZ2l2ZW4gdHlwZS5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSAge1N0cmluZ30gdHlwZVx0VHlwZSBvZiBldmVudCB0byB1bnJlZ2lzdGVyIGBoYW5kbGVyYCBmcm9tLCBvciBgXCIqXCJgXG5cdFx0ICogQHBhcmFtICB7RnVuY3Rpb259IGhhbmRsZXIgSGFuZGxlciBmdW5jdGlvbiB0byByZW1vdmVcblx0XHQgKiBAbWVtYmVyT2YgbWl0dFxuXHRcdCAqL1xuXHRcdG9mZjogZnVuY3Rpb24gb2ZmKHR5cGUgICAgICAgICwgaGFuZGxlciAgICAgICAgICAgICAgKSB7XG5cdFx0XHRpZiAoYWxsW3R5cGVdKSB7XG5cdFx0XHRcdGFsbFt0eXBlXS5zcGxpY2UoYWxsW3R5cGVdLmluZGV4T2YoaGFuZGxlcikgPj4+IDAsIDEpO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBJbnZva2UgYWxsIGhhbmRsZXJzIGZvciB0aGUgZ2l2ZW4gdHlwZS5cblx0XHQgKiBJZiBwcmVzZW50LCBgXCIqXCJgIGhhbmRsZXJzIGFyZSBpbnZva2VkIGFmdGVyIHR5cGUtbWF0Y2hlZCBoYW5kbGVycy5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlICBUaGUgZXZlbnQgdHlwZSB0byBpbnZva2Vcblx0XHQgKiBAcGFyYW0ge0FueX0gW2V2dF0gIEFueSB2YWx1ZSAob2JqZWN0IGlzIHJlY29tbWVuZGVkIGFuZCBwb3dlcmZ1bCksIHBhc3NlZCB0byBlYWNoIGhhbmRsZXJcblx0XHQgKiBAbWVtYmVyb2YgbWl0dFxuXHRcdCAqL1xuXHRcdGVtaXQ6IGZ1bmN0aW9uIGVtaXQodHlwZSAgICAgICAgLCBldnQgICAgICkge1xuXHRcdFx0KGFsbFt0eXBlXSB8fCBbXSkubWFwKGZ1bmN0aW9uIChoYW5kbGVyKSB7IGhhbmRsZXIoZXZ0KTsgfSk7XG5cdFx0XHQoYWxsWycqJ10gfHwgW10pLm1hcChmdW5jdGlvbiAoaGFuZGxlcikgeyBoYW5kbGVyKHR5cGUsIGV2dCk7IH0pO1xuXHRcdH1cblx0fTtcbn1cblxudmFyIG5hbWVzcGFjZXNfMSA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcbnZhciBuYW1lc3BhY2VzID0ge1xuICBzdmc6IHtcbiAgICBuYW1lOiAneG1sbnMnLFxuICAgIHVyaTogJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJ1xuICB9LFxuICB4bGluazoge1xuICAgIG5hbWU6ICd4bWxuczp4bGluaycsXG4gICAgdXJpOiAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaydcbiAgfVxufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gbmFtZXNwYWNlcztcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xufSk7XG5cbi8qKlxuICogQHBhcmFtIHtPYmplY3R9IGF0dHJzXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbnZhciBvYmplY3RUb0F0dHJzU3RyaW5nID0gZnVuY3Rpb24gKGF0dHJzKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhhdHRycykubWFwKGZ1bmN0aW9uIChhdHRyKSB7XG4gICAgdmFyIHZhbHVlID0gYXR0cnNbYXR0cl0udG9TdHJpbmcoKS5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7Jyk7XG4gICAgcmV0dXJuIChhdHRyICsgXCI9XFxcIlwiICsgdmFsdWUgKyBcIlxcXCJcIik7XG4gIH0pLmpvaW4oJyAnKTtcbn07XG5cbnZhciBzdmcgPSBuYW1lc3BhY2VzXzEuc3ZnO1xudmFyIHhsaW5rID0gbmFtZXNwYWNlc18xLnhsaW5rO1xuXG52YXIgZGVmYXVsdEF0dHJzID0ge307XG5kZWZhdWx0QXR0cnNbc3ZnLm5hbWVdID0gc3ZnLnVyaTtcbmRlZmF1bHRBdHRyc1t4bGluay5uYW1lXSA9IHhsaW5rLnVyaTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvbnRlbnRdXG4gKiBAcGFyYW0ge09iamVjdH0gW2F0dHJpYnV0ZXNdXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbnZhciB3cmFwSW5TdmdTdHJpbmcgPSBmdW5jdGlvbiAoY29udGVudCwgYXR0cmlidXRlcykge1xuICBpZiAoIGNvbnRlbnQgPT09IHZvaWQgMCApIGNvbnRlbnQgPSAnJztcblxuICB2YXIgYXR0cnMgPSBkZWVwbWVyZ2UoZGVmYXVsdEF0dHJzLCBhdHRyaWJ1dGVzIHx8IHt9KTtcbiAgdmFyIGF0dHJzUmVuZGVyZWQgPSBvYmplY3RUb0F0dHJzU3RyaW5nKGF0dHJzKTtcbiAgcmV0dXJuIChcIjxzdmcgXCIgKyBhdHRyc1JlbmRlcmVkICsgXCI+XCIgKyBjb250ZW50ICsgXCI8L3N2Zz5cIik7XG59O1xuXG52YXIgc3ZnJDEgPSBuYW1lc3BhY2VzXzEuc3ZnO1xudmFyIHhsaW5rJDEgPSBuYW1lc3BhY2VzXzEueGxpbms7XG5cbnZhciBkZWZhdWx0Q29uZmlnID0ge1xuICBhdHRyczogKCBvYmogPSB7XG4gICAgc3R5bGU6IFsncG9zaXRpb246IGFic29sdXRlJywgJ3dpZHRoOiAwJywgJ2hlaWdodDogMCddLmpvaW4oJzsgJylcbiAgfSwgb2JqW3N2ZyQxLm5hbWVdID0gc3ZnJDEudXJpLCBvYmpbeGxpbmskMS5uYW1lXSA9IHhsaW5rJDEudXJpLCBvYmogKVxufTtcbnZhciBvYmo7XG5cbnZhciBTcHJpdGUgPSBmdW5jdGlvbiBTcHJpdGUoY29uZmlnKSB7XG4gIHRoaXMuY29uZmlnID0gZGVlcG1lcmdlKGRlZmF1bHRDb25maWcsIGNvbmZpZyB8fCB7fSk7XG4gIHRoaXMuc3ltYm9scyA9IFtdO1xufTtcblxuLyoqXG4gKiBBZGQgbmV3IHN5bWJvbC4gSWYgc3ltYm9sIHdpdGggdGhlIHNhbWUgaWQgZXhpc3RzIGl0IHdpbGwgYmUgcmVwbGFjZWQuXG4gKiBAcGFyYW0ge1Nwcml0ZVN5bWJvbH0gc3ltYm9sXG4gKiBAcmV0dXJuIHtib29sZWFufSBgdHJ1ZWAgLSBzeW1ib2wgd2FzIGFkZGVkLCBgZmFsc2VgIC0gcmVwbGFjZWRcbiAqL1xuU3ByaXRlLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQgKHN5bWJvbCkge1xuICB2YXIgcmVmID0gdGhpcztcbiAgICB2YXIgc3ltYm9scyA9IHJlZi5zeW1ib2xzO1xuICB2YXIgZXhpc3RpbmcgPSB0aGlzLmZpbmQoc3ltYm9sLmlkKTtcblxuICBpZiAoZXhpc3RpbmcpIHtcbiAgICBzeW1ib2xzW3N5bWJvbHMuaW5kZXhPZihleGlzdGluZyldID0gc3ltYm9sO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN5bWJvbHMucHVzaChzeW1ib2wpO1xuICByZXR1cm4gdHJ1ZTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIHN5bWJvbCAmIGRlc3Ryb3kgaXRcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZFxuICogQHJldHVybiB7Ym9vbGVhbn0gYHRydWVgIC0gc3ltYm9sIHdhcyBmb3VuZCAmIHN1Y2Nlc3NmdWxseSBkZXN0cm95ZWQsIGBmYWxzZWAgLSBvdGhlcndpc2VcbiAqL1xuU3ByaXRlLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUgKGlkKSB7XG4gIHZhciByZWYgPSB0aGlzO1xuICAgIHZhciBzeW1ib2xzID0gcmVmLnN5bWJvbHM7XG4gIHZhciBzeW1ib2wgPSB0aGlzLmZpbmQoaWQpO1xuXG4gIGlmIChzeW1ib2wpIHtcbiAgICBzeW1ib2xzLnNwbGljZShzeW1ib2xzLmluZGV4T2Yoc3ltYm9sKSwgMSk7XG4gICAgc3ltYm9sLmRlc3Ryb3koKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGlkXG4gKiBAcmV0dXJuIHtTcHJpdGVTeW1ib2x8bnVsbH1cbiAqL1xuU3ByaXRlLnByb3RvdHlwZS5maW5kID0gZnVuY3Rpb24gZmluZCAoaWQpIHtcbiAgcmV0dXJuIHRoaXMuc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHMuaWQgPT09IGlkOyB9KVswXSB8fCBudWxsO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gaWRcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cblNwcml0ZS5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gaGFzIChpZCkge1xuICByZXR1cm4gdGhpcy5maW5kKGlkKSAhPT0gbnVsbDtcbn07XG5cbi8qKlxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5TcHJpdGUucHJvdG90eXBlLnN0cmluZ2lmeSA9IGZ1bmN0aW9uIHN0cmluZ2lmeSAoKSB7XG4gIHZhciByZWYgPSB0aGlzLmNvbmZpZztcbiAgICB2YXIgYXR0cnMgPSByZWYuYXR0cnM7XG4gIHZhciBzdHJpbmdpZmllZFN5bWJvbHMgPSB0aGlzLnN5bWJvbHMubWFwKGZ1bmN0aW9uIChzKSB7IHJldHVybiBzLnN0cmluZ2lmeSgpOyB9KS5qb2luKCcnKTtcbiAgcmV0dXJuIHdyYXBJblN2Z1N0cmluZyhzdHJpbmdpZmllZFN5bWJvbHMsIGF0dHJzKTtcbn07XG5cbi8qKlxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5TcHJpdGUucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICByZXR1cm4gdGhpcy5zdHJpbmdpZnkoKTtcbn07XG5cblNwcml0ZS5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3kgKCkge1xuICB0aGlzLnN5bWJvbHMuZm9yRWFjaChmdW5jdGlvbiAocykgeyByZXR1cm4gcy5kZXN0cm95KCk7IH0pO1xufTtcblxudmFyIFNwcml0ZVN5bWJvbCA9IGZ1bmN0aW9uIFNwcml0ZVN5bWJvbChyZWYpIHtcbiAgdmFyIGlkID0gcmVmLmlkO1xuICB2YXIgdmlld0JveCA9IHJlZi52aWV3Qm94O1xuICB2YXIgY29udGVudCA9IHJlZi5jb250ZW50O1xuXG4gIHRoaXMuaWQgPSBpZDtcbiAgdGhpcy52aWV3Qm94ID0gdmlld0JveDtcbiAgdGhpcy5jb250ZW50ID0gY29udGVudDtcbn07XG5cbi8qKlxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5TcHJpdGVTeW1ib2wucHJvdG90eXBlLnN0cmluZ2lmeSA9IGZ1bmN0aW9uIHN0cmluZ2lmeSAoKSB7XG4gIHJldHVybiB0aGlzLmNvbnRlbnQ7XG59O1xuXG4vKipcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuU3ByaXRlU3ltYm9sLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcbiAgcmV0dXJuIHRoaXMuc3RyaW5naWZ5KCk7XG59O1xuXG5TcHJpdGVTeW1ib2wucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95ICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICBbJ2lkJywgJ3ZpZXdCb3gnLCAnY29udGVudCddLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHsgcmV0dXJuIGRlbGV0ZSB0aGlzJDFbcHJvcF07IH0pO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29udGVudFxuICogQHJldHVybiB7RWxlbWVudH1cbiAqL1xudmFyIHBhcnNlID0gZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgdmFyIGhhc0ltcG9ydE5vZGUgPSAhIWRvY3VtZW50LmltcG9ydE5vZGU7XG4gIHZhciBkb2MgPSBuZXcgRE9NUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKGNvbnRlbnQsICdpbWFnZS9zdmcreG1sJykuZG9jdW1lbnRFbGVtZW50O1xuXG4gIC8qKlxuICAgKiBGaXggZm9yIGJyb3dzZXIgd2hpY2ggYXJlIHRocm93aW5nIFdyb25nRG9jdW1lbnRFcnJvclxuICAgKiBpZiB5b3UgaW5zZXJ0IGFuIGVsZW1lbnQgd2hpY2ggaXMgbm90IHBhcnQgb2YgdGhlIGRvY3VtZW50XG4gICAqIEBzZWUgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNzk4NjUxOS80NjI0NDAzXG4gICAqL1xuICBpZiAoaGFzSW1wb3J0Tm9kZSkge1xuICAgIHJldHVybiBkb2N1bWVudC5pbXBvcnROb2RlKGRvYywgdHJ1ZSk7XG4gIH1cblxuICByZXR1cm4gZG9jO1xufTtcblxudmFyIEJyb3dzZXJTcHJpdGVTeW1ib2wgPSAoZnVuY3Rpb24gKFNwcml0ZVN5bWJvbCQkMSkge1xuICBmdW5jdGlvbiBCcm93c2VyU3ByaXRlU3ltYm9sICgpIHtcbiAgICBTcHJpdGVTeW1ib2wkJDEuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIGlmICggU3ByaXRlU3ltYm9sJCQxICkgQnJvd3NlclNwcml0ZVN5bWJvbC5fX3Byb3RvX18gPSBTcHJpdGVTeW1ib2wkJDE7XG4gIEJyb3dzZXJTcHJpdGVTeW1ib2wucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggU3ByaXRlU3ltYm9sJCQxICYmIFNwcml0ZVN5bWJvbCQkMS5wcm90b3R5cGUgKTtcbiAgQnJvd3NlclNwcml0ZVN5bWJvbC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBCcm93c2VyU3ByaXRlU3ltYm9sO1xuXG4gIHZhciBwcm90b3R5cGVBY2Nlc3NvcnMgPSB7IGlzTW91bnRlZDoge30gfTtcblxuICBwcm90b3R5cGVBY2Nlc3NvcnMuaXNNb3VudGVkLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gISF0aGlzLm5vZGU7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gbm9kZVxuICAgKiBAcmV0dXJuIHtCcm93c2VyU3ByaXRlU3ltYm9sfVxuICAgKi9cbiAgQnJvd3NlclNwcml0ZVN5bWJvbC5jcmVhdGVGcm9tRXhpc3RpbmdOb2RlID0gZnVuY3Rpb24gY3JlYXRlRnJvbUV4aXN0aW5nTm9kZSAobm9kZSkge1xuICAgIHJldHVybiBuZXcgQnJvd3NlclNwcml0ZVN5bWJvbCh7XG4gICAgICBpZDogbm9kZS5nZXRBdHRyaWJ1dGUoJ2lkJyksXG4gICAgICB2aWV3Qm94OiBub2RlLmdldEF0dHJpYnV0ZSgndmlld0JveCcpLFxuICAgICAgY29udGVudDogbm9kZS5vdXRlckhUTUxcbiAgICB9KTtcbiAgfTtcblxuICBCcm93c2VyU3ByaXRlU3ltYm9sLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSAoKSB7XG4gICAgaWYgKHRoaXMuaXNNb3VudGVkKSB7XG4gICAgICB0aGlzLnVubW91bnQoKTtcbiAgICB9XG4gICAgU3ByaXRlU3ltYm9sJCQxLnByb3RvdHlwZS5kZXN0cm95LmNhbGwodGhpcyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7RWxlbWVudHxzdHJpbmd9IHRhcmdldFxuICAgKiBAcmV0dXJuIHtFbGVtZW50fVxuICAgKi9cbiAgQnJvd3NlclNwcml0ZVN5bWJvbC5wcm90b3R5cGUubW91bnQgPSBmdW5jdGlvbiBtb3VudCAodGFyZ2V0KSB7XG4gICAgaWYgKHRoaXMuaXNNb3VudGVkKSB7XG4gICAgICByZXR1cm4gdGhpcy5ub2RlO1xuICAgIH1cblxuICAgIHZhciBtb3VudFRhcmdldCA9IHR5cGVvZiB0YXJnZXQgPT09ICdzdHJpbmcnID8gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpIDogdGFyZ2V0O1xuICAgIHZhciBub2RlID0gdGhpcy5yZW5kZXIoKTtcbiAgICB0aGlzLm5vZGUgPSBub2RlO1xuXG4gICAgbW91bnRUYXJnZXQuYXBwZW5kQ2hpbGQobm9kZSk7XG5cbiAgICByZXR1cm4gbm9kZTtcbiAgfTtcblxuICAvKipcbiAgICogQHJldHVybiB7RWxlbWVudH1cbiAgICovXG4gIEJyb3dzZXJTcHJpdGVTeW1ib2wucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlciAoKSB7XG4gICAgdmFyIGNvbnRlbnQgPSB0aGlzLnN0cmluZ2lmeSgpO1xuICAgIHJldHVybiBwYXJzZSh3cmFwSW5TdmdTdHJpbmcoY29udGVudCkpLmNoaWxkTm9kZXNbMF07XG4gIH07XG5cbiAgQnJvd3NlclNwcml0ZVN5bWJvbC5wcm90b3R5cGUudW5tb3VudCA9IGZ1bmN0aW9uIHVubW91bnQgKCkge1xuICAgIHRoaXMubm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMubm9kZSk7XG4gIH07XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIEJyb3dzZXJTcHJpdGVTeW1ib2wucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMgKTtcblxuICByZXR1cm4gQnJvd3NlclNwcml0ZVN5bWJvbDtcbn0oU3ByaXRlU3ltYm9sKSk7XG5cbnZhciBkZWZhdWx0Q29uZmlnJDEgPSB7XG4gIC8qKlxuICAgKiBTaG91bGQgZm9sbG93aW5nIG9wdGlvbnMgYmUgYXV0b21hdGljYWxseSBjb25maWd1cmVkOlxuICAgKiAtIGBzeW5jVXJsc1dpdGhCYXNlVGFnYFxuICAgKiAtIGBsb2NhdGlvbkNoYW5nZUFuZ3VsYXJFbWl0dGVyYFxuICAgKiAtIGBtb3ZlR3JhZGllbnRzT3V0c2lkZVN5bWJvbGBcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICBhdXRvQ29uZmlndXJlOiB0cnVlLFxuXG4gIC8qKlxuICAgKiBEZWZhdWx0IG1vdW50aW5nIHNlbGVjdG9yXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICBtb3VudFRvOiAnYm9keScsXG5cbiAgLyoqXG4gICAqIEZpeCBkaXNhcHBlYXJpbmcgU1ZHIGVsZW1lbnRzIHdoZW4gPGJhc2UgaHJlZj4gZXhpc3RzLlxuICAgKiBFeGVjdXRlcyB3aGVuIHNwcml0ZSBtb3VudGVkLlxuICAgKiBAc2VlIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE4MjY1MzM2Lzc5NjE1MlxuICAgKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldmVyZGltZW5zaW9uL2FuZ3VsYXItc3ZnLWJhc2UtZml4XG4gICAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9pc3N1ZXMvODkzNCNpc3N1ZWNvbW1lbnQtNTY1Njg0NjZcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICBzeW5jVXJsc1dpdGhCYXNlVGFnOiBmYWxzZSxcblxuICAvKipcbiAgICogU2hvdWxkIHNwcml0ZSBsaXN0ZW4gY3VzdG9tIGxvY2F0aW9uIGNoYW5nZSBldmVudFxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG4gIGxpc3RlbkxvY2F0aW9uQ2hhbmdlRXZlbnQ6IHRydWUsXG5cbiAgLyoqXG4gICAqIEN1c3RvbSB3aW5kb3cgZXZlbnQgbmFtZSB3aGljaCBzaG91bGQgYmUgZW1pdHRlZCB0byB1cGRhdGUgc3ByaXRlIHVybHNcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIGxvY2F0aW9uQ2hhbmdlRXZlbnQ6ICdsb2NhdGlvbkNoYW5nZScsXG5cbiAgLyoqXG4gICAqIEVtaXQgbG9jYXRpb24gY2hhbmdlIGV2ZW50IGluIEFuZ3VsYXIgYXV0b21hdGljYWxseVxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG4gIGxvY2F0aW9uQ2hhbmdlQW5ndWxhckVtaXR0ZXI6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBTZWxlY3RvciB0byBmaW5kIHN5bWJvbHMgdXNhZ2VzIHdoZW4gdXBkYXRpbmcgc3ByaXRlIHVybHNcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIHVzYWdlc1RvVXBkYXRlOiAndXNlWyp8aHJlZl0nLFxuXG4gIC8qKlxuICAgKiBGaXggRmlyZWZveCBidWcgd2hlbiBncmFkaWVudHMgYW5kIHBhdHRlcm5zIGRvbid0IHdvcmsgaWYgdGhleSBhcmUgd2l0aGluIGEgc3ltYm9sLlxuICAgKiBFeGVjdXRlcyB3aGVuIHNwcml0ZSBpcyByZW5kZXJlZCwgYnV0IG5vdCBtb3VudGVkLlxuICAgKiBAc2VlIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTMwNjY3NFxuICAgKiBAc2VlIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTM1MzU3NVxuICAgKiBAc2VlIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTEyMzUzNjRcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICBtb3ZlR3JhZGllbnRzT3V0c2lkZVN5bWJvbDogZmFsc2Vcbn07XG5cbi8qKlxuICogQHBhcmFtIHsqfSBhcnJheUxpa2VcbiAqIEByZXR1cm4ge0FycmF5fVxuICovXG52YXIgYXJyYXlGcm9tID0gZnVuY3Rpb24gKGFycmF5TGlrZSkge1xuICByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJyYXlMaWtlLCAwKTtcbn07XG5cbnZhciB1YSA9IG5hdmlnYXRvci51c2VyQWdlbnQ7XG5cbnZhciBicm93c2VyID0ge1xuICBpc0Nocm9tZTogL2Nocm9tZS9pLnRlc3QodWEpLFxuICBpc0ZpcmVmb3g6IC9maXJlZm94L2kudGVzdCh1YSksXG5cbiAgLy8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczUzNzUwMyh2PXZzLjg1KS5hc3B4XG4gIGlzSUU6IC9tc2llL2kudGVzdCh1YSkgfHwgL3RyaWRlbnQvaS50ZXN0KHVhKSxcbiAgaXNFZGdlOiAvZWRnZS9pLnRlc3QodWEpXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcGFyYW0geyp9IGRhdGFcbiAqL1xudmFyIGRpc3BhdGNoRXZlbnQgPSBmdW5jdGlvbiAobmFtZSwgZGF0YSkge1xuICB2YXIgZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnQ3VzdG9tRXZlbnQnKTtcbiAgZXZlbnQuaW5pdEN1c3RvbUV2ZW50KG5hbWUsIGZhbHNlLCBmYWxzZSwgZGF0YSk7XG4gIHdpbmRvdy5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbn07XG5cbi8qKlxuICogSUUgZG9lc24ndCBldmFsdWF0ZSA8c3R5bGU+IHRhZ3MgaW4gU1ZHcyB0aGF0IGFyZSBkeW5hbWljYWxseSBhZGRlZCB0byB0aGUgcGFnZS5cbiAqIFRoaXMgdHJpY2sgd2lsbCB0cmlnZ2VyIElFIHRvIHJlYWQgYW5kIHVzZSBhbnkgZXhpc3RpbmcgU1ZHIDxzdHlsZT4gdGFncy5cbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2ljb25pYy9TVkdJbmplY3Rvci9pc3N1ZXMvMjNcbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubWljcm9zb2Z0LmNvbS9lbi11cy9taWNyb3NvZnQtZWRnZS9wbGF0Zm9ybS9pc3N1ZXMvMTA4OTg0NjkvXG4gKlxuICogQHBhcmFtIHtFbGVtZW50fSBub2RlIERPTSBFbGVtZW50IHRvIHNlYXJjaCA8c3R5bGU+IHRhZ3MgaW5cbiAqIEByZXR1cm4ge0FycmF5PEhUTUxTdHlsZUVsZW1lbnQ+fVxuICovXG52YXIgZXZhbFN0eWxlc0lFV29ya2Fyb3VuZCA9IGZ1bmN0aW9uIChub2RlKSB7XG4gIHZhciB1cGRhdGVkTm9kZXMgPSBbXTtcblxuICBhcnJheUZyb20obm9kZS5xdWVyeVNlbGVjdG9yQWxsKCdzdHlsZScpKVxuICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChzdHlsZSkge1xuICAgICAgc3R5bGUudGV4dENvbnRlbnQgKz0gJyc7XG4gICAgICB1cGRhdGVkTm9kZXMucHVzaChzdHlsZSk7XG4gICAgfSk7XG5cbiAgcmV0dXJuIHVwZGF0ZWROb2Rlcztcbn07XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IFt1cmxdIElmIG5vdCBwcm92aWRlZCAtIGN1cnJlbnQgVVJMIHdpbGwgYmUgdXNlZFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG52YXIgZ2V0VXJsV2l0aG91dEZyYWdtZW50ID0gZnVuY3Rpb24gKHVybCkge1xuICByZXR1cm4gKHVybCB8fCB3aW5kb3cubG9jYXRpb24uaHJlZikuc3BsaXQoJyMnKVswXTtcbn07XG5cbi8qIGdsb2JhbCBhbmd1bGFyICovXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWVcbiAqL1xudmFyIGxvY2F0aW9uQ2hhbmdlQW5ndWxhckVtaXR0ZXIgPSBmdW5jdGlvbiAoZXZlbnROYW1lKSB7XG4gIGFuZ3VsYXIubW9kdWxlKCduZycpLnJ1bihbJyRyb290U2NvcGUnLCBmdW5jdGlvbiAoJHJvb3RTY29wZSkge1xuICAgICRyb290U2NvcGUuJG9uKCckbG9jYXRpb25DaGFuZ2VTdWNjZXNzJywgZnVuY3Rpb24gKGUsIG5ld1VybCwgb2xkVXJsKSB7XG4gICAgICBkaXNwYXRjaEV2ZW50KGV2ZW50TmFtZSwgeyBvbGRVcmw6IG9sZFVybCwgbmV3VXJsOiBuZXdVcmwgfSk7XG4gICAgfSk7XG4gIH1dKTtcbn07XG5cbnZhciBkZWZhdWx0U2VsZWN0b3IgPSAnbGluZWFyR3JhZGllbnQsIHJhZGlhbEdyYWRpZW50LCBwYXR0ZXJuJztcblxuLyoqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IHN2Z1xuICogQHBhcmFtIHtzdHJpbmd9IFtzZWxlY3Rvcl1cbiAqIEByZXR1cm4ge0VsZW1lbnR9XG4gKi9cbnZhciBtb3ZlR3JhZGllbnRzT3V0c2lkZVN5bWJvbCA9IGZ1bmN0aW9uIChzdmcsIHNlbGVjdG9yKSB7XG4gIGlmICggc2VsZWN0b3IgPT09IHZvaWQgMCApIHNlbGVjdG9yID0gZGVmYXVsdFNlbGVjdG9yO1xuXG4gIGFycmF5RnJvbShzdmcucXVlcnlTZWxlY3RvckFsbCgnc3ltYm9sJykpLmZvckVhY2goZnVuY3Rpb24gKHN5bWJvbCkge1xuICAgIGFycmF5RnJvbShzeW1ib2wucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpLmZvckVhY2goZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIHN5bWJvbC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShub2RlLCBzeW1ib2wpO1xuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIHN2Zztcbn07XG5cbi8qKlxuICogQHBhcmFtIHtOb2RlTGlzdH0gbm9kZXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFttYXRjaGVyXVxuICogQHJldHVybiB7QXR0cltdfVxuICovXG5mdW5jdGlvbiBzZWxlY3RBdHRyaWJ1dGVzKG5vZGVzLCBtYXRjaGVyKSB7XG4gIHZhciBhdHRycyA9IGFycmF5RnJvbShub2RlcykucmVkdWNlKGZ1bmN0aW9uIChhY2MsIG5vZGUpIHtcbiAgICBpZiAoIW5vZGUuYXR0cmlidXRlcykge1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9XG5cbiAgICB2YXIgYXJyYXlmaWVkID0gYXJyYXlGcm9tKG5vZGUuYXR0cmlidXRlcyk7XG4gICAgdmFyIG1hdGNoZWQgPSBtYXRjaGVyID8gYXJyYXlmaWVkLmZpbHRlcihtYXRjaGVyKSA6IGFycmF5ZmllZDtcbiAgICByZXR1cm4gYWNjLmNvbmNhdChtYXRjaGVkKTtcbiAgfSwgW10pO1xuXG4gIHJldHVybiBhdHRycztcbn1cblxuLyoqXG4gKiBAcGFyYW0ge05vZGVMaXN0fE5vZGV9IG5vZGVzXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtjbG9uZT10cnVlXVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5cbnZhciB4TGlua05TID0gbmFtZXNwYWNlc18xLnhsaW5rLnVyaTtcbnZhciB4TGlua0F0dHJOYW1lID0gJ3hsaW5rOmhyZWYnO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1lc2NhcGVcbnZhciBzcGVjaWFsVXJsQ2hhcnNQYXR0ZXJuID0gL1t7fXxcXFxcXFxeXFxbXFxdYFwiPD5dL2c7XG5cbmZ1bmN0aW9uIGVuY29kZXIodXJsKSB7XG4gIHJldHVybiB1cmwucmVwbGFjZShzcGVjaWFsVXJsQ2hhcnNQYXR0ZXJuLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICByZXR1cm4gKFwiJVwiICsgKG1hdGNoWzBdLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCkpKTtcbiAgfSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtOb2RlTGlzdH0gbm9kZXNcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdGFydHNXaXRoXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVwbGFjZVdpdGhcbiAqIEByZXR1cm4ge05vZGVMaXN0fVxuICovXG5mdW5jdGlvbiB1cGRhdGVSZWZlcmVuY2VzKG5vZGVzLCBzdGFydHNXaXRoLCByZXBsYWNlV2l0aCkge1xuICBhcnJheUZyb20obm9kZXMpLmZvckVhY2goZnVuY3Rpb24gKG5vZGUpIHtcbiAgICB2YXIgaHJlZiA9IG5vZGUuZ2V0QXR0cmlidXRlKHhMaW5rQXR0ck5hbWUpO1xuICAgIGlmIChocmVmICYmIGhyZWYuaW5kZXhPZihzdGFydHNXaXRoKSA9PT0gMCkge1xuICAgICAgdmFyIG5ld1VybCA9IGhyZWYucmVwbGFjZShzdGFydHNXaXRoLCByZXBsYWNlV2l0aCk7XG4gICAgICBub2RlLnNldEF0dHJpYnV0ZU5TKHhMaW5rTlMsIHhMaW5rQXR0ck5hbWUsIG5ld1VybCk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gbm9kZXM7XG59XG5cbi8qKlxuICogTGlzdCBvZiBTVkcgYXR0cmlidXRlcyB0byB1cGRhdGUgdXJsKCkgdGFyZ2V0IGluIHRoZW1cbiAqL1xudmFyIGF0dExpc3QgPSBbXG4gICdjbGlwUGF0aCcsXG4gICdjb2xvclByb2ZpbGUnLFxuICAnc3JjJyxcbiAgJ2N1cnNvcicsXG4gICdmaWxsJyxcbiAgJ2ZpbHRlcicsXG4gICdtYXJrZXInLFxuICAnbWFya2VyU3RhcnQnLFxuICAnbWFya2VyTWlkJyxcbiAgJ21hcmtlckVuZCcsXG4gICdtYXNrJyxcbiAgJ3N0cm9rZScsXG4gICdzdHlsZSdcbl07XG5cbnZhciBhdHRTZWxlY3RvciA9IGF0dExpc3QubWFwKGZ1bmN0aW9uIChhdHRyKSB7IHJldHVybiAoXCJbXCIgKyBhdHRyICsgXCJdXCIpOyB9KS5qb2luKCcsJyk7XG5cbi8qKlxuICogVXBkYXRlIFVSTHMgaW4gc3ZnIGltYWdlIChsaWtlIGBmaWxsPVwidXJsKC4uLilcImApIGFuZCB1cGRhdGUgcmVmZXJlbmNpbmcgZWxlbWVudHNcbiAqIEBwYXJhbSB7RWxlbWVudH0gc3ZnXG4gKiBAcGFyYW0ge05vZGVMaXN0fSByZWZlcmVuY2VzXG4gKiBAcGFyYW0ge3N0cmluZ3xSZWdFeHB9IHN0YXJ0c1dpdGhcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXBsYWNlV2l0aFxuICogQHJldHVybiB7dm9pZH1cbiAqXG4gKiBAZXhhbXBsZVxuICogY29uc3Qgc3ByaXRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcignc3ZnLnNwcml0ZScpO1xuICogY29uc3QgdXNhZ2VzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgndXNlJyk7XG4gKiB1cGRhdGVVcmxzKHNwcml0ZSwgdXNhZ2VzLCAnIycsICdwcmVmaXgjJyk7XG4gKi9cbnZhciB1cGRhdGVVcmxzID0gZnVuY3Rpb24gKHN2ZywgcmVmZXJlbmNlcywgc3RhcnRzV2l0aCwgcmVwbGFjZVdpdGgpIHtcbiAgdmFyIHN0YXJ0c1dpdGhFbmNvZGVkID0gZW5jb2RlcihzdGFydHNXaXRoKTtcbiAgdmFyIHJlcGxhY2VXaXRoRW5jb2RlZCA9IGVuY29kZXIocmVwbGFjZVdpdGgpO1xuXG4gIHZhciBub2RlcyA9IHN2Zy5xdWVyeVNlbGVjdG9yQWxsKGF0dFNlbGVjdG9yKTtcbiAgdmFyIGF0dHJzID0gc2VsZWN0QXR0cmlidXRlcyhub2RlcywgZnVuY3Rpb24gKHJlZikge1xuICAgIHZhciBsb2NhbE5hbWUgPSByZWYubG9jYWxOYW1lO1xuICAgIHZhciB2YWx1ZSA9IHJlZi52YWx1ZTtcblxuICAgIHJldHVybiBhdHRMaXN0LmluZGV4T2YobG9jYWxOYW1lKSAhPT0gLTEgJiYgdmFsdWUuaW5kZXhPZigoXCJ1cmwoXCIgKyBzdGFydHNXaXRoRW5jb2RlZCkpICE9PSAtMTtcbiAgfSk7XG5cbiAgYXR0cnMuZm9yRWFjaChmdW5jdGlvbiAoYXR0cikgeyByZXR1cm4gYXR0ci52YWx1ZSA9IGF0dHIudmFsdWUucmVwbGFjZShzdGFydHNXaXRoRW5jb2RlZCwgcmVwbGFjZVdpdGhFbmNvZGVkKTsgfSk7XG4gIHVwZGF0ZVJlZmVyZW5jZXMocmVmZXJlbmNlcywgc3RhcnRzV2l0aEVuY29kZWQsIHJlcGxhY2VXaXRoRW5jb2RlZCk7XG59O1xuXG4vKipcbiAqIEludGVybmFsIGVtaXR0ZXIgZXZlbnRzXG4gKiBAZW51bVxuICogQHByaXZhdGVcbiAqL1xudmFyIEV2ZW50cyA9IHtcbiAgTU9VTlQ6ICdtb3VudCcsXG4gIFNZTUJPTF9NT1VOVDogJ3N5bWJvbF9tb3VudCdcbn07XG5cbnZhciBCcm93c2VyU3ByaXRlID0gKGZ1bmN0aW9uIChTcHJpdGUkJDEpIHtcbiAgZnVuY3Rpb24gQnJvd3NlclNwcml0ZShjZmcpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcbiAgICBpZiAoIGNmZyA9PT0gdm9pZCAwICkgY2ZnID0ge307XG5cbiAgICBTcHJpdGUkJDEuY2FsbCh0aGlzLCBkZWVwbWVyZ2UoZGVmYXVsdENvbmZpZyQxLCBjZmcpKTtcblxuICAgIHZhciBlbWl0dGVyID0gbWl0dCgpO1xuICAgIHRoaXMuX2VtaXR0ZXIgPSBlbWl0dGVyO1xuICAgIHRoaXMubm9kZSA9IG51bGw7XG5cbiAgICB2YXIgcmVmID0gdGhpcztcbiAgICB2YXIgY29uZmlnID0gcmVmLmNvbmZpZztcblxuICAgIGlmIChjb25maWcuYXV0b0NvbmZpZ3VyZSkge1xuICAgICAgdGhpcy5fYXV0b0NvbmZpZ3VyZShjZmcpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuc3luY1VybHNXaXRoQmFzZVRhZykge1xuICAgICAgdmFyIGJhc2VVcmwgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYmFzZScpWzBdLmdldEF0dHJpYnV0ZSgnaHJlZicpO1xuICAgICAgZW1pdHRlci5vbihFdmVudHMuTU9VTlQsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMkMS51cGRhdGVVcmxzKCcjJywgYmFzZVVybCk7IH0pO1xuICAgIH1cblxuICAgIHZhciBoYW5kbGVMb2NhdGlvbkNoYW5nZSA9IHRoaXMuX2hhbmRsZUxvY2F0aW9uQ2hhbmdlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5faGFuZGxlTG9jYXRpb25DaGFuZ2UgPSBoYW5kbGVMb2NhdGlvbkNoYW5nZTtcblxuICAgIC8vIFByb3ZpZGUgd2F5IHRvIHVwZGF0ZSBzcHJpdGUgdXJscyBleHRlcm5hbGx5IHZpYSBkaXNwYXRjaGluZyBjdXN0b20gd2luZG93IGV2ZW50XG4gICAgaWYgKGNvbmZpZy5saXN0ZW5Mb2NhdGlvbkNoYW5nZUV2ZW50KSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihjb25maWcubG9jYXRpb25DaGFuZ2VFdmVudCwgaGFuZGxlTG9jYXRpb25DaGFuZ2UpO1xuICAgIH1cblxuICAgIC8vIEVtaXQgbG9jYXRpb24gY2hhbmdlIGV2ZW50IGluIEFuZ3VsYXIgYXV0b21hdGljYWxseVxuICAgIGlmIChjb25maWcubG9jYXRpb25DaGFuZ2VBbmd1bGFyRW1pdHRlcikge1xuICAgICAgbG9jYXRpb25DaGFuZ2VBbmd1bGFyRW1pdHRlcihjb25maWcubG9jYXRpb25DaGFuZ2VFdmVudCk7XG4gICAgfVxuXG4gICAgLy8gQWZ0ZXIgc3ByaXRlIG1vdW50ZWRcbiAgICBlbWl0dGVyLm9uKEV2ZW50cy5NT1VOVCwgZnVuY3Rpb24gKHNwcml0ZU5vZGUpIHtcbiAgICAgIGlmIChjb25maWcubW92ZUdyYWRpZW50c091dHNpZGVTeW1ib2wpIHtcbiAgICAgICAgbW92ZUdyYWRpZW50c091dHNpZGVTeW1ib2woc3ByaXRlTm9kZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBBZnRlciBzeW1ib2wgbW91bnRlZCBpbnRvIHNwcml0ZVxuICAgIGVtaXR0ZXIub24oRXZlbnRzLlNZTUJPTF9NT1VOVCwgZnVuY3Rpb24gKHN5bWJvbE5vZGUpIHtcbiAgICAgIGlmIChjb25maWcubW92ZUdyYWRpZW50c091dHNpZGVTeW1ib2wpIHtcbiAgICAgICAgbW92ZUdyYWRpZW50c091dHNpZGVTeW1ib2woc3ltYm9sTm9kZS5wYXJlbnROb2RlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGJyb3dzZXIuaXNJRSB8fCBicm93c2VyLmlzRWRnZSkge1xuICAgICAgICBldmFsU3R5bGVzSUVXb3JrYXJvdW5kKHN5bWJvbE5vZGUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgaWYgKCBTcHJpdGUkJDEgKSBCcm93c2VyU3ByaXRlLl9fcHJvdG9fXyA9IFNwcml0ZSQkMTtcbiAgQnJvd3NlclNwcml0ZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBTcHJpdGUkJDEgJiYgU3ByaXRlJCQxLnByb3RvdHlwZSApO1xuICBCcm93c2VyU3ByaXRlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEJyb3dzZXJTcHJpdGU7XG5cbiAgdmFyIHByb3RvdHlwZUFjY2Vzc29ycyA9IHsgaXNNb3VudGVkOiB7fSB9O1xuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgcHJvdG90eXBlQWNjZXNzb3JzLmlzTW91bnRlZC5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICEhdGhpcy5ub2RlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBBdXRvbWF0aWNhbGx5IGNvbmZpZ3VyZSBmb2xsb3dpbmcgb3B0aW9uc1xuICAgKiAtIGBzeW5jVXJsc1dpdGhCYXNlVGFnYFxuICAgKiAtIGBsb2NhdGlvbkNoYW5nZUFuZ3VsYXJFbWl0dGVyYFxuICAgKiAtIGBtb3ZlR3JhZGllbnRzT3V0c2lkZVN5bWJvbGBcbiAgICogQHBhcmFtIHtPYmplY3R9IGNmZ1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgQnJvd3NlclNwcml0ZS5wcm90b3R5cGUuX2F1dG9Db25maWd1cmUgPSBmdW5jdGlvbiBfYXV0b0NvbmZpZ3VyZSAoY2ZnKSB7XG4gICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgdmFyIGNvbmZpZyA9IHJlZi5jb25maWc7XG5cbiAgICBpZiAodHlwZW9mIGNmZy5zeW5jVXJsc1dpdGhCYXNlVGFnID09PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnLnN5bmNVcmxzV2l0aEJhc2VUYWcgPSB0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2Jhc2UnKVswXSAhPT0gJ3VuZGVmaW5lZCc7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBjZmcubG9jYXRpb25DaGFuZ2VBbmd1bGFyRW1pdHRlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZy5sb2NhdGlvbkNoYW5nZUFuZ3VsYXJFbWl0dGVyID0gJ2FuZ3VsYXInIGluIHdpbmRvdztcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGNmZy5tb3ZlR3JhZGllbnRzT3V0c2lkZVN5bWJvbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZy5tb3ZlR3JhZGllbnRzT3V0c2lkZVN5bWJvbCA9IGJyb3dzZXIuaXNGaXJlZm94O1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnRcbiAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50LmRldGFpbFxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnQuZGV0YWlsLm9sZFVybFxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnQuZGV0YWlsLm5ld1VybFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgQnJvd3NlclNwcml0ZS5wcm90b3R5cGUuX2hhbmRsZUxvY2F0aW9uQ2hhbmdlID0gZnVuY3Rpb24gX2hhbmRsZUxvY2F0aW9uQ2hhbmdlIChldmVudCkge1xuICAgIHZhciByZWYgPSBldmVudC5kZXRhaWw7XG4gICAgdmFyIG9sZFVybCA9IHJlZi5vbGRVcmw7XG4gICAgdmFyIG5ld1VybCA9IHJlZi5uZXdVcmw7XG4gICAgdGhpcy51cGRhdGVVcmxzKG9sZFVybCwgbmV3VXJsKTtcbiAgfTtcblxuICAvKipcbiAgICogQWRkIG5ldyBzeW1ib2wuIElmIHN5bWJvbCB3aXRoIHRoZSBzYW1lIGlkIGV4aXN0cyBpdCB3aWxsIGJlIHJlcGxhY2VkLlxuICAgKiBJZiBzcHJpdGUgYWxyZWFkeSBtb3VudGVkIC0gYHN5bWJvbC5tb3VudChzcHJpdGUubm9kZSlgIHdpbGwgYmUgY2FsbGVkLlxuICAgKiBAZmlyZXMgRXZlbnRzI1NZTUJPTF9NT1VOVFxuICAgKiBAcGFyYW0ge0Jyb3dzZXJTcHJpdGVTeW1ib2x9IHN5bWJvbFxuICAgKiBAcmV0dXJuIHtib29sZWFufSBgdHJ1ZWAgLSBzeW1ib2wgd2FzIGFkZGVkLCBgZmFsc2VgIC0gcmVwbGFjZWRcbiAgICovXG4gIEJyb3dzZXJTcHJpdGUucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZCAoc3ltYm9sKSB7XG4gICAgdmFyIHNwcml0ZSA9IHRoaXM7XG4gICAgdmFyIGlzTmV3U3ltYm9sID0gU3ByaXRlJCQxLnByb3RvdHlwZS5hZGQuY2FsbCh0aGlzLCBzeW1ib2wpO1xuXG4gICAgaWYgKHRoaXMuaXNNb3VudGVkICYmIGlzTmV3U3ltYm9sKSB7XG4gICAgICBzeW1ib2wubW91bnQoc3ByaXRlLm5vZGUpO1xuICAgICAgdGhpcy5fZW1pdHRlci5lbWl0KEV2ZW50cy5TWU1CT0xfTU9VTlQsIHN5bWJvbC5ub2RlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaXNOZXdTeW1ib2w7XG4gIH07XG5cbiAgLyoqXG4gICAqIEF0dGFjaCB0byBleGlzdGluZyBET00gbm9kZVxuICAgKiBAcGFyYW0ge3N0cmluZ3xFbGVtZW50fSB0YXJnZXRcbiAgICogQHJldHVybiB7RWxlbWVudHxudWxsfSBhdHRhY2hlZCBET00gRWxlbWVudC4gbnVsbCBpZiBub2RlIHRvIGF0dGFjaCBub3QgZm91bmQuXG4gICAqL1xuICBCcm93c2VyU3ByaXRlLnByb3RvdHlwZS5hdHRhY2ggPSBmdW5jdGlvbiBhdHRhY2ggKHRhcmdldCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIHNwcml0ZSA9IHRoaXM7XG5cbiAgICBpZiAoc3ByaXRlLmlzTW91bnRlZCkge1xuICAgICAgcmV0dXJuIHNwcml0ZS5ub2RlO1xuICAgIH1cblxuICAgIC8qKiBAdHlwZSBFbGVtZW50ICovXG4gICAgdmFyIG5vZGUgPSB0eXBlb2YgdGFyZ2V0ID09PSAnc3RyaW5nJyA/IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KSA6IHRhcmdldDtcbiAgICBzcHJpdGUubm9kZSA9IG5vZGU7XG5cbiAgICAvLyBBbHJlYWR5IGFkZGVkIHN5bWJvbHMgbmVlZHMgdG8gYmUgbW91bnRlZFxuICAgIHRoaXMuc3ltYm9scy5mb3JFYWNoKGZ1bmN0aW9uIChzeW1ib2wpIHtcbiAgICAgIHN5bWJvbC5tb3VudChzcHJpdGUubm9kZSk7XG4gICAgICB0aGlzJDEuX2VtaXR0ZXIuZW1pdChFdmVudHMuU1lNQk9MX01PVU5ULCBzeW1ib2wubm9kZSk7XG4gICAgfSk7XG5cbiAgICAvLyBDcmVhdGUgc3ltYm9scyBmcm9tIGV4aXN0aW5nIERPTSBub2RlcywgYWRkIGFuZCBtb3VudCB0aGVtXG4gICAgYXJyYXlGcm9tKG5vZGUucXVlcnlTZWxlY3RvckFsbCgnc3ltYm9sJykpXG4gICAgICAuZm9yRWFjaChmdW5jdGlvbiAoc3ltYm9sTm9kZSkge1xuICAgICAgICB2YXIgc3ltYm9sID0gQnJvd3NlclNwcml0ZVN5bWJvbC5jcmVhdGVGcm9tRXhpc3RpbmdOb2RlKHN5bWJvbE5vZGUpO1xuICAgICAgICBzeW1ib2wubm9kZSA9IHN5bWJvbE5vZGU7IC8vIGhhY2sgdG8gcHJldmVudCBzeW1ib2wgbW91bnRpbmcgdG8gc3ByaXRlIHdoZW4gYWRkaW5nXG4gICAgICAgIHNwcml0ZS5hZGQoc3ltYm9sKTtcbiAgICAgIH0pO1xuXG4gICAgdGhpcy5fZW1pdHRlci5lbWl0KEV2ZW50cy5NT1VOVCwgbm9kZSk7XG5cbiAgICByZXR1cm4gbm9kZTtcbiAgfTtcblxuICBCcm93c2VyU3ByaXRlLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSAoKSB7XG4gICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgdmFyIGNvbmZpZyA9IHJlZi5jb25maWc7XG4gICAgdmFyIHN5bWJvbHMgPSByZWYuc3ltYm9scztcbiAgICB2YXIgX2VtaXR0ZXIgPSByZWYuX2VtaXR0ZXI7XG5cbiAgICBzeW1ib2xzLmZvckVhY2goZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHMuZGVzdHJveSgpOyB9KTtcblxuICAgIF9lbWl0dGVyLm9mZignKicpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKGNvbmZpZy5sb2NhdGlvbkNoYW5nZUV2ZW50LCB0aGlzLl9oYW5kbGVMb2NhdGlvbkNoYW5nZSk7XG5cbiAgICBpZiAodGhpcy5pc01vdW50ZWQpIHtcbiAgICAgIHRoaXMudW5tb3VudCgpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQGZpcmVzIEV2ZW50cyNNT1VOVFxuICAgKiBAcGFyYW0ge3N0cmluZ3xFbGVtZW50fSBbdGFyZ2V0XVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtwcmVwZW5kPWZhbHNlXVxuICAgKiBAcmV0dXJuIHtFbGVtZW50fG51bGx9IHJlbmRlcmVkIHNwcml0ZSBub2RlLiBudWxsIGlmIG1vdW50IG5vZGUgbm90IGZvdW5kLlxuICAgKi9cbiAgQnJvd3NlclNwcml0ZS5wcm90b3R5cGUubW91bnQgPSBmdW5jdGlvbiBtb3VudCAodGFyZ2V0LCBwcmVwZW5kKSB7XG4gICAgaWYgKCB0YXJnZXQgPT09IHZvaWQgMCApIHRhcmdldCA9IHRoaXMuY29uZmlnLm1vdW50VG87XG4gICAgaWYgKCBwcmVwZW5kID09PSB2b2lkIDAgKSBwcmVwZW5kID0gZmFsc2U7XG5cbiAgICB2YXIgc3ByaXRlID0gdGhpcztcblxuICAgIGlmIChzcHJpdGUuaXNNb3VudGVkKSB7XG4gICAgICByZXR1cm4gc3ByaXRlLm5vZGU7XG4gICAgfVxuXG4gICAgdmFyIG1vdW50Tm9kZSA9IHR5cGVvZiB0YXJnZXQgPT09ICdzdHJpbmcnID8gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpIDogdGFyZ2V0O1xuICAgIHZhciBub2RlID0gc3ByaXRlLnJlbmRlcigpO1xuICAgIHRoaXMubm9kZSA9IG5vZGU7XG5cbiAgICBpZiAocHJlcGVuZCAmJiBtb3VudE5vZGUuY2hpbGROb2Rlc1swXSkge1xuICAgICAgbW91bnROb2RlLmluc2VydEJlZm9yZShub2RlLCBtb3VudE5vZGUuY2hpbGROb2Rlc1swXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1vdW50Tm9kZS5hcHBlbmRDaGlsZChub2RlKTtcbiAgICB9XG5cbiAgICB0aGlzLl9lbWl0dGVyLmVtaXQoRXZlbnRzLk1PVU5ULCBub2RlKTtcblxuICAgIHJldHVybiBub2RlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtFbGVtZW50fVxuICAgKi9cbiAgQnJvd3NlclNwcml0ZS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyICgpIHtcbiAgICByZXR1cm4gcGFyc2UodGhpcy5zdHJpbmdpZnkoKSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIERldGFjaCBzcHJpdGUgZnJvbSB0aGUgRE9NXG4gICAqL1xuICBCcm93c2VyU3ByaXRlLnByb3RvdHlwZS51bm1vdW50ID0gZnVuY3Rpb24gdW5tb3VudCAoKSB7XG4gICAgdGhpcy5ub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5ub2RlKTtcbiAgfTtcblxuICAvKipcbiAgICogVXBkYXRlIFVSTHMgaW4gc3ByaXRlIGFuZCB1c2FnZSBlbGVtZW50c1xuICAgKiBAcGFyYW0ge3N0cmluZ30gb2xkVXJsXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuZXdVcmxcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gYHRydWVgIC0gVVJMcyB3YXMgdXBkYXRlZCwgYGZhbHNlYCAtIHNwcml0ZSBpcyBub3QgbW91bnRlZFxuICAgKi9cbiAgQnJvd3NlclNwcml0ZS5wcm90b3R5cGUudXBkYXRlVXJscyA9IGZ1bmN0aW9uIHVwZGF0ZVVybHMkMSAob2xkVXJsLCBuZXdVcmwpIHtcbiAgICBpZiAoIXRoaXMuaXNNb3VudGVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHVzYWdlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5jb25maWcudXNhZ2VzVG9VcGRhdGUpO1xuXG4gICAgdXBkYXRlVXJscyhcbiAgICAgIHRoaXMubm9kZSxcbiAgICAgIHVzYWdlcyxcbiAgICAgICgoZ2V0VXJsV2l0aG91dEZyYWdtZW50KG9sZFVybCkpICsgXCIjXCIpLFxuICAgICAgKChnZXRVcmxXaXRob3V0RnJhZ21lbnQobmV3VXJsKSkgKyBcIiNcIilcbiAgICApO1xuXG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIEJyb3dzZXJTcHJpdGUucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMgKTtcblxuICByZXR1cm4gQnJvd3NlclNwcml0ZTtcbn0oU3ByaXRlKSk7XG5cbnZhciByZWFkeSQxID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSkge1xuLyohXG4gICogZG9tcmVhZHkgKGMpIER1c3RpbiBEaWF6IDIwMTQgLSBMaWNlbnNlIE1JVFxuICAqL1xuIWZ1bmN0aW9uIChuYW1lLCBkZWZpbml0aW9uKSB7XG5cbiAgeyBtb2R1bGUuZXhwb3J0cyA9IGRlZmluaXRpb24oKTsgfVxuXG59KCdkb21yZWFkeScsIGZ1bmN0aW9uICgpIHtcblxuICB2YXIgZm5zID0gW10sIGxpc3RlbmVyXG4gICAgLCBkb2MgPSBkb2N1bWVudFxuICAgICwgaGFjayA9IGRvYy5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGxcbiAgICAsIGRvbUNvbnRlbnRMb2FkZWQgPSAnRE9NQ29udGVudExvYWRlZCdcbiAgICAsIGxvYWRlZCA9IChoYWNrID8gL15sb2FkZWR8XmMvIDogL15sb2FkZWR8Xml8XmMvKS50ZXN0KGRvYy5yZWFkeVN0YXRlKTtcblxuXG4gIGlmICghbG9hZGVkKVxuICB7IGRvYy5hZGRFdmVudExpc3RlbmVyKGRvbUNvbnRlbnRMb2FkZWQsIGxpc3RlbmVyID0gZnVuY3Rpb24gKCkge1xuICAgIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKGRvbUNvbnRlbnRMb2FkZWQsIGxpc3RlbmVyKTtcbiAgICBsb2FkZWQgPSAxO1xuICAgIHdoaWxlIChsaXN0ZW5lciA9IGZucy5zaGlmdCgpKSB7IGxpc3RlbmVyKCk7IH1cbiAgfSk7IH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGZuKSB7XG4gICAgbG9hZGVkID8gc2V0VGltZW91dChmbiwgMCkgOiBmbnMucHVzaChmbik7XG4gIH1cblxufSk7XG59KTtcblxudmFyIHNwcml0ZU5vZGVJZCA9ICdfX1NWR19TUFJJVEVfTk9ERV9fJztcbnZhciBzcHJpdGVHbG9iYWxWYXJOYW1lID0gJ19fU1ZHX1NQUklURV9fJztcbnZhciBpc1Nwcml0ZUV4aXN0cyA9ICEhd2luZG93W3Nwcml0ZUdsb2JhbFZhck5hbWVdO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLW11dGFibGUtZXhwb3J0c1xudmFyIHNwcml0ZTtcblxuaWYgKGlzU3ByaXRlRXhpc3RzKSB7XG4gIHNwcml0ZSA9IHdpbmRvd1tzcHJpdGVHbG9iYWxWYXJOYW1lXTtcbn0gZWxzZSB7XG4gIHNwcml0ZSA9IG5ldyBCcm93c2VyU3ByaXRlKHsgYXR0cnM6IHsgaWQ6IHNwcml0ZU5vZGVJZCB9IH0pO1xuICB3aW5kb3dbc3ByaXRlR2xvYmFsVmFyTmFtZV0gPSBzcHJpdGU7XG59XG5cbnZhciBsb2FkU3ByaXRlID0gZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogQ2hlY2sgZm9yIHBhZ2UgYWxyZWFkeSBjb250YWlucyBzcHJpdGUgbm9kZVxuICAgKiBJZiBmb3VuZCAtIGF0dGFjaCB0byBhbmQgcmV1c2UgaXQncyBjb250ZW50XG4gICAqIElmIG5vdCAtIHJlbmRlciBhbmQgbW91bnQgdGhlIG5ldyBzcHJpdGVcbiAgICovXG4gIHZhciBleGlzdGluZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHNwcml0ZU5vZGVJZCk7XG5cbiAgaWYgKGV4aXN0aW5nKSB7XG4gICAgc3ByaXRlLmF0dGFjaChleGlzdGluZyk7XG4gIH0gZWxzZSB7XG4gICAgc3ByaXRlLm1vdW50KGRvY3VtZW50LmJvZHksIHRydWUpO1xuICB9XG59O1xuXG5pZiAoZG9jdW1lbnQuYm9keSkge1xuICBsb2FkU3ByaXRlKCk7XG59IGVsc2Uge1xuICByZWFkeSQxKGxvYWRTcHJpdGUpO1xufVxuXG52YXIgc3ByaXRlJDEgPSBzcHJpdGU7XG5cbnJldHVybiBzcHJpdGUkMTtcblxufSkpKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9zdmctc3ByaXRlLWxvYWRlci9ydW50aW1lL2Jyb3dzZXItc3ByaXRlLmJ1aWxkLmpzIiwiZnVuY3Rpb24gcmVxdWlyZUFsbChyKSB7IHIua2V5cygpLmZvckVhY2gocik7IH1cblxucmVxdWlyZUFsbChyZXF1aXJlLmNvbnRleHQoJy4vJywgdHJ1ZSwgL1xcLihqc3xsZXNzKSQvKSk7XG5cbi8vIHJlcXVpcmVBbGwocmVxdWlyZS5jb250ZXh0KCcuLycsIHRydWUsIC9cXC4oanN8bGVzc3xwbmd8anBlP2d8Z2lmKSQvKSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29tbW9uLmJsb2Nrcy9pbmRleC5qcyIsImltcG9ydCBTd2lwZXIgZnJvbSAnc3dpcGVyJztcblxuY29uc3QgY2FyZFNsaWRlciA9IG5ldyBTd2lwZXIoJy5zbGlkZXInLCB7XG4gIHdyYXBwZXJDbGFzczogJ3NsaWRlcl9fd3JhcHBlcicsXG4gIHNsaWRlQ2xhc3M6ICdzbGlkZXJfX3NsaWRlJyxcbiAgZGlyZWN0aW9uOiAnaG9yaXpvbnRhbCcsXG4gIHNsaWRlc1BlclZpZXc6ICdhdXRvJyxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBjYXJkU2xpZGVyO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbW1vbi5ibG9ja3Mvc2xpZGVyL3NsaWRlci5qcyIsImltcG9ydCB7IGdldFdpbmRvdywgZ2V0RG9jdW1lbnQgfSBmcm9tICdzc3Itd2luZG93JztcbnZhciBzdXBwb3J0O1xuXG5mdW5jdGlvbiBjYWxjU3VwcG9ydCgpIHtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICB2YXIgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICByZXR1cm4ge1xuICAgIHRvdWNoOiAhISgnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3cgfHwgd2luZG93LkRvY3VtZW50VG91Y2ggJiYgZG9jdW1lbnQgaW5zdGFuY2VvZiB3aW5kb3cuRG9jdW1lbnRUb3VjaCksXG4gICAgcG9pbnRlckV2ZW50czogISF3aW5kb3cuUG9pbnRlckV2ZW50ICYmICdtYXhUb3VjaFBvaW50cycgaW4gd2luZG93Lm5hdmlnYXRvciAmJiB3aW5kb3cubmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzID49IDAsXG4gICAgb2JzZXJ2ZXI6IGZ1bmN0aW9uIGNoZWNrT2JzZXJ2ZXIoKSB7XG4gICAgICByZXR1cm4gJ011dGF0aW9uT2JzZXJ2ZXInIGluIHdpbmRvdyB8fCAnV2Via2l0TXV0YXRpb25PYnNlcnZlcicgaW4gd2luZG93O1xuICAgIH0oKSxcbiAgICBwYXNzaXZlTGlzdGVuZXI6IGZ1bmN0aW9uIGNoZWNrUGFzc2l2ZUxpc3RlbmVyKCkge1xuICAgICAgdmFyIHN1cHBvcnRzUGFzc2l2ZSA9IGZhbHNlO1xuXG4gICAgICB0cnkge1xuICAgICAgICB2YXIgb3B0cyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ3Bhc3NpdmUnLCB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICBzdXBwb3J0c1Bhc3NpdmUgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0ZXN0UGFzc2l2ZUxpc3RlbmVyJywgbnVsbCwgb3B0cyk7XG4gICAgICB9IGNhdGNoIChlKSB7Ly8gTm8gc3VwcG9ydFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3VwcG9ydHNQYXNzaXZlO1xuICAgIH0oKSxcbiAgICBnZXN0dXJlczogZnVuY3Rpb24gY2hlY2tHZXN0dXJlcygpIHtcbiAgICAgIHJldHVybiAnb25nZXN0dXJlc3RhcnQnIGluIHdpbmRvdztcbiAgICB9KClcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0U3VwcG9ydCgpIHtcbiAgaWYgKCFzdXBwb3J0KSB7XG4gICAgc3VwcG9ydCA9IGNhbGNTdXBwb3J0KCk7XG4gIH1cblxuICByZXR1cm4gc3VwcG9ydDtcbn1cblxuZXhwb3J0IHsgZ2V0U3VwcG9ydCB9O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL3V0aWxzL2dldC1zdXBwb3J0LmpzIiwidmFyIGc7XHJcblxyXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxyXG5nID0gKGZ1bmN0aW9uKCkge1xyXG5cdHJldHVybiB0aGlzO1xyXG59KSgpO1xyXG5cclxudHJ5IHtcclxuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcclxuXHRnID0gZyB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCkgfHwgKDEsZXZhbCkoXCJ0aGlzXCIpO1xyXG59IGNhdGNoKGUpIHtcclxuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxyXG5cdGlmKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpXHJcblx0XHRnID0gd2luZG93O1xyXG59XHJcblxyXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXHJcbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXHJcbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZztcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vICh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsImltcG9ydCAnQC92ZW5kb3InO1xuaW1wb3J0ICdAL2xlc3Mvc3R5bGVzLmxlc3MnO1xuLy8gaW1wb3J0ICdAL3Z1ZS9pbmRleCc7XG5pbXBvcnQgJ0AvY29tbW9uLmJsb2Nrcy9pbmRleCc7XG5pbXBvcnQgJ0AvYXNzZXRzL3N2Zy9zdmctc3ByaXRlJztcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9pbmRleC5qcyIsIi8qIGVzbGludC1kaXNhYmxlICovXG4vLyByZXF1aXJlKFwiZXhwb3NlLWxvYWRlcj8kIWV4cG9zZS1sb2FkZXI/alF1ZXJ5IWpxdWVyeVwiKTtcblxuLy8gZmxleHNsaWRlclxuLy8gcmVxdWlyZShcIi4vZmxleHNsaWRlcjIvZmxleHNsaWRlci5jc3NcIilcbi8vIHJlcXVpcmUoXCJleHBvc2UtbG9hZGVyP2ZsZXhzbGlkZXIhLi9mbGV4c2xpZGVyMlwiKTtcblxuLy8gcGFyYWxsYXhcbi8vIHJlcXVpcmUoXCJleHBvc2UtbG9hZGVyP3BhcmFsbGF4IWpxdWVyeS1wYXJhbGxheC5qc1wiKTtcblxuLy8gcGxheCDQv9Cw0YDQsNC70LvQsNC60YEg0Y3RhNGE0LXQutGCXG4vLyByZXF1aXJlKFwicGxheFwiKTtcblxuLy8gd293LmpzXG4vLyByZXF1aXJlKFwiZXhwb3NlLWxvYWRlcj9XT1chd293LmpzXCIpO1xuXG4vLyBhbmltYXRlLmNzc1xuLy8gcmVxdWlyZShcImFuaW1hdGUuY3NzL2FuaW1hdGUuY3NzXCIpO1xuXG4vLyBibHVlaW1wIGdhbGxlcnkgaHR0cHM6Ly9naXRodWIuY29tL2JsdWVpbXAvR2FsbGVyeVxuLy8gcmVxdWlyZShcImJsdWVpbXAtZ2FsbGVyeS9jc3MvYmx1ZWltcC1nYWxsZXJ5Lm1pbi5jc3NcIik7XG4vLyByZXF1aXJlKFwiZXhwb3NlLWxvYWRlcj9ibHVlaW1wLkdhbGxlcnkhYmx1ZWltcC1nYWxsZXJ5L2pzL2JsdWVpbXAtZ2FsbGVyeS5taW4uanNcIik7XG5cblxuLy8gc2xpY2stY2Fyb3VzZWxcbi8vIHJlcXVpcmUoXCJzbGljay1jYXJvdXNlbC9zbGljay9zbGljay5jc3NcIik7XG4vLyByZXF1aXJlKFwic2xpY2stY2Fyb3VzZWwvc2xpY2svc2xpY2stdGhlbWUuY3NzXCIpO1xuLy8gcmVxdWlyZShcImV4cG9zZS1sb2FkZXI/c2xpY2shc2xpY2stY2Fyb3VzZWxcIik7XG5cbi8vIHN3aXBlciBzbGlkZXJcbi8vIHJlcXVpcmUoXCJzd2lwZXIvZGlzdC9jc3Mvc3dpcGVyLmNzc1wiKTtcbi8vIHJlcXVpcmUoXCJleHBvc2UtbG9hZGVyP1N3aXBlciFzd2lwZXIvZGlzdC9qcy9zd2lwZXIuanNcIik7XG5cbi8vIHZ1ZS5qc1xuLy8gaW1wb3J0IFZ1ZSBmcm9tICd2dWUnO1xuLy8gd2luZG93LlZ1ZSA9IFZ1ZTtcblxuXG4vLyBtYWduaWZpYy1wb3B1cFxuLy8gcmVxdWlyZShcIm1hZ25pZmljLXBvcHVwL2Rpc3QvbWFnbmlmaWMtcG9wdXAuY3NzXCIpO1xuLy8gcmVxdWlyZShcImV4cG9zZS1sb2FkZXI/bWFnbmlmaWNQb3B1cCFtYWduaWZpYy1wb3B1cC9kaXN0L2pxdWVyeS5tYWduaWZpYy1wb3B1cC5qc1wiKTtcblxuLy8ganF1ZXJ5IHVpIHNsaWRlclxuLy8gcmVxdWlyZSgnanF1ZXJ5LXVpLWNzcy9zbGlkZXIuY3NzJyk7XG4vLyByZXF1aXJlKFwiZXhwb3NlLWxvYWRlcj9zbGlkZXIhanF1ZXJ5LXVpL3NsaWRlclwiKTtcblxuLy8ganF1ZXJ5IHVpIHRhYnNcbi8vIHJlcXVpcmUoJ2pxdWVyeS11aS1jc3MvdGFicy5jc3MnKTtcbi8vIHJlcXVpcmUoXCJleHBvc2UtbG9hZGVyP3NsaWRlciFqcXVlcnktdWkvdGFic1wiKTtcblxuLy8gdG91Y2ggc3VwcG9ydCBmb3IganF1ZXJ5IHVpXG4vLyByZXF1aXJlKFwianF1ZXJ5LXVpLXRvdWNoLXB1bmNoXCIpO1xuXG4vLyBoaWdoc2xpZGVcbi8vIHJlcXVpcmUoXCJleHBvc2UtbG9hZGVyP2hzIS4vaGlnaHNsaWRlL2hpZ2hzbGlkZS9oaWdoc2xpZGUtd2l0aC1nYWxsZXJ5LmpzXCIpO1xuLy8gLy8gbGV0IGhzID0gcmVxdWlyZShcIi4vaGlnaHNsaWRlL2hpZ2hzbGlkZS9oaWdoc2xpZGUtd2l0aC1nYWxsZXJ5LmpzXCIpO1xuLy8gLy8gd2luZG93LmhzID0gaHM7XG4vLyByZXF1aXJlKFwiLi9oaWdoc2xpZGUvaGlnaHNsaWRlL2hpZ2hzbGlkZS5jc3NcIik7XG5cbi8vIGxpZ2h0Ym94XG4vLyByZXF1aXJlKFwibGlnaHRib3gyXCIpO1xuLy8gcmVxdWlyZShcImxpZ2h0Ym94Mi9kaXN0L2Nzcy9saWdodGJveC5jc3NcIik7XG5cbi8vIG5vcm1hbGl6ZS5jc3NcbnJlcXVpcmUoJ25vcm1hbGl6ZS5jc3Mvbm9ybWFsaXplLmNzcycpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3ZlbmRvci9pbmRleC5qcyIsIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvbm9ybWFsaXplLmNzcy9ub3JtYWxpemUuY3NzXG4vLyBtb2R1bGUgaWQgPSAxMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2xlc3Mvc3R5bGVzLmxlc3Ncbi8vIG1vZHVsZSBpZCA9IDEzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBtYXAgPSB7XG5cdFwiLi9hYm91dC9hYm91dC5sZXNzXCI6IDE1LFxuXHRcIi4vYWNjb3JkaW9uL2FjY29yZGlvbi5qc1wiOiAxNixcblx0XCIuL2FjY29yZGlvbi9hY2NvcmRpb24ubGVzc1wiOiAxNyxcblx0XCIuL2FkdmFudGFnZXMvYWR2YW50YWdlcy5sZXNzXCI6IDE4LFxuXHRcIi4vYW1vdW50L2Ftb3VudC5sZXNzXCI6IDE5LFxuXHRcIi4vYnRuLWNyb3NzL2J0bi1jcm9zcy5sZXNzXCI6IDIwLFxuXHRcIi4vYnRuLW1lbnUvYnRuLW1lbnUubGVzc1wiOiAyMSxcblx0XCIuL2J0bi9idG4ubGVzc1wiOiAyMixcblx0XCIuL2NhcmQvY2FyZC5sZXNzXCI6IDIzLFxuXHRcIi4vY2hhcm9pdC9jaGFyb2l0Lmxlc3NcIjogMjQsXG5cdFwiLi9jb250YWluZXIvY29udGFpbmVyLmxlc3NcIjogMjUsXG5cdFwiLi9ldmFsL2V2YWwubGVzc1wiOiAyNixcblx0XCIuL2V4YW1wbGUvZXhhbXBsZS5sZXNzXCI6IDI3LFxuXHRcIi4vZmFxL2ZhcS5sZXNzXCI6IDI4LFxuXHRcIi4vZmVlZGJhY2stZm9ybS9mZWVkYmFjay1mb3JtLmpzXCI6IDI5LFxuXHRcIi4vZmVlZGJhY2stZm9ybS9mZWVkYmFjay1mb3JtLmxlc3NcIjogMzAsXG5cdFwiLi9mZWVkYmFjay9mZWVkYmFjay5sZXNzXCI6IDMxLFxuXHRcIi4vZm9vdGVyL2Zvb3Rlci5qc1wiOiAzMixcblx0XCIuL2Zvb3Rlci9mb290ZXIubGVzc1wiOiAzMyxcblx0XCIuL2hlYWRlci9oZWFkZXIubGVzc1wiOiAzNCxcblx0XCIuL2hlcm8tZXZhbC9oZXJvLWV2YWwubGVzc1wiOiAzNSxcblx0XCIuL2hlcm8vaGVyby5sZXNzXCI6IDM2LFxuXHRcIi4vaW5kZXguanNcIjogNSxcblx0XCIuL2luZm8tYmxvY2svaW5mby1ibG9jay5qc1wiOiAzNyxcblx0XCIuL2luZm8tYmxvY2svaW5mby1ibG9jay5sZXNzXCI6IDM4LFxuXHRcIi4vbWFwL21hcC5qc1wiOiAzOSxcblx0XCIuL21hcC9tYXAubGVzc1wiOiA0MCxcblx0XCIuL21lbnUvbWVudS5qc1wiOiA0MSxcblx0XCIuL21lbnUvbWVudS5sZXNzXCI6IDQyLFxuXHRcIi4vbW9kYWwvbW9kYWwuanNcIjogNDMsXG5cdFwiLi9tb2RhbC9tb2RhbC5sZXNzXCI6IDEzMixcblx0XCIuL3BhZ2Utc2VjdGlvbi9wYWdlLXNlY3Rpb24ubGVzc1wiOiAxMzMsXG5cdFwiLi9wcmljZS9wcmljZS5qc1wiOiAxMzQsXG5cdFwiLi9wcmljZS9wcmljZS5sZXNzXCI6IDEzOCxcblx0XCIuL3JlY29tbWVuZGF0aW9ucy9yZWNvbW1lbmRhdGlvbnMubGVzc1wiOiAxMzksXG5cdFwiLi9zZWN0aW9uL3NlY3Rpb24ubGVzc1wiOiAxNDAsXG5cdFwiLi9zbGlkZXIvc2xpZGVyLmpzXCI6IDYsXG5cdFwiLi9zbGlkZXIvc2xpZGVyLmxlc3NcIjogMTQxLFxuXHRcIi4vc29jaWFsL3NvY2lhbC5sZXNzXCI6IDE0MlxufTtcbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0KHJlcSkge1xuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyh3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSk7XG59O1xuZnVuY3Rpb24gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkge1xuXHR2YXIgaWQgPSBtYXBbcmVxXTtcblx0aWYoIShpZCArIDEpKSAvLyBjaGVjayBmb3IgbnVtYmVyIG9yIHN0cmluZ1xuXHRcdHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyByZXEgKyBcIicuXCIpO1xuXHRyZXR1cm4gaWQ7XG59O1xud2VicGFja0NvbnRleHQua2V5cyA9IGZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0S2V5cygpIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKG1hcCk7XG59O1xud2VicGFja0NvbnRleHQucmVzb2x2ZSA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZTtcbm1vZHVsZS5leHBvcnRzID0gd2VicGFja0NvbnRleHQ7XG53ZWJwYWNrQ29udGV4dC5pZCA9IDE0O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2NvbW1vbi5ibG9ja3MgXFwuKGpzfGxlc3MpJFxuLy8gbW9kdWxlIGlkID0gMTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24uYmxvY2tzL2Fib3V0L2Fib3V0Lmxlc3Ncbi8vIG1vZHVsZSBpZCA9IDE1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImNvbnN0IGFjY29yZGlvbkl0ZW1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmFjY29yZGlvbl9faXRlbScpO1xuY29uc3QgYWNjb3JkaW9uVHJpZ2dlcnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuYWNjb3JkaW9uX190cmlnZ2VyJyk7XG5cbmZ1bmN0aW9uIG9uQWNjb3JkaW9uVHJpZ2dlcigpIHtcbiAgY29uc3QgY3VycmVudEFjY29yZGlvblRyaWdnZXIgPSB0aGlzO1xuICBjb25zdCBjdXJyZW50QWNjb3JkaW9uSXRlbSA9IGN1cnJlbnRBY2NvcmRpb25UcmlnZ2VyLnBhcmVudE5vZGU7XG4gIGNvbnN0IGN1cnJlbnRBY2NvcmRpb25Db250ZW50ID0gY3VycmVudEFjY29yZGlvblRyaWdnZXIubmV4dEVsZW1lbnRTaWJsaW5nO1xuXG4gIGlmIChjdXJyZW50QWNjb3JkaW9uSXRlbS5kYXRhc2V0Lm9wZW4gPT09ICdmYWxzZScpIHtcbiAgICBjdXJyZW50QWNjb3JkaW9uSXRlbS5kYXRhc2V0Lm9wZW4gPSAndHJ1ZSc7XG4gICAgY3VycmVudEFjY29yZGlvbkl0ZW0uY2xhc3NMaXN0LmFkZCgnYWNjb3JkaW9uX19pdGVtLS1zaG93Jyk7XG4gICAgY3VycmVudEFjY29yZGlvbkNvbnRlbnQuc3R5bGUubWF4SGVpZ2h0ID0gYCR7Y3VycmVudEFjY29yZGlvbkNvbnRlbnQuc2Nyb2xsSGVpZ2h0fXB4YDtcbiAgfSBlbHNlIHtcbiAgICBjdXJyZW50QWNjb3JkaW9uSXRlbS5kYXRhc2V0Lm9wZW4gPSAnZmFsc2UnO1xuICAgIGN1cnJlbnRBY2NvcmRpb25JdGVtLmNsYXNzTGlzdC5yZW1vdmUoJ2FjY29yZGlvbl9faXRlbS0tc2hvdycpO1xuICAgIGN1cnJlbnRBY2NvcmRpb25Db250ZW50LnN0eWxlLm1heEhlaWdodCA9IG51bGw7XG4gIH1cbn1cblxuZnVuY3Rpb24gYWNjb3JkaW9uc0luaXQoKSB7XG4gIGFjY29yZGlvblRyaWdnZXJzLmZvckVhY2goKHRyaWdnZXIpID0+IHtcbiAgICB0cmlnZ2VyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25BY2NvcmRpb25UcmlnZ2VyKTtcbiAgfSk7XG5cbiAgYWNjb3JkaW9uSXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgIGlmIChpdGVtLmRhdGFzZXQub3BlbiA9PT0gJ3RydWUnKSB7XG4gICAgICBpdGVtLmNsYXNzTGlzdC5hZGQoJ2FjY29yZGlvbl9faXRlbS0tc2hvdycpO1xuICAgIH1cbiAgfSk7XG59XG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKSA9PiB7XG4gIGFjY29yZGlvbnNJbml0KCk7XG59KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9jb21tb24uYmxvY2tzL2FjY29yZGlvbi9hY2NvcmRpb24uanMiLCIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2NvbW1vbi5ibG9ja3MvYWNjb3JkaW9uL2FjY29yZGlvbi5sZXNzXG4vLyBtb2R1bGUgaWQgPSAxN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2NvbW1vbi5ibG9ja3MvYWR2YW50YWdlcy9hZHZhbnRhZ2VzLmxlc3Ncbi8vIG1vZHVsZSBpZCA9IDE4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvY29tbW9uLmJsb2Nrcy9hbW91bnQvYW1vdW50Lmxlc3Ncbi8vIG1vZHVsZSBpZCA9IDE5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvY29tbW9uLmJsb2Nrcy9idG4tY3Jvc3MvYnRuLWNyb3NzLmxlc3Ncbi8vIG1vZHVsZSBpZCA9IDIwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvY29tbW9uLmJsb2Nrcy9idG4tbWVudS9idG4tbWVudS5sZXNzXG4vLyBtb2R1bGUgaWQgPSAyMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2NvbW1vbi5ibG9ja3MvYnRuL2J0bi5sZXNzXG4vLyBtb2R1bGUgaWQgPSAyMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2NvbW1vbi5ibG9ja3MvY2FyZC9jYXJkLmxlc3Ncbi8vIG1vZHVsZSBpZCA9IDIzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvY29tbW9uLmJsb2Nrcy9jaGFyb2l0L2NoYXJvaXQubGVzc1xuLy8gbW9kdWxlIGlkID0gMjRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24uYmxvY2tzL2NvbnRhaW5lci9jb250YWluZXIubGVzc1xuLy8gbW9kdWxlIGlkID0gMjVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24uYmxvY2tzL2V2YWwvZXZhbC5sZXNzXG4vLyBtb2R1bGUgaWQgPSAyNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2NvbW1vbi5ibG9ja3MvZXhhbXBsZS9leGFtcGxlLmxlc3Ncbi8vIG1vZHVsZSBpZCA9IDI3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvY29tbW9uLmJsb2Nrcy9mYXEvZmFxLmxlc3Ncbi8vIG1vZHVsZSBpZCA9IDI4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImNvbnN0IGlucHV0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5mZWVkYmFjay1mb3JtX19pbnB1dCcpO1xuXG5pbnB1dHMuZm9yRWFjaCgoaW5wdXQpID0+IHtcbiAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCkgPT4ge1xuICAgIGlmIChpbnB1dC52YWx1ZS50cmltKCkubGVuZ3RoIDwgMSkge1xuICAgICAgaW5wdXQudmFsdWUgPSBudWxsO1xuICAgICAgaW5wdXQuY2xhc3NMaXN0LnJlbW92ZSgnZmVlZGJhY2stZm9ybV9faW5wdXQtLWZpbGxlZCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnB1dC5jbGFzc0xpc3QuYWRkKCdmZWVkYmFjay1mb3JtX19pbnB1dC0tZmlsbGVkJyk7XG4gICAgfVxuICB9KTtcbn0pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbW1vbi5ibG9ja3MvZmVlZGJhY2stZm9ybS9mZWVkYmFjay1mb3JtLmpzIiwiLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24uYmxvY2tzL2ZlZWRiYWNrLWZvcm0vZmVlZGJhY2stZm9ybS5sZXNzXG4vLyBtb2R1bGUgaWQgPSAzMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2NvbW1vbi5ibG9ja3MvZmVlZGJhY2svZmVlZGJhY2subGVzc1xuLy8gbW9kdWxlIGlkID0gMzFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiY29uc3QgZm9vdGVyTmF2TGlua3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZm9vdGVyX19uYXYtbGluaycpO1xuXG5mb290ZXJOYXZMaW5rcy5mb3JFYWNoKChsaW5rKSA9PiB7XG4gIGxpbmsuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHtcbiAgICBpZiAoZXZlbnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnZm9vdGVyX19uYXYtbGluay0tYXJyb3cnKSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGxpbmsucGFyZW50RWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKCdmb290ZXJfX25hdi1pdGVtLS1hY3RpdmUnKTtcbiAgICB9XG4gIH0pO1xufSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29tbW9uLmJsb2Nrcy9mb290ZXIvZm9vdGVyLmpzIiwiLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24uYmxvY2tzL2Zvb3Rlci9mb290ZXIubGVzc1xuLy8gbW9kdWxlIGlkID0gMzNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24uYmxvY2tzL2hlYWRlci9oZWFkZXIubGVzc1xuLy8gbW9kdWxlIGlkID0gMzRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24uYmxvY2tzL2hlcm8tZXZhbC9oZXJvLWV2YWwubGVzc1xuLy8gbW9kdWxlIGlkID0gMzVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24uYmxvY2tzL2hlcm8vaGVyby5sZXNzXG4vLyBtb2R1bGUgaWQgPSAzNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJjb25zdCB2aWRlbyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy12aWRlbycpO1xyXG5cclxuaWYgKHZpZGVvKSB7XHJcbiAgdmlkZW8ucGxheWJhY2tSYXRlID0gNi4wO1xyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9jb21tb24uYmxvY2tzL2luZm8tYmxvY2svaW5mby1ibG9jay5qcyIsIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvY29tbW9uLmJsb2Nrcy9pbmZvLWJsb2NrL2luZm8tYmxvY2subGVzc1xuLy8gbW9kdWxlIGlkID0gMzhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiY29uc3QgREVTVE9QX19XSURUSCA9IDExNDA7XG5jb25zdCBtYXBEYXRhID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1hcF9fZGF0YScpO1xuY29uc3QgY2hhcm9pdE1hcHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubWFwJyk7XG5jb25zdCBtYXBEYXRhSXRlbSA9IG1hcERhdGEucXVlcnlTZWxlY3RvckFsbCgnLm1hcF9faXRlbScpO1xuY29uc3QgY2hhcm9pdERhdGEgPSBbXTtcbmNvbnN0IHNsaWRlckNhcmRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmpzLW1hcCcpO1xuY29uc3QgbWFya2VyQ29vcnRkcyA9IFtdO1xuXG5tYXBEYXRhSXRlbS5mb3JFYWNoKChpdGVtKSA9PiB7XG4gIGNvbnN0IGN1cnJlbnRQaW5EYXRhID0ge307XG4gIGN1cnJlbnRQaW5EYXRhLtGBb29yZGluYXRlcyA9IFtdO1xuICBjdXJyZW50UGluRGF0YS5uYW1lID0gaXRlbS5xdWVyeVNlbGVjdG9yKCcubWFwX19tYXJrZXItdGl0bGUnKS50ZXh0Q29udGVudDtcbiAgY3VycmVudFBpbkRhdGEu0YFvb3JkaW5hdGVzLnB1c2goTnVtYmVyKGl0ZW0ucXVlcnlTZWxlY3RvcignLm1hcF9fbWFya2VyJykuZGF0YXNldC54KSk7XG4gIGN1cnJlbnRQaW5EYXRhLtGBb29yZGluYXRlcy5wdXNoKE51bWJlcihpdGVtLnF1ZXJ5U2VsZWN0b3IoJy5tYXBfX21hcmtlcicpLmRhdGFzZXQueSkpO1xuICBjdXJyZW50UGluRGF0YS5vcGVuaW5nID0gaXRlbS5xdWVyeVNlbGVjdG9yKCcubWFwX19tYXJrZXItb3BlbmluZycpLnRleHRDb250ZW50O1xuICBjdXJyZW50UGluRGF0YS5waG9uZSA9IGl0ZW0ucXVlcnlTZWxlY3RvcignLm1hcF9fbWFya2VyLXBob25lJykudGV4dENvbnRlbnQucmVwbGFjZSgn0YLQtdC7OiAnLCAnJyk7XG4gIGNoYXJvaXREYXRhLnB1c2goY3VycmVudFBpbkRhdGEpO1xuICBtYXJrZXJDb29ydGRzLnB1c2goY3VycmVudFBpbkRhdGEu0YFvb3JkaW5hdGVzKTtcbn0pO1xuXG5mdW5jdGlvbiBsb2FkTWFwcygpIHtcbiAgdHJ5IHtcbiAgICB5bWFwcy5sb2FkKCkudGhlbigobWFwcykgPT4ge1xuICAgICAgY2hhcm9pdE1hcHMuZm9yRWFjaCgoY2hhcm9pdE1hcCkgPT4ge1xuICAgICAgICBjb25zdCBjdXJyZW50TWFwID0gbmV3IG1hcHMuTWFwKGNoYXJvaXRNYXAsIHtcbiAgICAgICAgICBjZW50ZXI6IFs1My4xOTY4NDIsIDQ1LjAyMDcxMV0sXG4gICAgICAgICAgem9vbTogMTYsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGN1cnJlbnRNYXAuYmVoYXZpb3JzLmVuYWJsZShbJ211bHRpVG91Y2gnXSk7XG4gICAgICAgIGlmICgvQW5kcm9pZHx3ZWJPU3xpUGhvbmV8aVBhZHxpUG9kfFNhbXN1bmd8QmxhY2tCZXJyeXxCQnxQbGF5Qm9va3xJRU1vYmlsZXxXaW5kb3dzIFBob25lfEtpbmRsZXxTaWxrfE9wZXJhIE1pbmkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpIHx8IHdpbmRvdy5pbm5lcldpZHRoIDwgREVTVE9QX19XSURUSCkge1xuICAgICAgICAgIGN1cnJlbnRNYXAuYmVoYXZpb3JzLmRpc2FibGUoWydkcmFnJ10pO1xuICAgICAgICAgIGNvbnN0IHpvb21Db250cm9sT2JqID0gY3VycmVudE1hcC5jb250cm9scy5nZXQoJ3pvb21Db250cm9sJyk7XG4gICAgICAgICAgem9vbUNvbnRyb2xPYmoub3B0aW9ucy5zZXQoJ3NpemUnLCAnc21hbGwnKTtcbiAgICAgICAgICB6b29tQ29udHJvbE9iai5vcHRpb25zLnNldCgncG9zaXRpb24nLCB7XG4gICAgICAgICAgICBsZWZ0OiAnMTBweCcsXG4gICAgICAgICAgICB0b3A6ICc0OHB4JyxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG1hcmtlcnNDb2xsZWN0aW9uID0gbmV3IHltYXBzLkdlb09iamVjdENvbGxlY3Rpb24obnVsbCk7XG5cbiAgICAgICAgY2hhcm9pdERhdGEuZm9yRWFjaCgoZGF0YSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHBpbiA9IFtkYXRhLtGBb29yZGluYXRlcywge1xuICAgICAgICAgICAgYmFsbG9vbkNvbnRlbnRIZWFkZXI6IGRhdGEubmFtZSxcbiAgICAgICAgICAgIGJhbGxvb25Db250ZW50Qm9keTogZGF0YS5vcGVuaW5nLFxuICAgICAgICAgICAgYmFsbG9vbkNvbnRlbnRGb290ZXI6IGA8YSBjbGFzcz1cInBpblwiIGhyZWY9XCJ0ZWw6JHtkYXRhLnBob25lfVwiPtGC0LXQuzogJHtkYXRhLnBob25lfTwvYT5gLFxuICAgICAgICAgICAgaGludENvbnRlbnQ6IGRhdGEubmFtZSxcbiAgICAgICAgICB9XTtcblxuICAgICAgICAgIG1hcmtlcnNDb2xsZWN0aW9uLmFkZChuZXcgeW1hcHMuUGxhY2VtYXJrKC4uLnBpbikpO1xuICAgICAgICAgIGN1cnJlbnRNYXAuZ2VvT2JqZWN0cy5hZGQobWFya2Vyc0NvbGxlY3Rpb24pO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoY2hhcm9pdE1hcC5pZCA9PT0gJ21hcC1zbGlkZXInKSB7XG4gICAgICAgICAgc2xpZGVyQ2FyZHMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgaXRlbS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgICBpZiAoZXZlbnQudGFyZ2V0LnBhcmVudE5vZGUuY2xhc3NMaXN0LmNvbnRhaW5zKCdqcy1tYXAnKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRJdGVtID0gZXZlbnQudGFyZ2V0LnBhcmVudE5vZGU7XG4gICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSBjdXJyZW50SXRlbS5kYXRhc2V0LnZhbHVlLnJlcGxhY2UoJ2FkZHJlc3MtJywgJycpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvb3JkcyA9IG1hcmtlckNvb3J0ZHNbaW5kZXhdO1xuXG4gICAgICAgICAgICAgICAgY3VycmVudE1hcC5wYW5Ubyhjb29yZHMsIHtcbiAgICAgICAgICAgICAgICAgIGZseWluZzogMSxcbiAgICAgICAgICAgICAgICB9KS50aGVuKCgpID0+IG1hcmtlcnNDb2xsZWN0aW9uLmdldChpbmRleCkuYmFsbG9vbi5vcGVuKGNvb3JkcykpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignU29tZXRoaW5nIHdlbnQgd3JvbmcnLCBlcnJvcik7XG4gIH1cbn1cblxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGxvYWRNYXBzKTtcblxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbW1vbi5ibG9ja3MvbWFwL21hcC5qcyIsIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvY29tbW9uLmJsb2Nrcy9tYXAvbWFwLmxlc3Ncbi8vIG1vZHVsZSBpZCA9IDQwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qIGVzbGludC1kaXNhYmxlICovXG5cbmNvbnN0IEVTQ19LRVlDT0RFID0gMjc7XG5cbmNvbnN0IGJvZHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5Jyk7XG5jb25zdCBtZW51T3BlbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tZW51X19vcGVuJyk7XG5jb25zdCBtZW51Q2xvc2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWVudV9fY2xvc2UnKTtcbmNvbnN0IG1lbnUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWVudScpO1xuY29uc3QgbWVudUJvZHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWVudV9fYm9keScpO1xuXG5mdW5jdGlvbiBvbkVzY1ByZXNzKGV2dCkge1xuICBpZiAoZXZ0LmtleUNvZGUgPT09IEVTQ19LRVlDT0RFKSB7XG4gICAgbWVudS5jbGFzc0xpc3QucmVtb3ZlKCdtZW51LS1hY3RpdmUnKTtcbiAgICBpZiAoYm9keS5jbGFzc0xpc3QuY29udGFpbnMoJ2xvY2snKSkge1xuICAgICAgYm9keS5jbGFzc0xpc3QucmVtb3ZlKCdsb2NrJyk7XG4gICAgfVxuICB9XG5cbiAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIG9uRXNjUHJlc3MpO1xufVxuXG5mdW5jdGlvbiBoaWRlTWVudSgpIHtcbiAgbWVudUJvZHkuc2Nyb2xsVG9wID0gMDtcbiAgbWVudS5jbGFzc0xpc3QucmVtb3ZlKCdtZW51LS1hY3RpdmUnKTtcbiAgYm9keS5jbGFzc0xpc3QucmVtb3ZlKCdsb2NrJyk7XG4gIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBvbkVzY1ByZXNzKTtcbn1cblxuZnVuY3Rpb24gc2hvd01lbnUoKSB7XG4gIGJvZHkuY2xhc3NMaXN0LmFkZCgnbG9jaycpO1xuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgb25Fc2NQcmVzcyk7XG4gIG1lbnUuY2xhc3NMaXN0LmFkZCgnbWVudS0tYWN0aXZlJyk7XG4gIG1lbnVCb2R5LnNjcm9sbFRvcCA9IDA7XG4gIG1lbnVDbG9zZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGhpZGVNZW51KTtcbn1cblxubWVudU9wZW4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBzaG93TWVudSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29tbW9uLmJsb2Nrcy9tZW51L21lbnUuanMiLCIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2NvbW1vbi5ibG9ja3MvbWVudS9tZW51Lmxlc3Ncbi8vIG1vZHVsZSBpZCA9IDQyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCBNaWNyb01vZGFsIGZyb20gJ21pY3JvbW9kYWwnO1xuaW1wb3J0IGNhcmRTbGlkZXIgZnJvbSAnLi4vc2xpZGVyL3NsaWRlcic7XG5cbk1pY3JvTW9kYWwuaW5pdCh7XG4gIG9wZW5UcmlnZ2VyOiAnZGF0YS1taWNyb21vZGFsLW9wZW4nLFxuICBjbG9zZVRyaWdnZXI6ICdkYXRhLW1pY3JvbW9kYWwtY2xvc2UnLFxuICBkaXNhYmxlRm9jdXM6IHRydWUsXG4gIGRpc2FibGVTY3JvbGw6IHRydWUsXG4gIGF3YWl0T3BlbkFuaW1hdGlvbjogdHJ1ZSxcbiAgYXdhaXRDbG9zZUFuaW1hdGlvbjogdHJ1ZSxcbiAgb25TaG93OiAobW9kYWwpID0+IHtcbiAgICBpZiAobW9kYWwuaWQgPT09ICdtb2RhbC0yJykge1xuICAgICAgY2FyZFNsaWRlci51cGRhdGUoKTtcbiAgICB9XG4gIH0sXG59KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9jb21tb24uYmxvY2tzL21vZGFsL21vZGFsLmpzIiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufVxuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gIHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7XG59XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KGFycik7XG59XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikge1xuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTtcbn1cblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikge1xuICBpZiAoIW8pIHJldHVybjtcbiAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbiAgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpO1xuICBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lO1xuICBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShuKTtcbiAgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xufVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikge1xuICBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDtcblxuICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIGFycjJbaV0gPSBhcnJbaV07XG5cbiAgcmV0dXJuIGFycjI7XG59XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59XG5cbnZhciBNaWNyb01vZGFsID0gZnVuY3Rpb24gKCkge1xuXG4gIHZhciBGT0NVU0FCTEVfRUxFTUVOVFMgPSBbJ2FbaHJlZl0nLCAnYXJlYVtocmVmXScsICdpbnB1dDpub3QoW2Rpc2FibGVkXSk6bm90KFt0eXBlPVwiaGlkZGVuXCJdKTpub3QoW2FyaWEtaGlkZGVuXSknLCAnc2VsZWN0Om5vdChbZGlzYWJsZWRdKTpub3QoW2FyaWEtaGlkZGVuXSknLCAndGV4dGFyZWE6bm90KFtkaXNhYmxlZF0pOm5vdChbYXJpYS1oaWRkZW5dKScsICdidXR0b246bm90KFtkaXNhYmxlZF0pOm5vdChbYXJpYS1oaWRkZW5dKScsICdpZnJhbWUnLCAnb2JqZWN0JywgJ2VtYmVkJywgJ1tjb250ZW50ZWRpdGFibGVdJywgJ1t0YWJpbmRleF06bm90KFt0YWJpbmRleF49XCItXCJdKSddO1xuXG4gIHZhciBNb2RhbCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTW9kYWwoX3JlZikge1xuICAgICAgdmFyIHRhcmdldE1vZGFsID0gX3JlZi50YXJnZXRNb2RhbCxcbiAgICAgICAgICBfcmVmJHRyaWdnZXJzID0gX3JlZi50cmlnZ2VycyxcbiAgICAgICAgICB0cmlnZ2VycyA9IF9yZWYkdHJpZ2dlcnMgPT09IHZvaWQgMCA/IFtdIDogX3JlZiR0cmlnZ2VycyxcbiAgICAgICAgICBfcmVmJG9uU2hvdyA9IF9yZWYub25TaG93LFxuICAgICAgICAgIG9uU2hvdyA9IF9yZWYkb25TaG93ID09PSB2b2lkIDAgPyBmdW5jdGlvbiAoKSB7fSA6IF9yZWYkb25TaG93LFxuICAgICAgICAgIF9yZWYkb25DbG9zZSA9IF9yZWYub25DbG9zZSxcbiAgICAgICAgICBvbkNsb3NlID0gX3JlZiRvbkNsb3NlID09PSB2b2lkIDAgPyBmdW5jdGlvbiAoKSB7fSA6IF9yZWYkb25DbG9zZSxcbiAgICAgICAgICBfcmVmJG9wZW5UcmlnZ2VyID0gX3JlZi5vcGVuVHJpZ2dlcixcbiAgICAgICAgICBvcGVuVHJpZ2dlciA9IF9yZWYkb3BlblRyaWdnZXIgPT09IHZvaWQgMCA/ICdkYXRhLW1pY3JvbW9kYWwtdHJpZ2dlcicgOiBfcmVmJG9wZW5UcmlnZ2VyLFxuICAgICAgICAgIF9yZWYkY2xvc2VUcmlnZ2VyID0gX3JlZi5jbG9zZVRyaWdnZXIsXG4gICAgICAgICAgY2xvc2VUcmlnZ2VyID0gX3JlZiRjbG9zZVRyaWdnZXIgPT09IHZvaWQgMCA/ICdkYXRhLW1pY3JvbW9kYWwtY2xvc2UnIDogX3JlZiRjbG9zZVRyaWdnZXIsXG4gICAgICAgICAgX3JlZiRvcGVuQ2xhc3MgPSBfcmVmLm9wZW5DbGFzcyxcbiAgICAgICAgICBvcGVuQ2xhc3MgPSBfcmVmJG9wZW5DbGFzcyA9PT0gdm9pZCAwID8gJ2lzLW9wZW4nIDogX3JlZiRvcGVuQ2xhc3MsXG4gICAgICAgICAgX3JlZiRkaXNhYmxlU2Nyb2xsID0gX3JlZi5kaXNhYmxlU2Nyb2xsLFxuICAgICAgICAgIGRpc2FibGVTY3JvbGwgPSBfcmVmJGRpc2FibGVTY3JvbGwgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRkaXNhYmxlU2Nyb2xsLFxuICAgICAgICAgIF9yZWYkZGlzYWJsZUZvY3VzID0gX3JlZi5kaXNhYmxlRm9jdXMsXG4gICAgICAgICAgZGlzYWJsZUZvY3VzID0gX3JlZiRkaXNhYmxlRm9jdXMgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRkaXNhYmxlRm9jdXMsXG4gICAgICAgICAgX3JlZiRhd2FpdENsb3NlQW5pbWF0ID0gX3JlZi5hd2FpdENsb3NlQW5pbWF0aW9uLFxuICAgICAgICAgIGF3YWl0Q2xvc2VBbmltYXRpb24gPSBfcmVmJGF3YWl0Q2xvc2VBbmltYXQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRhd2FpdENsb3NlQW5pbWF0LFxuICAgICAgICAgIF9yZWYkYXdhaXRPcGVuQW5pbWF0aSA9IF9yZWYuYXdhaXRPcGVuQW5pbWF0aW9uLFxuICAgICAgICAgIGF3YWl0T3BlbkFuaW1hdGlvbiA9IF9yZWYkYXdhaXRPcGVuQW5pbWF0aSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmJGF3YWl0T3BlbkFuaW1hdGksXG4gICAgICAgICAgX3JlZiRkZWJ1Z01vZGUgPSBfcmVmLmRlYnVnTW9kZSxcbiAgICAgICAgICBkZWJ1Z01vZGUgPSBfcmVmJGRlYnVnTW9kZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmJGRlYnVnTW9kZTtcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1vZGFsKTtcblxuICAgICAgLy8gU2F2ZSBhIHJlZmVyZW5jZSBvZiB0aGUgbW9kYWxcbiAgICAgIHRoaXMubW9kYWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0YXJnZXRNb2RhbCk7IC8vIFNhdmUgYSByZWZlcmVuY2UgdG8gdGhlIHBhc3NlZCBjb25maWdcblxuICAgICAgdGhpcy5jb25maWcgPSB7XG4gICAgICAgIGRlYnVnTW9kZTogZGVidWdNb2RlLFxuICAgICAgICBkaXNhYmxlU2Nyb2xsOiBkaXNhYmxlU2Nyb2xsLFxuICAgICAgICBvcGVuVHJpZ2dlcjogb3BlblRyaWdnZXIsXG4gICAgICAgIGNsb3NlVHJpZ2dlcjogY2xvc2VUcmlnZ2VyLFxuICAgICAgICBvcGVuQ2xhc3M6IG9wZW5DbGFzcyxcbiAgICAgICAgb25TaG93OiBvblNob3csXG4gICAgICAgIG9uQ2xvc2U6IG9uQ2xvc2UsXG4gICAgICAgIGF3YWl0Q2xvc2VBbmltYXRpb246IGF3YWl0Q2xvc2VBbmltYXRpb24sXG4gICAgICAgIGF3YWl0T3BlbkFuaW1hdGlvbjogYXdhaXRPcGVuQW5pbWF0aW9uLFxuICAgICAgICBkaXNhYmxlRm9jdXM6IGRpc2FibGVGb2N1c1xuICAgICAgfTsgLy8gUmVnaXN0ZXIgY2xpY2sgZXZlbnRzIG9ubHkgaWYgcHJlIGJpbmRpbmcgZXZlbnRMaXN0ZW5lcnNcblxuICAgICAgaWYgKHRyaWdnZXJzLmxlbmd0aCA+IDApIHRoaXMucmVnaXN0ZXJUcmlnZ2Vycy5hcHBseSh0aGlzLCBfdG9Db25zdW1hYmxlQXJyYXkodHJpZ2dlcnMpKTsgLy8gcHJlIGJpbmQgZnVuY3Rpb25zIGZvciBldmVudCBsaXN0ZW5lcnNcblxuICAgICAgdGhpcy5vbkNsaWNrID0gdGhpcy5vbkNsaWNrLmJpbmQodGhpcyk7XG4gICAgICB0aGlzLm9uS2V5ZG93biA9IHRoaXMub25LZXlkb3duLmJpbmQodGhpcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIExvb3BzIHRocm91Z2ggYWxsIG9wZW5UcmlnZ2VycyBhbmQgYmluZHMgY2xpY2sgZXZlbnRcbiAgICAgKiBAcGFyYW0gIHthcnJheX0gdHJpZ2dlcnMgW0FycmF5IG9mIG5vZGUgZWxlbWVudHNdXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cblxuXG4gICAgX2NyZWF0ZUNsYXNzKE1vZGFsLCBbe1xuICAgICAga2V5OiBcInJlZ2lzdGVyVHJpZ2dlcnNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZWdpc3RlclRyaWdnZXJzKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCB0cmlnZ2VycyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgICB0cmlnZ2Vyc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRyaWdnZXJzLmZpbHRlcihCb29sZWFuKS5mb3JFYWNoKGZ1bmN0aW9uICh0cmlnZ2VyKSB7XG4gICAgICAgICAgdHJpZ2dlci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnNob3dNb2RhbChldmVudCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJzaG93TW9kYWxcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzaG93TW9kYWwoKSB7XG4gICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgIHZhciBldmVudCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogbnVsbDtcbiAgICAgICAgdGhpcy5hY3RpdmVFbGVtZW50ID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcbiAgICAgICAgdGhpcy5tb2RhbC5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG4gICAgICAgIHRoaXMubW9kYWwuY2xhc3NMaXN0LmFkZCh0aGlzLmNvbmZpZy5vcGVuQ2xhc3MpO1xuICAgICAgICB0aGlzLnNjcm9sbEJlaGF2aW91cignZGlzYWJsZScpO1xuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXJzKCk7XG5cbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLmF3YWl0T3BlbkFuaW1hdGlvbikge1xuICAgICAgICAgIHZhciBoYW5kbGVyID0gZnVuY3Rpb24gaGFuZGxlcigpIHtcbiAgICAgICAgICAgIF90aGlzMi5tb2RhbC5yZW1vdmVFdmVudExpc3RlbmVyKCdhbmltYXRpb25lbmQnLCBoYW5kbGVyLCBmYWxzZSk7XG5cbiAgICAgICAgICAgIF90aGlzMi5zZXRGb2N1c1RvRmlyc3ROb2RlKCk7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHRoaXMubW9kYWwuYWRkRXZlbnRMaXN0ZW5lcignYW5pbWF0aW9uZW5kJywgaGFuZGxlciwgZmFsc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuc2V0Rm9jdXNUb0ZpcnN0Tm9kZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jb25maWcub25TaG93KHRoaXMubW9kYWwsIHRoaXMuYWN0aXZlRWxlbWVudCwgZXZlbnQpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJjbG9zZU1vZGFsXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY2xvc2VNb2RhbCgpIHtcbiAgICAgICAgdmFyIGV2ZW50ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBudWxsO1xuICAgICAgICB2YXIgbW9kYWwgPSB0aGlzLm1vZGFsO1xuICAgICAgICB0aGlzLm1vZGFsLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXJzKCk7XG4gICAgICAgIHRoaXMuc2Nyb2xsQmVoYXZpb3VyKCdlbmFibGUnKTtcblxuICAgICAgICBpZiAodGhpcy5hY3RpdmVFbGVtZW50ICYmIHRoaXMuYWN0aXZlRWxlbWVudC5mb2N1cykge1xuICAgICAgICAgIHRoaXMuYWN0aXZlRWxlbWVudC5mb2N1cygpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jb25maWcub25DbG9zZSh0aGlzLm1vZGFsLCB0aGlzLmFjdGl2ZUVsZW1lbnQsIGV2ZW50KTtcblxuICAgICAgICBpZiAodGhpcy5jb25maWcuYXdhaXRDbG9zZUFuaW1hdGlvbikge1xuICAgICAgICAgIHZhciBvcGVuQ2xhc3MgPSB0aGlzLmNvbmZpZy5vcGVuQ2xhc3M7IC8vIDwtIG9sZCBzY2hvb2wgZnR3XG5cbiAgICAgICAgICB0aGlzLm1vZGFsLmFkZEV2ZW50TGlzdGVuZXIoJ2FuaW1hdGlvbmVuZCcsIGZ1bmN0aW9uIGhhbmRsZXIoKSB7XG4gICAgICAgICAgICBtb2RhbC5jbGFzc0xpc3QucmVtb3ZlKG9wZW5DbGFzcyk7XG4gICAgICAgICAgICBtb2RhbC5yZW1vdmVFdmVudExpc3RlbmVyKCdhbmltYXRpb25lbmQnLCBoYW5kbGVyLCBmYWxzZSk7XG4gICAgICAgICAgfSwgZmFsc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1vZGFsLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5jb25maWcub3BlbkNsYXNzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJjbG9zZU1vZGFsQnlJZFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNsb3NlTW9kYWxCeUlkKHRhcmdldE1vZGFsKSB7XG4gICAgICAgIHRoaXMubW9kYWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0YXJnZXRNb2RhbCk7XG4gICAgICAgIGlmICh0aGlzLm1vZGFsKSB0aGlzLmNsb3NlTW9kYWwoKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic2Nyb2xsQmVoYXZpb3VyXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2Nyb2xsQmVoYXZpb3VyKHRvZ2dsZSkge1xuICAgICAgICBpZiAoIXRoaXMuY29uZmlnLmRpc2FibGVTY3JvbGwpIHJldHVybjtcbiAgICAgICAgdmFyIGJvZHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5Jyk7XG5cbiAgICAgICAgc3dpdGNoICh0b2dnbGUpIHtcbiAgICAgICAgICBjYXNlICdlbmFibGUnOlxuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihib2R5LnN0eWxlLCB7XG4gICAgICAgICAgICAgIG92ZXJmbG93OiAnJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJ2Rpc2FibGUnOlxuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihib2R5LnN0eWxlLCB7XG4gICAgICAgICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJhZGRFdmVudExpc3RlbmVyc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXJzKCkge1xuICAgICAgICB0aGlzLm1vZGFsLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLm9uQ2xpY2spO1xuICAgICAgICB0aGlzLm1vZGFsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vbkNsaWNrKTtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMub25LZXlkb3duKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicmVtb3ZlRXZlbnRMaXN0ZW5lcnNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVycygpIHtcbiAgICAgICAgdGhpcy5tb2RhbC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5vbkNsaWNrKTtcbiAgICAgICAgdGhpcy5tb2RhbC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub25DbGljayk7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLm9uS2V5ZG93bik7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIm9uQ2xpY2tcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBvbkNsaWNrKGV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudC50YXJnZXQuaGFzQXR0cmlidXRlKHRoaXMuY29uZmlnLmNsb3NlVHJpZ2dlcikpIHtcbiAgICAgICAgICB0aGlzLmNsb3NlTW9kYWwoZXZlbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIm9uS2V5ZG93blwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9uS2V5ZG93bihldmVudCkge1xuICAgICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gMjcpIHRoaXMuY2xvc2VNb2RhbChldmVudCk7IC8vIGVzY1xuXG4gICAgICAgIGlmIChldmVudC5rZXlDb2RlID09PSA5KSB0aGlzLnJldGFpbkZvY3VzKGV2ZW50KTsgLy8gdGFiXG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImdldEZvY3VzYWJsZU5vZGVzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Rm9jdXNhYmxlTm9kZXMoKSB7XG4gICAgICAgIHZhciBub2RlcyA9IHRoaXMubW9kYWwucXVlcnlTZWxlY3RvckFsbChGT0NVU0FCTEVfRUxFTUVOVFMpO1xuICAgICAgICByZXR1cm4gQXJyYXkuYXBwbHkodm9pZCAwLCBfdG9Db25zdW1hYmxlQXJyYXkobm9kZXMpKTtcbiAgICAgIH1cbiAgICAgIC8qKlxuICAgICAgICogVHJpZXMgdG8gc2V0IGZvY3VzIG9uIGEgbm9kZSB3aGljaCBpcyBub3QgYSBjbG9zZSB0cmlnZ2VyXG4gICAgICAgKiBpZiBubyBvdGhlciBub2RlcyBleGlzdCB0aGVuIGZvY3VzZXMgb24gZmlyc3QgY2xvc2UgdHJpZ2dlclxuICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic2V0Rm9jdXNUb0ZpcnN0Tm9kZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldEZvY3VzVG9GaXJzdE5vZGUoKSB7XG4gICAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy5kaXNhYmxlRm9jdXMpIHJldHVybjtcbiAgICAgICAgdmFyIGZvY3VzYWJsZU5vZGVzID0gdGhpcy5nZXRGb2N1c2FibGVOb2RlcygpOyAvLyBubyBmb2N1c2FibGUgbm9kZXNcblxuICAgICAgICBpZiAoZm9jdXNhYmxlTm9kZXMubGVuZ3RoID09PSAwKSByZXR1cm47IC8vIHJlbW92ZSBub2RlcyBvbiB3aG9zZSBjbGljaywgdGhlIG1vZGFsIGNsb3Nlc1xuICAgICAgICAvLyBjb3VsZCBub3QgdGhpbmsgb2YgYSBiZXR0ZXIgbmFtZSA6KFxuXG4gICAgICAgIHZhciBub2Rlc1doaWNoQXJlTm90Q2xvc2VUYXJnZXRzID0gZm9jdXNhYmxlTm9kZXMuZmlsdGVyKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgcmV0dXJuICFub2RlLmhhc0F0dHJpYnV0ZShfdGhpczMuY29uZmlnLmNsb3NlVHJpZ2dlcik7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAobm9kZXNXaGljaEFyZU5vdENsb3NlVGFyZ2V0cy5sZW5ndGggPiAwKSBub2Rlc1doaWNoQXJlTm90Q2xvc2VUYXJnZXRzWzBdLmZvY3VzKCk7XG4gICAgICAgIGlmIChub2Rlc1doaWNoQXJlTm90Q2xvc2VUYXJnZXRzLmxlbmd0aCA9PT0gMCkgZm9jdXNhYmxlTm9kZXNbMF0uZm9jdXMoKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicmV0YWluRm9jdXNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZXRhaW5Gb2N1cyhldmVudCkge1xuICAgICAgICB2YXIgZm9jdXNhYmxlTm9kZXMgPSB0aGlzLmdldEZvY3VzYWJsZU5vZGVzKCk7IC8vIG5vIGZvY3VzYWJsZSBub2Rlc1xuXG4gICAgICAgIGlmIChmb2N1c2FibGVOb2Rlcy5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZpbHRlcnMgbm9kZXMgd2hpY2ggYXJlIGhpZGRlbiB0byBwcmV2ZW50XG4gICAgICAgICAqIGZvY3VzIGxlYWsgb3V0c2lkZSBtb2RhbFxuICAgICAgICAgKi9cblxuICAgICAgICBmb2N1c2FibGVOb2RlcyA9IGZvY3VzYWJsZU5vZGVzLmZpbHRlcihmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgIHJldHVybiBub2RlLm9mZnNldFBhcmVudCAhPT0gbnVsbDtcbiAgICAgICAgfSk7IC8vIGlmIGRpc2FibGVGb2N1cyBpcyB0cnVlXG5cbiAgICAgICAgaWYgKCF0aGlzLm1vZGFsLmNvbnRhaW5zKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpKSB7XG4gICAgICAgICAgZm9jdXNhYmxlTm9kZXNbMF0uZm9jdXMoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgZm9jdXNlZEl0ZW1JbmRleCA9IGZvY3VzYWJsZU5vZGVzLmluZGV4T2YoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCk7XG5cbiAgICAgICAgICBpZiAoZXZlbnQuc2hpZnRLZXkgJiYgZm9jdXNlZEl0ZW1JbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgZm9jdXNhYmxlTm9kZXNbZm9jdXNhYmxlTm9kZXMubGVuZ3RoIC0gMV0uZm9jdXMoKTtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFldmVudC5zaGlmdEtleSAmJiBmb2N1c2FibGVOb2Rlcy5sZW5ndGggPiAwICYmIGZvY3VzZWRJdGVtSW5kZXggPT09IGZvY3VzYWJsZU5vZGVzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgIGZvY3VzYWJsZU5vZGVzWzBdLmZvY3VzKCk7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBNb2RhbDtcbiAgfSgpO1xuICAvKipcbiAgICogTW9kYWwgcHJvdG90eXBlIGVuZHMuXG4gICAqIEhlcmUgb24gY29kZSBpcyByZXNwb25zaWJsZSBmb3IgZGV0ZWN0aW5nIGFuZFxuICAgKiBhdXRvIGJpbmRpbmcgZXZlbnQgaGFuZGxlcnMgb24gbW9kYWwgdHJpZ2dlcnNcbiAgICovXG4gIC8vIEtlZXAgYSByZWZlcmVuY2UgdG8gdGhlIG9wZW5lZCBtb2RhbFxuXG5cbiAgdmFyIGFjdGl2ZU1vZGFsID0gbnVsbDtcbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhbiBhc3NvY2lhdGl2ZSBhcnJheSBvZiBtb2RhbHMgYW5kIGl0J3NcbiAgICogcmVzcGVjdGl2ZSB0cmlnZ2Vyc1xuICAgKiBAcGFyYW0gIHthcnJheX0gdHJpZ2dlcnMgICAgIEFuIGFycmF5IG9mIGFsbCB0cmlnZ2Vyc1xuICAgKiBAcGFyYW0gIHtzdHJpbmd9IHRyaWdnZXJBdHRyIFRoZSBkYXRhLWF0dHJpYnV0ZSB3aGljaCB0cmlnZ2VycyB0aGUgbW9kdWxlXG4gICAqIEByZXR1cm4ge2FycmF5fVxuICAgKi9cblxuICB2YXIgZ2VuZXJhdGVUcmlnZ2VyTWFwID0gZnVuY3Rpb24gZ2VuZXJhdGVUcmlnZ2VyTWFwKHRyaWdnZXJzLCB0cmlnZ2VyQXR0cikge1xuICAgIHZhciB0cmlnZ2VyTWFwID0gW107XG4gICAgdHJpZ2dlcnMuZm9yRWFjaChmdW5jdGlvbiAodHJpZ2dlcikge1xuICAgICAgdmFyIHRhcmdldE1vZGFsID0gdHJpZ2dlci5hdHRyaWJ1dGVzW3RyaWdnZXJBdHRyXS52YWx1ZTtcbiAgICAgIGlmICh0cmlnZ2VyTWFwW3RhcmdldE1vZGFsXSA9PT0gdW5kZWZpbmVkKSB0cmlnZ2VyTWFwW3RhcmdldE1vZGFsXSA9IFtdO1xuICAgICAgdHJpZ2dlck1hcFt0YXJnZXRNb2RhbF0ucHVzaCh0cmlnZ2VyKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdHJpZ2dlck1hcDtcbiAgfTtcbiAgLyoqXG4gICAqIFZhbGlkYXRlcyB3aGV0aGVyIGEgbW9kYWwgb2YgdGhlIGdpdmVuIGlkIGV4aXN0c1xuICAgKiBpbiB0aGUgRE9NXG4gICAqIEBwYXJhbSAge251bWJlcn0gaWQgIFRoZSBpZCBvZiB0aGUgbW9kYWxcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG5cblxuICB2YXIgdmFsaWRhdGVNb2RhbFByZXNlbmNlID0gZnVuY3Rpb24gdmFsaWRhdGVNb2RhbFByZXNlbmNlKGlkKSB7XG4gICAgaWYgKCFkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCkpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIk1pY3JvTW9kYWw6IFxcdTI3NTdTZWVtcyBsaWtlIHlvdSBoYXZlIG1pc3NlZCAlYydcIi5jb25jYXQoaWQsIFwiJ1wiKSwgJ2JhY2tncm91bmQtY29sb3I6ICNmOGY5ZmE7Y29sb3I6ICM1MDU5NmM7Zm9udC13ZWlnaHQ6IGJvbGQ7JywgJ0lEIHNvbWV3aGVyZSBpbiB5b3VyIGNvZGUuIFJlZmVyIGV4YW1wbGUgYmVsb3cgdG8gcmVzb2x2ZSBpdC4nKTtcbiAgICAgIGNvbnNvbGUud2FybihcIiVjRXhhbXBsZTpcIiwgJ2JhY2tncm91bmQtY29sb3I6ICNmOGY5ZmE7Y29sb3I6ICM1MDU5NmM7Zm9udC13ZWlnaHQ6IGJvbGQ7JywgXCI8ZGl2IGNsYXNzPVxcXCJtb2RhbFxcXCIgaWQ9XFxcIlwiLmNvbmNhdChpZCwgXCJcXFwiPjwvZGl2PlwiKSk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9O1xuICAvKipcbiAgICogVmFsaWRhdGVzIGlmIHRoZXJlIGFyZSBtb2RhbCB0cmlnZ2VycyBwcmVzZW50XG4gICAqIGluIHRoZSBET01cbiAgICogQHBhcmFtICB7YXJyYXl9IHRyaWdnZXJzIEFuIGFycmF5IG9mIGRhdGEtdHJpZ2dlcnNcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG5cblxuICB2YXIgdmFsaWRhdGVUcmlnZ2VyUHJlc2VuY2UgPSBmdW5jdGlvbiB2YWxpZGF0ZVRyaWdnZXJQcmVzZW5jZSh0cmlnZ2Vycykge1xuICAgIGlmICh0cmlnZ2Vycy5sZW5ndGggPD0gMCkge1xuICAgICAgY29uc29sZS53YXJuKFwiTWljcm9Nb2RhbDogXFx1Mjc1N1BsZWFzZSBzcGVjaWZ5IGF0IGxlYXN0IG9uZSAlYydtaWNyb21vZGFsLXRyaWdnZXInXCIsICdiYWNrZ3JvdW5kLWNvbG9yOiAjZjhmOWZhO2NvbG9yOiAjNTA1OTZjO2ZvbnQtd2VpZ2h0OiBib2xkOycsICdkYXRhIGF0dHJpYnV0ZS4nKTtcbiAgICAgIGNvbnNvbGUud2FybihcIiVjRXhhbXBsZTpcIiwgJ2JhY2tncm91bmQtY29sb3I6ICNmOGY5ZmE7Y29sb3I6ICM1MDU5NmM7Zm9udC13ZWlnaHQ6IGJvbGQ7JywgXCI8YSBocmVmPVxcXCIjXFxcIiBkYXRhLW1pY3JvbW9kYWwtdHJpZ2dlcj1cXFwibXktbW9kYWxcXFwiPjwvYT5cIik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9O1xuICAvKipcbiAgICogQ2hlY2tzIGlmIHRyaWdnZXJzIGFuZCB0aGVpciBjb3JyZXNwb25kaW5nIG1vZGFsc1xuICAgKiBhcmUgcHJlc2VudCBpbiB0aGUgRE9NXG4gICAqIEBwYXJhbSAge2FycmF5fSB0cmlnZ2VycyAgIEFycmF5IG9mIERPTSBub2RlcyB3aGljaCBoYXZlIGRhdGEtdHJpZ2dlcnNcbiAgICogQHBhcmFtICB7YXJyYXl9IHRyaWdnZXJNYXAgQXNzb2NpYXRpdmUgYXJyYXkgb2YgbW9kYWxzIGFuZCB0aGVpciB0cmlnZ2Vyc1xuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cblxuXG4gIHZhciB2YWxpZGF0ZUFyZ3MgPSBmdW5jdGlvbiB2YWxpZGF0ZUFyZ3ModHJpZ2dlcnMsIHRyaWdnZXJNYXApIHtcbiAgICB2YWxpZGF0ZVRyaWdnZXJQcmVzZW5jZSh0cmlnZ2Vycyk7XG4gICAgaWYgKCF0cmlnZ2VyTWFwKSByZXR1cm4gdHJ1ZTtcblxuICAgIGZvciAodmFyIGlkIGluIHRyaWdnZXJNYXApIHtcbiAgICAgIHZhbGlkYXRlTW9kYWxQcmVzZW5jZShpZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG4gIC8qKlxuICAgKiBCaW5kcyBjbGljayBoYW5kbGVycyB0byBhbGwgbW9kYWwgdHJpZ2dlcnNcbiAgICogQHBhcmFtICB7b2JqZWN0fSBjb25maWcgW2Rlc2NyaXB0aW9uXVxuICAgKiBAcmV0dXJuIHZvaWRcbiAgICovXG5cblxuICB2YXIgaW5pdCA9IGZ1bmN0aW9uIGluaXQoY29uZmlnKSB7XG4gICAgLy8gQ3JlYXRlIGFuIGNvbmZpZyBvYmplY3Qgd2l0aCBkZWZhdWx0IG9wZW5UcmlnZ2VyXG4gICAgdmFyIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCB7XG4gICAgICBvcGVuVHJpZ2dlcjogJ2RhdGEtbWljcm9tb2RhbC10cmlnZ2VyJ1xuICAgIH0sIGNvbmZpZyk7IC8vIENvbGxlY3RzIGFsbCB0aGUgbm9kZXMgd2l0aCB0aGUgdHJpZ2dlclxuXG4gICAgdmFyIHRyaWdnZXJzID0gX3RvQ29uc3VtYWJsZUFycmF5KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbXCIuY29uY2F0KG9wdGlvbnMub3BlblRyaWdnZXIsIFwiXVwiKSkpOyAvLyBNYWtlcyBhIG1hcHBpbmdzIG9mIG1vZGFscyB3aXRoIHRoZWlyIHRyaWdnZXIgbm9kZXNcblxuXG4gICAgdmFyIHRyaWdnZXJNYXAgPSBnZW5lcmF0ZVRyaWdnZXJNYXAodHJpZ2dlcnMsIG9wdGlvbnMub3BlblRyaWdnZXIpOyAvLyBDaGVja3MgaWYgbW9kYWxzIGFuZCB0cmlnZ2VycyBleGlzdCBpbiBkb21cblxuICAgIGlmIChvcHRpb25zLmRlYnVnTW9kZSA9PT0gdHJ1ZSAmJiB2YWxpZGF0ZUFyZ3ModHJpZ2dlcnMsIHRyaWdnZXJNYXApID09PSBmYWxzZSkgcmV0dXJuOyAvLyBGb3IgZXZlcnkgdGFyZ2V0IG1vZGFsIGNyZWF0ZXMgYSBuZXcgaW5zdGFuY2VcblxuICAgIGZvciAodmFyIGtleSBpbiB0cmlnZ2VyTWFwKSB7XG4gICAgICB2YXIgdmFsdWUgPSB0cmlnZ2VyTWFwW2tleV07XG4gICAgICBvcHRpb25zLnRhcmdldE1vZGFsID0ga2V5O1xuICAgICAgb3B0aW9ucy50cmlnZ2VycyA9IF90b0NvbnN1bWFibGVBcnJheSh2YWx1ZSk7XG4gICAgICBhY3RpdmVNb2RhbCA9IG5ldyBNb2RhbChvcHRpb25zKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICB9XG4gIH07XG4gIC8qKlxuICAgKiBTaG93cyBhIHBhcnRpY3VsYXIgbW9kYWxcbiAgICogQHBhcmFtICB7c3RyaW5nfSB0YXJnZXRNb2RhbCBbVGhlIGlkIG9mIHRoZSBtb2RhbCB0byBkaXNwbGF5XVxuICAgKiBAcGFyYW0gIHtvYmplY3R9IGNvbmZpZyBbVGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0IHRvIHBhc3NdXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuXG5cbiAgdmFyIHNob3cgPSBmdW5jdGlvbiBzaG93KHRhcmdldE1vZGFsLCBjb25maWcpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGNvbmZpZyB8fCB7fTtcbiAgICBvcHRpb25zLnRhcmdldE1vZGFsID0gdGFyZ2V0TW9kYWw7IC8vIENoZWNrcyBpZiBtb2RhbHMgYW5kIHRyaWdnZXJzIGV4aXN0IGluIGRvbVxuXG4gICAgaWYgKG9wdGlvbnMuZGVidWdNb2RlID09PSB0cnVlICYmIHZhbGlkYXRlTW9kYWxQcmVzZW5jZSh0YXJnZXRNb2RhbCkgPT09IGZhbHNlKSByZXR1cm47IC8vIGNsZWFyIGV2ZW50cyBpbiBjYXNlIHByZXZpb3VzIG1vZGFsIHdhc24ndCBjbG9zZVxuXG4gICAgaWYgKGFjdGl2ZU1vZGFsKSBhY3RpdmVNb2RhbC5yZW1vdmVFdmVudExpc3RlbmVycygpOyAvLyBzdG9yZXMgcmVmZXJlbmNlIHRvIGFjdGl2ZSBtb2RhbFxuXG4gICAgYWN0aXZlTW9kYWwgPSBuZXcgTW9kYWwob3B0aW9ucyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG5cbiAgICBhY3RpdmVNb2RhbC5zaG93TW9kYWwoKTtcbiAgfTtcbiAgLyoqXG4gICAqIENsb3NlcyB0aGUgYWN0aXZlIG1vZGFsXG4gICAqIEBwYXJhbSAge3N0cmluZ30gdGFyZ2V0TW9kYWwgW1RoZSBpZCBvZiB0aGUgbW9kYWwgdG8gY2xvc2VdXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuXG5cbiAgdmFyIGNsb3NlID0gZnVuY3Rpb24gY2xvc2UodGFyZ2V0TW9kYWwpIHtcbiAgICB0YXJnZXRNb2RhbCA/IGFjdGl2ZU1vZGFsLmNsb3NlTW9kYWxCeUlkKHRhcmdldE1vZGFsKSA6IGFjdGl2ZU1vZGFsLmNsb3NlTW9kYWwoKTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGluaXQ6IGluaXQsXG4gICAgc2hvdzogc2hvdyxcbiAgICBjbG9zZTogY2xvc2VcbiAgfTtcbn0oKTtcbndpbmRvdy5NaWNyb01vZGFsID0gTWljcm9Nb2RhbDtcblxuZXhwb3J0IGRlZmF1bHQgTWljcm9Nb2RhbDtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9taWNyb21vZGFsL2Rpc3QvbWljcm9tb2RhbC5lcy5qcyIsIi8qKlxuICogU3dpcGVyIDYuNy4wXG4gKiBNb3N0IG1vZGVybiBtb2JpbGUgdG91Y2ggc2xpZGVyIGFuZCBmcmFtZXdvcmsgd2l0aCBoYXJkd2FyZSBhY2NlbGVyYXRlZCB0cmFuc2l0aW9uc1xuICogaHR0cHM6Ly9zd2lwZXJqcy5jb21cbiAqXG4gKiBDb3B5cmlnaHQgMjAxNC0yMDIxIFZsYWRpbWlyIEtoYXJsYW1waWRpXG4gKlxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG4gKlxuICogUmVsZWFzZWQgb246IE1heSAzMSwgMjAyMVxuICovXG5cbmV4cG9ydCB7IGRlZmF1bHQgYXMgU3dpcGVyLCBkZWZhdWx0IH0gZnJvbSAnLi9lc20vY29tcG9uZW50cy9jb3JlL2NvcmUtY2xhc3MnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBWaXJ0dWFsIH0gZnJvbSAnLi9lc20vY29tcG9uZW50cy92aXJ0dWFsL3ZpcnR1YWwnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBLZXlib2FyZCB9IGZyb20gJy4vZXNtL2NvbXBvbmVudHMva2V5Ym9hcmQva2V5Ym9hcmQnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBNb3VzZXdoZWVsIH0gZnJvbSAnLi9lc20vY29tcG9uZW50cy9tb3VzZXdoZWVsL21vdXNld2hlZWwnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBOYXZpZ2F0aW9uIH0gZnJvbSAnLi9lc20vY29tcG9uZW50cy9uYXZpZ2F0aW9uL25hdmlnYXRpb24nO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBQYWdpbmF0aW9uIH0gZnJvbSAnLi9lc20vY29tcG9uZW50cy9wYWdpbmF0aW9uL3BhZ2luYXRpb24nO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBTY3JvbGxiYXIgfSBmcm9tICcuL2VzbS9jb21wb25lbnRzL3Njcm9sbGJhci9zY3JvbGxiYXInO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBQYXJhbGxheCB9IGZyb20gJy4vZXNtL2NvbXBvbmVudHMvcGFyYWxsYXgvcGFyYWxsYXgnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBab29tIH0gZnJvbSAnLi9lc20vY29tcG9uZW50cy96b29tL3pvb20nO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBMYXp5IH0gZnJvbSAnLi9lc20vY29tcG9uZW50cy9sYXp5L2xhenknO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBDb250cm9sbGVyIH0gZnJvbSAnLi9lc20vY29tcG9uZW50cy9jb250cm9sbGVyL2NvbnRyb2xsZXInO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBBMTF5IH0gZnJvbSAnLi9lc20vY29tcG9uZW50cy9hMTF5L2ExMXknO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBIaXN0b3J5IH0gZnJvbSAnLi9lc20vY29tcG9uZW50cy9oaXN0b3J5L2hpc3RvcnknO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBIYXNoTmF2aWdhdGlvbiB9IGZyb20gJy4vZXNtL2NvbXBvbmVudHMvaGFzaC1uYXZpZ2F0aW9uL2hhc2gtbmF2aWdhdGlvbic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIEF1dG9wbGF5IH0gZnJvbSAnLi9lc20vY29tcG9uZW50cy9hdXRvcGxheS9hdXRvcGxheSc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIEVmZmVjdEZhZGUgfSBmcm9tICcuL2VzbS9jb21wb25lbnRzL2VmZmVjdC1mYWRlL2VmZmVjdC1mYWRlJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgRWZmZWN0Q3ViZSB9IGZyb20gJy4vZXNtL2NvbXBvbmVudHMvZWZmZWN0LWN1YmUvZWZmZWN0LWN1YmUnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBFZmZlY3RGbGlwIH0gZnJvbSAnLi9lc20vY29tcG9uZW50cy9lZmZlY3QtZmxpcC9lZmZlY3QtZmxpcCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIEVmZmVjdENvdmVyZmxvdyB9IGZyb20gJy4vZXNtL2NvbXBvbmVudHMvZWZmZWN0LWNvdmVyZmxvdy9lZmZlY3QtY292ZXJmbG93JztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgVGh1bWJzIH0gZnJvbSAnLi9lc20vY29tcG9uZW50cy90aHVtYnMvdGh1bWJzJztcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvc3dpcGVyL3N3aXBlci5lc20uanMiLCJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbi8qIGVzbGludCBuby1wYXJhbS1yZWFzc2lnbjogXCJvZmZcIiAqL1xuaW1wb3J0IHsgZ2V0RG9jdW1lbnQgfSBmcm9tICdzc3Itd2luZG93JztcbmltcG9ydCAkIGZyb20gJy4uLy4uL3V0aWxzL2RvbSc7XG5pbXBvcnQgeyBleHRlbmQsIG5vdywgZGVsZXRlUHJvcHMgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XG5pbXBvcnQgeyBnZXRTdXBwb3J0IH0gZnJvbSAnLi4vLi4vdXRpbHMvZ2V0LXN1cHBvcnQnO1xuaW1wb3J0IHsgZ2V0RGV2aWNlIH0gZnJvbSAnLi4vLi4vdXRpbHMvZ2V0LWRldmljZSc7XG5pbXBvcnQgeyBnZXRCcm93c2VyIH0gZnJvbSAnLi4vLi4vdXRpbHMvZ2V0LWJyb3dzZXInO1xuaW1wb3J0IFJlc2l6ZSBmcm9tICcuLi8uLi9tb2R1bGVzL3Jlc2l6ZS9yZXNpemUnO1xuaW1wb3J0IE9ic2VydmVyIGZyb20gJy4uLy4uL21vZHVsZXMvb2JzZXJ2ZXIvb2JzZXJ2ZXInO1xuaW1wb3J0IG1vZHVsYXIgZnJvbSAnLi9tb2R1bGFyJztcbmltcG9ydCBldmVudHNFbWl0dGVyIGZyb20gJy4vZXZlbnRzLWVtaXR0ZXInO1xuaW1wb3J0IHVwZGF0ZSBmcm9tICcuL3VwZGF0ZS9pbmRleCc7XG5pbXBvcnQgdHJhbnNsYXRlIGZyb20gJy4vdHJhbnNsYXRlL2luZGV4JztcbmltcG9ydCB0cmFuc2l0aW9uIGZyb20gJy4vdHJhbnNpdGlvbi9pbmRleCc7XG5pbXBvcnQgc2xpZGUgZnJvbSAnLi9zbGlkZS9pbmRleCc7XG5pbXBvcnQgbG9vcCBmcm9tICcuL2xvb3AvaW5kZXgnO1xuaW1wb3J0IGdyYWJDdXJzb3IgZnJvbSAnLi9ncmFiLWN1cnNvci9pbmRleCc7XG5pbXBvcnQgbWFuaXB1bGF0aW9uIGZyb20gJy4vbWFuaXB1bGF0aW9uL2luZGV4JztcbmltcG9ydCBldmVudHMgZnJvbSAnLi9ldmVudHMvaW5kZXgnO1xuaW1wb3J0IGJyZWFrcG9pbnRzIGZyb20gJy4vYnJlYWtwb2ludHMvaW5kZXgnO1xuaW1wb3J0IGNsYXNzZXMgZnJvbSAnLi9jbGFzc2VzL2luZGV4JztcbmltcG9ydCBpbWFnZXMgZnJvbSAnLi9pbWFnZXMvaW5kZXgnO1xuaW1wb3J0IGNoZWNrT3ZlcmZsb3cgZnJvbSAnLi9jaGVjay1vdmVyZmxvdy9pbmRleCc7XG5pbXBvcnQgZGVmYXVsdHMgZnJvbSAnLi9kZWZhdWx0cyc7XG52YXIgcHJvdG90eXBlcyA9IHtcbiAgbW9kdWxhcjogbW9kdWxhcixcbiAgZXZlbnRzRW1pdHRlcjogZXZlbnRzRW1pdHRlcixcbiAgdXBkYXRlOiB1cGRhdGUsXG4gIHRyYW5zbGF0ZTogdHJhbnNsYXRlLFxuICB0cmFuc2l0aW9uOiB0cmFuc2l0aW9uLFxuICBzbGlkZTogc2xpZGUsXG4gIGxvb3A6IGxvb3AsXG4gIGdyYWJDdXJzb3I6IGdyYWJDdXJzb3IsXG4gIG1hbmlwdWxhdGlvbjogbWFuaXB1bGF0aW9uLFxuICBldmVudHM6IGV2ZW50cyxcbiAgYnJlYWtwb2ludHM6IGJyZWFrcG9pbnRzLFxuICBjaGVja092ZXJmbG93OiBjaGVja092ZXJmbG93LFxuICBjbGFzc2VzOiBjbGFzc2VzLFxuICBpbWFnZXM6IGltYWdlc1xufTtcbnZhciBleHRlbmRlZERlZmF1bHRzID0ge307XG5cbnZhciBTd2lwZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTd2lwZXIoKSB7XG4gICAgdmFyIGVsO1xuICAgIHZhciBwYXJhbXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgaWYgKGFyZ3MubGVuZ3RoID09PSAxICYmIGFyZ3NbMF0uY29uc3RydWN0b3IgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZ3NbMF0pLnNsaWNlKDgsIC0xKSA9PT0gJ09iamVjdCcpIHtcbiAgICAgIHBhcmFtcyA9IGFyZ3NbMF07XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsID0gYXJnc1swXTtcbiAgICAgIHBhcmFtcyA9IGFyZ3NbMV07XG4gICAgfVxuXG4gICAgaWYgKCFwYXJhbXMpIHBhcmFtcyA9IHt9O1xuICAgIHBhcmFtcyA9IGV4dGVuZCh7fSwgcGFyYW1zKTtcbiAgICBpZiAoZWwgJiYgIXBhcmFtcy5lbCkgcGFyYW1zLmVsID0gZWw7XG5cbiAgICBpZiAocGFyYW1zLmVsICYmICQocGFyYW1zLmVsKS5sZW5ndGggPiAxKSB7XG4gICAgICB2YXIgc3dpcGVycyA9IFtdO1xuICAgICAgJChwYXJhbXMuZWwpLmVhY2goZnVuY3Rpb24gKGNvbnRhaW5lckVsKSB7XG4gICAgICAgIHZhciBuZXdQYXJhbXMgPSBleHRlbmQoe30sIHBhcmFtcywge1xuICAgICAgICAgIGVsOiBjb250YWluZXJFbFxuICAgICAgICB9KTtcbiAgICAgICAgc3dpcGVycy5wdXNoKG5ldyBTd2lwZXIobmV3UGFyYW1zKSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBzd2lwZXJzO1xuICAgIH0gLy8gU3dpcGVyIEluc3RhbmNlXG5cblxuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHN3aXBlci5fX3N3aXBlcl9fID0gdHJ1ZTtcbiAgICBzd2lwZXIuc3VwcG9ydCA9IGdldFN1cHBvcnQoKTtcbiAgICBzd2lwZXIuZGV2aWNlID0gZ2V0RGV2aWNlKHtcbiAgICAgIHVzZXJBZ2VudDogcGFyYW1zLnVzZXJBZ2VudFxuICAgIH0pO1xuICAgIHN3aXBlci5icm93c2VyID0gZ2V0QnJvd3NlcigpO1xuICAgIHN3aXBlci5ldmVudHNMaXN0ZW5lcnMgPSB7fTtcbiAgICBzd2lwZXIuZXZlbnRzQW55TGlzdGVuZXJzID0gW107XG5cbiAgICBpZiAodHlwZW9mIHN3aXBlci5tb2R1bGVzID09PSAndW5kZWZpbmVkJykge1xuICAgICAgc3dpcGVyLm1vZHVsZXMgPSB7fTtcbiAgICB9XG5cbiAgICBPYmplY3Qua2V5cyhzd2lwZXIubW9kdWxlcykuZm9yRWFjaChmdW5jdGlvbiAobW9kdWxlTmFtZSkge1xuICAgICAgdmFyIG1vZHVsZSA9IHN3aXBlci5tb2R1bGVzW21vZHVsZU5hbWVdO1xuXG4gICAgICBpZiAobW9kdWxlLnBhcmFtcykge1xuICAgICAgICB2YXIgbW9kdWxlUGFyYW1OYW1lID0gT2JqZWN0LmtleXMobW9kdWxlLnBhcmFtcylbMF07XG4gICAgICAgIHZhciBtb2R1bGVQYXJhbXMgPSBtb2R1bGUucGFyYW1zW21vZHVsZVBhcmFtTmFtZV07XG4gICAgICAgIGlmICh0eXBlb2YgbW9kdWxlUGFyYW1zICE9PSAnb2JqZWN0JyB8fCBtb2R1bGVQYXJhbXMgPT09IG51bGwpIHJldHVybjtcblxuICAgICAgICBpZiAoWyduYXZpZ2F0aW9uJywgJ3BhZ2luYXRpb24nLCAnc2Nyb2xsYmFyJ10uaW5kZXhPZihtb2R1bGVQYXJhbU5hbWUpID49IDAgJiYgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gPT09IHRydWUpIHtcbiAgICAgICAgICBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSA9IHtcbiAgICAgICAgICAgIGF1dG86IHRydWVcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCEobW9kdWxlUGFyYW1OYW1lIGluIHBhcmFtcyAmJiAnZW5hYmxlZCcgaW4gbW9kdWxlUGFyYW1zKSkgcmV0dXJuO1xuXG4gICAgICAgIGlmIChwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdID0ge1xuICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZVxuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdID09PSAnb2JqZWN0JyAmJiAhKCdlbmFibGVkJyBpbiBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSkpIHtcbiAgICAgICAgICBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXS5lbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0pIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdID0ge1xuICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSk7IC8vIEV4dGVuZCBkZWZhdWx0cyB3aXRoIG1vZHVsZXMgcGFyYW1zXG5cbiAgICB2YXIgc3dpcGVyUGFyYW1zID0gZXh0ZW5kKHt9LCBkZWZhdWx0cyk7XG4gICAgc3dpcGVyLnVzZVBhcmFtcyhzd2lwZXJQYXJhbXMpOyAvLyBFeHRlbmQgZGVmYXVsdHMgd2l0aCBwYXNzZWQgcGFyYW1zXG5cbiAgICBzd2lwZXIucGFyYW1zID0gZXh0ZW5kKHt9LCBzd2lwZXJQYXJhbXMsIGV4dGVuZGVkRGVmYXVsdHMsIHBhcmFtcyk7XG4gICAgc3dpcGVyLm9yaWdpbmFsUGFyYW1zID0gZXh0ZW5kKHt9LCBzd2lwZXIucGFyYW1zKTtcbiAgICBzd2lwZXIucGFzc2VkUGFyYW1zID0gZXh0ZW5kKHt9LCBwYXJhbXMpOyAvLyBhZGQgZXZlbnQgbGlzdGVuZXJzXG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcyAmJiBzd2lwZXIucGFyYW1zLm9uKSB7XG4gICAgICBPYmplY3Qua2V5cyhzd2lwZXIucGFyYW1zLm9uKS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudE5hbWUpIHtcbiAgICAgICAgc3dpcGVyLm9uKGV2ZW50TmFtZSwgc3dpcGVyLnBhcmFtcy5vbltldmVudE5hbWVdKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChzd2lwZXIucGFyYW1zICYmIHN3aXBlci5wYXJhbXMub25BbnkpIHtcbiAgICAgIHN3aXBlci5vbkFueShzd2lwZXIucGFyYW1zLm9uQW55KTtcbiAgICB9IC8vIFNhdmUgRG9tIGxpYlxuXG5cbiAgICBzd2lwZXIuJCA9ICQ7IC8vIEV4dGVuZCBTd2lwZXJcblxuICAgIGV4dGVuZChzd2lwZXIsIHtcbiAgICAgIGVuYWJsZWQ6IHN3aXBlci5wYXJhbXMuZW5hYmxlZCxcbiAgICAgIGVsOiBlbCxcbiAgICAgIC8vIENsYXNzZXNcbiAgICAgIGNsYXNzTmFtZXM6IFtdLFxuICAgICAgLy8gU2xpZGVzXG4gICAgICBzbGlkZXM6ICQoKSxcbiAgICAgIHNsaWRlc0dyaWQ6IFtdLFxuICAgICAgc25hcEdyaWQ6IFtdLFxuICAgICAgc2xpZGVzU2l6ZXNHcmlkOiBbXSxcbiAgICAgIC8vIGlzRGlyZWN0aW9uXG4gICAgICBpc0hvcml6b250YWw6IGZ1bmN0aW9uIGlzSG9yaXpvbnRhbCgpIHtcbiAgICAgICAgcmV0dXJuIHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCc7XG4gICAgICB9LFxuICAgICAgaXNWZXJ0aWNhbDogZnVuY3Rpb24gaXNWZXJ0aWNhbCgpIHtcbiAgICAgICAgcmV0dXJuIHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uID09PSAndmVydGljYWwnO1xuICAgICAgfSxcbiAgICAgIC8vIEluZGV4ZXNcbiAgICAgIGFjdGl2ZUluZGV4OiAwLFxuICAgICAgcmVhbEluZGV4OiAwLFxuICAgICAgLy9cbiAgICAgIGlzQmVnaW5uaW5nOiB0cnVlLFxuICAgICAgaXNFbmQ6IGZhbHNlLFxuICAgICAgLy8gUHJvcHNcbiAgICAgIHRyYW5zbGF0ZTogMCxcbiAgICAgIHByZXZpb3VzVHJhbnNsYXRlOiAwLFxuICAgICAgcHJvZ3Jlc3M6IDAsXG4gICAgICB2ZWxvY2l0eTogMCxcbiAgICAgIGFuaW1hdGluZzogZmFsc2UsXG4gICAgICAvLyBMb2Nrc1xuICAgICAgYWxsb3dTbGlkZU5leHQ6IHN3aXBlci5wYXJhbXMuYWxsb3dTbGlkZU5leHQsXG4gICAgICBhbGxvd1NsaWRlUHJldjogc3dpcGVyLnBhcmFtcy5hbGxvd1NsaWRlUHJldixcbiAgICAgIC8vIFRvdWNoIEV2ZW50c1xuICAgICAgdG91Y2hFdmVudHM6IGZ1bmN0aW9uIHRvdWNoRXZlbnRzKCkge1xuICAgICAgICB2YXIgdG91Y2ggPSBbJ3RvdWNoc3RhcnQnLCAndG91Y2htb3ZlJywgJ3RvdWNoZW5kJywgJ3RvdWNoY2FuY2VsJ107XG4gICAgICAgIHZhciBkZXNrdG9wID0gWydtb3VzZWRvd24nLCAnbW91c2Vtb3ZlJywgJ21vdXNldXAnXTtcblxuICAgICAgICBpZiAoc3dpcGVyLnN1cHBvcnQucG9pbnRlckV2ZW50cykge1xuICAgICAgICAgIGRlc2t0b3AgPSBbJ3BvaW50ZXJkb3duJywgJ3BvaW50ZXJtb3ZlJywgJ3BvaW50ZXJ1cCddO1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpcGVyLnRvdWNoRXZlbnRzVG91Y2ggPSB7XG4gICAgICAgICAgc3RhcnQ6IHRvdWNoWzBdLFxuICAgICAgICAgIG1vdmU6IHRvdWNoWzFdLFxuICAgICAgICAgIGVuZDogdG91Y2hbMl0sXG4gICAgICAgICAgY2FuY2VsOiB0b3VjaFszXVxuICAgICAgICB9O1xuICAgICAgICBzd2lwZXIudG91Y2hFdmVudHNEZXNrdG9wID0ge1xuICAgICAgICAgIHN0YXJ0OiBkZXNrdG9wWzBdLFxuICAgICAgICAgIG1vdmU6IGRlc2t0b3BbMV0sXG4gICAgICAgICAgZW5kOiBkZXNrdG9wWzJdXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBzd2lwZXIuc3VwcG9ydC50b3VjaCB8fCAhc3dpcGVyLnBhcmFtcy5zaW11bGF0ZVRvdWNoID8gc3dpcGVyLnRvdWNoRXZlbnRzVG91Y2ggOiBzd2lwZXIudG91Y2hFdmVudHNEZXNrdG9wO1xuICAgICAgfSgpLFxuICAgICAgdG91Y2hFdmVudHNEYXRhOiB7XG4gICAgICAgIGlzVG91Y2hlZDogdW5kZWZpbmVkLFxuICAgICAgICBpc01vdmVkOiB1bmRlZmluZWQsXG4gICAgICAgIGFsbG93VG91Y2hDYWxsYmFja3M6IHVuZGVmaW5lZCxcbiAgICAgICAgdG91Y2hTdGFydFRpbWU6IHVuZGVmaW5lZCxcbiAgICAgICAgaXNTY3JvbGxpbmc6IHVuZGVmaW5lZCxcbiAgICAgICAgY3VycmVudFRyYW5zbGF0ZTogdW5kZWZpbmVkLFxuICAgICAgICBzdGFydFRyYW5zbGF0ZTogdW5kZWZpbmVkLFxuICAgICAgICBhbGxvd1RocmVzaG9sZE1vdmU6IHVuZGVmaW5lZCxcbiAgICAgICAgLy8gRm9ybSBlbGVtZW50cyB0byBtYXRjaFxuICAgICAgICBmb3JtRWxlbWVudHM6ICdpbnB1dCwgc2VsZWN0LCBvcHRpb24sIHRleHRhcmVhLCBidXR0b24sIHZpZGVvLCBsYWJlbCcsXG4gICAgICAgIC8vIExhc3QgY2xpY2sgdGltZVxuICAgICAgICBsYXN0Q2xpY2tUaW1lOiBub3coKSxcbiAgICAgICAgY2xpY2tUaW1lb3V0OiB1bmRlZmluZWQsXG4gICAgICAgIC8vIFZlbG9jaXRpZXNcbiAgICAgICAgdmVsb2NpdGllczogW10sXG4gICAgICAgIGFsbG93TW9tZW50dW1Cb3VuY2U6IHVuZGVmaW5lZCxcbiAgICAgICAgaXNUb3VjaEV2ZW50OiB1bmRlZmluZWQsXG4gICAgICAgIHN0YXJ0TW92aW5nOiB1bmRlZmluZWRcbiAgICAgIH0sXG4gICAgICAvLyBDbGlja3NcbiAgICAgIGFsbG93Q2xpY2s6IHRydWUsXG4gICAgICAvLyBUb3VjaGVzXG4gICAgICBhbGxvd1RvdWNoTW92ZTogc3dpcGVyLnBhcmFtcy5hbGxvd1RvdWNoTW92ZSxcbiAgICAgIHRvdWNoZXM6IHtcbiAgICAgICAgc3RhcnRYOiAwLFxuICAgICAgICBzdGFydFk6IDAsXG4gICAgICAgIGN1cnJlbnRYOiAwLFxuICAgICAgICBjdXJyZW50WTogMCxcbiAgICAgICAgZGlmZjogMFxuICAgICAgfSxcbiAgICAgIC8vIEltYWdlc1xuICAgICAgaW1hZ2VzVG9Mb2FkOiBbXSxcbiAgICAgIGltYWdlc0xvYWRlZDogMFxuICAgIH0pOyAvLyBJbnN0YWxsIE1vZHVsZXNcblxuICAgIHN3aXBlci51c2VNb2R1bGVzKCk7XG4gICAgc3dpcGVyLmVtaXQoJ19zd2lwZXInKTsgLy8gSW5pdFxuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuaW5pdCkge1xuICAgICAgc3dpcGVyLmluaXQoKTtcbiAgICB9IC8vIFJldHVybiBhcHAgaW5zdGFuY2VcblxuXG4gICAgcmV0dXJuIHN3aXBlcjtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTd2lwZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5lbmFibGUgPSBmdW5jdGlvbiBlbmFibGUoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKHN3aXBlci5lbmFibGVkKSByZXR1cm47XG4gICAgc3dpcGVyLmVuYWJsZWQgPSB0cnVlO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuZ3JhYkN1cnNvcikge1xuICAgICAgc3dpcGVyLnNldEdyYWJDdXJzb3IoKTtcbiAgICB9XG5cbiAgICBzd2lwZXIuZW1pdCgnZW5hYmxlJyk7XG4gIH07XG5cbiAgX3Byb3RvLmRpc2FibGUgPSBmdW5jdGlvbiBkaXNhYmxlKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLmVuYWJsZWQpIHJldHVybjtcbiAgICBzd2lwZXIuZW5hYmxlZCA9IGZhbHNlO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuZ3JhYkN1cnNvcikge1xuICAgICAgc3dpcGVyLnVuc2V0R3JhYkN1cnNvcigpO1xuICAgIH1cblxuICAgIHN3aXBlci5lbWl0KCdkaXNhYmxlJyk7XG4gIH07XG5cbiAgX3Byb3RvLnNldFByb2dyZXNzID0gZnVuY3Rpb24gc2V0UHJvZ3Jlc3MocHJvZ3Jlc3MsIHNwZWVkKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgcHJvZ3Jlc3MgPSBNYXRoLm1pbihNYXRoLm1heChwcm9ncmVzcywgMCksIDEpO1xuICAgIHZhciBtaW4gPSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gICAgdmFyIG1heCA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKTtcbiAgICB2YXIgY3VycmVudCA9IChtYXggLSBtaW4pICogcHJvZ3Jlc3MgKyBtaW47XG4gICAgc3dpcGVyLnRyYW5zbGF0ZVRvKGN1cnJlbnQsIHR5cGVvZiBzcGVlZCA9PT0gJ3VuZGVmaW5lZCcgPyAwIDogc3BlZWQpO1xuICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gIH07XG5cbiAgX3Byb3RvLmVtaXRDb250YWluZXJDbGFzc2VzID0gZnVuY3Rpb24gZW1pdENvbnRhaW5lckNsYXNzZXMoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLl9lbWl0Q2xhc3NlcyB8fCAhc3dpcGVyLmVsKSByZXR1cm47XG4gICAgdmFyIGNsYXNzZXMgPSBzd2lwZXIuZWwuY2xhc3NOYW1lLnNwbGl0KCcgJykuZmlsdGVyKGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICAgIHJldHVybiBjbGFzc05hbWUuaW5kZXhPZignc3dpcGVyLWNvbnRhaW5lcicpID09PSAwIHx8IGNsYXNzTmFtZS5pbmRleE9mKHN3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcykgPT09IDA7XG4gICAgfSk7XG4gICAgc3dpcGVyLmVtaXQoJ19jb250YWluZXJDbGFzc2VzJywgY2xhc3Nlcy5qb2luKCcgJykpO1xuICB9O1xuXG4gIF9wcm90by5nZXRTbGlkZUNsYXNzZXMgPSBmdW5jdGlvbiBnZXRTbGlkZUNsYXNzZXMoc2xpZGVFbCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHJldHVybiBzbGlkZUVsLmNsYXNzTmFtZS5zcGxpdCgnICcpLmZpbHRlcihmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgICByZXR1cm4gY2xhc3NOYW1lLmluZGV4T2YoJ3N3aXBlci1zbGlkZScpID09PSAwIHx8IGNsYXNzTmFtZS5pbmRleE9mKHN3aXBlci5wYXJhbXMuc2xpZGVDbGFzcykgPT09IDA7XG4gICAgfSkuam9pbignICcpO1xuICB9O1xuXG4gIF9wcm90by5lbWl0U2xpZGVzQ2xhc3NlcyA9IGZ1bmN0aW9uIGVtaXRTbGlkZXNDbGFzc2VzKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5fZW1pdENsYXNzZXMgfHwgIXN3aXBlci5lbCkgcmV0dXJuO1xuICAgIHZhciB1cGRhdGVzID0gW107XG4gICAgc3dpcGVyLnNsaWRlcy5lYWNoKGZ1bmN0aW9uIChzbGlkZUVsKSB7XG4gICAgICB2YXIgY2xhc3NOYW1lcyA9IHN3aXBlci5nZXRTbGlkZUNsYXNzZXMoc2xpZGVFbCk7XG4gICAgICB1cGRhdGVzLnB1c2goe1xuICAgICAgICBzbGlkZUVsOiBzbGlkZUVsLFxuICAgICAgICBjbGFzc05hbWVzOiBjbGFzc05hbWVzXG4gICAgICB9KTtcbiAgICAgIHN3aXBlci5lbWl0KCdfc2xpZGVDbGFzcycsIHNsaWRlRWwsIGNsYXNzTmFtZXMpO1xuICAgIH0pO1xuICAgIHN3aXBlci5lbWl0KCdfc2xpZGVDbGFzc2VzJywgdXBkYXRlcyk7XG4gIH07XG5cbiAgX3Byb3RvLnNsaWRlc1BlclZpZXdEeW5hbWljID0gZnVuY3Rpb24gc2xpZGVzUGVyVmlld0R5bmFtaWMoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICAgIHNsaWRlcyA9IHN3aXBlci5zbGlkZXMsXG4gICAgICAgIHNsaWRlc0dyaWQgPSBzd2lwZXIuc2xpZGVzR3JpZCxcbiAgICAgICAgc3dpcGVyU2l6ZSA9IHN3aXBlci5zaXplLFxuICAgICAgICBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcbiAgICB2YXIgc3B2ID0gMTtcblxuICAgIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIHZhciBzbGlkZVNpemUgPSBzbGlkZXNbYWN0aXZlSW5kZXhdLnN3aXBlclNsaWRlU2l6ZTtcbiAgICAgIHZhciBicmVha0xvb3A7XG5cbiAgICAgIGZvciAodmFyIGkgPSBhY3RpdmVJbmRleCArIDE7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHNsaWRlc1tpXSAmJiAhYnJlYWtMb29wKSB7XG4gICAgICAgICAgc2xpZGVTaXplICs9IHNsaWRlc1tpXS5zd2lwZXJTbGlkZVNpemU7XG4gICAgICAgICAgc3B2ICs9IDE7XG4gICAgICAgICAgaWYgKHNsaWRlU2l6ZSA+IHN3aXBlclNpemUpIGJyZWFrTG9vcCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgX2kgPSBhY3RpdmVJbmRleCAtIDE7IF9pID49IDA7IF9pIC09IDEpIHtcbiAgICAgICAgaWYgKHNsaWRlc1tfaV0gJiYgIWJyZWFrTG9vcCkge1xuICAgICAgICAgIHNsaWRlU2l6ZSArPSBzbGlkZXNbX2ldLnN3aXBlclNsaWRlU2l6ZTtcbiAgICAgICAgICBzcHYgKz0gMTtcbiAgICAgICAgICBpZiAoc2xpZGVTaXplID4gc3dpcGVyU2l6ZSkgYnJlYWtMb29wID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKHZhciBfaTIgPSBhY3RpdmVJbmRleCArIDE7IF9pMiA8IHNsaWRlcy5sZW5ndGg7IF9pMiArPSAxKSB7XG4gICAgICAgIGlmIChzbGlkZXNHcmlkW19pMl0gLSBzbGlkZXNHcmlkW2FjdGl2ZUluZGV4XSA8IHN3aXBlclNpemUpIHtcbiAgICAgICAgICBzcHYgKz0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzcHY7XG4gIH07XG5cbiAgX3Byb3RvLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgdmFyIHNuYXBHcmlkID0gc3dpcGVyLnNuYXBHcmlkLFxuICAgICAgICBwYXJhbXMgPSBzd2lwZXIucGFyYW1zOyAvLyBCcmVha3BvaW50c1xuXG4gICAgaWYgKHBhcmFtcy5icmVha3BvaW50cykge1xuICAgICAgc3dpcGVyLnNldEJyZWFrcG9pbnQoKTtcbiAgICB9XG5cbiAgICBzd2lwZXIudXBkYXRlU2l6ZSgpO1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcbiAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MoKTtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuXG4gICAgZnVuY3Rpb24gc2V0VHJhbnNsYXRlKCkge1xuICAgICAgdmFyIHRyYW5zbGF0ZVZhbHVlID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSA/IHN3aXBlci50cmFuc2xhdGUgKiAtMSA6IHN3aXBlci50cmFuc2xhdGU7XG4gICAgICB2YXIgbmV3VHJhbnNsYXRlID0gTWF0aC5taW4oTWF0aC5tYXgodHJhbnNsYXRlVmFsdWUsIHN3aXBlci5tYXhUcmFuc2xhdGUoKSksIHN3aXBlci5taW5UcmFuc2xhdGUoKSk7XG4gICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKG5ld1RyYW5zbGF0ZSk7XG4gICAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgfVxuXG4gICAgdmFyIHRyYW5zbGF0ZWQ7XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5mcmVlTW9kZSkge1xuICAgICAgc2V0VHJhbnNsYXRlKCk7XG5cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmF1dG9IZWlnaHQpIHtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZUF1dG9IZWlnaHQoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKChzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyB8fCBzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgPiAxKSAmJiBzd2lwZXIuaXNFbmQgJiYgIXN3aXBlci5wYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgICAgdHJhbnNsYXRlZCA9IHN3aXBlci5zbGlkZVRvKHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gMSwgMCwgZmFsc2UsIHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHJhbnNsYXRlZCA9IHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCwgMCwgZmFsc2UsIHRydWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRyYW5zbGF0ZWQpIHtcbiAgICAgICAgc2V0VHJhbnNsYXRlKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHNuYXBHcmlkICE9PSBzd2lwZXIuc25hcEdyaWQpIHtcbiAgICAgIHN3aXBlci5jaGVja092ZXJmbG93KCk7XG4gICAgfVxuXG4gICAgc3dpcGVyLmVtaXQoJ3VwZGF0ZScpO1xuICB9O1xuXG4gIF9wcm90by5jaGFuZ2VEaXJlY3Rpb24gPSBmdW5jdGlvbiBjaGFuZ2VEaXJlY3Rpb24obmV3RGlyZWN0aW9uLCBuZWVkVXBkYXRlKSB7XG4gICAgaWYgKG5lZWRVcGRhdGUgPT09IHZvaWQgMCkge1xuICAgICAgbmVlZFVwZGF0ZSA9IHRydWU7XG4gICAgfVxuXG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIGN1cnJlbnREaXJlY3Rpb24gPSBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbjtcblxuICAgIGlmICghbmV3RGlyZWN0aW9uKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIG5ld0RpcmVjdGlvbiA9IGN1cnJlbnREaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJyA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCc7XG4gICAgfVxuXG4gICAgaWYgKG5ld0RpcmVjdGlvbiA9PT0gY3VycmVudERpcmVjdGlvbiB8fCBuZXdEaXJlY3Rpb24gIT09ICdob3Jpem9udGFsJyAmJiBuZXdEaXJlY3Rpb24gIT09ICd2ZXJ0aWNhbCcpIHtcbiAgICAgIHJldHVybiBzd2lwZXI7XG4gICAgfVxuXG4gICAgc3dpcGVyLiRlbC5yZW1vdmVDbGFzcyhcIlwiICsgc3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzICsgY3VycmVudERpcmVjdGlvbikuYWRkQ2xhc3MoXCJcIiArIHN3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcyArIG5ld0RpcmVjdGlvbik7XG4gICAgc3dpcGVyLmVtaXRDb250YWluZXJDbGFzc2VzKCk7XG4gICAgc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb24gPSBuZXdEaXJlY3Rpb247XG4gICAgc3dpcGVyLnNsaWRlcy5lYWNoKGZ1bmN0aW9uIChzbGlkZUVsKSB7XG4gICAgICBpZiAobmV3RGlyZWN0aW9uID09PSAndmVydGljYWwnKSB7XG4gICAgICAgIHNsaWRlRWwuc3R5bGUud2lkdGggPSAnJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNsaWRlRWwuc3R5bGUuaGVpZ2h0ID0gJyc7XG4gICAgICB9XG4gICAgfSk7XG4gICAgc3dpcGVyLmVtaXQoJ2NoYW5nZURpcmVjdGlvbicpO1xuICAgIGlmIChuZWVkVXBkYXRlKSBzd2lwZXIudXBkYXRlKCk7XG4gICAgcmV0dXJuIHN3aXBlcjtcbiAgfTtcblxuICBfcHJvdG8ubW91bnQgPSBmdW5jdGlvbiBtb3VudChlbCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIGlmIChzd2lwZXIubW91bnRlZCkgcmV0dXJuIHRydWU7IC8vIEZpbmQgZWxcblxuICAgIHZhciAkZWwgPSAkKGVsIHx8IHN3aXBlci5wYXJhbXMuZWwpO1xuICAgIGVsID0gJGVsWzBdO1xuXG4gICAgaWYgKCFlbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGVsLnN3aXBlciA9IHN3aXBlcjtcblxuICAgIHZhciBnZXRXcmFwcGVyID0gZnVuY3Rpb24gZ2V0V3JhcHBlcigpIHtcbiAgICAgIGlmIChlbCAmJiBlbC5zaGFkb3dSb290ICYmIGVsLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3Rvcikge1xuICAgICAgICB2YXIgcmVzID0gJChlbC5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoXCIuXCIgKyBzd2lwZXIucGFyYW1zLndyYXBwZXJDbGFzcykpOyAvLyBDaGlsZHJlbiBuZWVkcyB0byByZXR1cm4gc2xvdCBpdGVtc1xuXG4gICAgICAgIHJlcy5jaGlsZHJlbiA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgICAgcmV0dXJuICRlbC5jaGlsZHJlbihvcHRpb25zKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gJGVsLmNoaWxkcmVuKFwiLlwiICsgc3dpcGVyLnBhcmFtcy53cmFwcGVyQ2xhc3MpO1xuICAgIH07IC8vIEZpbmQgV3JhcHBlclxuXG5cbiAgICB2YXIgJHdyYXBwZXJFbCA9IGdldFdyYXBwZXIoKTtcblxuICAgIGlmICgkd3JhcHBlckVsLmxlbmd0aCA9PT0gMCAmJiBzd2lwZXIucGFyYW1zLmNyZWF0ZUVsZW1lbnRzKSB7XG4gICAgICB2YXIgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICAgICAgdmFyIHdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICR3cmFwcGVyRWwgPSAkKHdyYXBwZXIpO1xuICAgICAgd3JhcHBlci5jbGFzc05hbWUgPSBzd2lwZXIucGFyYW1zLndyYXBwZXJDbGFzcztcbiAgICAgICRlbC5hcHBlbmQod3JhcHBlcik7XG4gICAgICAkZWwuY2hpbGRyZW4oXCIuXCIgKyBzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3MpLmVhY2goZnVuY3Rpb24gKHNsaWRlRWwpIHtcbiAgICAgICAgJHdyYXBwZXJFbC5hcHBlbmQoc2xpZGVFbCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBleHRlbmQoc3dpcGVyLCB7XG4gICAgICAkZWw6ICRlbCxcbiAgICAgIGVsOiBlbCxcbiAgICAgICR3cmFwcGVyRWw6ICR3cmFwcGVyRWwsXG4gICAgICB3cmFwcGVyRWw6ICR3cmFwcGVyRWxbMF0sXG4gICAgICBtb3VudGVkOiB0cnVlLFxuICAgICAgLy8gUlRMXG4gICAgICBydGw6IGVsLmRpci50b0xvd2VyQ2FzZSgpID09PSAncnRsJyB8fCAkZWwuY3NzKCdkaXJlY3Rpb24nKSA9PT0gJ3J0bCcsXG4gICAgICBydGxUcmFuc2xhdGU6IHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcgJiYgKGVsLmRpci50b0xvd2VyQ2FzZSgpID09PSAncnRsJyB8fCAkZWwuY3NzKCdkaXJlY3Rpb24nKSA9PT0gJ3J0bCcpLFxuICAgICAgd3JvbmdSVEw6ICR3cmFwcGVyRWwuY3NzKCdkaXNwbGF5JykgPT09ICctd2Via2l0LWJveCdcbiAgICB9KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICBfcHJvdG8uaW5pdCA9IGZ1bmN0aW9uIGluaXQoZWwpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoc3dpcGVyLmluaXRpYWxpemVkKSByZXR1cm4gc3dpcGVyO1xuICAgIHZhciBtb3VudGVkID0gc3dpcGVyLm1vdW50KGVsKTtcbiAgICBpZiAobW91bnRlZCA9PT0gZmFsc2UpIHJldHVybiBzd2lwZXI7XG4gICAgc3dpcGVyLmVtaXQoJ2JlZm9yZUluaXQnKTsgLy8gU2V0IGJyZWFrcG9pbnRcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLmJyZWFrcG9pbnRzKSB7XG4gICAgICBzd2lwZXIuc2V0QnJlYWtwb2ludCgpO1xuICAgIH0gLy8gQWRkIENsYXNzZXNcblxuXG4gICAgc3dpcGVyLmFkZENsYXNzZXMoKTsgLy8gQ3JlYXRlIGxvb3BcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgIHN3aXBlci5sb29wQ3JlYXRlKCk7XG4gICAgfSAvLyBVcGRhdGUgc2l6ZVxuXG5cbiAgICBzd2lwZXIudXBkYXRlU2l6ZSgpOyAvLyBVcGRhdGUgc2xpZGVzXG5cbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93KSB7XG4gICAgICBzd2lwZXIuY2hlY2tPdmVyZmxvdygpO1xuICAgIH0gLy8gU2V0IEdyYWIgQ3Vyc29yXG5cblxuICAgIGlmIChzd2lwZXIucGFyYW1zLmdyYWJDdXJzb3IgJiYgc3dpcGVyLmVuYWJsZWQpIHtcbiAgICAgIHN3aXBlci5zZXRHcmFiQ3Vyc29yKCk7XG4gICAgfVxuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMucHJlbG9hZEltYWdlcykge1xuICAgICAgc3dpcGVyLnByZWxvYWRJbWFnZXMoKTtcbiAgICB9IC8vIFNsaWRlIFRvIEluaXRpYWwgU2xpZGVcblxuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnBhcmFtcy5pbml0aWFsU2xpZGUgKyBzd2lwZXIubG9vcGVkU2xpZGVzLCAwLCBzd2lwZXIucGFyYW1zLnJ1bkNhbGxiYWNrc09uSW5pdCwgZmFsc2UsIHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIucGFyYW1zLmluaXRpYWxTbGlkZSwgMCwgc3dpcGVyLnBhcmFtcy5ydW5DYWxsYmFja3NPbkluaXQsIGZhbHNlLCB0cnVlKTtcbiAgICB9IC8vIEF0dGFjaCBldmVudHNcblxuXG4gICAgc3dpcGVyLmF0dGFjaEV2ZW50cygpOyAvLyBJbml0IEZsYWdcblxuICAgIHN3aXBlci5pbml0aWFsaXplZCA9IHRydWU7IC8vIEVtaXRcblxuICAgIHN3aXBlci5lbWl0KCdpbml0Jyk7XG4gICAgc3dpcGVyLmVtaXQoJ2FmdGVySW5pdCcpO1xuICAgIHJldHVybiBzd2lwZXI7XG4gIH07XG5cbiAgX3Byb3RvLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95KGRlbGV0ZUluc3RhbmNlLCBjbGVhblN0eWxlcykge1xuICAgIGlmIChkZWxldGVJbnN0YW5jZSA9PT0gdm9pZCAwKSB7XG4gICAgICBkZWxldGVJbnN0YW5jZSA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGNsZWFuU3R5bGVzID09PSB2b2lkIDApIHtcbiAgICAgIGNsZWFuU3R5bGVzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgICAgJGVsID0gc3dpcGVyLiRlbCxcbiAgICAgICAgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsLFxuICAgICAgICBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzO1xuXG4gICAgaWYgKHR5cGVvZiBzd2lwZXIucGFyYW1zID09PSAndW5kZWZpbmVkJyB8fCBzd2lwZXIuZGVzdHJveWVkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBzd2lwZXIuZW1pdCgnYmVmb3JlRGVzdHJveScpOyAvLyBJbml0IEZsYWdcblxuICAgIHN3aXBlci5pbml0aWFsaXplZCA9IGZhbHNlOyAvLyBEZXRhY2ggZXZlbnRzXG5cbiAgICBzd2lwZXIuZGV0YWNoRXZlbnRzKCk7IC8vIERlc3Ryb3kgbG9vcFxuXG4gICAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgICBzd2lwZXIubG9vcERlc3Ryb3koKTtcbiAgICB9IC8vIENsZWFudXAgc3R5bGVzXG5cblxuICAgIGlmIChjbGVhblN0eWxlcykge1xuICAgICAgc3dpcGVyLnJlbW92ZUNsYXNzZXMoKTtcbiAgICAgICRlbC5yZW1vdmVBdHRyKCdzdHlsZScpO1xuICAgICAgJHdyYXBwZXJFbC5yZW1vdmVBdHRyKCdzdHlsZScpO1xuXG4gICAgICBpZiAoc2xpZGVzICYmIHNsaWRlcy5sZW5ndGgpIHtcbiAgICAgICAgc2xpZGVzLnJlbW92ZUNsYXNzKFtwYXJhbXMuc2xpZGVWaXNpYmxlQ2xhc3MsIHBhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzLCBwYXJhbXMuc2xpZGVOZXh0Q2xhc3MsIHBhcmFtcy5zbGlkZVByZXZDbGFzc10uam9pbignICcpKS5yZW1vdmVBdHRyKCdzdHlsZScpLnJlbW92ZUF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc3dpcGVyLmVtaXQoJ2Rlc3Ryb3knKTsgLy8gRGV0YWNoIGVtaXR0ZXIgZXZlbnRzXG5cbiAgICBPYmplY3Qua2V5cyhzd2lwZXIuZXZlbnRzTGlzdGVuZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudE5hbWUpIHtcbiAgICAgIHN3aXBlci5vZmYoZXZlbnROYW1lKTtcbiAgICB9KTtcblxuICAgIGlmIChkZWxldGVJbnN0YW5jZSAhPT0gZmFsc2UpIHtcbiAgICAgIHN3aXBlci4kZWxbMF0uc3dpcGVyID0gbnVsbDtcbiAgICAgIGRlbGV0ZVByb3BzKHN3aXBlcik7XG4gICAgfVxuXG4gICAgc3dpcGVyLmRlc3Ryb3llZCA9IHRydWU7XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgU3dpcGVyLmV4dGVuZERlZmF1bHRzID0gZnVuY3Rpb24gZXh0ZW5kRGVmYXVsdHMobmV3RGVmYXVsdHMpIHtcbiAgICBleHRlbmQoZXh0ZW5kZWREZWZhdWx0cywgbmV3RGVmYXVsdHMpO1xuICB9O1xuXG4gIFN3aXBlci5pbnN0YWxsTW9kdWxlID0gZnVuY3Rpb24gaW5zdGFsbE1vZHVsZShtb2R1bGUpIHtcbiAgICBpZiAoIVN3aXBlci5wcm90b3R5cGUubW9kdWxlcykgU3dpcGVyLnByb3RvdHlwZS5tb2R1bGVzID0ge307XG4gICAgdmFyIG5hbWUgPSBtb2R1bGUubmFtZSB8fCBPYmplY3Qua2V5cyhTd2lwZXIucHJvdG90eXBlLm1vZHVsZXMpLmxlbmd0aCArIFwiX1wiICsgbm93KCk7XG4gICAgU3dpcGVyLnByb3RvdHlwZS5tb2R1bGVzW25hbWVdID0gbW9kdWxlO1xuICB9O1xuXG4gIFN3aXBlci51c2UgPSBmdW5jdGlvbiB1c2UobW9kdWxlKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkobW9kdWxlKSkge1xuICAgICAgbW9kdWxlLmZvckVhY2goZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgcmV0dXJuIFN3aXBlci5pbnN0YWxsTW9kdWxlKG0pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gU3dpcGVyO1xuICAgIH1cblxuICAgIFN3aXBlci5pbnN0YWxsTW9kdWxlKG1vZHVsZSk7XG4gICAgcmV0dXJuIFN3aXBlcjtcbiAgfTtcblxuICBfY3JlYXRlQ2xhc3MoU3dpcGVyLCBudWxsLCBbe1xuICAgIGtleTogXCJleHRlbmRlZERlZmF1bHRzXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gZXh0ZW5kZWREZWZhdWx0cztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZGVmYXVsdHNcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBkZWZhdWx0cztcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU3dpcGVyO1xufSgpO1xuXG5PYmplY3Qua2V5cyhwcm90b3R5cGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm90b3R5cGVHcm91cCkge1xuICBPYmplY3Qua2V5cyhwcm90b3R5cGVzW3Byb3RvdHlwZUdyb3VwXSkuZm9yRWFjaChmdW5jdGlvbiAocHJvdG9NZXRob2QpIHtcbiAgICBTd2lwZXIucHJvdG90eXBlW3Byb3RvTWV0aG9kXSA9IHByb3RvdHlwZXNbcHJvdG90eXBlR3JvdXBdW3Byb3RvTWV0aG9kXTtcbiAgfSk7XG59KTtcblN3aXBlci51c2UoW1Jlc2l6ZSwgT2JzZXJ2ZXJdKTtcbmV4cG9ydCBkZWZhdWx0IFN3aXBlcjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvY29yZS1jbGFzcy5qcyIsIi8qKlxuICogRG9tNyAzLjAuMFxuICogTWluaW1hbGlzdGljIEphdmFTY3JpcHQgbGlicmFyeSBmb3IgRE9NIG1hbmlwdWxhdGlvbiwgd2l0aCBhIGpRdWVyeS1jb21wYXRpYmxlIEFQSVxuICogaHR0cHM6Ly9mcmFtZXdvcms3LmlvL2RvY3MvZG9tNy5odG1sXG4gKlxuICogQ29weXJpZ2h0IDIwMjAsIFZsYWRpbWlyIEtoYXJsYW1waWRpXG4gKlxuICogTGljZW5zZWQgdW5kZXIgTUlUXG4gKlxuICogUmVsZWFzZWQgb246IE5vdmVtYmVyIDksIDIwMjBcbiAqL1xuaW1wb3J0IHsgZ2V0V2luZG93LCBnZXREb2N1bWVudCB9IGZyb20gJ3Nzci13aW5kb3cnO1xuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gIF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gICAgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTtcbiAgfTtcbiAgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTtcbn1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9O1xuXG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG59XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7XG4gIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTtcbiAgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTtcbiAgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTtcblxuICB0cnkge1xuICAgIERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2NvbnN0cnVjdChQYXJlbnQsIGFyZ3MsIENsYXNzKSB7XG4gIGlmIChfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkpIHtcbiAgICBfY29uc3RydWN0ID0gUmVmbGVjdC5jb25zdHJ1Y3Q7XG4gIH0gZWxzZSB7XG4gICAgX2NvbnN0cnVjdCA9IGZ1bmN0aW9uIF9jb25zdHJ1Y3QoUGFyZW50LCBhcmdzLCBDbGFzcykge1xuICAgICAgdmFyIGEgPSBbbnVsbF07XG4gICAgICBhLnB1c2guYXBwbHkoYSwgYXJncyk7XG4gICAgICB2YXIgQ29uc3RydWN0b3IgPSBGdW5jdGlvbi5iaW5kLmFwcGx5KFBhcmVudCwgYSk7XG4gICAgICB2YXIgaW5zdGFuY2UgPSBuZXcgQ29uc3RydWN0b3IoKTtcbiAgICAgIGlmIChDbGFzcykgX3NldFByb3RvdHlwZU9mKGluc3RhbmNlLCBDbGFzcy5wcm90b3R5cGUpO1xuICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gX2NvbnN0cnVjdC5hcHBseShudWxsLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVGdW5jdGlvbihmbikge1xuICByZXR1cm4gRnVuY3Rpb24udG9TdHJpbmcuY2FsbChmbikuaW5kZXhPZihcIltuYXRpdmUgY29kZV1cIikgIT09IC0xO1xufVxuXG5mdW5jdGlvbiBfd3JhcE5hdGl2ZVN1cGVyKENsYXNzKSB7XG4gIHZhciBfY2FjaGUgPSB0eXBlb2YgTWFwID09PSBcImZ1bmN0aW9uXCIgPyBuZXcgTWFwKCkgOiB1bmRlZmluZWQ7XG5cbiAgX3dyYXBOYXRpdmVTdXBlciA9IGZ1bmN0aW9uIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpIHtcbiAgICBpZiAoQ2xhc3MgPT09IG51bGwgfHwgIV9pc05hdGl2ZUZ1bmN0aW9uKENsYXNzKSkgcmV0dXJuIENsYXNzO1xuXG4gICAgaWYgKHR5cGVvZiBDbGFzcyAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBfY2FjaGUgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGlmIChfY2FjaGUuaGFzKENsYXNzKSkgcmV0dXJuIF9jYWNoZS5nZXQoQ2xhc3MpO1xuXG4gICAgICBfY2FjaGUuc2V0KENsYXNzLCBXcmFwcGVyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBXcmFwcGVyKCkge1xuICAgICAgcmV0dXJuIF9jb25zdHJ1Y3QoQ2xhc3MsIGFyZ3VtZW50cywgX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yKTtcbiAgICB9XG5cbiAgICBXcmFwcGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogV3JhcHBlcixcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gX3NldFByb3RvdHlwZU9mKFdyYXBwZXIsIENsYXNzKTtcbiAgfTtcblxuICByZXR1cm4gX3dyYXBOYXRpdmVTdXBlcihDbGFzcyk7XG59XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIHNlbGY7XG59XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG5mdW5jdGlvbiBtYWtlUmVhY3RpdmUob2JqKSB7XG4gIHZhciBwcm90byA9IG9iai5fX3Byb3RvX187XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosICdfX3Byb3RvX18nLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gcHJvdG87XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgcHJvdG8uX19wcm90b19fID0gdmFsdWU7XG4gICAgfVxuICB9KTtcbn1cblxudmFyIERvbTcgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9BcnJheSkge1xuICBfaW5oZXJpdHNMb29zZShEb203LCBfQXJyYXkpO1xuXG4gIGZ1bmN0aW9uIERvbTcoaXRlbXMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9BcnJheS5jYWxsLmFwcGx5KF9BcnJheSwgW3RoaXNdLmNvbmNhdChpdGVtcykpIHx8IHRoaXM7XG4gICAgbWFrZVJlYWN0aXZlKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICByZXR1cm4gRG9tNztcbn0oIC8qI19fUFVSRV9fKi9fd3JhcE5hdGl2ZVN1cGVyKEFycmF5KSk7XG5cbmZ1bmN0aW9uIGFycmF5RmxhdChhcnIpIHtcbiAgaWYgKGFyciA9PT0gdm9pZCAwKSB7XG4gICAgYXJyID0gW107XG4gIH1cblxuICB2YXIgcmVzID0gW107XG4gIGFyci5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGVsKSkge1xuICAgICAgcmVzLnB1c2guYXBwbHkocmVzLCBhcnJheUZsYXQoZWwpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzLnB1c2goZWwpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXM7XG59XG5mdW5jdGlvbiBhcnJheUZpbHRlcihhcnIsIGNhbGxiYWNrKSB7XG4gIHJldHVybiBBcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwoYXJyLCBjYWxsYmFjayk7XG59XG5mdW5jdGlvbiBhcnJheVVuaXF1ZShhcnIpIHtcbiAgdmFyIHVuaXF1ZUFycmF5ID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAodW5pcXVlQXJyYXkuaW5kZXhPZihhcnJbaV0pID09PSAtMSkgdW5pcXVlQXJyYXkucHVzaChhcnJbaV0pO1xuICB9XG5cbiAgcmV0dXJuIHVuaXF1ZUFycmF5O1xufVxuZnVuY3Rpb24gdG9DYW1lbENhc2Uoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC8tKC4pL2csIGZ1bmN0aW9uIChtYXRjaCwgZ3JvdXApIHtcbiAgICByZXR1cm4gZ3JvdXAudG9VcHBlckNhc2UoKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHFzYShzZWxlY3RvciwgY29udGV4dCkge1xuICBpZiAodHlwZW9mIHNlbGVjdG9yICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBbc2VsZWN0b3JdO1xuICB9XG5cbiAgdmFyIGEgPSBbXTtcbiAgdmFyIHJlcyA9IGNvbnRleHQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBhLnB1c2gocmVzW2ldKTtcbiAgfVxuXG4gIHJldHVybiBhO1xufVxuXG5mdW5jdGlvbiAkKHNlbGVjdG9yLCBjb250ZXh0KSB7XG4gIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgdmFyIGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgdmFyIGFyciA9IFtdO1xuXG4gIGlmICghY29udGV4dCAmJiBzZWxlY3RvciBpbnN0YW5jZW9mIERvbTcpIHtcbiAgICByZXR1cm4gc2VsZWN0b3I7XG4gIH1cblxuICBpZiAoIXNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIG5ldyBEb203KGFycik7XG4gIH1cblxuICBpZiAodHlwZW9mIHNlbGVjdG9yID09PSAnc3RyaW5nJykge1xuICAgIHZhciBodG1sID0gc2VsZWN0b3IudHJpbSgpO1xuXG4gICAgaWYgKGh0bWwuaW5kZXhPZignPCcpID49IDAgJiYgaHRtbC5pbmRleE9mKCc+JykgPj0gMCkge1xuICAgICAgdmFyIHRvQ3JlYXRlID0gJ2Rpdic7XG4gICAgICBpZiAoaHRtbC5pbmRleE9mKCc8bGknKSA9PT0gMCkgdG9DcmVhdGUgPSAndWwnO1xuICAgICAgaWYgKGh0bWwuaW5kZXhPZignPHRyJykgPT09IDApIHRvQ3JlYXRlID0gJ3Rib2R5JztcbiAgICAgIGlmIChodG1sLmluZGV4T2YoJzx0ZCcpID09PSAwIHx8IGh0bWwuaW5kZXhPZignPHRoJykgPT09IDApIHRvQ3JlYXRlID0gJ3RyJztcbiAgICAgIGlmIChodG1sLmluZGV4T2YoJzx0Ym9keScpID09PSAwKSB0b0NyZWF0ZSA9ICd0YWJsZSc7XG4gICAgICBpZiAoaHRtbC5pbmRleE9mKCc8b3B0aW9uJykgPT09IDApIHRvQ3JlYXRlID0gJ3NlbGVjdCc7XG4gICAgICB2YXIgdGVtcFBhcmVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodG9DcmVhdGUpO1xuICAgICAgdGVtcFBhcmVudC5pbm5lckhUTUwgPSBodG1sO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRlbXBQYXJlbnQuY2hpbGROb2Rlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBhcnIucHVzaCh0ZW1wUGFyZW50LmNoaWxkTm9kZXNbaV0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBhcnIgPSBxc2Eoc2VsZWN0b3IudHJpbSgpLCBjb250ZXh0IHx8IGRvY3VtZW50KTtcbiAgICB9IC8vIGFyciA9IHFzYShzZWxlY3RvciwgZG9jdW1lbnQpO1xuXG4gIH0gZWxzZSBpZiAoc2VsZWN0b3Iubm9kZVR5cGUgfHwgc2VsZWN0b3IgPT09IHdpbmRvdyB8fCBzZWxlY3RvciA9PT0gZG9jdW1lbnQpIHtcbiAgICBhcnIucHVzaChzZWxlY3Rvcik7XG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShzZWxlY3RvcikpIHtcbiAgICBpZiAoc2VsZWN0b3IgaW5zdGFuY2VvZiBEb203KSByZXR1cm4gc2VsZWN0b3I7XG4gICAgYXJyID0gc2VsZWN0b3I7XG4gIH1cblxuICByZXR1cm4gbmV3IERvbTcoYXJyYXlVbmlxdWUoYXJyKSk7XG59XG5cbiQuZm4gPSBEb203LnByb3RvdHlwZTtcblxuZnVuY3Rpb24gYWRkQ2xhc3MoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBjbGFzc2VzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGNsYXNzZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICB2YXIgY2xhc3NOYW1lcyA9IGFycmF5RmxhdChjbGFzc2VzLm1hcChmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiBjLnNwbGl0KCcgJyk7XG4gIH0pKTtcbiAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgIHZhciBfZWwkY2xhc3NMaXN0O1xuXG4gICAgKF9lbCRjbGFzc0xpc3QgPSBlbC5jbGFzc0xpc3QpLmFkZC5hcHBseShfZWwkY2xhc3NMaXN0LCBjbGFzc05hbWVzKTtcbiAgfSk7XG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiByZW1vdmVDbGFzcygpIHtcbiAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBjbGFzc2VzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgY2xhc3Nlc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICB9XG5cbiAgdmFyIGNsYXNzTmFtZXMgPSBhcnJheUZsYXQoY2xhc3Nlcy5tYXAoZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gYy5zcGxpdCgnICcpO1xuICB9KSk7XG4gIHRoaXMuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICB2YXIgX2VsJGNsYXNzTGlzdDI7XG5cbiAgICAoX2VsJGNsYXNzTGlzdDIgPSBlbC5jbGFzc0xpc3QpLnJlbW92ZS5hcHBseShfZWwkY2xhc3NMaXN0MiwgY2xhc3NOYW1lcyk7XG4gIH0pO1xuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gdG9nZ2xlQ2xhc3MoKSB7XG4gIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgY2xhc3NlcyA9IG5ldyBBcnJheShfbGVuMyksIF9rZXkzID0gMDsgX2tleTMgPCBfbGVuMzsgX2tleTMrKykge1xuICAgIGNsYXNzZXNbX2tleTNdID0gYXJndW1lbnRzW19rZXkzXTtcbiAgfVxuXG4gIHZhciBjbGFzc05hbWVzID0gYXJyYXlGbGF0KGNsYXNzZXMubWFwKGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuIGMuc3BsaXQoJyAnKTtcbiAgfSkpO1xuICB0aGlzLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgY2xhc3NOYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICAgIGVsLmNsYXNzTGlzdC50b2dnbGUoY2xhc3NOYW1lKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGhhc0NsYXNzKCkge1xuICBmb3IgKHZhciBfbGVuNCA9IGFyZ3VtZW50cy5sZW5ndGgsIGNsYXNzZXMgPSBuZXcgQXJyYXkoX2xlbjQpLCBfa2V5NCA9IDA7IF9rZXk0IDwgX2xlbjQ7IF9rZXk0KyspIHtcbiAgICBjbGFzc2VzW19rZXk0XSA9IGFyZ3VtZW50c1tfa2V5NF07XG4gIH1cblxuICB2YXIgY2xhc3NOYW1lcyA9IGFycmF5RmxhdChjbGFzc2VzLm1hcChmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiBjLnNwbGl0KCcgJyk7XG4gIH0pKTtcbiAgcmV0dXJuIGFycmF5RmlsdGVyKHRoaXMsIGZ1bmN0aW9uIChlbCkge1xuICAgIHJldHVybiBjbGFzc05hbWVzLmZpbHRlcihmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgICByZXR1cm4gZWwuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSk7XG4gICAgfSkubGVuZ3RoID4gMDtcbiAgfSkubGVuZ3RoID4gMDtcbn1cblxuZnVuY3Rpb24gYXR0cihhdHRycywgdmFsdWUpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEgJiYgdHlwZW9mIGF0dHJzID09PSAnc3RyaW5nJykge1xuICAgIC8vIEdldCBhdHRyXG4gICAgaWYgKHRoaXNbMF0pIHJldHVybiB0aGlzWzBdLmdldEF0dHJpYnV0ZShhdHRycyk7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSAvLyBTZXQgYXR0cnNcblxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XG4gICAgICAvLyBTdHJpbmdcbiAgICAgIHRoaXNbaV0uc2V0QXR0cmlidXRlKGF0dHJzLCB2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE9iamVjdFxuICAgICAgZm9yICh2YXIgYXR0ck5hbWUgaW4gYXR0cnMpIHtcbiAgICAgICAgdGhpc1tpXVthdHRyTmFtZV0gPSBhdHRyc1thdHRyTmFtZV07XG4gICAgICAgIHRoaXNbaV0uc2V0QXR0cmlidXRlKGF0dHJOYW1lLCBhdHRyc1thdHRyTmFtZV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiByZW1vdmVBdHRyKGF0dHIpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdGhpc1tpXS5yZW1vdmVBdHRyaWJ1dGUoYXR0cik7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gcHJvcChwcm9wcywgdmFsdWUpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEgJiYgdHlwZW9mIHByb3BzID09PSAnc3RyaW5nJykge1xuICAgIC8vIEdldCBwcm9wXG4gICAgaWYgKHRoaXNbMF0pIHJldHVybiB0aGlzWzBdW3Byb3BzXTtcbiAgfSBlbHNlIHtcbiAgICAvLyBTZXQgcHJvcHNcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgIC8vIFN0cmluZ1xuICAgICAgICB0aGlzW2ldW3Byb3BzXSA9IHZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gT2JqZWN0XG4gICAgICAgIGZvciAodmFyIHByb3BOYW1lIGluIHByb3BzKSB7XG4gICAgICAgICAgdGhpc1tpXVtwcm9wTmFtZV0gPSBwcm9wc1twcm9wTmFtZV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBkYXRhKGtleSwgdmFsdWUpIHtcbiAgdmFyIGVsO1xuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgZWwgPSB0aGlzWzBdO1xuICAgIGlmICghZWwpIHJldHVybiB1bmRlZmluZWQ7IC8vIEdldCB2YWx1ZVxuXG4gICAgaWYgKGVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2UgJiYga2V5IGluIGVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2UpIHtcbiAgICAgIHJldHVybiBlbC5kb203RWxlbWVudERhdGFTdG9yYWdlW2tleV07XG4gICAgfVxuXG4gICAgdmFyIGRhdGFLZXkgPSBlbC5nZXRBdHRyaWJ1dGUoXCJkYXRhLVwiICsga2V5KTtcblxuICAgIGlmIChkYXRhS2V5KSB7XG4gICAgICByZXR1cm4gZGF0YUtleTtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9IC8vIFNldCB2YWx1ZVxuXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgZWwgPSB0aGlzW2ldO1xuICAgIGlmICghZWwuZG9tN0VsZW1lbnREYXRhU3RvcmFnZSkgZWwuZG9tN0VsZW1lbnREYXRhU3RvcmFnZSA9IHt9O1xuICAgIGVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2Vba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZURhdGEoa2V5KSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHZhciBlbCA9IHRoaXNbaV07XG5cbiAgICBpZiAoZWwuZG9tN0VsZW1lbnREYXRhU3RvcmFnZSAmJiBlbC5kb203RWxlbWVudERhdGFTdG9yYWdlW2tleV0pIHtcbiAgICAgIGVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2Vba2V5XSA9IG51bGw7XG4gICAgICBkZWxldGUgZWwuZG9tN0VsZW1lbnREYXRhU3RvcmFnZVtrZXldO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBkYXRhc2V0KCkge1xuICB2YXIgZWwgPSB0aGlzWzBdO1xuICBpZiAoIWVsKSByZXR1cm4gdW5kZWZpbmVkO1xuICB2YXIgZGF0YXNldCA9IHt9OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgaWYgKGVsLmRhdGFzZXQpIHtcbiAgICBmb3IgKHZhciBkYXRhS2V5IGluIGVsLmRhdGFzZXQpIHtcbiAgICAgIGRhdGFzZXRbZGF0YUtleV0gPSBlbC5kYXRhc2V0W2RhdGFLZXldO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsLmF0dHJpYnV0ZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIHZhciBfYXR0ciA9IGVsLmF0dHJpYnV0ZXNbaV07XG5cbiAgICAgIGlmIChfYXR0ci5uYW1lLmluZGV4T2YoJ2RhdGEtJykgPj0gMCkge1xuICAgICAgICBkYXRhc2V0W3RvQ2FtZWxDYXNlKF9hdHRyLm5hbWUuc3BsaXQoJ2RhdGEtJylbMV0pXSA9IF9hdHRyLnZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGtleSBpbiBkYXRhc2V0KSB7XG4gICAgaWYgKGRhdGFzZXRba2V5XSA9PT0gJ2ZhbHNlJykgZGF0YXNldFtrZXldID0gZmFsc2U7ZWxzZSBpZiAoZGF0YXNldFtrZXldID09PSAndHJ1ZScpIGRhdGFzZXRba2V5XSA9IHRydWU7ZWxzZSBpZiAocGFyc2VGbG9hdChkYXRhc2V0W2tleV0pID09PSBkYXRhc2V0W2tleV0gKiAxKSBkYXRhc2V0W2tleV0gKj0gMTtcbiAgfVxuXG4gIHJldHVybiBkYXRhc2V0O1xufVxuXG5mdW5jdGlvbiB2YWwodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBnZXQgdmFsdWVcbiAgICB2YXIgZWwgPSB0aGlzWzBdO1xuICAgIGlmICghZWwpIHJldHVybiB1bmRlZmluZWQ7XG5cbiAgICBpZiAoZWwubXVsdGlwbGUgJiYgZWwubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbC5zZWxlY3RlZE9wdGlvbnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdmFsdWVzLnB1c2goZWwuc2VsZWN0ZWRPcHRpb25zW2ldLnZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICB9XG5cbiAgICByZXR1cm4gZWwudmFsdWU7XG4gIH0gLy8gc2V0IHZhbHVlXG5cblxuICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgdGhpcy5sZW5ndGg7IF9pICs9IDEpIHtcbiAgICB2YXIgX2VsID0gdGhpc1tfaV07XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgX2VsLm11bHRpcGxlICYmIF9lbC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnc2VsZWN0Jykge1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBfZWwub3B0aW9ucy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICBfZWwub3B0aW9uc1tqXS5zZWxlY3RlZCA9IHZhbHVlLmluZGV4T2YoX2VsLm9wdGlvbnNbal0udmFsdWUpID49IDA7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIF9lbC52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiB2YWx1ZSh2YWx1ZSkge1xuICByZXR1cm4gdGhpcy52YWwodmFsdWUpO1xufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm0odHJhbnNmb3JtKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoaXNbaV0uc3R5bGUudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHRyYW5zaXRpb24oZHVyYXRpb24pIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdGhpc1tpXS5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSB0eXBlb2YgZHVyYXRpb24gIT09ICdzdHJpbmcnID8gZHVyYXRpb24gKyBcIm1zXCIgOiBkdXJhdGlvbjtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBvbigpIHtcbiAgZm9yICh2YXIgX2xlbjUgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW41KSwgX2tleTUgPSAwOyBfa2V5NSA8IF9sZW41OyBfa2V5NSsrKSB7XG4gICAgYXJnc1tfa2V5NV0gPSBhcmd1bWVudHNbX2tleTVdO1xuICB9XG5cbiAgdmFyIGV2ZW50VHlwZSA9IGFyZ3NbMF0sXG4gICAgICB0YXJnZXRTZWxlY3RvciA9IGFyZ3NbMV0sXG4gICAgICBsaXN0ZW5lciA9IGFyZ3NbMl0sXG4gICAgICBjYXB0dXJlID0gYXJnc1szXTtcblxuICBpZiAodHlwZW9mIGFyZ3NbMV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICBldmVudFR5cGUgPSBhcmdzWzBdO1xuICAgIGxpc3RlbmVyID0gYXJnc1sxXTtcbiAgICBjYXB0dXJlID0gYXJnc1syXTtcbiAgICB0YXJnZXRTZWxlY3RvciA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICghY2FwdHVyZSkgY2FwdHVyZSA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZUxpdmVFdmVudChlKSB7XG4gICAgdmFyIHRhcmdldCA9IGUudGFyZ2V0O1xuICAgIGlmICghdGFyZ2V0KSByZXR1cm47XG4gICAgdmFyIGV2ZW50RGF0YSA9IGUudGFyZ2V0LmRvbTdFdmVudERhdGEgfHwgW107XG5cbiAgICBpZiAoZXZlbnREYXRhLmluZGV4T2YoZSkgPCAwKSB7XG4gICAgICBldmVudERhdGEudW5zaGlmdChlKTtcbiAgICB9XG5cbiAgICBpZiAoJCh0YXJnZXQpLmlzKHRhcmdldFNlbGVjdG9yKSkgbGlzdGVuZXIuYXBwbHkodGFyZ2V0LCBldmVudERhdGEpO2Vsc2Uge1xuICAgICAgdmFyIF9wYXJlbnRzID0gJCh0YXJnZXQpLnBhcmVudHMoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG5cbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgX3BhcmVudHMubGVuZ3RoOyBrICs9IDEpIHtcbiAgICAgICAgaWYgKCQoX3BhcmVudHNba10pLmlzKHRhcmdldFNlbGVjdG9yKSkgbGlzdGVuZXIuYXBwbHkoX3BhcmVudHNba10sIGV2ZW50RGF0YSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlRXZlbnQoZSkge1xuICAgIHZhciBldmVudERhdGEgPSBlICYmIGUudGFyZ2V0ID8gZS50YXJnZXQuZG9tN0V2ZW50RGF0YSB8fCBbXSA6IFtdO1xuXG4gICAgaWYgKGV2ZW50RGF0YS5pbmRleE9mKGUpIDwgMCkge1xuICAgICAgZXZlbnREYXRhLnVuc2hpZnQoZSk7XG4gICAgfVxuXG4gICAgbGlzdGVuZXIuYXBwbHkodGhpcywgZXZlbnREYXRhKTtcbiAgfVxuXG4gIHZhciBldmVudHMgPSBldmVudFR5cGUuc3BsaXQoJyAnKTtcbiAgdmFyIGo7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdmFyIGVsID0gdGhpc1tpXTtcblxuICAgIGlmICghdGFyZ2V0U2VsZWN0b3IpIHtcbiAgICAgIGZvciAoaiA9IDA7IGogPCBldmVudHMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgdmFyIGV2ZW50ID0gZXZlbnRzW2pdO1xuICAgICAgICBpZiAoIWVsLmRvbTdMaXN0ZW5lcnMpIGVsLmRvbTdMaXN0ZW5lcnMgPSB7fTtcbiAgICAgICAgaWYgKCFlbC5kb203TGlzdGVuZXJzW2V2ZW50XSkgZWwuZG9tN0xpc3RlbmVyc1tldmVudF0gPSBbXTtcbiAgICAgICAgZWwuZG9tN0xpc3RlbmVyc1tldmVudF0ucHVzaCh7XG4gICAgICAgICAgbGlzdGVuZXI6IGxpc3RlbmVyLFxuICAgICAgICAgIHByb3h5TGlzdGVuZXI6IGhhbmRsZUV2ZW50XG4gICAgICAgIH0pO1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVFdmVudCwgY2FwdHVyZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIExpdmUgZXZlbnRzXG4gICAgICBmb3IgKGogPSAwOyBqIDwgZXZlbnRzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgIHZhciBfZXZlbnQgPSBldmVudHNbal07XG4gICAgICAgIGlmICghZWwuZG9tN0xpdmVMaXN0ZW5lcnMpIGVsLmRvbTdMaXZlTGlzdGVuZXJzID0ge307XG4gICAgICAgIGlmICghZWwuZG9tN0xpdmVMaXN0ZW5lcnNbX2V2ZW50XSkgZWwuZG9tN0xpdmVMaXN0ZW5lcnNbX2V2ZW50XSA9IFtdO1xuXG4gICAgICAgIGVsLmRvbTdMaXZlTGlzdGVuZXJzW19ldmVudF0ucHVzaCh7XG4gICAgICAgICAgbGlzdGVuZXI6IGxpc3RlbmVyLFxuICAgICAgICAgIHByb3h5TGlzdGVuZXI6IGhhbmRsZUxpdmVFdmVudFxuICAgICAgICB9KTtcblxuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKF9ldmVudCwgaGFuZGxlTGl2ZUV2ZW50LCBjYXB0dXJlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gb2ZmKCkge1xuICBmb3IgKHZhciBfbGVuNiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjYpLCBfa2V5NiA9IDA7IF9rZXk2IDwgX2xlbjY7IF9rZXk2KyspIHtcbiAgICBhcmdzW19rZXk2XSA9IGFyZ3VtZW50c1tfa2V5Nl07XG4gIH1cblxuICB2YXIgZXZlbnRUeXBlID0gYXJnc1swXSxcbiAgICAgIHRhcmdldFNlbGVjdG9yID0gYXJnc1sxXSxcbiAgICAgIGxpc3RlbmVyID0gYXJnc1syXSxcbiAgICAgIGNhcHR1cmUgPSBhcmdzWzNdO1xuXG4gIGlmICh0eXBlb2YgYXJnc1sxXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGV2ZW50VHlwZSA9IGFyZ3NbMF07XG4gICAgbGlzdGVuZXIgPSBhcmdzWzFdO1xuICAgIGNhcHR1cmUgPSBhcmdzWzJdO1xuICAgIHRhcmdldFNlbGVjdG9yID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKCFjYXB0dXJlKSBjYXB0dXJlID0gZmFsc2U7XG4gIHZhciBldmVudHMgPSBldmVudFR5cGUuc3BsaXQoJyAnKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGV2ZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHZhciBldmVudCA9IGV2ZW50c1tpXTtcblxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgdGhpcy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgdmFyIGVsID0gdGhpc1tqXTtcbiAgICAgIHZhciBoYW5kbGVycyA9IHZvaWQgMDtcblxuICAgICAgaWYgKCF0YXJnZXRTZWxlY3RvciAmJiBlbC5kb203TGlzdGVuZXJzKSB7XG4gICAgICAgIGhhbmRsZXJzID0gZWwuZG9tN0xpc3RlbmVyc1tldmVudF07XG4gICAgICB9IGVsc2UgaWYgKHRhcmdldFNlbGVjdG9yICYmIGVsLmRvbTdMaXZlTGlzdGVuZXJzKSB7XG4gICAgICAgIGhhbmRsZXJzID0gZWwuZG9tN0xpdmVMaXN0ZW5lcnNbZXZlbnRdO1xuICAgICAgfVxuXG4gICAgICBpZiAoaGFuZGxlcnMgJiYgaGFuZGxlcnMubGVuZ3RoKSB7XG4gICAgICAgIGZvciAodmFyIGsgPSBoYW5kbGVycy5sZW5ndGggLSAxOyBrID49IDA7IGsgLT0gMSkge1xuICAgICAgICAgIHZhciBoYW5kbGVyID0gaGFuZGxlcnNba107XG5cbiAgICAgICAgICBpZiAobGlzdGVuZXIgJiYgaGFuZGxlci5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIucHJveHlMaXN0ZW5lciwgY2FwdHVyZSk7XG4gICAgICAgICAgICBoYW5kbGVycy5zcGxpY2UoaywgMSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChsaXN0ZW5lciAmJiBoYW5kbGVyLmxpc3RlbmVyICYmIGhhbmRsZXIubGlzdGVuZXIuZG9tN3Byb3h5ICYmIGhhbmRsZXIubGlzdGVuZXIuZG9tN3Byb3h5ID09PSBsaXN0ZW5lcikge1xuICAgICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlci5wcm94eUxpc3RlbmVyLCBjYXB0dXJlKTtcbiAgICAgICAgICAgIGhhbmRsZXJzLnNwbGljZShrLCAxKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFsaXN0ZW5lcikge1xuICAgICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlci5wcm94eUxpc3RlbmVyLCBjYXB0dXJlKTtcbiAgICAgICAgICAgIGhhbmRsZXJzLnNwbGljZShrLCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gb25jZSgpIHtcbiAgdmFyIGRvbSA9IHRoaXM7XG5cbiAgZm9yICh2YXIgX2xlbjcgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW43KSwgX2tleTcgPSAwOyBfa2V5NyA8IF9sZW43OyBfa2V5NysrKSB7XG4gICAgYXJnc1tfa2V5N10gPSBhcmd1bWVudHNbX2tleTddO1xuICB9XG5cbiAgdmFyIGV2ZW50TmFtZSA9IGFyZ3NbMF0sXG4gICAgICB0YXJnZXRTZWxlY3RvciA9IGFyZ3NbMV0sXG4gICAgICBsaXN0ZW5lciA9IGFyZ3NbMl0sXG4gICAgICBjYXB0dXJlID0gYXJnc1szXTtcblxuICBpZiAodHlwZW9mIGFyZ3NbMV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICBldmVudE5hbWUgPSBhcmdzWzBdO1xuICAgIGxpc3RlbmVyID0gYXJnc1sxXTtcbiAgICBjYXB0dXJlID0gYXJnc1syXTtcbiAgICB0YXJnZXRTZWxlY3RvciA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uY2VIYW5kbGVyKCkge1xuICAgIGZvciAodmFyIF9sZW44ID0gYXJndW1lbnRzLmxlbmd0aCwgZXZlbnRBcmdzID0gbmV3IEFycmF5KF9sZW44KSwgX2tleTggPSAwOyBfa2V5OCA8IF9sZW44OyBfa2V5OCsrKSB7XG4gICAgICBldmVudEFyZ3NbX2tleThdID0gYXJndW1lbnRzW19rZXk4XTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lci5hcHBseSh0aGlzLCBldmVudEFyZ3MpO1xuICAgIGRvbS5vZmYoZXZlbnROYW1lLCB0YXJnZXRTZWxlY3Rvciwgb25jZUhhbmRsZXIsIGNhcHR1cmUpO1xuXG4gICAgaWYgKG9uY2VIYW5kbGVyLmRvbTdwcm94eSkge1xuICAgICAgZGVsZXRlIG9uY2VIYW5kbGVyLmRvbTdwcm94eTtcbiAgICB9XG4gIH1cblxuICBvbmNlSGFuZGxlci5kb203cHJveHkgPSBsaXN0ZW5lcjtcbiAgcmV0dXJuIGRvbS5vbihldmVudE5hbWUsIHRhcmdldFNlbGVjdG9yLCBvbmNlSGFuZGxlciwgY2FwdHVyZSk7XG59XG5cbmZ1bmN0aW9uIHRyaWdnZXIoKSB7XG4gIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coKTtcblxuICBmb3IgKHZhciBfbGVuOSA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjkpLCBfa2V5OSA9IDA7IF9rZXk5IDwgX2xlbjk7IF9rZXk5KyspIHtcbiAgICBhcmdzW19rZXk5XSA9IGFyZ3VtZW50c1tfa2V5OV07XG4gIH1cblxuICB2YXIgZXZlbnRzID0gYXJnc1swXS5zcGxpdCgnICcpO1xuICB2YXIgZXZlbnREYXRhID0gYXJnc1sxXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGV2ZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHZhciBldmVudCA9IGV2ZW50c1tpXTtcblxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgdGhpcy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgdmFyIGVsID0gdGhpc1tqXTtcblxuICAgICAgaWYgKHdpbmRvdy5DdXN0b21FdmVudCkge1xuICAgICAgICB2YXIgZXZ0ID0gbmV3IHdpbmRvdy5DdXN0b21FdmVudChldmVudCwge1xuICAgICAgICAgIGRldGFpbDogZXZlbnREYXRhLFxuICAgICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgZWwuZG9tN0V2ZW50RGF0YSA9IGFyZ3MuZmlsdGVyKGZ1bmN0aW9uIChkYXRhLCBkYXRhSW5kZXgpIHtcbiAgICAgICAgICByZXR1cm4gZGF0YUluZGV4ID4gMDtcbiAgICAgICAgfSk7XG4gICAgICAgIGVsLmRpc3BhdGNoRXZlbnQoZXZ0KTtcbiAgICAgICAgZWwuZG9tN0V2ZW50RGF0YSA9IFtdO1xuICAgICAgICBkZWxldGUgZWwuZG9tN0V2ZW50RGF0YTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gdHJhbnNpdGlvbkVuZChjYWxsYmFjaykge1xuICB2YXIgZG9tID0gdGhpcztcblxuICBmdW5jdGlvbiBmaXJlQ2FsbEJhY2soZSkge1xuICAgIGlmIChlLnRhcmdldCAhPT0gdGhpcykgcmV0dXJuO1xuICAgIGNhbGxiYWNrLmNhbGwodGhpcywgZSk7XG4gICAgZG9tLm9mZigndHJhbnNpdGlvbmVuZCcsIGZpcmVDYWxsQmFjayk7XG4gIH1cblxuICBpZiAoY2FsbGJhY2spIHtcbiAgICBkb20ub24oJ3RyYW5zaXRpb25lbmQnLCBmaXJlQ2FsbEJhY2spO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIGFuaW1hdGlvbkVuZChjYWxsYmFjaykge1xuICB2YXIgZG9tID0gdGhpcztcblxuICBmdW5jdGlvbiBmaXJlQ2FsbEJhY2soZSkge1xuICAgIGlmIChlLnRhcmdldCAhPT0gdGhpcykgcmV0dXJuO1xuICAgIGNhbGxiYWNrLmNhbGwodGhpcywgZSk7XG4gICAgZG9tLm9mZignYW5pbWF0aW9uZW5kJywgZmlyZUNhbGxCYWNrKTtcbiAgfVxuXG4gIGlmIChjYWxsYmFjaykge1xuICAgIGRvbS5vbignYW5pbWF0aW9uZW5kJywgZmlyZUNhbGxCYWNrKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiB3aWR0aCgpIHtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuXG4gIGlmICh0aGlzWzBdID09PSB3aW5kb3cpIHtcbiAgICByZXR1cm4gd2luZG93LmlubmVyV2lkdGg7XG4gIH1cblxuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIHBhcnNlRmxvYXQodGhpcy5jc3MoJ3dpZHRoJykpO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIG91dGVyV2lkdGgoaW5jbHVkZU1hcmdpbnMpIHtcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIGlmIChpbmNsdWRlTWFyZ2lucykge1xuICAgICAgdmFyIF9zdHlsZXMgPSB0aGlzLnN0eWxlcygpO1xuXG4gICAgICByZXR1cm4gdGhpc1swXS5vZmZzZXRXaWR0aCArIHBhcnNlRmxvYXQoX3N0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdtYXJnaW4tcmlnaHQnKSkgKyBwYXJzZUZsb2F0KF9zdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnbWFyZ2luLWxlZnQnKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXNbMF0ub2Zmc2V0V2lkdGg7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gaGVpZ2h0KCkge1xuICB2YXIgd2luZG93ID0gZ2V0V2luZG93KCk7XG5cbiAgaWYgKHRoaXNbMF0gPT09IHdpbmRvdykge1xuICAgIHJldHVybiB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gIH1cblxuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIHBhcnNlRmxvYXQodGhpcy5jc3MoJ2hlaWdodCcpKTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBvdXRlckhlaWdodChpbmNsdWRlTWFyZ2lucykge1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgaWYgKGluY2x1ZGVNYXJnaW5zKSB7XG4gICAgICB2YXIgX3N0eWxlczIgPSB0aGlzLnN0eWxlcygpO1xuXG4gICAgICByZXR1cm4gdGhpc1swXS5vZmZzZXRIZWlnaHQgKyBwYXJzZUZsb2F0KF9zdHlsZXMyLmdldFByb3BlcnR5VmFsdWUoJ21hcmdpbi10b3AnKSkgKyBwYXJzZUZsb2F0KF9zdHlsZXMyLmdldFByb3BlcnR5VmFsdWUoJ21hcmdpbi1ib3R0b20nKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXNbMF0ub2Zmc2V0SGVpZ2h0O1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIG9mZnNldCgpIHtcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgICB2YXIgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICAgIHZhciBlbCA9IHRoaXNbMF07XG4gICAgdmFyIGJveCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHZhciBib2R5ID0gZG9jdW1lbnQuYm9keTtcbiAgICB2YXIgY2xpZW50VG9wID0gZWwuY2xpZW50VG9wIHx8IGJvZHkuY2xpZW50VG9wIHx8IDA7XG4gICAgdmFyIGNsaWVudExlZnQgPSBlbC5jbGllbnRMZWZ0IHx8IGJvZHkuY2xpZW50TGVmdCB8fCAwO1xuICAgIHZhciBzY3JvbGxUb3AgPSBlbCA9PT0gd2luZG93ID8gd2luZG93LnNjcm9sbFkgOiBlbC5zY3JvbGxUb3A7XG4gICAgdmFyIHNjcm9sbExlZnQgPSBlbCA9PT0gd2luZG93ID8gd2luZG93LnNjcm9sbFggOiBlbC5zY3JvbGxMZWZ0O1xuICAgIHJldHVybiB7XG4gICAgICB0b3A6IGJveC50b3AgKyBzY3JvbGxUb3AgLSBjbGllbnRUb3AsXG4gICAgICBsZWZ0OiBib3gubGVmdCArIHNjcm9sbExlZnQgLSBjbGllbnRMZWZ0XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBoaWRlKCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB0aGlzW2ldLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gc2hvdygpIHtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHZhciBlbCA9IHRoaXNbaV07XG5cbiAgICBpZiAoZWwuc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnKSB7XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKCdkaXNwbGF5JykgPT09ICdub25lJykge1xuICAgICAgLy8gU3RpbGwgbm90IHZpc2libGVcbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBzdHlsZXMoKSB7XG4gIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgaWYgKHRoaXNbMF0pIHJldHVybiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzWzBdLCBudWxsKTtcbiAgcmV0dXJuIHt9O1xufVxuXG5mdW5jdGlvbiBjc3MocHJvcHMsIHZhbHVlKSB7XG4gIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgdmFyIGk7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICBpZiAodHlwZW9mIHByb3BzID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gLmNzcygnd2lkdGgnKVxuICAgICAgaWYgKHRoaXNbMF0pIHJldHVybiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzWzBdLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKHByb3BzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gLmNzcyh7IHdpZHRoOiAnMTAwcHgnIH0pXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBmb3IgKHZhciBfcHJvcCBpbiBwcm9wcykge1xuICAgICAgICAgIHRoaXNbaV0uc3R5bGVbX3Byb3BdID0gcHJvcHNbX3Byb3BdO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfVxuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyICYmIHR5cGVvZiBwcm9wcyA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyAuY3NzKCd3aWR0aCcsICcxMDBweCcpXG4gICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIHRoaXNbaV0uc3R5bGVbcHJvcHNdID0gdmFsdWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gZWFjaChjYWxsYmFjaykge1xuICBpZiAoIWNhbGxiYWNrKSByZXR1cm4gdGhpcztcbiAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uIChlbCwgaW5kZXgpIHtcbiAgICBjYWxsYmFjay5hcHBseShlbCwgW2VsLCBpbmRleF0pO1xuICB9KTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIGZpbHRlcihjYWxsYmFjaykge1xuICB2YXIgcmVzdWx0ID0gYXJyYXlGaWx0ZXIodGhpcywgY2FsbGJhY2spO1xuICByZXR1cm4gJChyZXN1bHQpO1xufVxuXG5mdW5jdGlvbiBodG1sKGh0bWwpIHtcbiAgaWYgKHR5cGVvZiBodG1sID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiB0aGlzWzBdID8gdGhpc1swXS5pbm5lckhUTUwgOiBudWxsO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdGhpc1tpXS5pbm5lckhUTUwgPSBodG1sO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHRleHQodGV4dCkge1xuICBpZiAodHlwZW9mIHRleHQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIHRoaXNbMF0gPyB0aGlzWzBdLnRleHRDb250ZW50LnRyaW0oKSA6IG51bGw7XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB0aGlzW2ldLnRleHRDb250ZW50ID0gdGV4dDtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBpcyhzZWxlY3Rvcikge1xuICB2YXIgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIHZhciBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gIHZhciBlbCA9IHRoaXNbMF07XG4gIHZhciBjb21wYXJlV2l0aDtcbiAgdmFyIGk7XG4gIGlmICghZWwgfHwgdHlwZW9mIHNlbGVjdG9yID09PSAndW5kZWZpbmVkJykgcmV0dXJuIGZhbHNlO1xuXG4gIGlmICh0eXBlb2Ygc2VsZWN0b3IgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKGVsLm1hdGNoZXMpIHJldHVybiBlbC5tYXRjaGVzKHNlbGVjdG9yKTtcbiAgICBpZiAoZWwud2Via2l0TWF0Y2hlc1NlbGVjdG9yKSByZXR1cm4gZWwud2Via2l0TWF0Y2hlc1NlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICBpZiAoZWwubXNNYXRjaGVzU2VsZWN0b3IpIHJldHVybiBlbC5tc01hdGNoZXNTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgY29tcGFyZVdpdGggPSAkKHNlbGVjdG9yKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBjb21wYXJlV2l0aC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKGNvbXBhcmVXaXRoW2ldID09PSBlbCkgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKHNlbGVjdG9yID09PSBkb2N1bWVudCkge1xuICAgIHJldHVybiBlbCA9PT0gZG9jdW1lbnQ7XG4gIH1cblxuICBpZiAoc2VsZWN0b3IgPT09IHdpbmRvdykge1xuICAgIHJldHVybiBlbCA9PT0gd2luZG93O1xuICB9XG5cbiAgaWYgKHNlbGVjdG9yLm5vZGVUeXBlIHx8IHNlbGVjdG9yIGluc3RhbmNlb2YgRG9tNykge1xuICAgIGNvbXBhcmVXaXRoID0gc2VsZWN0b3Iubm9kZVR5cGUgPyBbc2VsZWN0b3JdIDogc2VsZWN0b3I7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgY29tcGFyZVdpdGgubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmIChjb21wYXJlV2l0aFtpXSA9PT0gZWwpIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaW5kZXgoKSB7XG4gIHZhciBjaGlsZCA9IHRoaXNbMF07XG4gIHZhciBpO1xuXG4gIGlmIChjaGlsZCkge1xuICAgIGkgPSAwOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcblxuICAgIHdoaWxlICgoY2hpbGQgPSBjaGlsZC5wcmV2aW91c1NpYmxpbmcpICE9PSBudWxsKSB7XG4gICAgICBpZiAoY2hpbGQubm9kZVR5cGUgPT09IDEpIGkgKz0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gaTtcbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGVxKGluZGV4KSB7XG4gIGlmICh0eXBlb2YgaW5kZXggPT09ICd1bmRlZmluZWQnKSByZXR1cm4gdGhpcztcbiAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuXG4gIGlmIChpbmRleCA+IGxlbmd0aCAtIDEpIHtcbiAgICByZXR1cm4gJChbXSk7XG4gIH1cblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgdmFyIHJldHVybkluZGV4ID0gbGVuZ3RoICsgaW5kZXg7XG4gICAgaWYgKHJldHVybkluZGV4IDwgMCkgcmV0dXJuICQoW10pO1xuICAgIHJldHVybiAkKFt0aGlzW3JldHVybkluZGV4XV0pO1xuICB9XG5cbiAgcmV0dXJuICQoW3RoaXNbaW5kZXhdXSk7XG59XG5cbmZ1bmN0aW9uIGFwcGVuZCgpIHtcbiAgdmFyIG5ld0NoaWxkO1xuICB2YXIgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuXG4gIGZvciAodmFyIGsgPSAwOyBrIDwgYXJndW1lbnRzLmxlbmd0aDsgayArPSAxKSB7XG4gICAgbmV3Q2hpbGQgPSBrIDwgMCB8fCBhcmd1bWVudHMubGVuZ3RoIDw9IGsgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNba107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmICh0eXBlb2YgbmV3Q2hpbGQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHZhciB0ZW1wRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHRlbXBEaXYuaW5uZXJIVE1MID0gbmV3Q2hpbGQ7XG5cbiAgICAgICAgd2hpbGUgKHRlbXBEaXYuZmlyc3RDaGlsZCkge1xuICAgICAgICAgIHRoaXNbaV0uYXBwZW5kQ2hpbGQodGVtcERpdi5maXJzdENoaWxkKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChuZXdDaGlsZCBpbnN0YW5jZW9mIERvbTcpIHtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBuZXdDaGlsZC5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgIHRoaXNbaV0uYXBwZW5kQ2hpbGQobmV3Q2hpbGRbal0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzW2ldLmFwcGVuZENoaWxkKG5ld0NoaWxkKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gYXBwZW5kVG8ocGFyZW50KSB7XG4gICQocGFyZW50KS5hcHBlbmQodGhpcyk7XG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBwcmVwZW5kKG5ld0NoaWxkKSB7XG4gIHZhciBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gIHZhciBpO1xuICB2YXIgajtcblxuICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmICh0eXBlb2YgbmV3Q2hpbGQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB2YXIgdGVtcERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgdGVtcERpdi5pbm5lckhUTUwgPSBuZXdDaGlsZDtcblxuICAgICAgZm9yIChqID0gdGVtcERpdi5jaGlsZE5vZGVzLmxlbmd0aCAtIDE7IGogPj0gMDsgaiAtPSAxKSB7XG4gICAgICAgIHRoaXNbaV0uaW5zZXJ0QmVmb3JlKHRlbXBEaXYuY2hpbGROb2Rlc1tqXSwgdGhpc1tpXS5jaGlsZE5vZGVzWzBdKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG5ld0NoaWxkIGluc3RhbmNlb2YgRG9tNykge1xuICAgICAgZm9yIChqID0gMDsgaiA8IG5ld0NoaWxkLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgIHRoaXNbaV0uaW5zZXJ0QmVmb3JlKG5ld0NoaWxkW2pdLCB0aGlzW2ldLmNoaWxkTm9kZXNbMF0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzW2ldLmluc2VydEJlZm9yZShuZXdDaGlsZCwgdGhpc1tpXS5jaGlsZE5vZGVzWzBdKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gcHJlcGVuZFRvKHBhcmVudCkge1xuICAkKHBhcmVudCkucHJlcGVuZCh0aGlzKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIGluc2VydEJlZm9yZShzZWxlY3Rvcikge1xuICB2YXIgYmVmb3JlID0gJChzZWxlY3Rvcik7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKGJlZm9yZS5sZW5ndGggPT09IDEpIHtcbiAgICAgIGJlZm9yZVswXS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzW2ldLCBiZWZvcmVbMF0pO1xuICAgIH0gZWxzZSBpZiAoYmVmb3JlLmxlbmd0aCA+IDEpIHtcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgYmVmb3JlLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgIGJlZm9yZVtqXS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzW2ldLmNsb25lTm9kZSh0cnVlKSwgYmVmb3JlW2pdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5zZXJ0QWZ0ZXIoc2VsZWN0b3IpIHtcbiAgdmFyIGFmdGVyID0gJChzZWxlY3Rvcik7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKGFmdGVyLmxlbmd0aCA9PT0gMSkge1xuICAgICAgYWZ0ZXJbMF0ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpc1tpXSwgYWZ0ZXJbMF0ubmV4dFNpYmxpbmcpO1xuICAgIH0gZWxzZSBpZiAoYWZ0ZXIubGVuZ3RoID4gMSkge1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBhZnRlci5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICBhZnRlcltqXS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzW2ldLmNsb25lTm9kZSh0cnVlKSwgYWZ0ZXJbal0ubmV4dFNpYmxpbmcpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBuZXh0KHNlbGVjdG9yKSB7XG4gIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIGlmICh0aGlzWzBdLm5leHRFbGVtZW50U2libGluZyAmJiAkKHRoaXNbMF0ubmV4dEVsZW1lbnRTaWJsaW5nKS5pcyhzZWxlY3RvcikpIHtcbiAgICAgICAgcmV0dXJuICQoW3RoaXNbMF0ubmV4dEVsZW1lbnRTaWJsaW5nXSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAkKFtdKTtcbiAgICB9XG5cbiAgICBpZiAodGhpc1swXS5uZXh0RWxlbWVudFNpYmxpbmcpIHJldHVybiAkKFt0aGlzWzBdLm5leHRFbGVtZW50U2libGluZ10pO1xuICAgIHJldHVybiAkKFtdKTtcbiAgfVxuXG4gIHJldHVybiAkKFtdKTtcbn1cblxuZnVuY3Rpb24gbmV4dEFsbChzZWxlY3Rvcikge1xuICB2YXIgbmV4dEVscyA9IFtdO1xuICB2YXIgZWwgPSB0aGlzWzBdO1xuICBpZiAoIWVsKSByZXR1cm4gJChbXSk7XG5cbiAgd2hpbGUgKGVsLm5leHRFbGVtZW50U2libGluZykge1xuICAgIHZhciBfbmV4dCA9IGVsLm5leHRFbGVtZW50U2libGluZzsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICBpZiAoJChfbmV4dCkuaXMoc2VsZWN0b3IpKSBuZXh0RWxzLnB1c2goX25leHQpO1xuICAgIH0gZWxzZSBuZXh0RWxzLnB1c2goX25leHQpO1xuXG4gICAgZWwgPSBfbmV4dDtcbiAgfVxuXG4gIHJldHVybiAkKG5leHRFbHMpO1xufVxuXG5mdW5jdGlvbiBwcmV2KHNlbGVjdG9yKSB7XG4gIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICB2YXIgZWwgPSB0aGlzWzBdO1xuXG4gICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICBpZiAoZWwucHJldmlvdXNFbGVtZW50U2libGluZyAmJiAkKGVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpLmlzKHNlbGVjdG9yKSkge1xuICAgICAgICByZXR1cm4gJChbZWwucHJldmlvdXNFbGVtZW50U2libGluZ10pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gJChbXSk7XG4gICAgfVxuXG4gICAgaWYgKGVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpIHJldHVybiAkKFtlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nXSk7XG4gICAgcmV0dXJuICQoW10pO1xuICB9XG5cbiAgcmV0dXJuICQoW10pO1xufVxuXG5mdW5jdGlvbiBwcmV2QWxsKHNlbGVjdG9yKSB7XG4gIHZhciBwcmV2RWxzID0gW107XG4gIHZhciBlbCA9IHRoaXNbMF07XG4gIGlmICghZWwpIHJldHVybiAkKFtdKTtcblxuICB3aGlsZSAoZWwucHJldmlvdXNFbGVtZW50U2libGluZykge1xuICAgIHZhciBfcHJldiA9IGVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmc7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgaWYgKCQoX3ByZXYpLmlzKHNlbGVjdG9yKSkgcHJldkVscy5wdXNoKF9wcmV2KTtcbiAgICB9IGVsc2UgcHJldkVscy5wdXNoKF9wcmV2KTtcblxuICAgIGVsID0gX3ByZXY7XG4gIH1cblxuICByZXR1cm4gJChwcmV2RWxzKTtcbn1cblxuZnVuY3Rpb24gc2libGluZ3Moc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHRoaXMubmV4dEFsbChzZWxlY3RvcikuYWRkKHRoaXMucHJldkFsbChzZWxlY3RvcikpO1xufVxuXG5mdW5jdGlvbiBwYXJlbnQoc2VsZWN0b3IpIHtcbiAgdmFyIHBhcmVudHMgPSBbXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmICh0aGlzW2ldLnBhcmVudE5vZGUgIT09IG51bGwpIHtcbiAgICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgICBpZiAoJCh0aGlzW2ldLnBhcmVudE5vZGUpLmlzKHNlbGVjdG9yKSkgcGFyZW50cy5wdXNoKHRoaXNbaV0ucGFyZW50Tm9kZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJlbnRzLnB1c2godGhpc1tpXS5wYXJlbnROb2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gJChwYXJlbnRzKTtcbn1cblxuZnVuY3Rpb24gcGFyZW50cyhzZWxlY3Rvcikge1xuICB2YXIgcGFyZW50cyA9IFtdOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdmFyIF9wYXJlbnQgPSB0aGlzW2ldLnBhcmVudE5vZGU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICAgIHdoaWxlIChfcGFyZW50KSB7XG4gICAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgICAgaWYgKCQoX3BhcmVudCkuaXMoc2VsZWN0b3IpKSBwYXJlbnRzLnB1c2goX3BhcmVudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJlbnRzLnB1c2goX3BhcmVudCk7XG4gICAgICB9XG5cbiAgICAgIF9wYXJlbnQgPSBfcGFyZW50LnBhcmVudE5vZGU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuICQocGFyZW50cyk7XG59XG5cbmZ1bmN0aW9uIGNsb3Nlc3Qoc2VsZWN0b3IpIHtcbiAgdmFyIGNsb3Nlc3QgPSB0aGlzOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgaWYgKHR5cGVvZiBzZWxlY3RvciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gJChbXSk7XG4gIH1cblxuICBpZiAoIWNsb3Nlc3QuaXMoc2VsZWN0b3IpKSB7XG4gICAgY2xvc2VzdCA9IGNsb3Nlc3QucGFyZW50cyhzZWxlY3RvcikuZXEoMCk7XG4gIH1cblxuICByZXR1cm4gY2xvc2VzdDtcbn1cblxuZnVuY3Rpb24gZmluZChzZWxlY3Rvcikge1xuICB2YXIgZm91bmRFbGVtZW50cyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHZhciBmb3VuZCA9IHRoaXNbaV0ucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG5cbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IGZvdW5kLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICBmb3VuZEVsZW1lbnRzLnB1c2goZm91bmRbal0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAkKGZvdW5kRWxlbWVudHMpO1xufVxuXG5mdW5jdGlvbiBjaGlsZHJlbihzZWxlY3Rvcikge1xuICB2YXIgY2hpbGRyZW4gPSBbXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHZhciBjaGlsZE5vZGVzID0gdGhpc1tpXS5jaGlsZHJlbjtcblxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgY2hpbGROb2Rlcy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgaWYgKCFzZWxlY3RvciB8fCAkKGNoaWxkTm9kZXNbal0pLmlzKHNlbGVjdG9yKSkge1xuICAgICAgICBjaGlsZHJlbi5wdXNoKGNoaWxkTm9kZXNbal0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAkKGNoaWxkcmVuKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAodGhpc1tpXS5wYXJlbnROb2RlKSB0aGlzW2ldLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpc1tpXSk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gZGV0YWNoKCkge1xuICByZXR1cm4gdGhpcy5yZW1vdmUoKTtcbn1cblxuZnVuY3Rpb24gYWRkKCkge1xuICB2YXIgZG9tID0gdGhpcztcbiAgdmFyIGk7XG4gIHZhciBqO1xuXG4gIGZvciAodmFyIF9sZW4xMCA9IGFyZ3VtZW50cy5sZW5ndGgsIGVscyA9IG5ldyBBcnJheShfbGVuMTApLCBfa2V5MTAgPSAwOyBfa2V5MTAgPCBfbGVuMTA7IF9rZXkxMCsrKSB7XG4gICAgZWxzW19rZXkxMF0gPSBhcmd1bWVudHNbX2tleTEwXTtcbiAgfVxuXG4gIGZvciAoaSA9IDA7IGkgPCBlbHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB2YXIgdG9BZGQgPSAkKGVsc1tpXSk7XG5cbiAgICBmb3IgKGogPSAwOyBqIDwgdG9BZGQubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgIGRvbS5wdXNoKHRvQWRkW2pdKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZG9tO1xufVxuXG5mdW5jdGlvbiBlbXB0eSgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdmFyIGVsID0gdGhpc1tpXTtcblxuICAgIGlmIChlbC5ub2RlVHlwZSA9PT0gMSkge1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBlbC5jaGlsZE5vZGVzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgIGlmIChlbC5jaGlsZE5vZGVzW2pdLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICBlbC5jaGlsZE5vZGVzW2pdLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWwuY2hpbGROb2Rlc1tqXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZWwudGV4dENvbnRlbnQgPSAnJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gc2Nyb2xsVG8oKSB7XG4gIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coKTtcblxuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgdmFyIGxlZnQgPSBhcmdzWzBdLFxuICAgICAgdG9wID0gYXJnc1sxXSxcbiAgICAgIGR1cmF0aW9uID0gYXJnc1syXSxcbiAgICAgIGVhc2luZyA9IGFyZ3NbM10sXG4gICAgICBjYWxsYmFjayA9IGFyZ3NbNF07XG5cbiAgaWYgKGFyZ3MubGVuZ3RoID09PSA0ICYmIHR5cGVvZiBlYXNpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IGVhc2luZztcbiAgICBsZWZ0ID0gYXJnc1swXTtcbiAgICB0b3AgPSBhcmdzWzFdO1xuICAgIGR1cmF0aW9uID0gYXJnc1syXTtcbiAgICBjYWxsYmFjayA9IGFyZ3NbM107XG4gICAgZWFzaW5nID0gYXJnc1s0XTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZWFzaW5nID09PSAndW5kZWZpbmVkJykgZWFzaW5nID0gJ3N3aW5nJztcbiAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiBhbmltYXRlKCkge1xuICAgIHZhciBlbCA9IHRoaXM7XG4gICAgdmFyIGN1cnJlbnRUb3A7XG4gICAgdmFyIGN1cnJlbnRMZWZ0O1xuICAgIHZhciBtYXhUb3A7XG4gICAgdmFyIG1heExlZnQ7XG4gICAgdmFyIG5ld1RvcDtcbiAgICB2YXIgbmV3TGVmdDtcbiAgICB2YXIgc2Nyb2xsVG9wOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgICB2YXIgc2Nyb2xsTGVmdDsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gICAgdmFyIGFuaW1hdGVUb3AgPSB0b3AgPiAwIHx8IHRvcCA9PT0gMDtcbiAgICB2YXIgYW5pbWF0ZUxlZnQgPSBsZWZ0ID4gMCB8fCBsZWZ0ID09PSAwO1xuXG4gICAgaWYgKHR5cGVvZiBlYXNpbmcgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBlYXNpbmcgPSAnc3dpbmcnO1xuICAgIH1cblxuICAgIGlmIChhbmltYXRlVG9wKSB7XG4gICAgICBjdXJyZW50VG9wID0gZWwuc2Nyb2xsVG9wO1xuXG4gICAgICBpZiAoIWR1cmF0aW9uKSB7XG4gICAgICAgIGVsLnNjcm9sbFRvcCA9IHRvcDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoYW5pbWF0ZUxlZnQpIHtcbiAgICAgIGN1cnJlbnRMZWZ0ID0gZWwuc2Nyb2xsTGVmdDtcblxuICAgICAgaWYgKCFkdXJhdGlvbikge1xuICAgICAgICBlbC5zY3JvbGxMZWZ0ID0gbGVmdDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIWR1cmF0aW9uKSByZXR1cm47XG5cbiAgICBpZiAoYW5pbWF0ZVRvcCkge1xuICAgICAgbWF4VG9wID0gZWwuc2Nyb2xsSGVpZ2h0IC0gZWwub2Zmc2V0SGVpZ2h0O1xuICAgICAgbmV3VG9wID0gTWF0aC5tYXgoTWF0aC5taW4odG9wLCBtYXhUb3ApLCAwKTtcbiAgICB9XG5cbiAgICBpZiAoYW5pbWF0ZUxlZnQpIHtcbiAgICAgIG1heExlZnQgPSBlbC5zY3JvbGxXaWR0aCAtIGVsLm9mZnNldFdpZHRoO1xuICAgICAgbmV3TGVmdCA9IE1hdGgubWF4KE1hdGgubWluKGxlZnQsIG1heExlZnQpLCAwKTtcbiAgICB9XG5cbiAgICB2YXIgc3RhcnRUaW1lID0gbnVsbDtcbiAgICBpZiAoYW5pbWF0ZVRvcCAmJiBuZXdUb3AgPT09IGN1cnJlbnRUb3ApIGFuaW1hdGVUb3AgPSBmYWxzZTtcbiAgICBpZiAoYW5pbWF0ZUxlZnQgJiYgbmV3TGVmdCA9PT0gY3VycmVudExlZnQpIGFuaW1hdGVMZWZ0ID0gZmFsc2U7XG5cbiAgICBmdW5jdGlvbiByZW5kZXIodGltZSkge1xuICAgICAgaWYgKHRpbWUgPT09IHZvaWQgMCkge1xuICAgICAgICB0aW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGFydFRpbWUgPT09IG51bGwpIHtcbiAgICAgICAgc3RhcnRUaW1lID0gdGltZTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByb2dyZXNzID0gTWF0aC5tYXgoTWF0aC5taW4oKHRpbWUgLSBzdGFydFRpbWUpIC8gZHVyYXRpb24sIDEpLCAwKTtcbiAgICAgIHZhciBlYXNlUHJvZ3Jlc3MgPSBlYXNpbmcgPT09ICdsaW5lYXInID8gcHJvZ3Jlc3MgOiAwLjUgLSBNYXRoLmNvcyhwcm9ncmVzcyAqIE1hdGguUEkpIC8gMjtcbiAgICAgIHZhciBkb25lO1xuICAgICAgaWYgKGFuaW1hdGVUb3ApIHNjcm9sbFRvcCA9IGN1cnJlbnRUb3AgKyBlYXNlUHJvZ3Jlc3MgKiAobmV3VG9wIC0gY3VycmVudFRvcCk7XG4gICAgICBpZiAoYW5pbWF0ZUxlZnQpIHNjcm9sbExlZnQgPSBjdXJyZW50TGVmdCArIGVhc2VQcm9ncmVzcyAqIChuZXdMZWZ0IC0gY3VycmVudExlZnQpO1xuXG4gICAgICBpZiAoYW5pbWF0ZVRvcCAmJiBuZXdUb3AgPiBjdXJyZW50VG9wICYmIHNjcm9sbFRvcCA+PSBuZXdUb3ApIHtcbiAgICAgICAgZWwuc2Nyb2xsVG9wID0gbmV3VG9wO1xuICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFuaW1hdGVUb3AgJiYgbmV3VG9wIDwgY3VycmVudFRvcCAmJiBzY3JvbGxUb3AgPD0gbmV3VG9wKSB7XG4gICAgICAgIGVsLnNjcm9sbFRvcCA9IG5ld1RvcDtcbiAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChhbmltYXRlTGVmdCAmJiBuZXdMZWZ0ID4gY3VycmVudExlZnQgJiYgc2Nyb2xsTGVmdCA+PSBuZXdMZWZ0KSB7XG4gICAgICAgIGVsLnNjcm9sbExlZnQgPSBuZXdMZWZ0O1xuICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFuaW1hdGVMZWZ0ICYmIG5ld0xlZnQgPCBjdXJyZW50TGVmdCAmJiBzY3JvbGxMZWZ0IDw9IG5ld0xlZnQpIHtcbiAgICAgICAgZWwuc2Nyb2xsTGVmdCA9IG5ld0xlZnQ7XG4gICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoZG9uZSkge1xuICAgICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGFuaW1hdGVUb3ApIGVsLnNjcm9sbFRvcCA9IHNjcm9sbFRvcDtcbiAgICAgIGlmIChhbmltYXRlTGVmdCkgZWwuc2Nyb2xsTGVmdCA9IHNjcm9sbExlZnQ7XG4gICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlbmRlcik7XG4gICAgfVxuXG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShyZW5kZXIpO1xuICB9KTtcbn0gLy8gc2Nyb2xsVG9wKHRvcCwgZHVyYXRpb24sIGVhc2luZywgY2FsbGJhY2spIHtcblxuXG5mdW5jdGlvbiBzY3JvbGxUb3AoKSB7XG4gIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgfVxuXG4gIHZhciB0b3AgPSBhcmdzWzBdLFxuICAgICAgZHVyYXRpb24gPSBhcmdzWzFdLFxuICAgICAgZWFzaW5nID0gYXJnc1syXSxcbiAgICAgIGNhbGxiYWNrID0gYXJnc1szXTtcblxuICBpZiAoYXJncy5sZW5ndGggPT09IDMgJiYgdHlwZW9mIGVhc2luZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRvcCA9IGFyZ3NbMF07XG4gICAgZHVyYXRpb24gPSBhcmdzWzFdO1xuICAgIGNhbGxiYWNrID0gYXJnc1syXTtcbiAgICBlYXNpbmcgPSBhcmdzWzNdO1xuICB9XG5cbiAgdmFyIGRvbSA9IHRoaXM7XG5cbiAgaWYgKHR5cGVvZiB0b3AgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKGRvbS5sZW5ndGggPiAwKSByZXR1cm4gZG9tWzBdLnNjcm9sbFRvcDtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBkb20uc2Nyb2xsVG8odW5kZWZpbmVkLCB0b3AsIGR1cmF0aW9uLCBlYXNpbmcsIGNhbGxiYWNrKTtcbn1cblxuZnVuY3Rpb24gc2Nyb2xsTGVmdCgpIHtcbiAgZm9yICh2YXIgX2xlbjMgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4zKSwgX2tleTMgPSAwOyBfa2V5MyA8IF9sZW4zOyBfa2V5MysrKSB7XG4gICAgYXJnc1tfa2V5M10gPSBhcmd1bWVudHNbX2tleTNdO1xuICB9XG5cbiAgdmFyIGxlZnQgPSBhcmdzWzBdLFxuICAgICAgZHVyYXRpb24gPSBhcmdzWzFdLFxuICAgICAgZWFzaW5nID0gYXJnc1syXSxcbiAgICAgIGNhbGxiYWNrID0gYXJnc1szXTtcblxuICBpZiAoYXJncy5sZW5ndGggPT09IDMgJiYgdHlwZW9mIGVhc2luZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGxlZnQgPSBhcmdzWzBdO1xuICAgIGR1cmF0aW9uID0gYXJnc1sxXTtcbiAgICBjYWxsYmFjayA9IGFyZ3NbMl07XG4gICAgZWFzaW5nID0gYXJnc1szXTtcbiAgfVxuXG4gIHZhciBkb20gPSB0aGlzO1xuXG4gIGlmICh0eXBlb2YgbGVmdCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAoZG9tLmxlbmd0aCA+IDApIHJldHVybiBkb21bMF0uc2Nyb2xsTGVmdDtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBkb20uc2Nyb2xsVG8obGVmdCwgdW5kZWZpbmVkLCBkdXJhdGlvbiwgZWFzaW5nLCBjYWxsYmFjayk7XG59XG5cbmZ1bmN0aW9uIGFuaW1hdGUoaW5pdGlhbFByb3BzLCBpbml0aWFsUGFyYW1zKSB7XG4gIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgdmFyIGVscyA9IHRoaXM7XG4gIHZhciBhID0ge1xuICAgIHByb3BzOiBPYmplY3QuYXNzaWduKHt9LCBpbml0aWFsUHJvcHMpLFxuICAgIHBhcmFtczogT2JqZWN0LmFzc2lnbih7XG4gICAgICBkdXJhdGlvbjogMzAwLFxuICAgICAgZWFzaW5nOiAnc3dpbmcnIC8vIG9yICdsaW5lYXInXG5cbiAgICAgIC8qIENhbGxiYWNrc1xuICAgICAgYmVnaW4oZWxlbWVudHMpXG4gICAgICBjb21wbGV0ZShlbGVtZW50cylcbiAgICAgIHByb2dyZXNzKGVsZW1lbnRzLCBjb21wbGV0ZSwgcmVtYWluaW5nLCBzdGFydCwgdHdlZW5WYWx1ZSlcbiAgICAgICovXG5cbiAgICB9LCBpbml0aWFsUGFyYW1zKSxcbiAgICBlbGVtZW50czogZWxzLFxuICAgIGFuaW1hdGluZzogZmFsc2UsXG4gICAgcXVlOiBbXSxcbiAgICBlYXNpbmdQcm9ncmVzczogZnVuY3Rpb24gZWFzaW5nUHJvZ3Jlc3MoZWFzaW5nLCBwcm9ncmVzcykge1xuICAgICAgaWYgKGVhc2luZyA9PT0gJ3N3aW5nJykge1xuICAgICAgICByZXR1cm4gMC41IC0gTWF0aC5jb3MocHJvZ3Jlc3MgKiBNYXRoLlBJKSAvIDI7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgZWFzaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBlYXNpbmcocHJvZ3Jlc3MpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJvZ3Jlc3M7XG4gICAgfSxcbiAgICBzdG9wOiBmdW5jdGlvbiBzdG9wKCkge1xuICAgICAgaWYgKGEuZnJhbWVJZCkge1xuICAgICAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUoYS5mcmFtZUlkKTtcbiAgICAgIH1cblxuICAgICAgYS5hbmltYXRpbmcgPSBmYWxzZTtcbiAgICAgIGEuZWxlbWVudHMuZWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBlbDtcbiAgICAgICAgZGVsZXRlIGVsZW1lbnQuZG9tN0FuaW1hdGVJbnN0YW5jZTtcbiAgICAgIH0pO1xuICAgICAgYS5xdWUgPSBbXTtcbiAgICB9LFxuICAgIGRvbmU6IGZ1bmN0aW9uIGRvbmUoY29tcGxldGUpIHtcbiAgICAgIGEuYW5pbWF0aW5nID0gZmFsc2U7XG4gICAgICBhLmVsZW1lbnRzLmVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgIHZhciBlbGVtZW50ID0gZWw7XG4gICAgICAgIGRlbGV0ZSBlbGVtZW50LmRvbTdBbmltYXRlSW5zdGFuY2U7XG4gICAgICB9KTtcbiAgICAgIGlmIChjb21wbGV0ZSkgY29tcGxldGUoZWxzKTtcblxuICAgICAgaWYgKGEucXVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdmFyIHF1ZSA9IGEucXVlLnNoaWZ0KCk7XG4gICAgICAgIGEuYW5pbWF0ZShxdWVbMF0sIHF1ZVsxXSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBhbmltYXRlOiBmdW5jdGlvbiBhbmltYXRlKHByb3BzLCBwYXJhbXMpIHtcbiAgICAgIGlmIChhLmFuaW1hdGluZykge1xuICAgICAgICBhLnF1ZS5wdXNoKFtwcm9wcywgcGFyYW1zXSk7XG4gICAgICAgIHJldHVybiBhO1xuICAgICAgfVxuXG4gICAgICB2YXIgZWxlbWVudHMgPSBbXTsgLy8gRGVmaW5lICYgQ2FjaGUgSW5pdGlhbHMgJiBVbml0c1xuXG4gICAgICBhLmVsZW1lbnRzLmVhY2goZnVuY3Rpb24gKGVsLCBpbmRleCkge1xuICAgICAgICB2YXIgaW5pdGlhbEZ1bGxWYWx1ZTtcbiAgICAgICAgdmFyIGluaXRpYWxWYWx1ZTtcbiAgICAgICAgdmFyIHVuaXQ7XG4gICAgICAgIHZhciBmaW5hbFZhbHVlO1xuICAgICAgICB2YXIgZmluYWxGdWxsVmFsdWU7XG4gICAgICAgIGlmICghZWwuZG9tN0FuaW1hdGVJbnN0YW5jZSkgYS5lbGVtZW50c1tpbmRleF0uZG9tN0FuaW1hdGVJbnN0YW5jZSA9IGE7XG4gICAgICAgIGVsZW1lbnRzW2luZGV4XSA9IHtcbiAgICAgICAgICBjb250YWluZXI6IGVsXG4gICAgICAgIH07XG4gICAgICAgIE9iamVjdC5rZXlzKHByb3BzKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgICAgaW5pdGlhbEZ1bGxWYWx1ZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKHByb3ApLnJlcGxhY2UoJywnLCAnLicpO1xuICAgICAgICAgIGluaXRpYWxWYWx1ZSA9IHBhcnNlRmxvYXQoaW5pdGlhbEZ1bGxWYWx1ZSk7XG4gICAgICAgICAgdW5pdCA9IGluaXRpYWxGdWxsVmFsdWUucmVwbGFjZShpbml0aWFsVmFsdWUsICcnKTtcbiAgICAgICAgICBmaW5hbFZhbHVlID0gcGFyc2VGbG9hdChwcm9wc1twcm9wXSk7XG4gICAgICAgICAgZmluYWxGdWxsVmFsdWUgPSBwcm9wc1twcm9wXSArIHVuaXQ7XG4gICAgICAgICAgZWxlbWVudHNbaW5kZXhdW3Byb3BdID0ge1xuICAgICAgICAgICAgaW5pdGlhbEZ1bGxWYWx1ZTogaW5pdGlhbEZ1bGxWYWx1ZSxcbiAgICAgICAgICAgIGluaXRpYWxWYWx1ZTogaW5pdGlhbFZhbHVlLFxuICAgICAgICAgICAgdW5pdDogdW5pdCxcbiAgICAgICAgICAgIGZpbmFsVmFsdWU6IGZpbmFsVmFsdWUsXG4gICAgICAgICAgICBmaW5hbEZ1bGxWYWx1ZTogZmluYWxGdWxsVmFsdWUsXG4gICAgICAgICAgICBjdXJyZW50VmFsdWU6IGluaXRpYWxWYWx1ZVxuICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICB2YXIgc3RhcnRUaW1lID0gbnVsbDtcbiAgICAgIHZhciB0aW1lO1xuICAgICAgdmFyIGVsZW1lbnRzRG9uZSA9IDA7XG4gICAgICB2YXIgcHJvcHNEb25lID0gMDtcbiAgICAgIHZhciBkb25lO1xuICAgICAgdmFyIGJlZ2FuID0gZmFsc2U7XG4gICAgICBhLmFuaW1hdGluZyA9IHRydWU7XG5cbiAgICAgIGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgdGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgICB2YXIgcHJvZ3Jlc3M7XG4gICAgICAgIHZhciBlYXNlUHJvZ3Jlc3M7IC8vIGxldCBlbDtcblxuICAgICAgICBpZiAoIWJlZ2FuKSB7XG4gICAgICAgICAgYmVnYW4gPSB0cnVlO1xuICAgICAgICAgIGlmIChwYXJhbXMuYmVnaW4pIHBhcmFtcy5iZWdpbihlbHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0YXJ0VGltZSA9PT0gbnVsbCkge1xuICAgICAgICAgIHN0YXJ0VGltZSA9IHRpbWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFyYW1zLnByb2dyZXNzKSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgICAgcGFyYW1zLnByb2dyZXNzKGVscywgTWF0aC5tYXgoTWF0aC5taW4oKHRpbWUgLSBzdGFydFRpbWUpIC8gcGFyYW1zLmR1cmF0aW9uLCAxKSwgMCksIHN0YXJ0VGltZSArIHBhcmFtcy5kdXJhdGlvbiAtIHRpbWUgPCAwID8gMCA6IHN0YXJ0VGltZSArIHBhcmFtcy5kdXJhdGlvbiAtIHRpbWUsIHN0YXJ0VGltZSk7XG4gICAgICAgIH1cblxuICAgICAgICBlbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgICAgdmFyIGVsID0gZWxlbWVudDtcbiAgICAgICAgICBpZiAoZG9uZSB8fCBlbC5kb25lKSByZXR1cm47XG4gICAgICAgICAgT2JqZWN0LmtleXMocHJvcHMpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgICAgICAgIGlmIChkb25lIHx8IGVsLmRvbmUpIHJldHVybjtcbiAgICAgICAgICAgIHByb2dyZXNzID0gTWF0aC5tYXgoTWF0aC5taW4oKHRpbWUgLSBzdGFydFRpbWUpIC8gcGFyYW1zLmR1cmF0aW9uLCAxKSwgMCk7XG4gICAgICAgICAgICBlYXNlUHJvZ3Jlc3MgPSBhLmVhc2luZ1Byb2dyZXNzKHBhcmFtcy5lYXNpbmcsIHByb2dyZXNzKTtcbiAgICAgICAgICAgIHZhciBfZWwkcHJvcCA9IGVsW3Byb3BdLFxuICAgICAgICAgICAgICAgIGluaXRpYWxWYWx1ZSA9IF9lbCRwcm9wLmluaXRpYWxWYWx1ZSxcbiAgICAgICAgICAgICAgICBmaW5hbFZhbHVlID0gX2VsJHByb3AuZmluYWxWYWx1ZSxcbiAgICAgICAgICAgICAgICB1bml0ID0gX2VsJHByb3AudW5pdDtcbiAgICAgICAgICAgIGVsW3Byb3BdLmN1cnJlbnRWYWx1ZSA9IGluaXRpYWxWYWx1ZSArIGVhc2VQcm9ncmVzcyAqIChmaW5hbFZhbHVlIC0gaW5pdGlhbFZhbHVlKTtcbiAgICAgICAgICAgIHZhciBjdXJyZW50VmFsdWUgPSBlbFtwcm9wXS5jdXJyZW50VmFsdWU7XG5cbiAgICAgICAgICAgIGlmIChmaW5hbFZhbHVlID4gaW5pdGlhbFZhbHVlICYmIGN1cnJlbnRWYWx1ZSA+PSBmaW5hbFZhbHVlIHx8IGZpbmFsVmFsdWUgPCBpbml0aWFsVmFsdWUgJiYgY3VycmVudFZhbHVlIDw9IGZpbmFsVmFsdWUpIHtcbiAgICAgICAgICAgICAgZWwuY29udGFpbmVyLnN0eWxlW3Byb3BdID0gZmluYWxWYWx1ZSArIHVuaXQ7XG4gICAgICAgICAgICAgIHByb3BzRG9uZSArPSAxO1xuXG4gICAgICAgICAgICAgIGlmIChwcm9wc0RvbmUgPT09IE9iamVjdC5rZXlzKHByb3BzKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBlbC5kb25lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBlbGVtZW50c0RvbmUgKz0gMTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChlbGVtZW50c0RvbmUgPT09IGVsZW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICAgIGEuZG9uZShwYXJhbXMuY29tcGxldGUpO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGVsLmNvbnRhaW5lci5zdHlsZVtwcm9wXSA9IGN1cnJlbnRWYWx1ZSArIHVuaXQ7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoZG9uZSkgcmV0dXJuOyAvLyBUaGVuIGNhbGxcblxuICAgICAgICBhLmZyYW1lSWQgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlbmRlcik7XG4gICAgICB9XG5cbiAgICAgIGEuZnJhbWVJZCA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVuZGVyKTtcbiAgICAgIHJldHVybiBhO1xuICAgIH1cbiAgfTtcblxuICBpZiAoYS5lbGVtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gZWxzO1xuICB9XG5cbiAgdmFyIGFuaW1hdGVJbnN0YW5jZTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGEuZWxlbWVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAoYS5lbGVtZW50c1tpXS5kb203QW5pbWF0ZUluc3RhbmNlKSB7XG4gICAgICBhbmltYXRlSW5zdGFuY2UgPSBhLmVsZW1lbnRzW2ldLmRvbTdBbmltYXRlSW5zdGFuY2U7XG4gICAgfSBlbHNlIGEuZWxlbWVudHNbaV0uZG9tN0FuaW1hdGVJbnN0YW5jZSA9IGE7XG4gIH1cblxuICBpZiAoIWFuaW1hdGVJbnN0YW5jZSkge1xuICAgIGFuaW1hdGVJbnN0YW5jZSA9IGE7XG4gIH1cblxuICBpZiAoaW5pdGlhbFByb3BzID09PSAnc3RvcCcpIHtcbiAgICBhbmltYXRlSW5zdGFuY2Uuc3RvcCgpO1xuICB9IGVsc2Uge1xuICAgIGFuaW1hdGVJbnN0YW5jZS5hbmltYXRlKGEucHJvcHMsIGEucGFyYW1zKTtcbiAgfVxuXG4gIHJldHVybiBlbHM7XG59XG5cbmZ1bmN0aW9uIHN0b3AoKSB7XG4gIHZhciBlbHMgPSB0aGlzO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZWxzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKGVsc1tpXS5kb203QW5pbWF0ZUluc3RhbmNlKSB7XG4gICAgICBlbHNbaV0uZG9tN0FuaW1hdGVJbnN0YW5jZS5zdG9wKCk7XG4gICAgfVxuICB9XG59XG5cbnZhciBub1RyaWdnZXIgPSAncmVzaXplIHNjcm9sbCcuc3BsaXQoJyAnKTtcblxuZnVuY3Rpb24gc2hvcnRjdXQobmFtZSkge1xuICBmdW5jdGlvbiBldmVudEhhbmRsZXIoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgYXJnc1swXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAobm9UcmlnZ2VyLmluZGV4T2YobmFtZSkgPCAwKSB7XG4gICAgICAgICAgaWYgKG5hbWUgaW4gdGhpc1tpXSkgdGhpc1tpXVtuYW1lXSgpO2Vsc2Uge1xuICAgICAgICAgICAgJCh0aGlzW2ldKS50cmlnZ2VyKG5hbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5vbi5hcHBseSh0aGlzLCBbbmFtZV0uY29uY2F0KGFyZ3MpKTtcbiAgfVxuXG4gIHJldHVybiBldmVudEhhbmRsZXI7XG59XG5cbnZhciBjbGljayA9IHNob3J0Y3V0KCdjbGljaycpO1xudmFyIGJsdXIgPSBzaG9ydGN1dCgnYmx1cicpO1xudmFyIGZvY3VzID0gc2hvcnRjdXQoJ2ZvY3VzJyk7XG52YXIgZm9jdXNpbiA9IHNob3J0Y3V0KCdmb2N1c2luJyk7XG52YXIgZm9jdXNvdXQgPSBzaG9ydGN1dCgnZm9jdXNvdXQnKTtcbnZhciBrZXl1cCA9IHNob3J0Y3V0KCdrZXl1cCcpO1xudmFyIGtleWRvd24gPSBzaG9ydGN1dCgna2V5ZG93bicpO1xudmFyIGtleXByZXNzID0gc2hvcnRjdXQoJ2tleXByZXNzJyk7XG52YXIgc3VibWl0ID0gc2hvcnRjdXQoJ3N1Ym1pdCcpO1xudmFyIGNoYW5nZSA9IHNob3J0Y3V0KCdjaGFuZ2UnKTtcbnZhciBtb3VzZWRvd24gPSBzaG9ydGN1dCgnbW91c2Vkb3duJyk7XG52YXIgbW91c2Vtb3ZlID0gc2hvcnRjdXQoJ21vdXNlbW92ZScpO1xudmFyIG1vdXNldXAgPSBzaG9ydGN1dCgnbW91c2V1cCcpO1xudmFyIG1vdXNlZW50ZXIgPSBzaG9ydGN1dCgnbW91c2VlbnRlcicpO1xudmFyIG1vdXNlbGVhdmUgPSBzaG9ydGN1dCgnbW91c2VsZWF2ZScpO1xudmFyIG1vdXNlb3V0ID0gc2hvcnRjdXQoJ21vdXNlb3V0Jyk7XG52YXIgbW91c2VvdmVyID0gc2hvcnRjdXQoJ21vdXNlb3ZlcicpO1xudmFyIHRvdWNoc3RhcnQgPSBzaG9ydGN1dCgndG91Y2hzdGFydCcpO1xudmFyIHRvdWNoZW5kID0gc2hvcnRjdXQoJ3RvdWNoZW5kJyk7XG52YXIgdG91Y2htb3ZlID0gc2hvcnRjdXQoJ3RvdWNobW92ZScpO1xudmFyIHJlc2l6ZSA9IHNob3J0Y3V0KCdyZXNpemUnKTtcbnZhciBzY3JvbGwgPSBzaG9ydGN1dCgnc2Nyb2xsJyk7XG5cbmV4cG9ydCBkZWZhdWx0ICQ7XG5leHBvcnQgeyAkLCBhZGQsIGFkZENsYXNzLCBhbmltYXRlLCBhbmltYXRpb25FbmQsIGFwcGVuZCwgYXBwZW5kVG8sIGF0dHIsIGJsdXIsIGNoYW5nZSwgY2hpbGRyZW4sIGNsaWNrLCBjbG9zZXN0LCBjc3MsIGRhdGEsIGRhdGFzZXQsIGRldGFjaCwgZWFjaCwgZW1wdHksIGVxLCBmaWx0ZXIsIGZpbmQsIGZvY3VzLCBmb2N1c2luLCBmb2N1c291dCwgaGFzQ2xhc3MsIGhlaWdodCwgaGlkZSwgaHRtbCwgaW5kZXgsIGluc2VydEFmdGVyLCBpbnNlcnRCZWZvcmUsIGlzLCBrZXlkb3duLCBrZXlwcmVzcywga2V5dXAsIG1vdXNlZG93biwgbW91c2VlbnRlciwgbW91c2VsZWF2ZSwgbW91c2Vtb3ZlLCBtb3VzZW91dCwgbW91c2VvdmVyLCBtb3VzZXVwLCBuZXh0LCBuZXh0QWxsLCBvZmYsIG9mZnNldCwgb24sIG9uY2UsIG91dGVySGVpZ2h0LCBvdXRlcldpZHRoLCBwYXJlbnQsIHBhcmVudHMsIHByZXBlbmQsIHByZXBlbmRUbywgcHJldiwgcHJldkFsbCwgcHJvcCwgcmVtb3ZlLCByZW1vdmVBdHRyLCByZW1vdmVDbGFzcywgcmVtb3ZlRGF0YSwgcmVzaXplLCBzY3JvbGwsIHNjcm9sbExlZnQsIHNjcm9sbFRvLCBzY3JvbGxUb3AsIHNob3csIHNpYmxpbmdzLCBzdG9wLCBzdHlsZXMsIHN1Ym1pdCwgdGV4dCwgdG9nZ2xlQ2xhc3MsIHRvdWNoZW5kLCB0b3VjaG1vdmUsIHRvdWNoc3RhcnQsIHRyYW5zZm9ybSwgdHJhbnNpdGlvbiwgdHJhbnNpdGlvbkVuZCwgdHJpZ2dlciwgdmFsLCB2YWx1ZSwgd2lkdGggfTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9kb203L2RvbTcuZXNtLmpzIiwiaW1wb3J0IHsgZ2V0V2luZG93IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5pbXBvcnQgeyBnZXRTdXBwb3J0IH0gZnJvbSAnLi9nZXQtc3VwcG9ydCc7XG52YXIgZGV2aWNlO1xuXG5mdW5jdGlvbiBjYWxjRGV2aWNlKF90ZW1wKSB7XG4gIHZhciBfcmVmID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAsXG4gICAgICB1c2VyQWdlbnQgPSBfcmVmLnVzZXJBZ2VudDtcblxuICB2YXIgc3VwcG9ydCA9IGdldFN1cHBvcnQoKTtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICB2YXIgcGxhdGZvcm0gPSB3aW5kb3cubmF2aWdhdG9yLnBsYXRmb3JtO1xuICB2YXIgdWEgPSB1c2VyQWdlbnQgfHwgd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG4gIHZhciBkZXZpY2UgPSB7XG4gICAgaW9zOiBmYWxzZSxcbiAgICBhbmRyb2lkOiBmYWxzZVxuICB9O1xuICB2YXIgc2NyZWVuV2lkdGggPSB3aW5kb3cuc2NyZWVuLndpZHRoO1xuICB2YXIgc2NyZWVuSGVpZ2h0ID0gd2luZG93LnNjcmVlbi5oZWlnaHQ7XG4gIHZhciBhbmRyb2lkID0gdWEubWF0Y2goLyhBbmRyb2lkKTs/W1xcc1xcL10rKFtcXGQuXSspPy8pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgdmFyIGlwYWQgPSB1YS5tYXRjaCgvKGlQYWQpLipPU1xccyhbXFxkX10rKS8pO1xuICB2YXIgaXBvZCA9IHVhLm1hdGNoKC8oaVBvZCkoLipPU1xccyhbXFxkX10rKSk/Lyk7XG4gIHZhciBpcGhvbmUgPSAhaXBhZCAmJiB1YS5tYXRjaCgvKGlQaG9uZVxcc09TfGlPUylcXHMoW1xcZF9dKykvKTtcbiAgdmFyIHdpbmRvd3MgPSBwbGF0Zm9ybSA9PT0gJ1dpbjMyJztcbiAgdmFyIG1hY29zID0gcGxhdGZvcm0gPT09ICdNYWNJbnRlbCc7IC8vIGlQYWRPcyAxMyBmaXhcblxuICB2YXIgaVBhZFNjcmVlbnMgPSBbJzEwMjR4MTM2NicsICcxMzY2eDEwMjQnLCAnODM0eDExOTQnLCAnMTE5NHg4MzQnLCAnODM0eDExMTInLCAnMTExMng4MzQnLCAnNzY4eDEwMjQnLCAnMTAyNHg3NjgnLCAnODIweDExODAnLCAnMTE4MHg4MjAnLCAnODEweDEwODAnLCAnMTA4MHg4MTAnXTtcblxuICBpZiAoIWlwYWQgJiYgbWFjb3MgJiYgc3VwcG9ydC50b3VjaCAmJiBpUGFkU2NyZWVucy5pbmRleE9mKHNjcmVlbldpZHRoICsgXCJ4XCIgKyBzY3JlZW5IZWlnaHQpID49IDApIHtcbiAgICBpcGFkID0gdWEubWF0Y2goLyhWZXJzaW9uKVxcLyhbXFxkLl0rKS8pO1xuICAgIGlmICghaXBhZCkgaXBhZCA9IFswLCAxLCAnMTNfMF8wJ107XG4gICAgbWFjb3MgPSBmYWxzZTtcbiAgfSAvLyBBbmRyb2lkXG5cblxuICBpZiAoYW5kcm9pZCAmJiAhd2luZG93cykge1xuICAgIGRldmljZS5vcyA9ICdhbmRyb2lkJztcbiAgICBkZXZpY2UuYW5kcm9pZCA9IHRydWU7XG4gIH1cblxuICBpZiAoaXBhZCB8fCBpcGhvbmUgfHwgaXBvZCkge1xuICAgIGRldmljZS5vcyA9ICdpb3MnO1xuICAgIGRldmljZS5pb3MgPSB0cnVlO1xuICB9IC8vIEV4cG9ydCBvYmplY3RcblxuXG4gIHJldHVybiBkZXZpY2U7XG59XG5cbmZ1bmN0aW9uIGdldERldmljZShvdmVycmlkZXMpIHtcbiAgaWYgKG92ZXJyaWRlcyA9PT0gdm9pZCAwKSB7XG4gICAgb3ZlcnJpZGVzID0ge307XG4gIH1cblxuICBpZiAoIWRldmljZSkge1xuICAgIGRldmljZSA9IGNhbGNEZXZpY2Uob3ZlcnJpZGVzKTtcbiAgfVxuXG4gIHJldHVybiBkZXZpY2U7XG59XG5cbmV4cG9ydCB7IGdldERldmljZSB9O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL3V0aWxzL2dldC1kZXZpY2UuanMiLCJpbXBvcnQgeyBnZXRXaW5kb3cgfSBmcm9tICdzc3Itd2luZG93JztcbnZhciBicm93c2VyO1xuXG5mdW5jdGlvbiBjYWxjQnJvd3NlcigpIHtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuXG4gIGZ1bmN0aW9uIGlzU2FmYXJpKCkge1xuICAgIHZhciB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCk7XG4gICAgcmV0dXJuIHVhLmluZGV4T2YoJ3NhZmFyaScpID49IDAgJiYgdWEuaW5kZXhPZignY2hyb21lJykgPCAwICYmIHVhLmluZGV4T2YoJ2FuZHJvaWQnKSA8IDA7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGlzRWRnZTogISF3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvRWRnZS9nKSxcbiAgICBpc1NhZmFyaTogaXNTYWZhcmkoKSxcbiAgICBpc1dlYlZpZXc6IC8oaVBob25lfGlQb2R8aVBhZCkuKkFwcGxlV2ViS2l0KD8hLipTYWZhcmkpL2kudGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudClcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0QnJvd3NlcigpIHtcbiAgaWYgKCFicm93c2VyKSB7XG4gICAgYnJvd3NlciA9IGNhbGNCcm93c2VyKCk7XG4gIH1cblxuICByZXR1cm4gYnJvd3Nlcjtcbn1cblxuZXhwb3J0IHsgZ2V0QnJvd3NlciB9O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL3V0aWxzL2dldC1icm93c2VyLmpzIiwiaW1wb3J0IHsgZ2V0V2luZG93IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5pbXBvcnQgeyBleHRlbmQgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XG5cbnZhciBzdXBwb3J0c1Jlc2l6ZU9ic2VydmVyID0gZnVuY3Rpb24gc3VwcG9ydHNSZXNpemVPYnNlcnZlcigpIHtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICByZXR1cm4gdHlwZW9mIHdpbmRvdy5SZXNpemVPYnNlcnZlciAhPT0gJ3VuZGVmaW5lZCc7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdyZXNpemUnLFxuICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBleHRlbmQoc3dpcGVyLCB7XG4gICAgICByZXNpemU6IHtcbiAgICAgICAgb2JzZXJ2ZXI6IG51bGwsXG4gICAgICAgIGNyZWF0ZU9ic2VydmVyOiBmdW5jdGlvbiBjcmVhdGVPYnNlcnZlcigpIHtcbiAgICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuaW5pdGlhbGl6ZWQpIHJldHVybjtcbiAgICAgICAgICBzd2lwZXIucmVzaXplLm9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKGZ1bmN0aW9uIChlbnRyaWVzKSB7XG4gICAgICAgICAgICB2YXIgd2lkdGggPSBzd2lwZXIud2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gc3dpcGVyLmhlaWdodDtcbiAgICAgICAgICAgIHZhciBuZXdXaWR0aCA9IHdpZHRoO1xuICAgICAgICAgICAgdmFyIG5ld0hlaWdodCA9IGhlaWdodDtcbiAgICAgICAgICAgIGVudHJpZXMuZm9yRWFjaChmdW5jdGlvbiAoX3JlZikge1xuICAgICAgICAgICAgICB2YXIgY29udGVudEJveFNpemUgPSBfcmVmLmNvbnRlbnRCb3hTaXplLFxuICAgICAgICAgICAgICAgICAgY29udGVudFJlY3QgPSBfcmVmLmNvbnRlbnRSZWN0LFxuICAgICAgICAgICAgICAgICAgdGFyZ2V0ID0gX3JlZi50YXJnZXQ7XG4gICAgICAgICAgICAgIGlmICh0YXJnZXQgJiYgdGFyZ2V0ICE9PSBzd2lwZXIuZWwpIHJldHVybjtcbiAgICAgICAgICAgICAgbmV3V2lkdGggPSBjb250ZW50UmVjdCA/IGNvbnRlbnRSZWN0LndpZHRoIDogKGNvbnRlbnRCb3hTaXplWzBdIHx8IGNvbnRlbnRCb3hTaXplKS5pbmxpbmVTaXplO1xuICAgICAgICAgICAgICBuZXdIZWlnaHQgPSBjb250ZW50UmVjdCA/IGNvbnRlbnRSZWN0LmhlaWdodCA6IChjb250ZW50Qm94U2l6ZVswXSB8fCBjb250ZW50Qm94U2l6ZSkuYmxvY2tTaXplO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChuZXdXaWR0aCAhPT0gd2lkdGggfHwgbmV3SGVpZ2h0ICE9PSBoZWlnaHQpIHtcbiAgICAgICAgICAgICAgc3dpcGVyLnJlc2l6ZS5yZXNpemVIYW5kbGVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc3dpcGVyLnJlc2l6ZS5vYnNlcnZlci5vYnNlcnZlKHN3aXBlci5lbCk7XG4gICAgICAgIH0sXG4gICAgICAgIHJlbW92ZU9ic2VydmVyOiBmdW5jdGlvbiByZW1vdmVPYnNlcnZlcigpIHtcbiAgICAgICAgICBpZiAoc3dpcGVyLnJlc2l6ZS5vYnNlcnZlciAmJiBzd2lwZXIucmVzaXplLm9ic2VydmVyLnVub2JzZXJ2ZSAmJiBzd2lwZXIuZWwpIHtcbiAgICAgICAgICAgIHN3aXBlci5yZXNpemUub2JzZXJ2ZXIudW5vYnNlcnZlKHN3aXBlci5lbCk7XG4gICAgICAgICAgICBzd2lwZXIucmVzaXplLm9ic2VydmVyID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHJlc2l6ZUhhbmRsZXI6IGZ1bmN0aW9uIHJlc2l6ZUhhbmRsZXIoKSB7XG4gICAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLmluaXRpYWxpemVkKSByZXR1cm47XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ2JlZm9yZVJlc2l6ZScpO1xuICAgICAgICAgIHN3aXBlci5lbWl0KCdyZXNpemUnKTtcbiAgICAgICAgfSxcbiAgICAgICAgb3JpZW50YXRpb25DaGFuZ2VIYW5kbGVyOiBmdW5jdGlvbiBvcmllbnRhdGlvbkNoYW5nZUhhbmRsZXIoKSB7XG4gICAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLmluaXRpYWxpemVkKSByZXR1cm47XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ29yaWVudGF0aW9uY2hhbmdlJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBpbml0OiBmdW5jdGlvbiBpbml0KHN3aXBlcikge1xuICAgICAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuXG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5yZXNpemVPYnNlcnZlciAmJiBzdXBwb3J0c1Jlc2l6ZU9ic2VydmVyKCkpIHtcbiAgICAgICAgc3dpcGVyLnJlc2l6ZS5jcmVhdGVPYnNlcnZlcigpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIEVtaXQgcmVzaXplXG5cblxuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHN3aXBlci5yZXNpemUucmVzaXplSGFuZGxlcik7IC8vIEVtaXQgb3JpZW50YXRpb25jaGFuZ2VcblxuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ29yaWVudGF0aW9uY2hhbmdlJywgc3dpcGVyLnJlc2l6ZS5vcmllbnRhdGlvbkNoYW5nZUhhbmRsZXIpO1xuICAgIH0sXG4gICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveShzd2lwZXIpIHtcbiAgICAgIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgICAgIHN3aXBlci5yZXNpemUucmVtb3ZlT2JzZXJ2ZXIoKTtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBzd2lwZXIucmVzaXplLnJlc2l6ZUhhbmRsZXIpO1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ29yaWVudGF0aW9uY2hhbmdlJywgc3dpcGVyLnJlc2l6ZS5vcmllbnRhdGlvbkNoYW5nZUhhbmRsZXIpO1xuICAgIH1cbiAgfVxufTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9tb2R1bGVzL3Jlc2l6ZS9yZXNpemUuanMiLCJmdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5pbXBvcnQgeyBnZXRXaW5kb3cgfSBmcm9tICdzc3Itd2luZG93JztcbmltcG9ydCB7IGJpbmRNb2R1bGVNZXRob2RzIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xudmFyIE9ic2VydmVyID0ge1xuICBhdHRhY2g6IGZ1bmN0aW9uIGF0dGFjaCh0YXJnZXQsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBPYnNlcnZlckZ1bmMgPSB3aW5kb3cuTXV0YXRpb25PYnNlcnZlciB8fCB3aW5kb3cuV2Via2l0TXV0YXRpb25PYnNlcnZlcjtcbiAgICB2YXIgb2JzZXJ2ZXIgPSBuZXcgT2JzZXJ2ZXJGdW5jKGZ1bmN0aW9uIChtdXRhdGlvbnMpIHtcbiAgICAgIC8vIFRoZSBvYnNlcnZlclVwZGF0ZSBldmVudCBzaG91bGQgb25seSBiZSB0cmlnZ2VyZWRcbiAgICAgIC8vIG9uY2UgZGVzcGl0ZSB0aGUgbnVtYmVyIG9mIG11dGF0aW9ucy4gIEFkZGl0aW9uYWxcbiAgICAgIC8vIHRyaWdnZXJzIGFyZSByZWR1bmRhbnQgYW5kIGFyZSB2ZXJ5IGNvc3RseVxuICAgICAgaWYgKG11dGF0aW9ucy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgc3dpcGVyLmVtaXQoJ29ic2VydmVyVXBkYXRlJywgbXV0YXRpb25zWzBdKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgb2JzZXJ2ZXJVcGRhdGUgPSBmdW5jdGlvbiBvYnNlcnZlclVwZGF0ZSgpIHtcbiAgICAgICAgc3dpcGVyLmVtaXQoJ29ic2VydmVyVXBkYXRlJywgbXV0YXRpb25zWzBdKTtcbiAgICAgIH07XG5cbiAgICAgIGlmICh3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKSB7XG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUob2JzZXJ2ZXJVcGRhdGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2luZG93LnNldFRpbWVvdXQob2JzZXJ2ZXJVcGRhdGUsIDApO1xuICAgICAgfVxuICAgIH0pO1xuICAgIG9ic2VydmVyLm9ic2VydmUodGFyZ2V0LCB7XG4gICAgICBhdHRyaWJ1dGVzOiB0eXBlb2Ygb3B0aW9ucy5hdHRyaWJ1dGVzID09PSAndW5kZWZpbmVkJyA/IHRydWUgOiBvcHRpb25zLmF0dHJpYnV0ZXMsXG4gICAgICBjaGlsZExpc3Q6IHR5cGVvZiBvcHRpb25zLmNoaWxkTGlzdCA9PT0gJ3VuZGVmaW5lZCcgPyB0cnVlIDogb3B0aW9ucy5jaGlsZExpc3QsXG4gICAgICBjaGFyYWN0ZXJEYXRhOiB0eXBlb2Ygb3B0aW9ucy5jaGFyYWN0ZXJEYXRhID09PSAndW5kZWZpbmVkJyA/IHRydWUgOiBvcHRpb25zLmNoYXJhY3RlckRhdGFcbiAgICB9KTtcbiAgICBzd2lwZXIub2JzZXJ2ZXIub2JzZXJ2ZXJzLnB1c2gob2JzZXJ2ZXIpO1xuICB9LFxuICBpbml0OiBmdW5jdGlvbiBpbml0KCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLnN1cHBvcnQub2JzZXJ2ZXIgfHwgIXN3aXBlci5wYXJhbXMub2JzZXJ2ZXIpIHJldHVybjtcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLm9ic2VydmVQYXJlbnRzKSB7XG4gICAgICB2YXIgY29udGFpbmVyUGFyZW50cyA9IHN3aXBlci4kZWwucGFyZW50cygpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbnRhaW5lclBhcmVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgc3dpcGVyLm9ic2VydmVyLmF0dGFjaChjb250YWluZXJQYXJlbnRzW2ldKTtcbiAgICAgIH1cbiAgICB9IC8vIE9ic2VydmUgY29udGFpbmVyXG5cblxuICAgIHN3aXBlci5vYnNlcnZlci5hdHRhY2goc3dpcGVyLiRlbFswXSwge1xuICAgICAgY2hpbGRMaXN0OiBzd2lwZXIucGFyYW1zLm9ic2VydmVTbGlkZUNoaWxkcmVuXG4gICAgfSk7IC8vIE9ic2VydmUgd3JhcHBlclxuXG4gICAgc3dpcGVyLm9ic2VydmVyLmF0dGFjaChzd2lwZXIuJHdyYXBwZXJFbFswXSwge1xuICAgICAgYXR0cmlidXRlczogZmFsc2VcbiAgICB9KTtcbiAgfSxcbiAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBzd2lwZXIub2JzZXJ2ZXIub2JzZXJ2ZXJzLmZvckVhY2goZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICBvYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgfSk7XG4gICAgc3dpcGVyLm9ic2VydmVyLm9ic2VydmVycyA9IFtdO1xuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnb2JzZXJ2ZXInLFxuICBwYXJhbXM6IHtcbiAgICBvYnNlcnZlcjogZmFsc2UsXG4gICAgb2JzZXJ2ZVBhcmVudHM6IGZhbHNlLFxuICAgIG9ic2VydmVTbGlkZUNoaWxkcmVuOiBmYWxzZVxuICB9LFxuICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBiaW5kTW9kdWxlTWV0aG9kcyhzd2lwZXIsIHtcbiAgICAgIG9ic2VydmVyOiBfZXh0ZW5kcyh7fSwgT2JzZXJ2ZXIsIHtcbiAgICAgICAgb2JzZXJ2ZXJzOiBbXVxuICAgICAgfSlcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBpbml0OiBmdW5jdGlvbiBpbml0KHN3aXBlcikge1xuICAgICAgc3dpcGVyLm9ic2VydmVyLmluaXQoKTtcbiAgICB9LFxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koc3dpcGVyKSB7XG4gICAgICBzd2lwZXIub2JzZXJ2ZXIuZGVzdHJveSgpO1xuICAgIH1cbiAgfVxufTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9tb2R1bGVzL29ic2VydmVyL29ic2VydmVyLmpzIiwiaW1wb3J0IHsgZXh0ZW5kIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQge1xuICB1c2VQYXJhbXM6IGZ1bmN0aW9uIHVzZVBhcmFtcyhpbnN0YW5jZVBhcmFtcykge1xuICAgIHZhciBpbnN0YW5jZSA9IHRoaXM7XG4gICAgaWYgKCFpbnN0YW5jZS5tb2R1bGVzKSByZXR1cm47XG4gICAgT2JqZWN0LmtleXMoaW5zdGFuY2UubW9kdWxlcykuZm9yRWFjaChmdW5jdGlvbiAobW9kdWxlTmFtZSkge1xuICAgICAgdmFyIG1vZHVsZSA9IGluc3RhbmNlLm1vZHVsZXNbbW9kdWxlTmFtZV07IC8vIEV4dGVuZCBwYXJhbXNcblxuICAgICAgaWYgKG1vZHVsZS5wYXJhbXMpIHtcbiAgICAgICAgZXh0ZW5kKGluc3RhbmNlUGFyYW1zLCBtb2R1bGUucGFyYW1zKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgdXNlTW9kdWxlczogZnVuY3Rpb24gdXNlTW9kdWxlcyhtb2R1bGVzUGFyYW1zKSB7XG4gICAgaWYgKG1vZHVsZXNQYXJhbXMgPT09IHZvaWQgMCkge1xuICAgICAgbW9kdWxlc1BhcmFtcyA9IHt9O1xuICAgIH1cblxuICAgIHZhciBpbnN0YW5jZSA9IHRoaXM7XG4gICAgaWYgKCFpbnN0YW5jZS5tb2R1bGVzKSByZXR1cm47XG4gICAgT2JqZWN0LmtleXMoaW5zdGFuY2UubW9kdWxlcykuZm9yRWFjaChmdW5jdGlvbiAobW9kdWxlTmFtZSkge1xuICAgICAgdmFyIG1vZHVsZSA9IGluc3RhbmNlLm1vZHVsZXNbbW9kdWxlTmFtZV07XG4gICAgICB2YXIgbW9kdWxlUGFyYW1zID0gbW9kdWxlc1BhcmFtc1ttb2R1bGVOYW1lXSB8fCB7fTsgLy8gQWRkIGV2ZW50IGxpc3RlbmVyc1xuXG4gICAgICBpZiAobW9kdWxlLm9uICYmIGluc3RhbmNlLm9uKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKG1vZHVsZS5vbikuZm9yRWFjaChmdW5jdGlvbiAobW9kdWxlRXZlbnROYW1lKSB7XG4gICAgICAgICAgaW5zdGFuY2Uub24obW9kdWxlRXZlbnROYW1lLCBtb2R1bGUub25bbW9kdWxlRXZlbnROYW1lXSk7XG4gICAgICAgIH0pO1xuICAgICAgfSAvLyBNb2R1bGUgY3JlYXRlIGNhbGxiYWNrXG5cblxuICAgICAgaWYgKG1vZHVsZS5jcmVhdGUpIHtcbiAgICAgICAgbW9kdWxlLmNyZWF0ZS5iaW5kKGluc3RhbmNlKShtb2R1bGVQYXJhbXMpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9tb2R1bGFyLmpzIiwiLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZXJzY29yZS1kYW5nbGUgKi9cbmV4cG9ydCBkZWZhdWx0IHtcbiAgb246IGZ1bmN0aW9uIG9uKGV2ZW50cywgaGFuZGxlciwgcHJpb3JpdHkpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgaWYgKHR5cGVvZiBoYW5kbGVyICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gc2VsZjtcbiAgICB2YXIgbWV0aG9kID0gcHJpb3JpdHkgPyAndW5zaGlmdCcgOiAncHVzaCc7XG4gICAgZXZlbnRzLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdKSBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0gPSBbXTtcbiAgICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XVttZXRob2RdKGhhbmRsZXIpO1xuICAgIH0pO1xuICAgIHJldHVybiBzZWxmO1xuICB9LFxuICBvbmNlOiBmdW5jdGlvbiBvbmNlKGV2ZW50cywgaGFuZGxlciwgcHJpb3JpdHkpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgaWYgKHR5cGVvZiBoYW5kbGVyICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gc2VsZjtcblxuICAgIGZ1bmN0aW9uIG9uY2VIYW5kbGVyKCkge1xuICAgICAgc2VsZi5vZmYoZXZlbnRzLCBvbmNlSGFuZGxlcik7XG5cbiAgICAgIGlmIChvbmNlSGFuZGxlci5fX2VtaXR0ZXJQcm94eSkge1xuICAgICAgICBkZWxldGUgb25jZUhhbmRsZXIuX19lbWl0dGVyUHJveHk7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICBoYW5kbGVyLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICAgIH1cblxuICAgIG9uY2VIYW5kbGVyLl9fZW1pdHRlclByb3h5ID0gaGFuZGxlcjtcbiAgICByZXR1cm4gc2VsZi5vbihldmVudHMsIG9uY2VIYW5kbGVyLCBwcmlvcml0eSk7XG4gIH0sXG4gIG9uQW55OiBmdW5jdGlvbiBvbkFueShoYW5kbGVyLCBwcmlvcml0eSkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBpZiAodHlwZW9mIGhhbmRsZXIgIT09ICdmdW5jdGlvbicpIHJldHVybiBzZWxmO1xuICAgIHZhciBtZXRob2QgPSBwcmlvcml0eSA/ICd1bnNoaWZ0JyA6ICdwdXNoJztcblxuICAgIGlmIChzZWxmLmV2ZW50c0FueUxpc3RlbmVycy5pbmRleE9mKGhhbmRsZXIpIDwgMCkge1xuICAgICAgc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnNbbWV0aG9kXShoYW5kbGVyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2VsZjtcbiAgfSxcbiAgb2ZmQW55OiBmdW5jdGlvbiBvZmZBbnkoaGFuZGxlcikge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBpZiAoIXNlbGYuZXZlbnRzQW55TGlzdGVuZXJzKSByZXR1cm4gc2VsZjtcbiAgICB2YXIgaW5kZXggPSBzZWxmLmV2ZW50c0FueUxpc3RlbmVycy5pbmRleE9mKGhhbmRsZXIpO1xuXG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgIHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlbGY7XG4gIH0sXG4gIG9mZjogZnVuY3Rpb24gb2ZmKGV2ZW50cywgaGFuZGxlcikge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzKSByZXR1cm4gc2VsZjtcbiAgICBldmVudHMuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0gPSBbXTtcbiAgICAgIH0gZWxzZSBpZiAoc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdKSB7XG4gICAgICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudEhhbmRsZXIsIGluZGV4KSB7XG4gICAgICAgICAgaWYgKGV2ZW50SGFuZGxlciA9PT0gaGFuZGxlciB8fCBldmVudEhhbmRsZXIuX19lbWl0dGVyUHJveHkgJiYgZXZlbnRIYW5kbGVyLl9fZW1pdHRlclByb3h5ID09PSBoYW5kbGVyKSB7XG4gICAgICAgICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0uc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBzZWxmO1xuICB9LFxuICBlbWl0OiBmdW5jdGlvbiBlbWl0KCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzKSByZXR1cm4gc2VsZjtcbiAgICB2YXIgZXZlbnRzO1xuICAgIHZhciBkYXRhO1xuICAgIHZhciBjb250ZXh0O1xuXG4gICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBhcmdzWzBdID09PSAnc3RyaW5nJyB8fCBBcnJheS5pc0FycmF5KGFyZ3NbMF0pKSB7XG4gICAgICBldmVudHMgPSBhcmdzWzBdO1xuICAgICAgZGF0YSA9IGFyZ3Muc2xpY2UoMSwgYXJncy5sZW5ndGgpO1xuICAgICAgY29udGV4dCA9IHNlbGY7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV2ZW50cyA9IGFyZ3NbMF0uZXZlbnRzO1xuICAgICAgZGF0YSA9IGFyZ3NbMF0uZGF0YTtcbiAgICAgIGNvbnRleHQgPSBhcmdzWzBdLmNvbnRleHQgfHwgc2VsZjtcbiAgICB9XG5cbiAgICBkYXRhLnVuc2hpZnQoY29udGV4dCk7XG4gICAgdmFyIGV2ZW50c0FycmF5ID0gQXJyYXkuaXNBcnJheShldmVudHMpID8gZXZlbnRzIDogZXZlbnRzLnNwbGl0KCcgJyk7XG4gICAgZXZlbnRzQXJyYXkuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChzZWxmLmV2ZW50c0FueUxpc3RlbmVycyAmJiBzZWxmLmV2ZW50c0FueUxpc3RlbmVycy5sZW5ndGgpIHtcbiAgICAgICAgc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnRIYW5kbGVyKSB7XG4gICAgICAgICAgZXZlbnRIYW5kbGVyLmFwcGx5KGNvbnRleHQsIFtldmVudF0uY29uY2F0KGRhdGEpKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzZWxmLmV2ZW50c0xpc3RlbmVycyAmJiBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0pIHtcbiAgICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50SGFuZGxlcikge1xuICAgICAgICAgIGV2ZW50SGFuZGxlci5hcHBseShjb250ZXh0LCBkYXRhKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHNlbGY7XG4gIH1cbn07XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL2V2ZW50cy1lbWl0dGVyLmpzIiwiaW1wb3J0IHVwZGF0ZVNpemUgZnJvbSAnLi91cGRhdGVTaXplJztcbmltcG9ydCB1cGRhdGVTbGlkZXMgZnJvbSAnLi91cGRhdGVTbGlkZXMnO1xuaW1wb3J0IHVwZGF0ZUF1dG9IZWlnaHQgZnJvbSAnLi91cGRhdGVBdXRvSGVpZ2h0JztcbmltcG9ydCB1cGRhdGVTbGlkZXNPZmZzZXQgZnJvbSAnLi91cGRhdGVTbGlkZXNPZmZzZXQnO1xuaW1wb3J0IHVwZGF0ZVNsaWRlc1Byb2dyZXNzIGZyb20gJy4vdXBkYXRlU2xpZGVzUHJvZ3Jlc3MnO1xuaW1wb3J0IHVwZGF0ZVByb2dyZXNzIGZyb20gJy4vdXBkYXRlUHJvZ3Jlc3MnO1xuaW1wb3J0IHVwZGF0ZVNsaWRlc0NsYXNzZXMgZnJvbSAnLi91cGRhdGVTbGlkZXNDbGFzc2VzJztcbmltcG9ydCB1cGRhdGVBY3RpdmVJbmRleCBmcm9tICcuL3VwZGF0ZUFjdGl2ZUluZGV4JztcbmltcG9ydCB1cGRhdGVDbGlja2VkU2xpZGUgZnJvbSAnLi91cGRhdGVDbGlja2VkU2xpZGUnO1xuZXhwb3J0IGRlZmF1bHQge1xuICB1cGRhdGVTaXplOiB1cGRhdGVTaXplLFxuICB1cGRhdGVTbGlkZXM6IHVwZGF0ZVNsaWRlcyxcbiAgdXBkYXRlQXV0b0hlaWdodDogdXBkYXRlQXV0b0hlaWdodCxcbiAgdXBkYXRlU2xpZGVzT2Zmc2V0OiB1cGRhdGVTbGlkZXNPZmZzZXQsXG4gIHVwZGF0ZVNsaWRlc1Byb2dyZXNzOiB1cGRhdGVTbGlkZXNQcm9ncmVzcyxcbiAgdXBkYXRlUHJvZ3Jlc3M6IHVwZGF0ZVByb2dyZXNzLFxuICB1cGRhdGVTbGlkZXNDbGFzc2VzOiB1cGRhdGVTbGlkZXNDbGFzc2VzLFxuICB1cGRhdGVBY3RpdmVJbmRleDogdXBkYXRlQWN0aXZlSW5kZXgsXG4gIHVwZGF0ZUNsaWNrZWRTbGlkZTogdXBkYXRlQ2xpY2tlZFNsaWRlXG59O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS91cGRhdGUvaW5kZXguanMiLCJpbXBvcnQgeyBleHRlbmQgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlscyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1cGRhdGVTaXplKCkge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIHdpZHRoO1xuICB2YXIgaGVpZ2h0O1xuICB2YXIgJGVsID0gc3dpcGVyLiRlbDtcblxuICBpZiAodHlwZW9mIHN3aXBlci5wYXJhbXMud2lkdGggIT09ICd1bmRlZmluZWQnICYmIHN3aXBlci5wYXJhbXMud2lkdGggIT09IG51bGwpIHtcbiAgICB3aWR0aCA9IHN3aXBlci5wYXJhbXMud2lkdGg7XG4gIH0gZWxzZSB7XG4gICAgd2lkdGggPSAkZWxbMF0uY2xpZW50V2lkdGg7XG4gIH1cblxuICBpZiAodHlwZW9mIHN3aXBlci5wYXJhbXMuaGVpZ2h0ICE9PSAndW5kZWZpbmVkJyAmJiBzd2lwZXIucGFyYW1zLmhlaWdodCAhPT0gbnVsbCkge1xuICAgIGhlaWdodCA9IHN3aXBlci5wYXJhbXMuaGVpZ2h0O1xuICB9IGVsc2Uge1xuICAgIGhlaWdodCA9ICRlbFswXS5jbGllbnRIZWlnaHQ7XG4gIH1cblxuICBpZiAod2lkdGggPT09IDAgJiYgc3dpcGVyLmlzSG9yaXpvbnRhbCgpIHx8IGhlaWdodCA9PT0gMCAmJiBzd2lwZXIuaXNWZXJ0aWNhbCgpKSB7XG4gICAgcmV0dXJuO1xuICB9IC8vIFN1YnRyYWN0IHBhZGRpbmdzXG5cblxuICB3aWR0aCA9IHdpZHRoIC0gcGFyc2VJbnQoJGVsLmNzcygncGFkZGluZy1sZWZ0JykgfHwgMCwgMTApIC0gcGFyc2VJbnQoJGVsLmNzcygncGFkZGluZy1yaWdodCcpIHx8IDAsIDEwKTtcbiAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoJGVsLmNzcygncGFkZGluZy10b3AnKSB8fCAwLCAxMCkgLSBwYXJzZUludCgkZWwuY3NzKCdwYWRkaW5nLWJvdHRvbScpIHx8IDAsIDEwKTtcbiAgaWYgKE51bWJlci5pc05hTih3aWR0aCkpIHdpZHRoID0gMDtcbiAgaWYgKE51bWJlci5pc05hTihoZWlnaHQpKSBoZWlnaHQgPSAwO1xuICBleHRlbmQoc3dpcGVyLCB7XG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0LFxuICAgIHNpemU6IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHdpZHRoIDogaGVpZ2h0XG4gIH0pO1xufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS91cGRhdGUvdXBkYXRlU2l6ZS5qcyIsImltcG9ydCB7IGV4dGVuZCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVwZGF0ZVNsaWRlcygpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG5cbiAgZnVuY3Rpb24gZ2V0RGlyZWN0aW9uTGFiZWwocHJvcGVydHkpIHtcbiAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICByZXR1cm4gcHJvcGVydHk7XG4gICAgfSAvLyBwcmV0dGllci1pZ25vcmVcblxuXG4gICAgcmV0dXJuIHtcbiAgICAgICd3aWR0aCc6ICdoZWlnaHQnLFxuICAgICAgJ21hcmdpbi10b3AnOiAnbWFyZ2luLWxlZnQnLFxuICAgICAgJ21hcmdpbi1ib3R0b20gJzogJ21hcmdpbi1yaWdodCcsXG4gICAgICAnbWFyZ2luLWxlZnQnOiAnbWFyZ2luLXRvcCcsXG4gICAgICAnbWFyZ2luLXJpZ2h0JzogJ21hcmdpbi1ib3R0b20nLFxuICAgICAgJ3BhZGRpbmctbGVmdCc6ICdwYWRkaW5nLXRvcCcsXG4gICAgICAncGFkZGluZy1yaWdodCc6ICdwYWRkaW5nLWJvdHRvbScsXG4gICAgICAnbWFyZ2luUmlnaHQnOiAnbWFyZ2luQm90dG9tJ1xuICAgIH1bcHJvcGVydHldO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0RGlyZWN0aW9uUHJvcGVydHlWYWx1ZShub2RlLCBsYWJlbCkge1xuICAgIHJldHVybiBwYXJzZUZsb2F0KG5vZGUuZ2V0UHJvcGVydHlWYWx1ZShnZXREaXJlY3Rpb25MYWJlbChsYWJlbCkpIHx8IDApO1xuICB9XG5cbiAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gIHZhciAkd3JhcHBlckVsID0gc3dpcGVyLiR3cmFwcGVyRWwsXG4gICAgICBzd2lwZXJTaXplID0gc3dpcGVyLnNpemUsXG4gICAgICBydGwgPSBzd2lwZXIucnRsVHJhbnNsYXRlLFxuICAgICAgd3JvbmdSVEwgPSBzd2lwZXIud3JvbmdSVEw7XG4gIHZhciBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBwYXJhbXMudmlydHVhbC5lbmFibGVkO1xuICB2YXIgcHJldmlvdXNTbGlkZXNMZW5ndGggPSBpc1ZpcnR1YWwgPyBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoIDogc3dpcGVyLnNsaWRlcy5sZW5ndGg7XG4gIHZhciBzbGlkZXMgPSAkd3JhcHBlckVsLmNoaWxkcmVuKFwiLlwiICsgc3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzKTtcbiAgdmFyIHNsaWRlc0xlbmd0aCA9IGlzVmlydHVhbCA/IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggOiBzbGlkZXMubGVuZ3RoO1xuICB2YXIgc25hcEdyaWQgPSBbXTtcbiAgdmFyIHNsaWRlc0dyaWQgPSBbXTtcbiAgdmFyIHNsaWRlc1NpemVzR3JpZCA9IFtdO1xuICB2YXIgb2Zmc2V0QmVmb3JlID0gcGFyYW1zLnNsaWRlc09mZnNldEJlZm9yZTtcblxuICBpZiAodHlwZW9mIG9mZnNldEJlZm9yZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9mZnNldEJlZm9yZSA9IHBhcmFtcy5zbGlkZXNPZmZzZXRCZWZvcmUuY2FsbChzd2lwZXIpO1xuICB9XG5cbiAgdmFyIG9mZnNldEFmdGVyID0gcGFyYW1zLnNsaWRlc09mZnNldEFmdGVyO1xuXG4gIGlmICh0eXBlb2Ygb2Zmc2V0QWZ0ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvZmZzZXRBZnRlciA9IHBhcmFtcy5zbGlkZXNPZmZzZXRBZnRlci5jYWxsKHN3aXBlcik7XG4gIH1cblxuICB2YXIgcHJldmlvdXNTbmFwR3JpZExlbmd0aCA9IHN3aXBlci5zbmFwR3JpZC5sZW5ndGg7XG4gIHZhciBwcmV2aW91c1NsaWRlc0dyaWRMZW5ndGggPSBzd2lwZXIuc2xpZGVzR3JpZC5sZW5ndGg7XG4gIHZhciBzcGFjZUJldHdlZW4gPSBwYXJhbXMuc3BhY2VCZXR3ZWVuO1xuICB2YXIgc2xpZGVQb3NpdGlvbiA9IC1vZmZzZXRCZWZvcmU7XG4gIHZhciBwcmV2U2xpZGVTaXplID0gMDtcbiAgdmFyIGluZGV4ID0gMDtcblxuICBpZiAodHlwZW9mIHN3aXBlclNpemUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBzcGFjZUJldHdlZW4gPT09ICdzdHJpbmcnICYmIHNwYWNlQmV0d2Vlbi5pbmRleE9mKCclJykgPj0gMCkge1xuICAgIHNwYWNlQmV0d2VlbiA9IHBhcnNlRmxvYXQoc3BhY2VCZXR3ZWVuLnJlcGxhY2UoJyUnLCAnJykpIC8gMTAwICogc3dpcGVyU2l6ZTtcbiAgfVxuXG4gIHN3aXBlci52aXJ0dWFsU2l6ZSA9IC1zcGFjZUJldHdlZW47IC8vIHJlc2V0IG1hcmdpbnNcblxuICBpZiAocnRsKSBzbGlkZXMuY3NzKHtcbiAgICBtYXJnaW5MZWZ0OiAnJyxcbiAgICBtYXJnaW5Ub3A6ICcnXG4gIH0pO2Vsc2Ugc2xpZGVzLmNzcyh7XG4gICAgbWFyZ2luUmlnaHQ6ICcnLFxuICAgIG1hcmdpbkJvdHRvbTogJydcbiAgfSk7XG4gIHZhciBzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzO1xuXG4gIGlmIChwYXJhbXMuc2xpZGVzUGVyQ29sdW1uID4gMSkge1xuICAgIGlmIChNYXRoLmZsb29yKHNsaWRlc0xlbmd0aCAvIHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4pID09PSBzbGlkZXNMZW5ndGggLyBzd2lwZXIucGFyYW1zLnNsaWRlc1BlckNvbHVtbikge1xuICAgICAgc2xpZGVzTnVtYmVyRXZlblRvUm93cyA9IHNsaWRlc0xlbmd0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgc2xpZGVzTnVtYmVyRXZlblRvUm93cyA9IE1hdGguY2VpbChzbGlkZXNMZW5ndGggLyBwYXJhbXMuc2xpZGVzUGVyQ29sdW1uKSAqIHBhcmFtcy5zbGlkZXNQZXJDb2x1bW47XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy5zbGlkZXNQZXJWaWV3ICE9PSAnYXV0bycgJiYgcGFyYW1zLnNsaWRlc1BlckNvbHVtbkZpbGwgPT09ICdyb3cnKSB7XG4gICAgICBzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzID0gTWF0aC5tYXgoc2xpZGVzTnVtYmVyRXZlblRvUm93cywgcGFyYW1zLnNsaWRlc1BlclZpZXcgKiBwYXJhbXMuc2xpZGVzUGVyQ29sdW1uKTtcbiAgICB9XG4gIH0gLy8gQ2FsYyBzbGlkZXNcblxuXG4gIHZhciBzbGlkZVNpemU7XG4gIHZhciBzbGlkZXNQZXJDb2x1bW4gPSBwYXJhbXMuc2xpZGVzUGVyQ29sdW1uO1xuICB2YXIgc2xpZGVzUGVyUm93ID0gc2xpZGVzTnVtYmVyRXZlblRvUm93cyAvIHNsaWRlc1BlckNvbHVtbjtcbiAgdmFyIG51bUZ1bGxDb2x1bW5zID0gTWF0aC5mbG9vcihzbGlkZXNMZW5ndGggLyBwYXJhbXMuc2xpZGVzUGVyQ29sdW1uKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWRlc0xlbmd0aDsgaSArPSAxKSB7XG4gICAgc2xpZGVTaXplID0gMDtcbiAgICB2YXIgc2xpZGUgPSBzbGlkZXMuZXEoaSk7XG5cbiAgICBpZiAocGFyYW1zLnNsaWRlc1BlckNvbHVtbiA+IDEpIHtcbiAgICAgIC8vIFNldCBzbGlkZXMgb3JkZXJcbiAgICAgIHZhciBuZXdTbGlkZU9yZGVySW5kZXggPSB2b2lkIDA7XG4gICAgICB2YXIgY29sdW1uID0gdm9pZCAwO1xuICAgICAgdmFyIHJvdyA9IHZvaWQgMDtcblxuICAgICAgaWYgKHBhcmFtcy5zbGlkZXNQZXJDb2x1bW5GaWxsID09PSAncm93JyAmJiBwYXJhbXMuc2xpZGVzUGVyR3JvdXAgPiAxKSB7XG4gICAgICAgIHZhciBncm91cEluZGV4ID0gTWF0aC5mbG9vcihpIC8gKHBhcmFtcy5zbGlkZXNQZXJHcm91cCAqIHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4pKTtcbiAgICAgICAgdmFyIHNsaWRlSW5kZXhJbkdyb3VwID0gaSAtIHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4gKiBwYXJhbXMuc2xpZGVzUGVyR3JvdXAgKiBncm91cEluZGV4O1xuICAgICAgICB2YXIgY29sdW1uc0luR3JvdXAgPSBncm91cEluZGV4ID09PSAwID8gcGFyYW1zLnNsaWRlc1Blckdyb3VwIDogTWF0aC5taW4oTWF0aC5jZWlsKChzbGlkZXNMZW5ndGggLSBncm91cEluZGV4ICogc2xpZGVzUGVyQ29sdW1uICogcGFyYW1zLnNsaWRlc1Blckdyb3VwKSAvIHNsaWRlc1BlckNvbHVtbiksIHBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gICAgICAgIHJvdyA9IE1hdGguZmxvb3Ioc2xpZGVJbmRleEluR3JvdXAgLyBjb2x1bW5zSW5Hcm91cCk7XG4gICAgICAgIGNvbHVtbiA9IHNsaWRlSW5kZXhJbkdyb3VwIC0gcm93ICogY29sdW1uc0luR3JvdXAgKyBncm91cEluZGV4ICogcGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuICAgICAgICBuZXdTbGlkZU9yZGVySW5kZXggPSBjb2x1bW4gKyByb3cgKiBzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzIC8gc2xpZGVzUGVyQ29sdW1uO1xuICAgICAgICBzbGlkZS5jc3Moe1xuICAgICAgICAgICctd2Via2l0LWJveC1vcmRpbmFsLWdyb3VwJzogbmV3U2xpZGVPcmRlckluZGV4LFxuICAgICAgICAgICctbW96LWJveC1vcmRpbmFsLWdyb3VwJzogbmV3U2xpZGVPcmRlckluZGV4LFxuICAgICAgICAgICctbXMtZmxleC1vcmRlcic6IG5ld1NsaWRlT3JkZXJJbmRleCxcbiAgICAgICAgICAnLXdlYmtpdC1vcmRlcic6IG5ld1NsaWRlT3JkZXJJbmRleCxcbiAgICAgICAgICBvcmRlcjogbmV3U2xpZGVPcmRlckluZGV4XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChwYXJhbXMuc2xpZGVzUGVyQ29sdW1uRmlsbCA9PT0gJ2NvbHVtbicpIHtcbiAgICAgICAgY29sdW1uID0gTWF0aC5mbG9vcihpIC8gc2xpZGVzUGVyQ29sdW1uKTtcbiAgICAgICAgcm93ID0gaSAtIGNvbHVtbiAqIHNsaWRlc1BlckNvbHVtbjtcblxuICAgICAgICBpZiAoY29sdW1uID4gbnVtRnVsbENvbHVtbnMgfHwgY29sdW1uID09PSBudW1GdWxsQ29sdW1ucyAmJiByb3cgPT09IHNsaWRlc1BlckNvbHVtbiAtIDEpIHtcbiAgICAgICAgICByb3cgKz0gMTtcblxuICAgICAgICAgIGlmIChyb3cgPj0gc2xpZGVzUGVyQ29sdW1uKSB7XG4gICAgICAgICAgICByb3cgPSAwO1xuICAgICAgICAgICAgY29sdW1uICs9IDE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByb3cgPSBNYXRoLmZsb29yKGkgLyBzbGlkZXNQZXJSb3cpO1xuICAgICAgICBjb2x1bW4gPSBpIC0gcm93ICogc2xpZGVzUGVyUm93O1xuICAgICAgfVxuXG4gICAgICBzbGlkZS5jc3MoZ2V0RGlyZWN0aW9uTGFiZWwoJ21hcmdpbi10b3AnKSwgcm93ICE9PSAwICYmIHBhcmFtcy5zcGFjZUJldHdlZW4gJiYgcGFyYW1zLnNwYWNlQmV0d2VlbiArIFwicHhcIik7XG4gICAgfVxuXG4gICAgaWYgKHNsaWRlLmNzcygnZGlzcGxheScpID09PSAnbm9uZScpIGNvbnRpbnVlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgICBpZiAocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJykge1xuICAgICAgdmFyIHNsaWRlU3R5bGVzID0gZ2V0Q29tcHV0ZWRTdHlsZShzbGlkZVswXSk7XG4gICAgICB2YXIgY3VycmVudFRyYW5zZm9ybSA9IHNsaWRlWzBdLnN0eWxlLnRyYW5zZm9ybTtcbiAgICAgIHZhciBjdXJyZW50V2ViS2l0VHJhbnNmb3JtID0gc2xpZGVbMF0uc3R5bGUud2Via2l0VHJhbnNmb3JtO1xuXG4gICAgICBpZiAoY3VycmVudFRyYW5zZm9ybSkge1xuICAgICAgICBzbGlkZVswXS5zdHlsZS50cmFuc2Zvcm0gPSAnbm9uZSc7XG4gICAgICB9XG5cbiAgICAgIGlmIChjdXJyZW50V2ViS2l0VHJhbnNmb3JtKSB7XG4gICAgICAgIHNsaWRlWzBdLnN0eWxlLndlYmtpdFRyYW5zZm9ybSA9ICdub25lJztcbiAgICAgIH1cblxuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHtcbiAgICAgICAgc2xpZGVTaXplID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gc2xpZGUub3V0ZXJXaWR0aCh0cnVlKSA6IHNsaWRlLm91dGVySGVpZ2h0KHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgIHZhciB3aWR0aCA9IGdldERpcmVjdGlvblByb3BlcnR5VmFsdWUoc2xpZGVTdHlsZXMsICd3aWR0aCcpO1xuICAgICAgICB2YXIgcGFkZGluZ0xlZnQgPSBnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlKHNsaWRlU3R5bGVzLCAncGFkZGluZy1sZWZ0Jyk7XG4gICAgICAgIHZhciBwYWRkaW5nUmlnaHQgPSBnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlKHNsaWRlU3R5bGVzLCAncGFkZGluZy1yaWdodCcpO1xuICAgICAgICB2YXIgbWFyZ2luTGVmdCA9IGdldERpcmVjdGlvblByb3BlcnR5VmFsdWUoc2xpZGVTdHlsZXMsICdtYXJnaW4tbGVmdCcpO1xuICAgICAgICB2YXIgbWFyZ2luUmlnaHQgPSBnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlKHNsaWRlU3R5bGVzLCAnbWFyZ2luLXJpZ2h0Jyk7XG4gICAgICAgIHZhciBib3hTaXppbmcgPSBzbGlkZVN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdib3gtc2l6aW5nJyk7XG5cbiAgICAgICAgaWYgKGJveFNpemluZyAmJiBib3hTaXppbmcgPT09ICdib3JkZXItYm94Jykge1xuICAgICAgICAgIHNsaWRlU2l6ZSA9IHdpZHRoICsgbWFyZ2luTGVmdCArIG1hcmdpblJpZ2h0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBfc2xpZGUkID0gc2xpZGVbMF0sXG4gICAgICAgICAgICAgIGNsaWVudFdpZHRoID0gX3NsaWRlJC5jbGllbnRXaWR0aCxcbiAgICAgICAgICAgICAgb2Zmc2V0V2lkdGggPSBfc2xpZGUkLm9mZnNldFdpZHRoO1xuICAgICAgICAgIHNsaWRlU2l6ZSA9IHdpZHRoICsgcGFkZGluZ0xlZnQgKyBwYWRkaW5nUmlnaHQgKyBtYXJnaW5MZWZ0ICsgbWFyZ2luUmlnaHQgKyAob2Zmc2V0V2lkdGggLSBjbGllbnRXaWR0aCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGN1cnJlbnRUcmFuc2Zvcm0pIHtcbiAgICAgICAgc2xpZGVbMF0uc3R5bGUudHJhbnNmb3JtID0gY3VycmVudFRyYW5zZm9ybTtcbiAgICAgIH1cblxuICAgICAgaWYgKGN1cnJlbnRXZWJLaXRUcmFuc2Zvcm0pIHtcbiAgICAgICAgc2xpZGVbMF0uc3R5bGUud2Via2l0VHJhbnNmb3JtID0gY3VycmVudFdlYktpdFRyYW5zZm9ybTtcbiAgICAgIH1cblxuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHNsaWRlU2l6ZSA9IE1hdGguZmxvb3Ioc2xpZGVTaXplKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2xpZGVTaXplID0gKHN3aXBlclNpemUgLSAocGFyYW1zLnNsaWRlc1BlclZpZXcgLSAxKSAqIHNwYWNlQmV0d2VlbikgLyBwYXJhbXMuc2xpZGVzUGVyVmlldztcbiAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSBzbGlkZVNpemUgPSBNYXRoLmZsb29yKHNsaWRlU2l6ZSk7XG5cbiAgICAgIGlmIChzbGlkZXNbaV0pIHtcbiAgICAgICAgc2xpZGVzW2ldLnN0eWxlW2dldERpcmVjdGlvbkxhYmVsKCd3aWR0aCcpXSA9IHNsaWRlU2l6ZSArIFwicHhcIjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc2xpZGVzW2ldKSB7XG4gICAgICBzbGlkZXNbaV0uc3dpcGVyU2xpZGVTaXplID0gc2xpZGVTaXplO1xuICAgIH1cblxuICAgIHNsaWRlc1NpemVzR3JpZC5wdXNoKHNsaWRlU2l6ZSk7XG5cbiAgICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICBzbGlkZVBvc2l0aW9uID0gc2xpZGVQb3NpdGlvbiArIHNsaWRlU2l6ZSAvIDIgKyBwcmV2U2xpZGVTaXplIC8gMiArIHNwYWNlQmV0d2VlbjtcbiAgICAgIGlmIChwcmV2U2xpZGVTaXplID09PSAwICYmIGkgIT09IDApIHNsaWRlUG9zaXRpb24gPSBzbGlkZVBvc2l0aW9uIC0gc3dpcGVyU2l6ZSAvIDIgLSBzcGFjZUJldHdlZW47XG4gICAgICBpZiAoaSA9PT0gMCkgc2xpZGVQb3NpdGlvbiA9IHNsaWRlUG9zaXRpb24gLSBzd2lwZXJTaXplIC8gMiAtIHNwYWNlQmV0d2VlbjtcbiAgICAgIGlmIChNYXRoLmFicyhzbGlkZVBvc2l0aW9uKSA8IDEgLyAxMDAwKSBzbGlkZVBvc2l0aW9uID0gMDtcbiAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSBzbGlkZVBvc2l0aW9uID0gTWF0aC5mbG9vcihzbGlkZVBvc2l0aW9uKTtcbiAgICAgIGlmIChpbmRleCAlIHBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMCkgc25hcEdyaWQucHVzaChzbGlkZVBvc2l0aW9uKTtcbiAgICAgIHNsaWRlc0dyaWQucHVzaChzbGlkZVBvc2l0aW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHNsaWRlUG9zaXRpb24gPSBNYXRoLmZsb29yKHNsaWRlUG9zaXRpb24pO1xuICAgICAgaWYgKChpbmRleCAtIE1hdGgubWluKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwLCBpbmRleCkpICUgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMCkgc25hcEdyaWQucHVzaChzbGlkZVBvc2l0aW9uKTtcbiAgICAgIHNsaWRlc0dyaWQucHVzaChzbGlkZVBvc2l0aW9uKTtcbiAgICAgIHNsaWRlUG9zaXRpb24gPSBzbGlkZVBvc2l0aW9uICsgc2xpZGVTaXplICsgc3BhY2VCZXR3ZWVuO1xuICAgIH1cblxuICAgIHN3aXBlci52aXJ0dWFsU2l6ZSArPSBzbGlkZVNpemUgKyBzcGFjZUJldHdlZW47XG4gICAgcHJldlNsaWRlU2l6ZSA9IHNsaWRlU2l6ZTtcbiAgICBpbmRleCArPSAxO1xuICB9XG5cbiAgc3dpcGVyLnZpcnR1YWxTaXplID0gTWF0aC5tYXgoc3dpcGVyLnZpcnR1YWxTaXplLCBzd2lwZXJTaXplKSArIG9mZnNldEFmdGVyO1xuICB2YXIgbmV3U2xpZGVzR3JpZDtcblxuICBpZiAocnRsICYmIHdyb25nUlRMICYmIChwYXJhbXMuZWZmZWN0ID09PSAnc2xpZGUnIHx8IHBhcmFtcy5lZmZlY3QgPT09ICdjb3ZlcmZsb3cnKSkge1xuICAgICR3cmFwcGVyRWwuY3NzKHtcbiAgICAgIHdpZHRoOiBzd2lwZXIudmlydHVhbFNpemUgKyBwYXJhbXMuc3BhY2VCZXR3ZWVuICsgXCJweFwiXG4gICAgfSk7XG4gIH1cblxuICBpZiAocGFyYW1zLnNldFdyYXBwZXJTaXplKSB7XG4gICAgdmFyIF8kd3JhcHBlckVsJGNzcztcblxuICAgICR3cmFwcGVyRWwuY3NzKChfJHdyYXBwZXJFbCRjc3MgPSB7fSwgXyR3cmFwcGVyRWwkY3NzW2dldERpcmVjdGlvbkxhYmVsKCd3aWR0aCcpXSA9IHN3aXBlci52aXJ0dWFsU2l6ZSArIHBhcmFtcy5zcGFjZUJldHdlZW4gKyBcInB4XCIsIF8kd3JhcHBlckVsJGNzcykpO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4gPiAxKSB7XG4gICAgdmFyIF8kd3JhcHBlckVsJGNzczI7XG5cbiAgICBzd2lwZXIudmlydHVhbFNpemUgPSAoc2xpZGVTaXplICsgcGFyYW1zLnNwYWNlQmV0d2VlbikgKiBzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzO1xuICAgIHN3aXBlci52aXJ0dWFsU2l6ZSA9IE1hdGguY2VpbChzd2lwZXIudmlydHVhbFNpemUgLyBwYXJhbXMuc2xpZGVzUGVyQ29sdW1uKSAtIHBhcmFtcy5zcGFjZUJldHdlZW47XG4gICAgJHdyYXBwZXJFbC5jc3MoKF8kd3JhcHBlckVsJGNzczIgPSB7fSwgXyR3cmFwcGVyRWwkY3NzMltnZXREaXJlY3Rpb25MYWJlbCgnd2lkdGgnKV0gPSBzd2lwZXIudmlydHVhbFNpemUgKyBwYXJhbXMuc3BhY2VCZXR3ZWVuICsgXCJweFwiLCBfJHdyYXBwZXJFbCRjc3MyKSk7XG5cbiAgICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICBuZXdTbGlkZXNHcmlkID0gW107XG5cbiAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBzbmFwR3JpZC5sZW5ndGg7IF9pICs9IDEpIHtcbiAgICAgICAgdmFyIHNsaWRlc0dyaWRJdGVtID0gc25hcEdyaWRbX2ldO1xuICAgICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykgc2xpZGVzR3JpZEl0ZW0gPSBNYXRoLmZsb29yKHNsaWRlc0dyaWRJdGVtKTtcbiAgICAgICAgaWYgKHNuYXBHcmlkW19pXSA8IHN3aXBlci52aXJ0dWFsU2l6ZSArIHNuYXBHcmlkWzBdKSBuZXdTbGlkZXNHcmlkLnB1c2goc2xpZGVzR3JpZEl0ZW0pO1xuICAgICAgfVxuXG4gICAgICBzbmFwR3JpZCA9IG5ld1NsaWRlc0dyaWQ7XG4gICAgfVxuICB9IC8vIFJlbW92ZSBsYXN0IGdyaWQgZWxlbWVudHMgZGVwZW5kaW5nIG9uIHdpZHRoXG5cblxuICBpZiAoIXBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgIG5ld1NsaWRlc0dyaWQgPSBbXTtcblxuICAgIGZvciAodmFyIF9pMiA9IDA7IF9pMiA8IHNuYXBHcmlkLmxlbmd0aDsgX2kyICs9IDEpIHtcbiAgICAgIHZhciBfc2xpZGVzR3JpZEl0ZW0gPSBzbmFwR3JpZFtfaTJdO1xuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIF9zbGlkZXNHcmlkSXRlbSA9IE1hdGguZmxvb3IoX3NsaWRlc0dyaWRJdGVtKTtcblxuICAgICAgaWYgKHNuYXBHcmlkW19pMl0gPD0gc3dpcGVyLnZpcnR1YWxTaXplIC0gc3dpcGVyU2l6ZSkge1xuICAgICAgICBuZXdTbGlkZXNHcmlkLnB1c2goX3NsaWRlc0dyaWRJdGVtKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzbmFwR3JpZCA9IG5ld1NsaWRlc0dyaWQ7XG5cbiAgICBpZiAoTWF0aC5mbG9vcihzd2lwZXIudmlydHVhbFNpemUgLSBzd2lwZXJTaXplKSAtIE1hdGguZmxvb3Ioc25hcEdyaWRbc25hcEdyaWQubGVuZ3RoIC0gMV0pID4gMSkge1xuICAgICAgc25hcEdyaWQucHVzaChzd2lwZXIudmlydHVhbFNpemUgLSBzd2lwZXJTaXplKTtcbiAgICB9XG4gIH1cblxuICBpZiAoc25hcEdyaWQubGVuZ3RoID09PSAwKSBzbmFwR3JpZCA9IFswXTtcblxuICBpZiAocGFyYW1zLnNwYWNlQmV0d2VlbiAhPT0gMCkge1xuICAgIHZhciBfc2xpZGVzJGZpbHRlciRjc3M7XG5cbiAgICB2YXIga2V5ID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpICYmIHJ0bCA/ICdtYXJnaW5MZWZ0JyA6IGdldERpcmVjdGlvbkxhYmVsKCdtYXJnaW5SaWdodCcpO1xuICAgIHNsaWRlcy5maWx0ZXIoZnVuY3Rpb24gKF8sIHNsaWRlSW5kZXgpIHtcbiAgICAgIGlmICghcGFyYW1zLmNzc01vZGUpIHJldHVybiB0cnVlO1xuXG4gICAgICBpZiAoc2xpZGVJbmRleCA9PT0gc2xpZGVzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KS5jc3MoKF9zbGlkZXMkZmlsdGVyJGNzcyA9IHt9LCBfc2xpZGVzJGZpbHRlciRjc3Nba2V5XSA9IHNwYWNlQmV0d2VlbiArIFwicHhcIiwgX3NsaWRlcyRmaWx0ZXIkY3NzKSk7XG4gIH1cblxuICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzICYmIHBhcmFtcy5jZW50ZXJlZFNsaWRlc0JvdW5kcykge1xuICAgIHZhciBhbGxTbGlkZXNTaXplID0gMDtcbiAgICBzbGlkZXNTaXplc0dyaWQuZm9yRWFjaChmdW5jdGlvbiAoc2xpZGVTaXplVmFsdWUpIHtcbiAgICAgIGFsbFNsaWRlc1NpemUgKz0gc2xpZGVTaXplVmFsdWUgKyAocGFyYW1zLnNwYWNlQmV0d2VlbiA/IHBhcmFtcy5zcGFjZUJldHdlZW4gOiAwKTtcbiAgICB9KTtcbiAgICBhbGxTbGlkZXNTaXplIC09IHBhcmFtcy5zcGFjZUJldHdlZW47XG4gICAgdmFyIG1heFNuYXAgPSBhbGxTbGlkZXNTaXplIC0gc3dpcGVyU2l6ZTtcbiAgICBzbmFwR3JpZCA9IHNuYXBHcmlkLm1hcChmdW5jdGlvbiAoc25hcCkge1xuICAgICAgaWYgKHNuYXAgPCAwKSByZXR1cm4gLW9mZnNldEJlZm9yZTtcbiAgICAgIGlmIChzbmFwID4gbWF4U25hcCkgcmV0dXJuIG1heFNuYXAgKyBvZmZzZXRBZnRlcjtcbiAgICAgIHJldHVybiBzbmFwO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5jZW50ZXJJbnN1ZmZpY2llbnRTbGlkZXMpIHtcbiAgICB2YXIgX2FsbFNsaWRlc1NpemUgPSAwO1xuICAgIHNsaWRlc1NpemVzR3JpZC5mb3JFYWNoKGZ1bmN0aW9uIChzbGlkZVNpemVWYWx1ZSkge1xuICAgICAgX2FsbFNsaWRlc1NpemUgKz0gc2xpZGVTaXplVmFsdWUgKyAocGFyYW1zLnNwYWNlQmV0d2VlbiA/IHBhcmFtcy5zcGFjZUJldHdlZW4gOiAwKTtcbiAgICB9KTtcbiAgICBfYWxsU2xpZGVzU2l6ZSAtPSBwYXJhbXMuc3BhY2VCZXR3ZWVuO1xuXG4gICAgaWYgKF9hbGxTbGlkZXNTaXplIDwgc3dpcGVyU2l6ZSkge1xuICAgICAgdmFyIGFsbFNsaWRlc09mZnNldCA9IChzd2lwZXJTaXplIC0gX2FsbFNsaWRlc1NpemUpIC8gMjtcbiAgICAgIHNuYXBHcmlkLmZvckVhY2goZnVuY3Rpb24gKHNuYXAsIHNuYXBJbmRleCkge1xuICAgICAgICBzbmFwR3JpZFtzbmFwSW5kZXhdID0gc25hcCAtIGFsbFNsaWRlc09mZnNldDtcbiAgICAgIH0pO1xuICAgICAgc2xpZGVzR3JpZC5mb3JFYWNoKGZ1bmN0aW9uIChzbmFwLCBzbmFwSW5kZXgpIHtcbiAgICAgICAgc2xpZGVzR3JpZFtzbmFwSW5kZXhdID0gc25hcCArIGFsbFNsaWRlc09mZnNldDtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGV4dGVuZChzd2lwZXIsIHtcbiAgICBzbGlkZXM6IHNsaWRlcyxcbiAgICBzbmFwR3JpZDogc25hcEdyaWQsXG4gICAgc2xpZGVzR3JpZDogc2xpZGVzR3JpZCxcbiAgICBzbGlkZXNTaXplc0dyaWQ6IHNsaWRlc1NpemVzR3JpZFxuICB9KTtcblxuICBpZiAoc2xpZGVzTGVuZ3RoICE9PSBwcmV2aW91c1NsaWRlc0xlbmd0aCkge1xuICAgIHN3aXBlci5lbWl0KCdzbGlkZXNMZW5ndGhDaGFuZ2UnKTtcbiAgfVxuXG4gIGlmIChzbmFwR3JpZC5sZW5ndGggIT09IHByZXZpb3VzU25hcEdyaWRMZW5ndGgpIHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93KSBzd2lwZXIuY2hlY2tPdmVyZmxvdygpO1xuICAgIHN3aXBlci5lbWl0KCdzbmFwR3JpZExlbmd0aENoYW5nZScpO1xuICB9XG5cbiAgaWYgKHNsaWRlc0dyaWQubGVuZ3RoICE9PSBwcmV2aW91c1NsaWRlc0dyaWRMZW5ndGgpIHtcbiAgICBzd2lwZXIuZW1pdCgnc2xpZGVzR3JpZExlbmd0aENoYW5nZScpO1xuICB9XG5cbiAgaWYgKHBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzIHx8IHBhcmFtcy53YXRjaFNsaWRlc1Zpc2liaWxpdHkpIHtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzT2Zmc2V0KCk7XG4gIH1cbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvdXBkYXRlL3VwZGF0ZVNsaWRlcy5qcyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVwZGF0ZUF1dG9IZWlnaHQoc3BlZWQpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBhY3RpdmVTbGlkZXMgPSBbXTtcbiAgdmFyIGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkO1xuICB2YXIgbmV3SGVpZ2h0ID0gMDtcbiAgdmFyIGk7XG5cbiAgaWYgKHR5cGVvZiBzcGVlZCA9PT0gJ251bWJlcicpIHtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihzcGVlZCk7XG4gIH0gZWxzZSBpZiAoc3BlZWQgPT09IHRydWUpIHtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihzd2lwZXIucGFyYW1zLnNwZWVkKTtcbiAgfVxuXG4gIHZhciBnZXRTbGlkZUJ5SW5kZXggPSBmdW5jdGlvbiBnZXRTbGlkZUJ5SW5kZXgoaW5kZXgpIHtcbiAgICBpZiAoaXNWaXJ0dWFsKSB7XG4gICAgICByZXR1cm4gc3dpcGVyLnNsaWRlcy5maWx0ZXIoZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgIHJldHVybiBwYXJzZUludChlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JyksIDEwKSA9PT0gaW5kZXg7XG4gICAgICB9KVswXTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3dpcGVyLnNsaWRlcy5lcShpbmRleClbMF07XG4gIH07IC8vIEZpbmQgc2xpZGVzIGN1cnJlbnRseSBpbiB2aWV3XG5cblxuICBpZiAoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ICE9PSAnYXV0bycgJiYgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID4gMSkge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICBzd2lwZXIudmlzaWJsZVNsaWRlcy5lYWNoKGZ1bmN0aW9uIChzbGlkZSkge1xuICAgICAgICBhY3RpdmVTbGlkZXMucHVzaChzbGlkZSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChpID0gMDsgaSA8IE1hdGguY2VpbChzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcpOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4ICsgaTtcbiAgICAgICAgaWYgKGluZGV4ID4gc3dpcGVyLnNsaWRlcy5sZW5ndGggJiYgIWlzVmlydHVhbCkgYnJlYWs7XG4gICAgICAgIGFjdGl2ZVNsaWRlcy5wdXNoKGdldFNsaWRlQnlJbmRleChpbmRleCkpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBhY3RpdmVTbGlkZXMucHVzaChnZXRTbGlkZUJ5SW5kZXgoc3dpcGVyLmFjdGl2ZUluZGV4KSk7XG4gIH0gLy8gRmluZCBuZXcgaGVpZ2h0IGZyb20gaGlnaGVzdCBzbGlkZSBpbiB2aWV3XG5cblxuICBmb3IgKGkgPSAwOyBpIDwgYWN0aXZlU2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKHR5cGVvZiBhY3RpdmVTbGlkZXNbaV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB2YXIgaGVpZ2h0ID0gYWN0aXZlU2xpZGVzW2ldLm9mZnNldEhlaWdodDtcbiAgICAgIG5ld0hlaWdodCA9IGhlaWdodCA+IG5ld0hlaWdodCA/IGhlaWdodCA6IG5ld0hlaWdodDtcbiAgICB9XG4gIH0gLy8gVXBkYXRlIEhlaWdodFxuXG5cbiAgaWYgKG5ld0hlaWdodCkgc3dpcGVyLiR3cmFwcGVyRWwuY3NzKCdoZWlnaHQnLCBuZXdIZWlnaHQgKyBcInB4XCIpO1xufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS91cGRhdGUvdXBkYXRlQXV0b0hlaWdodC5qcyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVwZGF0ZVNsaWRlc09mZnNldCgpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgc2xpZGVzW2ldLnN3aXBlclNsaWRlT2Zmc2V0ID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gc2xpZGVzW2ldLm9mZnNldExlZnQgOiBzbGlkZXNbaV0ub2Zmc2V0VG9wO1xuICB9XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL3VwZGF0ZS91cGRhdGVTbGlkZXNPZmZzZXQuanMiLCJpbXBvcnQgJCBmcm9tICcuLi8uLi8uLi91dGlscy9kb20nO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXBkYXRlU2xpZGVzUHJvZ3Jlc3ModHJhbnNsYXRlKSB7XG4gIGlmICh0cmFuc2xhdGUgPT09IHZvaWQgMCkge1xuICAgIHRyYW5zbGF0ZSA9IHRoaXMgJiYgdGhpcy50cmFuc2xhdGUgfHwgMDtcbiAgfVxuXG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgdmFyIHNsaWRlcyA9IHN3aXBlci5zbGlkZXMsXG4gICAgICBydGwgPSBzd2lwZXIucnRsVHJhbnNsYXRlO1xuICBpZiAoc2xpZGVzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICBpZiAodHlwZW9mIHNsaWRlc1swXS5zd2lwZXJTbGlkZU9mZnNldCA9PT0gJ3VuZGVmaW5lZCcpIHN3aXBlci51cGRhdGVTbGlkZXNPZmZzZXQoKTtcbiAgdmFyIG9mZnNldENlbnRlciA9IC10cmFuc2xhdGU7XG4gIGlmIChydGwpIG9mZnNldENlbnRlciA9IHRyYW5zbGF0ZTsgLy8gVmlzaWJsZSBTbGlkZXNcblxuICBzbGlkZXMucmVtb3ZlQ2xhc3MocGFyYW1zLnNsaWRlVmlzaWJsZUNsYXNzKTtcbiAgc3dpcGVyLnZpc2libGVTbGlkZXNJbmRleGVzID0gW107XG4gIHN3aXBlci52aXNpYmxlU2xpZGVzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB2YXIgc2xpZGUgPSBzbGlkZXNbaV07XG4gICAgdmFyIHNsaWRlUHJvZ3Jlc3MgPSAob2Zmc2V0Q2VudGVyICsgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcyA/IHN3aXBlci5taW5UcmFuc2xhdGUoKSA6IDApIC0gc2xpZGUuc3dpcGVyU2xpZGVPZmZzZXQpIC8gKHNsaWRlLnN3aXBlclNsaWRlU2l6ZSArIHBhcmFtcy5zcGFjZUJldHdlZW4pO1xuXG4gICAgaWYgKHBhcmFtcy53YXRjaFNsaWRlc1Zpc2liaWxpdHkgfHwgcGFyYW1zLmNlbnRlcmVkU2xpZGVzICYmIHBhcmFtcy5hdXRvSGVpZ2h0KSB7XG4gICAgICB2YXIgc2xpZGVCZWZvcmUgPSAtKG9mZnNldENlbnRlciAtIHNsaWRlLnN3aXBlclNsaWRlT2Zmc2V0KTtcbiAgICAgIHZhciBzbGlkZUFmdGVyID0gc2xpZGVCZWZvcmUgKyBzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkW2ldO1xuICAgICAgdmFyIGlzVmlzaWJsZSA9IHNsaWRlQmVmb3JlID49IDAgJiYgc2xpZGVCZWZvcmUgPCBzd2lwZXIuc2l6ZSAtIDEgfHwgc2xpZGVBZnRlciA+IDEgJiYgc2xpZGVBZnRlciA8PSBzd2lwZXIuc2l6ZSB8fCBzbGlkZUJlZm9yZSA8PSAwICYmIHNsaWRlQWZ0ZXIgPj0gc3dpcGVyLnNpemU7XG5cbiAgICAgIGlmIChpc1Zpc2libGUpIHtcbiAgICAgICAgc3dpcGVyLnZpc2libGVTbGlkZXMucHVzaChzbGlkZSk7XG4gICAgICAgIHN3aXBlci52aXNpYmxlU2xpZGVzSW5kZXhlcy5wdXNoKGkpO1xuICAgICAgICBzbGlkZXMuZXEoaSkuYWRkQ2xhc3MocGFyYW1zLnNsaWRlVmlzaWJsZUNsYXNzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzbGlkZS5wcm9ncmVzcyA9IHJ0bCA/IC1zbGlkZVByb2dyZXNzIDogc2xpZGVQcm9ncmVzcztcbiAgfVxuXG4gIHN3aXBlci52aXNpYmxlU2xpZGVzID0gJChzd2lwZXIudmlzaWJsZVNsaWRlcyk7XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL3VwZGF0ZS91cGRhdGVTbGlkZXNQcm9ncmVzcy5qcyIsImltcG9ydCB7IGV4dGVuZCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVwZGF0ZVByb2dyZXNzKHRyYW5zbGF0ZSkge1xuICB2YXIgc3dpcGVyID0gdGhpcztcblxuICBpZiAodHlwZW9mIHRyYW5zbGF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgbXVsdGlwbGllciA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyAtMSA6IDE7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuXG4gICAgdHJhbnNsYXRlID0gc3dpcGVyICYmIHN3aXBlci50cmFuc2xhdGUgJiYgc3dpcGVyLnRyYW5zbGF0ZSAqIG11bHRpcGxpZXIgfHwgMDtcbiAgfVxuXG4gIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICB2YXIgdHJhbnNsYXRlc0RpZmYgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gIHZhciBwcm9ncmVzcyA9IHN3aXBlci5wcm9ncmVzcyxcbiAgICAgIGlzQmVnaW5uaW5nID0gc3dpcGVyLmlzQmVnaW5uaW5nLFxuICAgICAgaXNFbmQgPSBzd2lwZXIuaXNFbmQ7XG4gIHZhciB3YXNCZWdpbm5pbmcgPSBpc0JlZ2lubmluZztcbiAgdmFyIHdhc0VuZCA9IGlzRW5kO1xuXG4gIGlmICh0cmFuc2xhdGVzRGlmZiA9PT0gMCkge1xuICAgIHByb2dyZXNzID0gMDtcbiAgICBpc0JlZ2lubmluZyA9IHRydWU7XG4gICAgaXNFbmQgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHByb2dyZXNzID0gKHRyYW5zbGF0ZSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSkgLyB0cmFuc2xhdGVzRGlmZjtcbiAgICBpc0JlZ2lubmluZyA9IHByb2dyZXNzIDw9IDA7XG4gICAgaXNFbmQgPSBwcm9ncmVzcyA+PSAxO1xuICB9XG5cbiAgZXh0ZW5kKHN3aXBlciwge1xuICAgIHByb2dyZXNzOiBwcm9ncmVzcyxcbiAgICBpc0JlZ2lubmluZzogaXNCZWdpbm5pbmcsXG4gICAgaXNFbmQ6IGlzRW5kXG4gIH0pO1xuICBpZiAocGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MgfHwgcGFyYW1zLndhdGNoU2xpZGVzVmlzaWJpbGl0eSB8fCBwYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgcGFyYW1zLmF1dG9IZWlnaHQpIHN3aXBlci51cGRhdGVTbGlkZXNQcm9ncmVzcyh0cmFuc2xhdGUpO1xuXG4gIGlmIChpc0JlZ2lubmluZyAmJiAhd2FzQmVnaW5uaW5nKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3JlYWNoQmVnaW5uaW5nIHRvRWRnZScpO1xuICB9XG5cbiAgaWYgKGlzRW5kICYmICF3YXNFbmQpIHtcbiAgICBzd2lwZXIuZW1pdCgncmVhY2hFbmQgdG9FZGdlJyk7XG4gIH1cblxuICBpZiAod2FzQmVnaW5uaW5nICYmICFpc0JlZ2lubmluZyB8fCB3YXNFbmQgJiYgIWlzRW5kKSB7XG4gICAgc3dpcGVyLmVtaXQoJ2Zyb21FZGdlJyk7XG4gIH1cblxuICBzd2lwZXIuZW1pdCgncHJvZ3Jlc3MnLCBwcm9ncmVzcyk7XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL3VwZGF0ZS91cGRhdGVQcm9ncmVzcy5qcyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVwZGF0ZVNsaWRlc0NsYXNzZXMoKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgc2xpZGVzID0gc3dpcGVyLnNsaWRlcyxcbiAgICAgIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICAkd3JhcHBlckVsID0gc3dpcGVyLiR3cmFwcGVyRWwsXG4gICAgICBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleCxcbiAgICAgIHJlYWxJbmRleCA9IHN3aXBlci5yZWFsSW5kZXg7XG4gIHZhciBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBwYXJhbXMudmlydHVhbC5lbmFibGVkO1xuICBzbGlkZXMucmVtb3ZlQ2xhc3MocGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3MgKyBcIiBcIiArIHBhcmFtcy5zbGlkZU5leHRDbGFzcyArIFwiIFwiICsgcGFyYW1zLnNsaWRlUHJldkNsYXNzICsgXCIgXCIgKyBwYXJhbXMuc2xpZGVEdXBsaWNhdGVBY3RpdmVDbGFzcyArIFwiIFwiICsgcGFyYW1zLnNsaWRlRHVwbGljYXRlTmV4dENsYXNzICsgXCIgXCIgKyBwYXJhbXMuc2xpZGVEdXBsaWNhdGVQcmV2Q2xhc3MpO1xuICB2YXIgYWN0aXZlU2xpZGU7XG5cbiAgaWYgKGlzVmlydHVhbCkge1xuICAgIGFjdGl2ZVNsaWRlID0gc3dpcGVyLiR3cmFwcGVyRWwuZmluZChcIi5cIiArIHBhcmFtcy5zbGlkZUNsYXNzICsgXCJbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIlwiICsgYWN0aXZlSW5kZXggKyBcIlxcXCJdXCIpO1xuICB9IGVsc2Uge1xuICAgIGFjdGl2ZVNsaWRlID0gc2xpZGVzLmVxKGFjdGl2ZUluZGV4KTtcbiAgfSAvLyBBY3RpdmUgY2xhc3Nlc1xuXG5cbiAgYWN0aXZlU2xpZGUuYWRkQ2xhc3MocGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3MpO1xuXG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIC8vIER1cGxpY2F0ZSB0byBhbGwgbG9vcGVkIHNsaWRlc1xuICAgIGlmIChhY3RpdmVTbGlkZS5oYXNDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykpIHtcbiAgICAgICR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuXCIgKyBwYXJhbXMuc2xpZGVDbGFzcyArIFwiOm5vdCguXCIgKyBwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcyArIFwiKVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyByZWFsSW5kZXggKyBcIlxcXCJdXCIpLmFkZENsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUFjdGl2ZUNsYXNzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJHdyYXBwZXJFbC5jaGlsZHJlbihcIi5cIiArIHBhcmFtcy5zbGlkZUNsYXNzICsgXCIuXCIgKyBwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcyArIFwiW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVxcXCJcIiArIHJlYWxJbmRleCArIFwiXFxcIl1cIikuYWRkQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlQWN0aXZlQ2xhc3MpO1xuICAgIH1cbiAgfSAvLyBOZXh0IFNsaWRlXG5cblxuICB2YXIgbmV4dFNsaWRlID0gYWN0aXZlU2xpZGUubmV4dEFsbChcIi5cIiArIHBhcmFtcy5zbGlkZUNsYXNzKS5lcSgwKS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVOZXh0Q2xhc3MpO1xuXG4gIGlmIChwYXJhbXMubG9vcCAmJiBuZXh0U2xpZGUubGVuZ3RoID09PSAwKSB7XG4gICAgbmV4dFNsaWRlID0gc2xpZGVzLmVxKDApO1xuICAgIG5leHRTbGlkZS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVOZXh0Q2xhc3MpO1xuICB9IC8vIFByZXYgU2xpZGVcblxuXG4gIHZhciBwcmV2U2xpZGUgPSBhY3RpdmVTbGlkZS5wcmV2QWxsKFwiLlwiICsgcGFyYW1zLnNsaWRlQ2xhc3MpLmVxKDApLmFkZENsYXNzKHBhcmFtcy5zbGlkZVByZXZDbGFzcyk7XG5cbiAgaWYgKHBhcmFtcy5sb29wICYmIHByZXZTbGlkZS5sZW5ndGggPT09IDApIHtcbiAgICBwcmV2U2xpZGUgPSBzbGlkZXMuZXEoLTEpO1xuICAgIHByZXZTbGlkZS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVQcmV2Q2xhc3MpO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgLy8gRHVwbGljYXRlIHRvIGFsbCBsb29wZWQgc2xpZGVzXG4gICAgaWYgKG5leHRTbGlkZS5oYXNDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykpIHtcbiAgICAgICR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuXCIgKyBwYXJhbXMuc2xpZGVDbGFzcyArIFwiOm5vdCguXCIgKyBwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcyArIFwiKVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyBuZXh0U2xpZGUuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSArIFwiXFxcIl1cIikuYWRkQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlTmV4dENsYXNzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJHdyYXBwZXJFbC5jaGlsZHJlbihcIi5cIiArIHBhcmFtcy5zbGlkZUNsYXNzICsgXCIuXCIgKyBwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcyArIFwiW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVxcXCJcIiArIG5leHRTbGlkZS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpICsgXCJcXFwiXVwiKS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVOZXh0Q2xhc3MpO1xuICAgIH1cblxuICAgIGlmIChwcmV2U2xpZGUuaGFzQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKSB7XG4gICAgICAkd3JhcHBlckVsLmNoaWxkcmVuKFwiLlwiICsgcGFyYW1zLnNsaWRlQ2xhc3MgKyBcIjpub3QoLlwiICsgcGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MgKyBcIilbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIlwiICsgcHJldlNsaWRlLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JykgKyBcIlxcXCJdXCIpLmFkZENsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZVByZXZDbGFzcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuXCIgKyBwYXJhbXMuc2xpZGVDbGFzcyArIFwiLlwiICsgcGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MgKyBcIltkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyBwcmV2U2xpZGUuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSArIFwiXFxcIl1cIikuYWRkQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlUHJldkNsYXNzKTtcbiAgICB9XG4gIH1cblxuICBzd2lwZXIuZW1pdFNsaWRlc0NsYXNzZXMoKTtcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvdXBkYXRlL3VwZGF0ZVNsaWRlc0NsYXNzZXMuanMiLCJpbXBvcnQgeyBleHRlbmQgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlscyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1cGRhdGVBY3RpdmVJbmRleChuZXdBY3RpdmVJbmRleCkge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIHRyYW5zbGF0ZSA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyBzd2lwZXIudHJhbnNsYXRlIDogLXN3aXBlci50cmFuc2xhdGU7XG4gIHZhciBzbGlkZXNHcmlkID0gc3dpcGVyLnNsaWRlc0dyaWQsXG4gICAgICBzbmFwR3JpZCA9IHN3aXBlci5zbmFwR3JpZCxcbiAgICAgIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICBwcmV2aW91c0luZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4LFxuICAgICAgcHJldmlvdXNSZWFsSW5kZXggPSBzd2lwZXIucmVhbEluZGV4LFxuICAgICAgcHJldmlvdXNTbmFwSW5kZXggPSBzd2lwZXIuc25hcEluZGV4O1xuICB2YXIgYWN0aXZlSW5kZXggPSBuZXdBY3RpdmVJbmRleDtcbiAgdmFyIHNuYXBJbmRleDtcblxuICBpZiAodHlwZW9mIGFjdGl2ZUluZGV4ID09PSAndW5kZWZpbmVkJykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpZGVzR3JpZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKHR5cGVvZiBzbGlkZXNHcmlkW2kgKyAxXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgaWYgKHRyYW5zbGF0ZSA+PSBzbGlkZXNHcmlkW2ldICYmIHRyYW5zbGF0ZSA8IHNsaWRlc0dyaWRbaSArIDFdIC0gKHNsaWRlc0dyaWRbaSArIDFdIC0gc2xpZGVzR3JpZFtpXSkgLyAyKSB7XG4gICAgICAgICAgYWN0aXZlSW5kZXggPSBpO1xuICAgICAgICB9IGVsc2UgaWYgKHRyYW5zbGF0ZSA+PSBzbGlkZXNHcmlkW2ldICYmIHRyYW5zbGF0ZSA8IHNsaWRlc0dyaWRbaSArIDFdKSB7XG4gICAgICAgICAgYWN0aXZlSW5kZXggPSBpICsgMTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0cmFuc2xhdGUgPj0gc2xpZGVzR3JpZFtpXSkge1xuICAgICAgICBhY3RpdmVJbmRleCA9IGk7XG4gICAgICB9XG4gICAgfSAvLyBOb3JtYWxpemUgc2xpZGVJbmRleFxuXG5cbiAgICBpZiAocGFyYW1zLm5vcm1hbGl6ZVNsaWRlSW5kZXgpIHtcbiAgICAgIGlmIChhY3RpdmVJbmRleCA8IDAgfHwgdHlwZW9mIGFjdGl2ZUluZGV4ID09PSAndW5kZWZpbmVkJykgYWN0aXZlSW5kZXggPSAwO1xuICAgIH1cbiAgfVxuXG4gIGlmIChzbmFwR3JpZC5pbmRleE9mKHRyYW5zbGF0ZSkgPj0gMCkge1xuICAgIHNuYXBJbmRleCA9IHNuYXBHcmlkLmluZGV4T2YodHJhbnNsYXRlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgc2tpcCA9IE1hdGgubWluKHBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAsIGFjdGl2ZUluZGV4KTtcbiAgICBzbmFwSW5kZXggPSBza2lwICsgTWF0aC5mbG9vcigoYWN0aXZlSW5kZXggLSBza2lwKSAvIHBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gIH1cblxuICBpZiAoc25hcEluZGV4ID49IHNuYXBHcmlkLmxlbmd0aCkgc25hcEluZGV4ID0gc25hcEdyaWQubGVuZ3RoIC0gMTtcblxuICBpZiAoYWN0aXZlSW5kZXggPT09IHByZXZpb3VzSW5kZXgpIHtcbiAgICBpZiAoc25hcEluZGV4ICE9PSBwcmV2aW91c1NuYXBJbmRleCkge1xuICAgICAgc3dpcGVyLnNuYXBJbmRleCA9IHNuYXBJbmRleDtcbiAgICAgIHN3aXBlci5lbWl0KCdzbmFwSW5kZXhDaGFuZ2UnKTtcbiAgICB9XG5cbiAgICByZXR1cm47XG4gIH0gLy8gR2V0IHJlYWwgaW5kZXhcblxuXG4gIHZhciByZWFsSW5kZXggPSBwYXJzZUludChzd2lwZXIuc2xpZGVzLmVxKGFjdGl2ZUluZGV4KS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpIHx8IGFjdGl2ZUluZGV4LCAxMCk7XG4gIGV4dGVuZChzd2lwZXIsIHtcbiAgICBzbmFwSW5kZXg6IHNuYXBJbmRleCxcbiAgICByZWFsSW5kZXg6IHJlYWxJbmRleCxcbiAgICBwcmV2aW91c0luZGV4OiBwcmV2aW91c0luZGV4LFxuICAgIGFjdGl2ZUluZGV4OiBhY3RpdmVJbmRleFxuICB9KTtcbiAgc3dpcGVyLmVtaXQoJ2FjdGl2ZUluZGV4Q2hhbmdlJyk7XG4gIHN3aXBlci5lbWl0KCdzbmFwSW5kZXhDaGFuZ2UnKTtcblxuICBpZiAocHJldmlvdXNSZWFsSW5kZXggIT09IHJlYWxJbmRleCkge1xuICAgIHN3aXBlci5lbWl0KCdyZWFsSW5kZXhDaGFuZ2UnKTtcbiAgfVxuXG4gIGlmIChzd2lwZXIuaW5pdGlhbGl6ZWQgfHwgc3dpcGVyLnBhcmFtcy5ydW5DYWxsYmFja3NPbkluaXQpIHtcbiAgICBzd2lwZXIuZW1pdCgnc2xpZGVDaGFuZ2UnKTtcbiAgfVxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS91cGRhdGUvdXBkYXRlQWN0aXZlSW5kZXguanMiLCJpbXBvcnQgJCBmcm9tICcuLi8uLi8uLi91dGlscy9kb20nO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXBkYXRlQ2xpY2tlZFNsaWRlKGUpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICB2YXIgc2xpZGUgPSAkKGUudGFyZ2V0KS5jbG9zZXN0KFwiLlwiICsgcGFyYW1zLnNsaWRlQ2xhc3MpWzBdO1xuICB2YXIgc2xpZGVGb3VuZCA9IGZhbHNlO1xuICB2YXIgc2xpZGVJbmRleDtcblxuICBpZiAoc2xpZGUpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN3aXBlci5zbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmIChzd2lwZXIuc2xpZGVzW2ldID09PSBzbGlkZSkge1xuICAgICAgICBzbGlkZUZvdW5kID0gdHJ1ZTtcbiAgICAgICAgc2xpZGVJbmRleCA9IGk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChzbGlkZSAmJiBzbGlkZUZvdW5kKSB7XG4gICAgc3dpcGVyLmNsaWNrZWRTbGlkZSA9IHNsaWRlO1xuXG4gICAgaWYgKHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkKSB7XG4gICAgICBzd2lwZXIuY2xpY2tlZEluZGV4ID0gcGFyc2VJbnQoJChzbGlkZSkuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSwgMTApO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuY2xpY2tlZEluZGV4ID0gc2xpZGVJbmRleDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLmNsaWNrZWRTbGlkZSA9IHVuZGVmaW5lZDtcbiAgICBzd2lwZXIuY2xpY2tlZEluZGV4ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChwYXJhbXMuc2xpZGVUb0NsaWNrZWRTbGlkZSAmJiBzd2lwZXIuY2xpY2tlZEluZGV4ICE9PSB1bmRlZmluZWQgJiYgc3dpcGVyLmNsaWNrZWRJbmRleCAhPT0gc3dpcGVyLmFjdGl2ZUluZGV4KSB7XG4gICAgc3dpcGVyLnNsaWRlVG9DbGlja2VkU2xpZGUoKTtcbiAgfVxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS91cGRhdGUvdXBkYXRlQ2xpY2tlZFNsaWRlLmpzIiwiaW1wb3J0IGdldFRyYW5zbGF0ZSBmcm9tICcuL2dldFRyYW5zbGF0ZSc7XG5pbXBvcnQgc2V0VHJhbnNsYXRlIGZyb20gJy4vc2V0VHJhbnNsYXRlJztcbmltcG9ydCBtaW5UcmFuc2xhdGUgZnJvbSAnLi9taW5UcmFuc2xhdGUnO1xuaW1wb3J0IG1heFRyYW5zbGF0ZSBmcm9tICcuL21heFRyYW5zbGF0ZSc7XG5pbXBvcnQgdHJhbnNsYXRlVG8gZnJvbSAnLi90cmFuc2xhdGVUbyc7XG5leHBvcnQgZGVmYXVsdCB7XG4gIGdldFRyYW5zbGF0ZTogZ2V0VHJhbnNsYXRlLFxuICBzZXRUcmFuc2xhdGU6IHNldFRyYW5zbGF0ZSxcbiAgbWluVHJhbnNsYXRlOiBtaW5UcmFuc2xhdGUsXG4gIG1heFRyYW5zbGF0ZTogbWF4VHJhbnNsYXRlLFxuICB0cmFuc2xhdGVUbzogdHJhbnNsYXRlVG9cbn07XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL3RyYW5zbGF0ZS9pbmRleC5qcyIsImltcG9ydCB7IGdldFRyYW5zbGF0ZSB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFN3aXBlclRyYW5zbGF0ZShheGlzKSB7XG4gIGlmIChheGlzID09PSB2b2lkIDApIHtcbiAgICBheGlzID0gdGhpcy5pc0hvcml6b250YWwoKSA/ICd4JyA6ICd5JztcbiAgfVxuXG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgIHJ0bCA9IHN3aXBlci5ydGxUcmFuc2xhdGUsXG4gICAgICB0cmFuc2xhdGUgPSBzd2lwZXIudHJhbnNsYXRlLFxuICAgICAgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsO1xuXG4gIGlmIChwYXJhbXMudmlydHVhbFRyYW5zbGF0ZSkge1xuICAgIHJldHVybiBydGwgPyAtdHJhbnNsYXRlIDogdHJhbnNsYXRlO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgcmV0dXJuIHRyYW5zbGF0ZTtcbiAgfVxuXG4gIHZhciBjdXJyZW50VHJhbnNsYXRlID0gZ2V0VHJhbnNsYXRlKCR3cmFwcGVyRWxbMF0sIGF4aXMpO1xuICBpZiAocnRsKSBjdXJyZW50VHJhbnNsYXRlID0gLWN1cnJlbnRUcmFuc2xhdGU7XG4gIHJldHVybiBjdXJyZW50VHJhbnNsYXRlIHx8IDA7XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL3RyYW5zbGF0ZS9nZXRUcmFuc2xhdGUuanMiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXRUcmFuc2xhdGUodHJhbnNsYXRlLCBieUNvbnRyb2xsZXIpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBydGwgPSBzd2lwZXIucnRsVHJhbnNsYXRlLFxuICAgICAgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbCxcbiAgICAgIHdyYXBwZXJFbCA9IHN3aXBlci53cmFwcGVyRWwsXG4gICAgICBwcm9ncmVzcyA9IHN3aXBlci5wcm9ncmVzcztcbiAgdmFyIHggPSAwO1xuICB2YXIgeSA9IDA7XG4gIHZhciB6ID0gMDtcblxuICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgeCA9IHJ0bCA/IC10cmFuc2xhdGUgOiB0cmFuc2xhdGU7XG4gIH0gZWxzZSB7XG4gICAgeSA9IHRyYW5zbGF0ZTtcbiAgfVxuXG4gIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSB7XG4gICAgeCA9IE1hdGguZmxvb3IoeCk7XG4gICAgeSA9IE1hdGguZmxvb3IoeSk7XG4gIH1cblxuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICB3cmFwcGVyRWxbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3Njcm9sbExlZnQnIDogJ3Njcm9sbFRvcCddID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gLXggOiAteTtcbiAgfSBlbHNlIGlmICghcGFyYW1zLnZpcnR1YWxUcmFuc2xhdGUpIHtcbiAgICAkd3JhcHBlckVsLnRyYW5zZm9ybShcInRyYW5zbGF0ZTNkKFwiICsgeCArIFwicHgsIFwiICsgeSArIFwicHgsIFwiICsgeiArIFwicHgpXCIpO1xuICB9XG5cbiAgc3dpcGVyLnByZXZpb3VzVHJhbnNsYXRlID0gc3dpcGVyLnRyYW5zbGF0ZTtcbiAgc3dpcGVyLnRyYW5zbGF0ZSA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHggOiB5OyAvLyBDaGVjayBpZiB3ZSBuZWVkIHRvIHVwZGF0ZSBwcm9ncmVzc1xuXG4gIHZhciBuZXdQcm9ncmVzcztcbiAgdmFyIHRyYW5zbGF0ZXNEaWZmID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuXG4gIGlmICh0cmFuc2xhdGVzRGlmZiA9PT0gMCkge1xuICAgIG5ld1Byb2dyZXNzID0gMDtcbiAgfSBlbHNlIHtcbiAgICBuZXdQcm9ncmVzcyA9ICh0cmFuc2xhdGUgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIC8gdHJhbnNsYXRlc0RpZmY7XG4gIH1cblxuICBpZiAobmV3UHJvZ3Jlc3MgIT09IHByb2dyZXNzKSB7XG4gICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKHRyYW5zbGF0ZSk7XG4gIH1cblxuICBzd2lwZXIuZW1pdCgnc2V0VHJhbnNsYXRlJywgc3dpcGVyLnRyYW5zbGF0ZSwgYnlDb250cm9sbGVyKTtcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvdHJhbnNsYXRlL3NldFRyYW5zbGF0ZS5qcyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1pblRyYW5zbGF0ZSgpIHtcbiAgcmV0dXJuIC10aGlzLnNuYXBHcmlkWzBdO1xufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS90cmFuc2xhdGUvbWluVHJhbnNsYXRlLmpzIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWF4VHJhbnNsYXRlKCkge1xuICByZXR1cm4gLXRoaXMuc25hcEdyaWRbdGhpcy5zbmFwR3JpZC5sZW5ndGggLSAxXTtcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvdHJhbnNsYXRlL21heFRyYW5zbGF0ZS5qcyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRyYW5zbGF0ZVRvKHRyYW5zbGF0ZSwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgdHJhbnNsYXRlQm91bmRzLCBpbnRlcm5hbCkge1xuICBpZiAodHJhbnNsYXRlID09PSB2b2lkIDApIHtcbiAgICB0cmFuc2xhdGUgPSAwO1xuICB9XG5cbiAgaWYgKHNwZWVkID09PSB2b2lkIDApIHtcbiAgICBzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkO1xuICB9XG5cbiAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0cmFuc2xhdGVCb3VuZHMgPT09IHZvaWQgMCkge1xuICAgIHRyYW5zbGF0ZUJvdW5kcyA9IHRydWU7XG4gIH1cblxuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICB3cmFwcGVyRWwgPSBzd2lwZXIud3JhcHBlckVsO1xuXG4gIGlmIChzd2lwZXIuYW5pbWF0aW5nICYmIHBhcmFtcy5wcmV2ZW50SW50ZXJhY3Rpb25PblRyYW5zaXRpb24pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgbWluVHJhbnNsYXRlID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICB2YXIgbWF4VHJhbnNsYXRlID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpO1xuICB2YXIgbmV3VHJhbnNsYXRlO1xuICBpZiAodHJhbnNsYXRlQm91bmRzICYmIHRyYW5zbGF0ZSA+IG1pblRyYW5zbGF0ZSkgbmV3VHJhbnNsYXRlID0gbWluVHJhbnNsYXRlO2Vsc2UgaWYgKHRyYW5zbGF0ZUJvdW5kcyAmJiB0cmFuc2xhdGUgPCBtYXhUcmFuc2xhdGUpIG5ld1RyYW5zbGF0ZSA9IG1heFRyYW5zbGF0ZTtlbHNlIG5ld1RyYW5zbGF0ZSA9IHRyYW5zbGF0ZTsgLy8gVXBkYXRlIHByb2dyZXNzXG5cbiAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKG5ld1RyYW5zbGF0ZSk7XG5cbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgdmFyIGlzSCA9IHN3aXBlci5pc0hvcml6b250YWwoKTtcblxuICAgIGlmIChzcGVlZCA9PT0gMCkge1xuICAgICAgd3JhcHBlckVsW2lzSCA/ICdzY3JvbGxMZWZ0JyA6ICdzY3JvbGxUb3AnXSA9IC1uZXdUcmFuc2xhdGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgaWYgKHdyYXBwZXJFbC5zY3JvbGxUbykge1xuICAgICAgICB2YXIgX3dyYXBwZXJFbCRzY3JvbGxUbztcblxuICAgICAgICB3cmFwcGVyRWwuc2Nyb2xsVG8oKF93cmFwcGVyRWwkc2Nyb2xsVG8gPSB7fSwgX3dyYXBwZXJFbCRzY3JvbGxUb1tpc0ggPyAnbGVmdCcgOiAndG9wJ10gPSAtbmV3VHJhbnNsYXRlLCBfd3JhcHBlckVsJHNjcm9sbFRvLmJlaGF2aW9yID0gJ3Ntb290aCcsIF93cmFwcGVyRWwkc2Nyb2xsVG8pKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdyYXBwZXJFbFtpc0ggPyAnc2Nyb2xsTGVmdCcgOiAnc2Nyb2xsVG9wJ10gPSAtbmV3VHJhbnNsYXRlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHNwZWVkID09PSAwKSB7XG4gICAgc3dpcGVyLnNldFRyYW5zaXRpb24oMCk7XG4gICAgc3dpcGVyLnNldFRyYW5zbGF0ZShuZXdUcmFuc2xhdGUpO1xuXG4gICAgaWYgKHJ1bkNhbGxiYWNrcykge1xuICAgICAgc3dpcGVyLmVtaXQoJ2JlZm9yZVRyYW5zaXRpb25TdGFydCcsIHNwZWVkLCBpbnRlcm5hbCk7XG4gICAgICBzd2lwZXIuZW1pdCgndHJhbnNpdGlvbkVuZCcpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihzcGVlZCk7XG4gICAgc3dpcGVyLnNldFRyYW5zbGF0ZShuZXdUcmFuc2xhdGUpO1xuXG4gICAgaWYgKHJ1bkNhbGxiYWNrcykge1xuICAgICAgc3dpcGVyLmVtaXQoJ2JlZm9yZVRyYW5zaXRpb25TdGFydCcsIHNwZWVkLCBpbnRlcm5hbCk7XG4gICAgICBzd2lwZXIuZW1pdCgndHJhbnNpdGlvblN0YXJ0Jyk7XG4gICAgfVxuXG4gICAgaWYgKCFzd2lwZXIuYW5pbWF0aW5nKSB7XG4gICAgICBzd2lwZXIuYW5pbWF0aW5nID0gdHJ1ZTtcblxuICAgICAgaWYgKCFzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKSB7XG4gICAgICAgIHN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbiB0cmFuc2l0aW9uRW5kKGUpIHtcbiAgICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgICAgICAgaWYgKGUudGFyZ2V0ICE9PSB0aGlzKSByZXR1cm47XG4gICAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWxbMF0ucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpO1xuICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3dlYmtpdFRyYW5zaXRpb25FbmQnLCBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICAgICAgICBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kID0gbnVsbDtcbiAgICAgICAgICBkZWxldGUgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZDtcblxuICAgICAgICAgIGlmIChydW5DYWxsYmFja3MpIHtcbiAgICAgICAgICAgIHN3aXBlci5lbWl0KCd0cmFuc2l0aW9uRW5kJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCk7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5hZGRFdmVudExpc3RlbmVyKCd3ZWJraXRUcmFuc2l0aW9uRW5kJywgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL3RyYW5zbGF0ZS90cmFuc2xhdGVUby5qcyIsImltcG9ydCBzZXRUcmFuc2l0aW9uIGZyb20gJy4vc2V0VHJhbnNpdGlvbic7XG5pbXBvcnQgdHJhbnNpdGlvblN0YXJ0IGZyb20gJy4vdHJhbnNpdGlvblN0YXJ0JztcbmltcG9ydCB0cmFuc2l0aW9uRW5kIGZyb20gJy4vdHJhbnNpdGlvbkVuZCc7XG5leHBvcnQgZGVmYXVsdCB7XG4gIHNldFRyYW5zaXRpb246IHNldFRyYW5zaXRpb24sXG4gIHRyYW5zaXRpb25TdGFydDogdHJhbnNpdGlvblN0YXJ0LFxuICB0cmFuc2l0aW9uRW5kOiB0cmFuc2l0aW9uRW5kXG59O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS90cmFuc2l0aW9uL2luZGV4LmpzIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihkdXJhdGlvbiwgYnlDb250cm9sbGVyKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuXG4gIGlmICghc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgc3dpcGVyLiR3cmFwcGVyRWwudHJhbnNpdGlvbihkdXJhdGlvbik7XG4gIH1cblxuICBzd2lwZXIuZW1pdCgnc2V0VHJhbnNpdGlvbicsIGR1cmF0aW9uLCBieUNvbnRyb2xsZXIpO1xufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS90cmFuc2l0aW9uL3NldFRyYW5zaXRpb24uanMiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0cmFuc2l0aW9uU3RhcnQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pIHtcbiAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgfVxuXG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXgsXG4gICAgICBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgcHJldmlvdXNJbmRleCA9IHN3aXBlci5wcmV2aW91c0luZGV4O1xuICBpZiAocGFyYW1zLmNzc01vZGUpIHJldHVybjtcblxuICBpZiAocGFyYW1zLmF1dG9IZWlnaHQpIHtcbiAgICBzd2lwZXIudXBkYXRlQXV0b0hlaWdodCgpO1xuICB9XG5cbiAgdmFyIGRpciA9IGRpcmVjdGlvbjtcblxuICBpZiAoIWRpcikge1xuICAgIGlmIChhY3RpdmVJbmRleCA+IHByZXZpb3VzSW5kZXgpIGRpciA9ICduZXh0JztlbHNlIGlmIChhY3RpdmVJbmRleCA8IHByZXZpb3VzSW5kZXgpIGRpciA9ICdwcmV2JztlbHNlIGRpciA9ICdyZXNldCc7XG4gIH1cblxuICBzd2lwZXIuZW1pdCgndHJhbnNpdGlvblN0YXJ0Jyk7XG5cbiAgaWYgKHJ1bkNhbGxiYWNrcyAmJiBhY3RpdmVJbmRleCAhPT0gcHJldmlvdXNJbmRleCkge1xuICAgIGlmIChkaXIgPT09ICdyZXNldCcpIHtcbiAgICAgIHN3aXBlci5lbWl0KCdzbGlkZVJlc2V0VHJhbnNpdGlvblN0YXJ0Jyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc3dpcGVyLmVtaXQoJ3NsaWRlQ2hhbmdlVHJhbnNpdGlvblN0YXJ0Jyk7XG5cbiAgICBpZiAoZGlyID09PSAnbmV4dCcpIHtcbiAgICAgIHN3aXBlci5lbWl0KCdzbGlkZU5leHRUcmFuc2l0aW9uU3RhcnQnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLmVtaXQoJ3NsaWRlUHJldlRyYW5zaXRpb25TdGFydCcpO1xuICAgIH1cbiAgfVxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS90cmFuc2l0aW9uL3RyYW5zaXRpb25TdGFydC5qcyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRyYW5zaXRpb25FbmQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pIHtcbiAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgfVxuXG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXgsXG4gICAgICBwcmV2aW91c0luZGV4ID0gc3dpcGVyLnByZXZpb3VzSW5kZXgsXG4gICAgICBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICBzd2lwZXIuYW5pbWF0aW5nID0gZmFsc2U7XG4gIGlmIChwYXJhbXMuY3NzTW9kZSkgcmV0dXJuO1xuICBzd2lwZXIuc2V0VHJhbnNpdGlvbigwKTtcbiAgdmFyIGRpciA9IGRpcmVjdGlvbjtcblxuICBpZiAoIWRpcikge1xuICAgIGlmIChhY3RpdmVJbmRleCA+IHByZXZpb3VzSW5kZXgpIGRpciA9ICduZXh0JztlbHNlIGlmIChhY3RpdmVJbmRleCA8IHByZXZpb3VzSW5kZXgpIGRpciA9ICdwcmV2JztlbHNlIGRpciA9ICdyZXNldCc7XG4gIH1cblxuICBzd2lwZXIuZW1pdCgndHJhbnNpdGlvbkVuZCcpO1xuXG4gIGlmIChydW5DYWxsYmFja3MgJiYgYWN0aXZlSW5kZXggIT09IHByZXZpb3VzSW5kZXgpIHtcbiAgICBpZiAoZGlyID09PSAncmVzZXQnKSB7XG4gICAgICBzd2lwZXIuZW1pdCgnc2xpZGVSZXNldFRyYW5zaXRpb25FbmQnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzd2lwZXIuZW1pdCgnc2xpZGVDaGFuZ2VUcmFuc2l0aW9uRW5kJyk7XG5cbiAgICBpZiAoZGlyID09PSAnbmV4dCcpIHtcbiAgICAgIHN3aXBlci5lbWl0KCdzbGlkZU5leHRUcmFuc2l0aW9uRW5kJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5lbWl0KCdzbGlkZVByZXZUcmFuc2l0aW9uRW5kJyk7XG4gICAgfVxuICB9XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL3RyYW5zaXRpb24vdHJhbnNpdGlvbkVuZC5qcyIsImltcG9ydCBzbGlkZVRvIGZyb20gJy4vc2xpZGVUbyc7XG5pbXBvcnQgc2xpZGVUb0xvb3AgZnJvbSAnLi9zbGlkZVRvTG9vcCc7XG5pbXBvcnQgc2xpZGVOZXh0IGZyb20gJy4vc2xpZGVOZXh0JztcbmltcG9ydCBzbGlkZVByZXYgZnJvbSAnLi9zbGlkZVByZXYnO1xuaW1wb3J0IHNsaWRlUmVzZXQgZnJvbSAnLi9zbGlkZVJlc2V0JztcbmltcG9ydCBzbGlkZVRvQ2xvc2VzdCBmcm9tICcuL3NsaWRlVG9DbG9zZXN0JztcbmltcG9ydCBzbGlkZVRvQ2xpY2tlZFNsaWRlIGZyb20gJy4vc2xpZGVUb0NsaWNrZWRTbGlkZSc7XG5leHBvcnQgZGVmYXVsdCB7XG4gIHNsaWRlVG86IHNsaWRlVG8sXG4gIHNsaWRlVG9Mb29wOiBzbGlkZVRvTG9vcCxcbiAgc2xpZGVOZXh0OiBzbGlkZU5leHQsXG4gIHNsaWRlUHJldjogc2xpZGVQcmV2LFxuICBzbGlkZVJlc2V0OiBzbGlkZVJlc2V0LFxuICBzbGlkZVRvQ2xvc2VzdDogc2xpZGVUb0Nsb3Nlc3QsXG4gIHNsaWRlVG9DbGlja2VkU2xpZGU6IHNsaWRlVG9DbGlja2VkU2xpZGVcbn07XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL3NsaWRlL2luZGV4LmpzIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2xpZGVUbyhpbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwsIGluaXRpYWwpIHtcbiAgaWYgKGluZGV4ID09PSB2b2lkIDApIHtcbiAgICBpbmRleCA9IDA7XG4gIH1cblxuICBpZiAoc3BlZWQgPT09IHZvaWQgMCkge1xuICAgIHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQ7XG4gIH1cblxuICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBpbmRleCAhPT0gJ251bWJlcicgJiYgdHlwZW9mIGluZGV4ICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSAnaW5kZXgnIGFyZ3VtZW50IGNhbm5vdCBoYXZlIHR5cGUgb3RoZXIgdGhhbiAnbnVtYmVyJyBvciAnc3RyaW5nJy4gW1wiICsgdHlwZW9mIGluZGV4ICsgXCJdIGdpdmVuLlwiKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgaW5kZXggPT09ICdzdHJpbmcnKSB7XG4gICAgLyoqXG4gICAgICogVGhlIGBpbmRleGAgYXJndW1lbnQgY29udmVydGVkIGZyb20gYHN0cmluZ2AgdG8gYG51bWJlcmAuXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB2YXIgaW5kZXhBc051bWJlciA9IHBhcnNlSW50KGluZGV4LCAxMCk7XG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBgaW5kZXhgIGFyZ3VtZW50IGlzIGEgdmFsaWQgYG51bWJlcmBcbiAgICAgKiBhZnRlciBiZWluZyBjb252ZXJ0ZWQgZnJvbSB0aGUgYHN0cmluZ2AgdHlwZS5cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cblxuICAgIHZhciBpc1ZhbGlkTnVtYmVyID0gaXNGaW5pdGUoaW5kZXhBc051bWJlcik7XG5cbiAgICBpZiAoIWlzVmFsaWROdW1iZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBwYXNzZWQtaW4gJ2luZGV4JyAoc3RyaW5nKSBjb3VsZG4ndCBiZSBjb252ZXJ0ZWQgdG8gJ251bWJlcicuIFtcIiArIGluZGV4ICsgXCJdIGdpdmVuLlwiKTtcbiAgICB9IC8vIEtub3dpbmcgdGhhdCB0aGUgY29udmVydGVkIGBpbmRleGAgaXMgYSB2YWxpZCBudW1iZXIsXG4gICAgLy8gd2UgY2FuIHVwZGF0ZSB0aGUgb3JpZ2luYWwgYXJndW1lbnQncyB2YWx1ZS5cblxuXG4gICAgaW5kZXggPSBpbmRleEFzTnVtYmVyO1xuICB9XG5cbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBzbGlkZUluZGV4ID0gaW5kZXg7XG4gIGlmIChzbGlkZUluZGV4IDwgMCkgc2xpZGVJbmRleCA9IDA7XG4gIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgc25hcEdyaWQgPSBzd2lwZXIuc25hcEdyaWQsXG4gICAgICBzbGlkZXNHcmlkID0gc3dpcGVyLnNsaWRlc0dyaWQsXG4gICAgICBwcmV2aW91c0luZGV4ID0gc3dpcGVyLnByZXZpb3VzSW5kZXgsXG4gICAgICBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleCxcbiAgICAgIHJ0bCA9IHN3aXBlci5ydGxUcmFuc2xhdGUsXG4gICAgICB3cmFwcGVyRWwgPSBzd2lwZXIud3JhcHBlckVsLFxuICAgICAgZW5hYmxlZCA9IHN3aXBlci5lbmFibGVkO1xuXG4gIGlmIChzd2lwZXIuYW5pbWF0aW5nICYmIHBhcmFtcy5wcmV2ZW50SW50ZXJhY3Rpb25PblRyYW5zaXRpb24gfHwgIWVuYWJsZWQgJiYgIWludGVybmFsICYmICFpbml0aWFsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIHNraXAgPSBNYXRoLm1pbihzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCwgc2xpZGVJbmRleCk7XG4gIHZhciBzbmFwSW5kZXggPSBza2lwICsgTWF0aC5mbG9vcigoc2xpZGVJbmRleCAtIHNraXApIC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gIGlmIChzbmFwSW5kZXggPj0gc25hcEdyaWQubGVuZ3RoKSBzbmFwSW5kZXggPSBzbmFwR3JpZC5sZW5ndGggLSAxO1xuXG4gIGlmICgoYWN0aXZlSW5kZXggfHwgcGFyYW1zLmluaXRpYWxTbGlkZSB8fCAwKSA9PT0gKHByZXZpb3VzSW5kZXggfHwgMCkgJiYgcnVuQ2FsbGJhY2tzKSB7XG4gICAgc3dpcGVyLmVtaXQoJ2JlZm9yZVNsaWRlQ2hhbmdlU3RhcnQnKTtcbiAgfVxuXG4gIHZhciB0cmFuc2xhdGUgPSAtc25hcEdyaWRbc25hcEluZGV4XTsgLy8gVXBkYXRlIHByb2dyZXNzXG5cbiAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKHRyYW5zbGF0ZSk7IC8vIE5vcm1hbGl6ZSBzbGlkZUluZGV4XG5cbiAgaWYgKHBhcmFtcy5ub3JtYWxpemVTbGlkZUluZGV4KSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGlkZXNHcmlkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICB2YXIgbm9ybWFsaXplZFRyYW5zbGF0ZSA9IC1NYXRoLmZsb29yKHRyYW5zbGF0ZSAqIDEwMCk7XG4gICAgICB2YXIgbm9ybWFsaXplZEdpcmQgPSBNYXRoLmZsb29yKHNsaWRlc0dyaWRbaV0gKiAxMDApO1xuICAgICAgdmFyIG5vcm1hbGl6ZWRHcmlkTmV4dCA9IE1hdGguZmxvb3Ioc2xpZGVzR3JpZFtpICsgMV0gKiAxMDApO1xuXG4gICAgICBpZiAodHlwZW9mIHNsaWRlc0dyaWRbaSArIDFdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBpZiAobm9ybWFsaXplZFRyYW5zbGF0ZSA+PSBub3JtYWxpemVkR2lyZCAmJiBub3JtYWxpemVkVHJhbnNsYXRlIDwgbm9ybWFsaXplZEdyaWROZXh0IC0gKG5vcm1hbGl6ZWRHcmlkTmV4dCAtIG5vcm1hbGl6ZWRHaXJkKSAvIDIpIHtcbiAgICAgICAgICBzbGlkZUluZGV4ID0gaTtcbiAgICAgICAgfSBlbHNlIGlmIChub3JtYWxpemVkVHJhbnNsYXRlID49IG5vcm1hbGl6ZWRHaXJkICYmIG5vcm1hbGl6ZWRUcmFuc2xhdGUgPCBub3JtYWxpemVkR3JpZE5leHQpIHtcbiAgICAgICAgICBzbGlkZUluZGV4ID0gaSArIDE7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAobm9ybWFsaXplZFRyYW5zbGF0ZSA+PSBub3JtYWxpemVkR2lyZCkge1xuICAgICAgICBzbGlkZUluZGV4ID0gaTtcbiAgICAgIH1cbiAgICB9XG4gIH0gLy8gRGlyZWN0aW9ucyBsb2Nrc1xuXG5cbiAgaWYgKHN3aXBlci5pbml0aWFsaXplZCAmJiBzbGlkZUluZGV4ICE9PSBhY3RpdmVJbmRleCkge1xuICAgIGlmICghc3dpcGVyLmFsbG93U2xpZGVOZXh0ICYmIHRyYW5zbGF0ZSA8IHN3aXBlci50cmFuc2xhdGUgJiYgdHJhbnNsYXRlIDwgc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZVByZXYgJiYgdHJhbnNsYXRlID4gc3dpcGVyLnRyYW5zbGF0ZSAmJiB0cmFuc2xhdGUgPiBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHtcbiAgICAgIGlmICgoYWN0aXZlSW5kZXggfHwgMCkgIT09IHNsaWRlSW5kZXgpIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICB2YXIgZGlyZWN0aW9uO1xuICBpZiAoc2xpZGVJbmRleCA+IGFjdGl2ZUluZGV4KSBkaXJlY3Rpb24gPSAnbmV4dCc7ZWxzZSBpZiAoc2xpZGVJbmRleCA8IGFjdGl2ZUluZGV4KSBkaXJlY3Rpb24gPSAncHJldic7ZWxzZSBkaXJlY3Rpb24gPSAncmVzZXQnOyAvLyBVcGRhdGUgSW5kZXhcblxuICBpZiAocnRsICYmIC10cmFuc2xhdGUgPT09IHN3aXBlci50cmFuc2xhdGUgfHwgIXJ0bCAmJiB0cmFuc2xhdGUgPT09IHN3aXBlci50cmFuc2xhdGUpIHtcbiAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoc2xpZGVJbmRleCk7IC8vIFVwZGF0ZSBIZWlnaHRcblxuICAgIGlmIChwYXJhbXMuYXV0b0hlaWdodCkge1xuICAgICAgc3dpcGVyLnVwZGF0ZUF1dG9IZWlnaHQoKTtcbiAgICB9XG5cbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuXG4gICAgaWYgKHBhcmFtcy5lZmZlY3QgIT09ICdzbGlkZScpIHtcbiAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUodHJhbnNsYXRlKTtcbiAgICB9XG5cbiAgICBpZiAoZGlyZWN0aW9uICE9PSAncmVzZXQnKSB7XG4gICAgICBzd2lwZXIudHJhbnNpdGlvblN0YXJ0KHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKTtcbiAgICAgIHN3aXBlci50cmFuc2l0aW9uRW5kKHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICB2YXIgaXNIID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpO1xuICAgIHZhciB0ID0gLXRyYW5zbGF0ZTtcblxuICAgIGlmIChydGwpIHtcbiAgICAgIHQgPSB3cmFwcGVyRWwuc2Nyb2xsV2lkdGggLSB3cmFwcGVyRWwub2Zmc2V0V2lkdGggLSB0O1xuICAgIH1cblxuICAgIGlmIChzcGVlZCA9PT0gMCkge1xuICAgICAgd3JhcHBlckVsW2lzSCA/ICdzY3JvbGxMZWZ0JyA6ICdzY3JvbGxUb3AnXSA9IHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgaWYgKHdyYXBwZXJFbC5zY3JvbGxUbykge1xuICAgICAgICB2YXIgX3dyYXBwZXJFbCRzY3JvbGxUbztcblxuICAgICAgICB3cmFwcGVyRWwuc2Nyb2xsVG8oKF93cmFwcGVyRWwkc2Nyb2xsVG8gPSB7fSwgX3dyYXBwZXJFbCRzY3JvbGxUb1tpc0ggPyAnbGVmdCcgOiAndG9wJ10gPSB0LCBfd3JhcHBlckVsJHNjcm9sbFRvLmJlaGF2aW9yID0gJ3Ntb290aCcsIF93cmFwcGVyRWwkc2Nyb2xsVG8pKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdyYXBwZXJFbFtpc0ggPyAnc2Nyb2xsTGVmdCcgOiAnc2Nyb2xsVG9wJ10gPSB0O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHNwZWVkID09PSAwKSB7XG4gICAgc3dpcGVyLnNldFRyYW5zaXRpb24oMCk7XG4gICAgc3dpcGVyLnNldFRyYW5zbGF0ZSh0cmFuc2xhdGUpO1xuICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleChzbGlkZUluZGV4KTtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgIHN3aXBlci5lbWl0KCdiZWZvcmVUcmFuc2l0aW9uU3RhcnQnLCBzcGVlZCwgaW50ZXJuYWwpO1xuICAgIHN3aXBlci50cmFuc2l0aW9uU3RhcnQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pO1xuICAgIHN3aXBlci50cmFuc2l0aW9uRW5kKHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKTtcbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihzcGVlZCk7XG4gICAgc3dpcGVyLnNldFRyYW5zbGF0ZSh0cmFuc2xhdGUpO1xuICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleChzbGlkZUluZGV4KTtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgIHN3aXBlci5lbWl0KCdiZWZvcmVUcmFuc2l0aW9uU3RhcnQnLCBzcGVlZCwgaW50ZXJuYWwpO1xuICAgIHN3aXBlci50cmFuc2l0aW9uU3RhcnQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pO1xuXG4gICAgaWYgKCFzd2lwZXIuYW5pbWF0aW5nKSB7XG4gICAgICBzd2lwZXIuYW5pbWF0aW5nID0gdHJ1ZTtcblxuICAgICAgaWYgKCFzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpIHtcbiAgICAgICAgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24gdHJhbnNpdGlvbkVuZChlKSB7XG4gICAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgICAgIGlmIChlLnRhcmdldCAhPT0gdGhpcykgcmV0dXJuO1xuICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpO1xuICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3dlYmtpdFRyYW5zaXRpb25FbmQnLCBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpO1xuICAgICAgICAgIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCA9IG51bGw7XG4gICAgICAgICAgZGVsZXRlIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZDtcbiAgICAgICAgICBzd2lwZXIudHJhbnNpdGlvbkVuZChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpO1xuICAgICAgc3dpcGVyLiR3cmFwcGVyRWxbMF0uYWRkRXZlbnRMaXN0ZW5lcignd2Via2l0VHJhbnNpdGlvbkVuZCcsIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL3NsaWRlL3NsaWRlVG8uanMiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzbGlkZVRvTG9vcChpbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpIHtcbiAgaWYgKGluZGV4ID09PSB2b2lkIDApIHtcbiAgICBpbmRleCA9IDA7XG4gIH1cblxuICBpZiAoc3BlZWQgPT09IHZvaWQgMCkge1xuICAgIHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQ7XG4gIH1cblxuICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICB9XG5cbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBuZXdJbmRleCA9IGluZGV4O1xuXG4gIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICBuZXdJbmRleCArPSBzd2lwZXIubG9vcGVkU2xpZGVzO1xuICB9XG5cbiAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKG5ld0luZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL3NsaWRlL3NsaWRlVG9Mb29wLmpzIiwiLyogZXNsaW50IG5vLXVudXNlZC12YXJzOiBcIm9mZlwiICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzbGlkZU5leHQoc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpIHtcbiAgaWYgKHNwZWVkID09PSB2b2lkIDApIHtcbiAgICBzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkO1xuICB9XG5cbiAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgfVxuXG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgIGFuaW1hdGluZyA9IHN3aXBlci5hbmltYXRpbmcsXG4gICAgICBlbmFibGVkID0gc3dpcGVyLmVuYWJsZWQ7XG4gIGlmICghZW5hYmxlZCkgcmV0dXJuIHN3aXBlcjtcbiAgdmFyIGluY3JlbWVudCA9IHN3aXBlci5hY3RpdmVJbmRleCA8IHBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAgPyAxIDogcGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuXG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIGlmIChhbmltYXRpbmcgJiYgcGFyYW1zLmxvb3BQcmV2ZW50c1NsaWRlKSByZXR1cm4gZmFsc2U7XG4gICAgc3dpcGVyLmxvb3BGaXgoKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5cbiAgICBzd2lwZXIuX2NsaWVudExlZnQgPSBzd2lwZXIuJHdyYXBwZXJFbFswXS5jbGllbnRMZWZ0O1xuICB9XG5cbiAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCArIGluY3JlbWVudCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9zbGlkZS9zbGlkZU5leHQuanMiLCIvKiBlc2xpbnQgbm8tdW51c2VkLXZhcnM6IFwib2ZmXCIgKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNsaWRlUHJldihzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCkge1xuICBpZiAoc3BlZWQgPT09IHZvaWQgMCkge1xuICAgIHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQ7XG4gIH1cblxuICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICB9XG5cbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgYW5pbWF0aW5nID0gc3dpcGVyLmFuaW1hdGluZyxcbiAgICAgIHNuYXBHcmlkID0gc3dpcGVyLnNuYXBHcmlkLFxuICAgICAgc2xpZGVzR3JpZCA9IHN3aXBlci5zbGlkZXNHcmlkLFxuICAgICAgcnRsVHJhbnNsYXRlID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSxcbiAgICAgIGVuYWJsZWQgPSBzd2lwZXIuZW5hYmxlZDtcbiAgaWYgKCFlbmFibGVkKSByZXR1cm4gc3dpcGVyO1xuXG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIGlmIChhbmltYXRpbmcgJiYgcGFyYW1zLmxvb3BQcmV2ZW50c1NsaWRlKSByZXR1cm4gZmFsc2U7XG4gICAgc3dpcGVyLmxvb3BGaXgoKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5cbiAgICBzd2lwZXIuX2NsaWVudExlZnQgPSBzd2lwZXIuJHdyYXBwZXJFbFswXS5jbGllbnRMZWZ0O1xuICB9XG5cbiAgdmFyIHRyYW5zbGF0ZSA9IHJ0bFRyYW5zbGF0ZSA/IHN3aXBlci50cmFuc2xhdGUgOiAtc3dpcGVyLnRyYW5zbGF0ZTtcblxuICBmdW5jdGlvbiBub3JtYWxpemUodmFsKSB7XG4gICAgaWYgKHZhbCA8IDApIHJldHVybiAtTWF0aC5mbG9vcihNYXRoLmFicyh2YWwpKTtcbiAgICByZXR1cm4gTWF0aC5mbG9vcih2YWwpO1xuICB9XG5cbiAgdmFyIG5vcm1hbGl6ZWRUcmFuc2xhdGUgPSBub3JtYWxpemUodHJhbnNsYXRlKTtcbiAgdmFyIG5vcm1hbGl6ZWRTbmFwR3JpZCA9IHNuYXBHcmlkLm1hcChmdW5jdGlvbiAodmFsKSB7XG4gICAgcmV0dXJuIG5vcm1hbGl6ZSh2YWwpO1xuICB9KTtcbiAgdmFyIGN1cnJlbnRTbmFwID0gc25hcEdyaWRbbm9ybWFsaXplZFNuYXBHcmlkLmluZGV4T2Yobm9ybWFsaXplZFRyYW5zbGF0ZSldO1xuICB2YXIgcHJldlNuYXAgPSBzbmFwR3JpZFtub3JtYWxpemVkU25hcEdyaWQuaW5kZXhPZihub3JtYWxpemVkVHJhbnNsYXRlKSAtIDFdO1xuXG4gIGlmICh0eXBlb2YgcHJldlNuYXAgPT09ICd1bmRlZmluZWQnICYmIHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgc25hcEdyaWQuZm9yRWFjaChmdW5jdGlvbiAoc25hcCkge1xuICAgICAgaWYgKCFwcmV2U25hcCAmJiBub3JtYWxpemVkVHJhbnNsYXRlID49IHNuYXApIHByZXZTbmFwID0gc25hcDtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBwcmV2SW5kZXg7XG5cbiAgaWYgKHR5cGVvZiBwcmV2U25hcCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBwcmV2SW5kZXggPSBzbGlkZXNHcmlkLmluZGV4T2YocHJldlNuYXApO1xuICAgIGlmIChwcmV2SW5kZXggPCAwKSBwcmV2SW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXggLSAxO1xuICB9XG5cbiAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKHByZXZJbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9zbGlkZS9zbGlkZVByZXYuanMiLCIvKiBlc2xpbnQgbm8tdW51c2VkLXZhcnM6IFwib2ZmXCIgKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNsaWRlUmVzZXQoc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpIHtcbiAgaWYgKHNwZWVkID09PSB2b2lkIDApIHtcbiAgICBzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkO1xuICB9XG5cbiAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgfVxuXG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICByZXR1cm4gc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL3NsaWRlL3NsaWRlUmVzZXQuanMiLCIvKiBlc2xpbnQgbm8tdW51c2VkLXZhcnM6IFwib2ZmXCIgKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNsaWRlVG9DbG9zZXN0KHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsLCB0aHJlc2hvbGQpIHtcbiAgaWYgKHNwZWVkID09PSB2b2lkIDApIHtcbiAgICBzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkO1xuICB9XG5cbiAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0aHJlc2hvbGQgPT09IHZvaWQgMCkge1xuICAgIHRocmVzaG9sZCA9IDAuNTtcbiAgfVxuXG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgaW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gIHZhciBza2lwID0gTWF0aC5taW4oc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAsIGluZGV4KTtcbiAgdmFyIHNuYXBJbmRleCA9IHNraXAgKyBNYXRoLmZsb29yKChpbmRleCAtIHNraXApIC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gIHZhciB0cmFuc2xhdGUgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gc3dpcGVyLnRyYW5zbGF0ZSA6IC1zd2lwZXIudHJhbnNsYXRlO1xuXG4gIGlmICh0cmFuc2xhdGUgPj0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleF0pIHtcbiAgICAvLyBUaGUgY3VycmVudCB0cmFuc2xhdGUgaXMgb24gb3IgYWZ0ZXIgdGhlIGN1cnJlbnQgc25hcCBpbmRleCwgc28gdGhlIGNob2ljZVxuICAgIC8vIGlzIGJldHdlZW4gdGhlIGN1cnJlbnQgaW5kZXggYW5kIHRoZSBvbmUgYWZ0ZXIgaXQuXG4gICAgdmFyIGN1cnJlbnRTbmFwID0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleF07XG4gICAgdmFyIG5leHRTbmFwID0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleCArIDFdO1xuXG4gICAgaWYgKHRyYW5zbGF0ZSAtIGN1cnJlbnRTbmFwID4gKG5leHRTbmFwIC0gY3VycmVudFNuYXApICogdGhyZXNob2xkKSB7XG4gICAgICBpbmRleCArPSBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBUaGUgY3VycmVudCB0cmFuc2xhdGUgaXMgYmVmb3JlIHRoZSBjdXJyZW50IHNuYXAgaW5kZXgsIHNvIHRoZSBjaG9pY2VcbiAgICAvLyBpcyBiZXR3ZWVuIHRoZSBjdXJyZW50IGluZGV4IGFuZCB0aGUgb25lIGJlZm9yZSBpdC5cbiAgICB2YXIgcHJldlNuYXAgPSBzd2lwZXIuc25hcEdyaWRbc25hcEluZGV4IC0gMV07XG4gICAgdmFyIF9jdXJyZW50U25hcCA9IHN3aXBlci5zbmFwR3JpZFtzbmFwSW5kZXhdO1xuXG4gICAgaWYgKHRyYW5zbGF0ZSAtIHByZXZTbmFwIDw9IChfY3VycmVudFNuYXAgLSBwcmV2U25hcCkgKiB0aHJlc2hvbGQpIHtcbiAgICAgIGluZGV4IC09IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gICAgfVxuICB9XG5cbiAgaW5kZXggPSBNYXRoLm1heChpbmRleCwgMCk7XG4gIGluZGV4ID0gTWF0aC5taW4oaW5kZXgsIHN3aXBlci5zbGlkZXNHcmlkLmxlbmd0aCAtIDEpO1xuICByZXR1cm4gc3dpcGVyLnNsaWRlVG8oaW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvc2xpZGUvc2xpZGVUb0Nsb3Nlc3QuanMiLCJpbXBvcnQgJCBmcm9tICcuLi8uLi8uLi91dGlscy9kb20nO1xuaW1wb3J0IHsgbmV4dFRpY2sgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlscyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzbGlkZVRvQ2xpY2tlZFNsaWRlKCkge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICAkd3JhcHBlckVsID0gc3dpcGVyLiR3cmFwcGVyRWw7XG4gIHZhciBzbGlkZXNQZXJWaWV3ID0gcGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyA/IHN3aXBlci5zbGlkZXNQZXJWaWV3RHluYW1pYygpIDogcGFyYW1zLnNsaWRlc1BlclZpZXc7XG4gIHZhciBzbGlkZVRvSW5kZXggPSBzd2lwZXIuY2xpY2tlZEluZGV4O1xuICB2YXIgcmVhbEluZGV4O1xuXG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIGlmIChzd2lwZXIuYW5pbWF0aW5nKSByZXR1cm47XG4gICAgcmVhbEluZGV4ID0gcGFyc2VJbnQoJChzd2lwZXIuY2xpY2tlZFNsaWRlKS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpLCAxMCk7XG5cbiAgICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICBpZiAoc2xpZGVUb0luZGV4IDwgc3dpcGVyLmxvb3BlZFNsaWRlcyAtIHNsaWRlc1BlclZpZXcgLyAyIHx8IHNsaWRlVG9JbmRleCA+IHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gc3dpcGVyLmxvb3BlZFNsaWRlcyArIHNsaWRlc1BlclZpZXcgLyAyKSB7XG4gICAgICAgIHN3aXBlci5sb29wRml4KCk7XG4gICAgICAgIHNsaWRlVG9JbmRleCA9ICR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuXCIgKyBwYXJhbXMuc2xpZGVDbGFzcyArIFwiW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVxcXCJcIiArIHJlYWxJbmRleCArIFwiXFxcIl06bm90KC5cIiArIHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzICsgXCIpXCIpLmVxKDApLmluZGV4KCk7XG4gICAgICAgIG5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhzbGlkZVRvSW5kZXgpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzbGlkZVRvSW5kZXggPiBzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIHNsaWRlc1BlclZpZXcpIHtcbiAgICAgIHN3aXBlci5sb29wRml4KCk7XG4gICAgICBzbGlkZVRvSW5kZXggPSAkd3JhcHBlckVsLmNoaWxkcmVuKFwiLlwiICsgcGFyYW1zLnNsaWRlQ2xhc3MgKyBcIltkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyByZWFsSW5kZXggKyBcIlxcXCJdOm5vdCguXCIgKyBwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcyArIFwiKVwiKS5lcSgwKS5pbmRleCgpO1xuICAgICAgbmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzbGlkZVRvSW5kZXgpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gIH1cbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvc2xpZGUvc2xpZGVUb0NsaWNrZWRTbGlkZS5qcyIsImltcG9ydCBsb29wQ3JlYXRlIGZyb20gJy4vbG9vcENyZWF0ZSc7XG5pbXBvcnQgbG9vcEZpeCBmcm9tICcuL2xvb3BGaXgnO1xuaW1wb3J0IGxvb3BEZXN0cm95IGZyb20gJy4vbG9vcERlc3Ryb3knO1xuZXhwb3J0IGRlZmF1bHQge1xuICBsb29wQ3JlYXRlOiBsb29wQ3JlYXRlLFxuICBsb29wRml4OiBsb29wRml4LFxuICBsb29wRGVzdHJveTogbG9vcERlc3Ryb3lcbn07XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL2xvb3AvaW5kZXguanMiLCJpbXBvcnQgeyBnZXREb2N1bWVudCB9IGZyb20gJ3Nzci13aW5kb3cnO1xuaW1wb3J0ICQgZnJvbSAnLi4vLi4vLi4vdXRpbHMvZG9tJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxvb3BDcmVhdGUoKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbDsgLy8gUmVtb3ZlIGR1cGxpY2F0ZWQgc2xpZGVzXG5cbiAgJHdyYXBwZXJFbC5jaGlsZHJlbihcIi5cIiArIHBhcmFtcy5zbGlkZUNsYXNzICsgXCIuXCIgKyBwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykucmVtb3ZlKCk7XG4gIHZhciBzbGlkZXMgPSAkd3JhcHBlckVsLmNoaWxkcmVuKFwiLlwiICsgcGFyYW1zLnNsaWRlQ2xhc3MpO1xuXG4gIGlmIChwYXJhbXMubG9vcEZpbGxHcm91cFdpdGhCbGFuaykge1xuICAgIHZhciBibGFua1NsaWRlc051bSA9IHBhcmFtcy5zbGlkZXNQZXJHcm91cCAtIHNsaWRlcy5sZW5ndGggJSBwYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG5cbiAgICBpZiAoYmxhbmtTbGlkZXNOdW0gIT09IHBhcmFtcy5zbGlkZXNQZXJHcm91cCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBibGFua1NsaWRlc051bTsgaSArPSAxKSB7XG4gICAgICAgIHZhciBibGFua05vZGUgPSAkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpKS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVDbGFzcyArIFwiIFwiICsgcGFyYW1zLnNsaWRlQmxhbmtDbGFzcyk7XG4gICAgICAgICR3cmFwcGVyRWwuYXBwZW5kKGJsYW5rTm9kZSk7XG4gICAgICB9XG5cbiAgICAgIHNsaWRlcyA9ICR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuXCIgKyBwYXJhbXMuc2xpZGVDbGFzcyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgJiYgIXBhcmFtcy5sb29wZWRTbGlkZXMpIHBhcmFtcy5sb29wZWRTbGlkZXMgPSBzbGlkZXMubGVuZ3RoO1xuICBzd2lwZXIubG9vcGVkU2xpZGVzID0gTWF0aC5jZWlsKHBhcnNlRmxvYXQocGFyYW1zLmxvb3BlZFNsaWRlcyB8fCBwYXJhbXMuc2xpZGVzUGVyVmlldywgMTApKTtcbiAgc3dpcGVyLmxvb3BlZFNsaWRlcyArPSBwYXJhbXMubG9vcEFkZGl0aW9uYWxTbGlkZXM7XG5cbiAgaWYgKHN3aXBlci5sb29wZWRTbGlkZXMgPiBzbGlkZXMubGVuZ3RoKSB7XG4gICAgc3dpcGVyLmxvb3BlZFNsaWRlcyA9IHNsaWRlcy5sZW5ndGg7XG4gIH1cblxuICB2YXIgcHJlcGVuZFNsaWRlcyA9IFtdO1xuICB2YXIgYXBwZW5kU2xpZGVzID0gW107XG4gIHNsaWRlcy5lYWNoKGZ1bmN0aW9uIChlbCwgaW5kZXgpIHtcbiAgICB2YXIgc2xpZGUgPSAkKGVsKTtcblxuICAgIGlmIChpbmRleCA8IHN3aXBlci5sb29wZWRTbGlkZXMpIHtcbiAgICAgIGFwcGVuZFNsaWRlcy5wdXNoKGVsKTtcbiAgICB9XG5cbiAgICBpZiAoaW5kZXggPCBzbGlkZXMubGVuZ3RoICYmIGluZGV4ID49IHNsaWRlcy5sZW5ndGggLSBzd2lwZXIubG9vcGVkU2xpZGVzKSB7XG4gICAgICBwcmVwZW5kU2xpZGVzLnB1c2goZWwpO1xuICAgIH1cblxuICAgIHNsaWRlLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JywgaW5kZXgpO1xuICB9KTtcblxuICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXBwZW5kU2xpZGVzLmxlbmd0aDsgX2kgKz0gMSkge1xuICAgICR3cmFwcGVyRWwuYXBwZW5kKCQoYXBwZW5kU2xpZGVzW19pXS5jbG9uZU5vZGUodHJ1ZSkpLmFkZENsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSk7XG4gIH1cblxuICBmb3IgKHZhciBfaTIgPSBwcmVwZW5kU2xpZGVzLmxlbmd0aCAtIDE7IF9pMiA+PSAwOyBfaTIgLT0gMSkge1xuICAgICR3cmFwcGVyRWwucHJlcGVuZCgkKHByZXBlbmRTbGlkZXNbX2kyXS5jbG9uZU5vZGUodHJ1ZSkpLmFkZENsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSk7XG4gIH1cbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvbG9vcC9sb29wQ3JlYXRlLmpzIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbG9vcEZpeCgpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHN3aXBlci5lbWl0KCdiZWZvcmVMb29wRml4Jyk7XG4gIHZhciBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleCxcbiAgICAgIHNsaWRlcyA9IHN3aXBlci5zbGlkZXMsXG4gICAgICBsb29wZWRTbGlkZXMgPSBzd2lwZXIubG9vcGVkU2xpZGVzLFxuICAgICAgYWxsb3dTbGlkZVByZXYgPSBzd2lwZXIuYWxsb3dTbGlkZVByZXYsXG4gICAgICBhbGxvd1NsaWRlTmV4dCA9IHN3aXBlci5hbGxvd1NsaWRlTmV4dCxcbiAgICAgIHNuYXBHcmlkID0gc3dpcGVyLnNuYXBHcmlkLFxuICAgICAgcnRsID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZTtcbiAgdmFyIG5ld0luZGV4O1xuICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSB0cnVlO1xuICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSB0cnVlO1xuICB2YXIgc25hcFRyYW5zbGF0ZSA9IC1zbmFwR3JpZFthY3RpdmVJbmRleF07XG4gIHZhciBkaWZmID0gc25hcFRyYW5zbGF0ZSAtIHN3aXBlci5nZXRUcmFuc2xhdGUoKTsgLy8gRml4IEZvciBOZWdhdGl2ZSBPdmVyc2xpZGluZ1xuXG4gIGlmIChhY3RpdmVJbmRleCA8IGxvb3BlZFNsaWRlcykge1xuICAgIG5ld0luZGV4ID0gc2xpZGVzLmxlbmd0aCAtIGxvb3BlZFNsaWRlcyAqIDMgKyBhY3RpdmVJbmRleDtcbiAgICBuZXdJbmRleCArPSBsb29wZWRTbGlkZXM7XG4gICAgdmFyIHNsaWRlQ2hhbmdlZCA9IHN3aXBlci5zbGlkZVRvKG5ld0luZGV4LCAwLCBmYWxzZSwgdHJ1ZSk7XG5cbiAgICBpZiAoc2xpZGVDaGFuZ2VkICYmIGRpZmYgIT09IDApIHtcbiAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUoKHJ0bCA/IC1zd2lwZXIudHJhbnNsYXRlIDogc3dpcGVyLnRyYW5zbGF0ZSkgLSBkaWZmKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoYWN0aXZlSW5kZXggPj0gc2xpZGVzLmxlbmd0aCAtIGxvb3BlZFNsaWRlcykge1xuICAgIC8vIEZpeCBGb3IgUG9zaXRpdmUgT3ZlcnNsaWRpbmdcbiAgICBuZXdJbmRleCA9IC1zbGlkZXMubGVuZ3RoICsgYWN0aXZlSW5kZXggKyBsb29wZWRTbGlkZXM7XG4gICAgbmV3SW5kZXggKz0gbG9vcGVkU2xpZGVzO1xuXG4gICAgdmFyIF9zbGlkZUNoYW5nZWQgPSBzd2lwZXIuc2xpZGVUbyhuZXdJbmRleCwgMCwgZmFsc2UsIHRydWUpO1xuXG4gICAgaWYgKF9zbGlkZUNoYW5nZWQgJiYgZGlmZiAhPT0gMCkge1xuICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZSgocnRsID8gLXN3aXBlci50cmFuc2xhdGUgOiBzd2lwZXIudHJhbnNsYXRlKSAtIGRpZmYpO1xuICAgIH1cbiAgfVxuXG4gIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9IGFsbG93U2xpZGVQcmV2O1xuICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSBhbGxvd1NsaWRlTmV4dDtcbiAgc3dpcGVyLmVtaXQoJ2xvb3BGaXgnKTtcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvbG9vcC9sb29wRml4LmpzIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbG9vcERlc3Ryb3koKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsLFxuICAgICAgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgIHNsaWRlcyA9IHN3aXBlci5zbGlkZXM7XG4gICR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuXCIgKyBwYXJhbXMuc2xpZGVDbGFzcyArIFwiLlwiICsgcGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MgKyBcIiwuXCIgKyBwYXJhbXMuc2xpZGVDbGFzcyArIFwiLlwiICsgcGFyYW1zLnNsaWRlQmxhbmtDbGFzcykucmVtb3ZlKCk7XG4gIHNsaWRlcy5yZW1vdmVBdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpO1xufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9sb29wL2xvb3BEZXN0cm95LmpzIiwiaW1wb3J0IHNldEdyYWJDdXJzb3IgZnJvbSAnLi9zZXRHcmFiQ3Vyc29yJztcbmltcG9ydCB1bnNldEdyYWJDdXJzb3IgZnJvbSAnLi91bnNldEdyYWJDdXJzb3InO1xuZXhwb3J0IGRlZmF1bHQge1xuICBzZXRHcmFiQ3Vyc29yOiBzZXRHcmFiQ3Vyc29yLFxuICB1bnNldEdyYWJDdXJzb3I6IHVuc2V0R3JhYkN1cnNvclxufTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvZ3JhYi1jdXJzb3IvaW5kZXguanMiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXRHcmFiQ3Vyc29yKG1vdmluZykge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgaWYgKHN3aXBlci5zdXBwb3J0LnRvdWNoIHx8ICFzd2lwZXIucGFyYW1zLnNpbXVsYXRlVG91Y2ggfHwgc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHN3aXBlci5pc0xvY2tlZCB8fCBzd2lwZXIucGFyYW1zLmNzc01vZGUpIHJldHVybjtcbiAgdmFyIGVsID0gc3dpcGVyLmVsO1xuICBlbC5zdHlsZS5jdXJzb3IgPSAnbW92ZSc7XG4gIGVsLnN0eWxlLmN1cnNvciA9IG1vdmluZyA/ICctd2Via2l0LWdyYWJiaW5nJyA6ICctd2Via2l0LWdyYWInO1xuICBlbC5zdHlsZS5jdXJzb3IgPSBtb3ZpbmcgPyAnLW1vei1ncmFiYmluJyA6ICctbW96LWdyYWInO1xuICBlbC5zdHlsZS5jdXJzb3IgPSBtb3ZpbmcgPyAnZ3JhYmJpbmcnIDogJ2dyYWInO1xufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9ncmFiLWN1cnNvci9zZXRHcmFiQ3Vyc29yLmpzIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdW5zZXRHcmFiQ3Vyc29yKCkge1xuICB2YXIgc3dpcGVyID0gdGhpcztcblxuICBpZiAoc3dpcGVyLnN1cHBvcnQudG91Y2ggfHwgc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHN3aXBlci5pc0xvY2tlZCB8fCBzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBzd2lwZXIuZWwuc3R5bGUuY3Vyc29yID0gJyc7XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL2dyYWItY3Vyc29yL3Vuc2V0R3JhYkN1cnNvci5qcyIsImltcG9ydCBhcHBlbmRTbGlkZSBmcm9tICcuL2FwcGVuZFNsaWRlJztcbmltcG9ydCBwcmVwZW5kU2xpZGUgZnJvbSAnLi9wcmVwZW5kU2xpZGUnO1xuaW1wb3J0IGFkZFNsaWRlIGZyb20gJy4vYWRkU2xpZGUnO1xuaW1wb3J0IHJlbW92ZVNsaWRlIGZyb20gJy4vcmVtb3ZlU2xpZGUnO1xuaW1wb3J0IHJlbW92ZUFsbFNsaWRlcyBmcm9tICcuL3JlbW92ZUFsbFNsaWRlcyc7XG5leHBvcnQgZGVmYXVsdCB7XG4gIGFwcGVuZFNsaWRlOiBhcHBlbmRTbGlkZSxcbiAgcHJlcGVuZFNsaWRlOiBwcmVwZW5kU2xpZGUsXG4gIGFkZFNsaWRlOiBhZGRTbGlkZSxcbiAgcmVtb3ZlU2xpZGU6IHJlbW92ZVNsaWRlLFxuICByZW1vdmVBbGxTbGlkZXM6IHJlbW92ZUFsbFNsaWRlc1xufTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvbWFuaXB1bGF0aW9uL2luZGV4LmpzIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYXBwZW5kU2xpZGUoc2xpZGVzKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsLFxuICAgICAgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcblxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBzd2lwZXIubG9vcERlc3Ryb3koKTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygc2xpZGVzID09PSAnb2JqZWN0JyAmJiAnbGVuZ3RoJyBpbiBzbGlkZXMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKHNsaWRlc1tpXSkgJHdyYXBwZXJFbC5hcHBlbmQoc2xpZGVzW2ldKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgJHdyYXBwZXJFbC5hcHBlbmQoc2xpZGVzKTtcbiAgfVxuXG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIHN3aXBlci5sb29wQ3JlYXRlKCk7XG4gIH1cblxuICBpZiAoIShwYXJhbXMub2JzZXJ2ZXIgJiYgc3dpcGVyLnN1cHBvcnQub2JzZXJ2ZXIpKSB7XG4gICAgc3dpcGVyLnVwZGF0ZSgpO1xuICB9XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL21hbmlwdWxhdGlvbi9hcHBlbmRTbGlkZS5qcyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHByZXBlbmRTbGlkZShzbGlkZXMpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsLFxuICAgICAgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG5cbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgc3dpcGVyLmxvb3BEZXN0cm95KCk7XG4gIH1cblxuICB2YXIgbmV3QWN0aXZlSW5kZXggPSBhY3RpdmVJbmRleCArIDE7XG5cbiAgaWYgKHR5cGVvZiBzbGlkZXMgPT09ICdvYmplY3QnICYmICdsZW5ndGgnIGluIHNsaWRlcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAoc2xpZGVzW2ldKSAkd3JhcHBlckVsLnByZXBlbmQoc2xpZGVzW2ldKTtcbiAgICB9XG5cbiAgICBuZXdBY3RpdmVJbmRleCA9IGFjdGl2ZUluZGV4ICsgc2xpZGVzLmxlbmd0aDtcbiAgfSBlbHNlIHtcbiAgICAkd3JhcHBlckVsLnByZXBlbmQoc2xpZGVzKTtcbiAgfVxuXG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIHN3aXBlci5sb29wQ3JlYXRlKCk7XG4gIH1cblxuICBpZiAoIShwYXJhbXMub2JzZXJ2ZXIgJiYgc3dpcGVyLnN1cHBvcnQub2JzZXJ2ZXIpKSB7XG4gICAgc3dpcGVyLnVwZGF0ZSgpO1xuICB9XG5cbiAgc3dpcGVyLnNsaWRlVG8obmV3QWN0aXZlSW5kZXgsIDAsIGZhbHNlKTtcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvbWFuaXB1bGF0aW9uL3ByZXBlbmRTbGlkZS5qcyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZFNsaWRlKGluZGV4LCBzbGlkZXMpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciAkd3JhcHBlckVsID0gc3dpcGVyLiR3cmFwcGVyRWwsXG4gICAgICBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gIHZhciBhY3RpdmVJbmRleEJ1ZmZlciA9IGFjdGl2ZUluZGV4O1xuXG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIGFjdGl2ZUluZGV4QnVmZmVyIC09IHN3aXBlci5sb29wZWRTbGlkZXM7XG4gICAgc3dpcGVyLmxvb3BEZXN0cm95KCk7XG4gICAgc3dpcGVyLnNsaWRlcyA9ICR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuXCIgKyBwYXJhbXMuc2xpZGVDbGFzcyk7XG4gIH1cblxuICB2YXIgYmFzZUxlbmd0aCA9IHN3aXBlci5zbGlkZXMubGVuZ3RoO1xuXG4gIGlmIChpbmRleCA8PSAwKSB7XG4gICAgc3dpcGVyLnByZXBlbmRTbGlkZShzbGlkZXMpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChpbmRleCA+PSBiYXNlTGVuZ3RoKSB7XG4gICAgc3dpcGVyLmFwcGVuZFNsaWRlKHNsaWRlcyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIG5ld0FjdGl2ZUluZGV4ID0gYWN0aXZlSW5kZXhCdWZmZXIgPiBpbmRleCA/IGFjdGl2ZUluZGV4QnVmZmVyICsgMSA6IGFjdGl2ZUluZGV4QnVmZmVyO1xuICB2YXIgc2xpZGVzQnVmZmVyID0gW107XG5cbiAgZm9yICh2YXIgaSA9IGJhc2VMZW5ndGggLSAxOyBpID49IGluZGV4OyBpIC09IDEpIHtcbiAgICB2YXIgY3VycmVudFNsaWRlID0gc3dpcGVyLnNsaWRlcy5lcShpKTtcbiAgICBjdXJyZW50U2xpZGUucmVtb3ZlKCk7XG4gICAgc2xpZGVzQnVmZmVyLnVuc2hpZnQoY3VycmVudFNsaWRlKTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygc2xpZGVzID09PSAnb2JqZWN0JyAmJiAnbGVuZ3RoJyBpbiBzbGlkZXMpIHtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgc2xpZGVzLmxlbmd0aDsgX2kgKz0gMSkge1xuICAgICAgaWYgKHNsaWRlc1tfaV0pICR3cmFwcGVyRWwuYXBwZW5kKHNsaWRlc1tfaV0pO1xuICAgIH1cblxuICAgIG5ld0FjdGl2ZUluZGV4ID0gYWN0aXZlSW5kZXhCdWZmZXIgPiBpbmRleCA/IGFjdGl2ZUluZGV4QnVmZmVyICsgc2xpZGVzLmxlbmd0aCA6IGFjdGl2ZUluZGV4QnVmZmVyO1xuICB9IGVsc2Uge1xuICAgICR3cmFwcGVyRWwuYXBwZW5kKHNsaWRlcyk7XG4gIH1cblxuICBmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCBzbGlkZXNCdWZmZXIubGVuZ3RoOyBfaTIgKz0gMSkge1xuICAgICR3cmFwcGVyRWwuYXBwZW5kKHNsaWRlc0J1ZmZlcltfaTJdKTtcbiAgfVxuXG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIHN3aXBlci5sb29wQ3JlYXRlKCk7XG4gIH1cblxuICBpZiAoIShwYXJhbXMub2JzZXJ2ZXIgJiYgc3dpcGVyLnN1cHBvcnQub2JzZXJ2ZXIpKSB7XG4gICAgc3dpcGVyLnVwZGF0ZSgpO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgc3dpcGVyLnNsaWRlVG8obmV3QWN0aXZlSW5kZXggKyBzd2lwZXIubG9vcGVkU2xpZGVzLCAwLCBmYWxzZSk7XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLnNsaWRlVG8obmV3QWN0aXZlSW5kZXgsIDAsIGZhbHNlKTtcbiAgfVxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9tYW5pcHVsYXRpb24vYWRkU2xpZGUuanMiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZW1vdmVTbGlkZShzbGlkZXNJbmRleGVzKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbCxcbiAgICAgIGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuICB2YXIgYWN0aXZlSW5kZXhCdWZmZXIgPSBhY3RpdmVJbmRleDtcblxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBhY3RpdmVJbmRleEJ1ZmZlciAtPSBzd2lwZXIubG9vcGVkU2xpZGVzO1xuICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICAgIHN3aXBlci5zbGlkZXMgPSAkd3JhcHBlckVsLmNoaWxkcmVuKFwiLlwiICsgcGFyYW1zLnNsaWRlQ2xhc3MpO1xuICB9XG5cbiAgdmFyIG5ld0FjdGl2ZUluZGV4ID0gYWN0aXZlSW5kZXhCdWZmZXI7XG4gIHZhciBpbmRleFRvUmVtb3ZlO1xuXG4gIGlmICh0eXBlb2Ygc2xpZGVzSW5kZXhlcyA9PT0gJ29iamVjdCcgJiYgJ2xlbmd0aCcgaW4gc2xpZGVzSW5kZXhlcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpZGVzSW5kZXhlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaW5kZXhUb1JlbW92ZSA9IHNsaWRlc0luZGV4ZXNbaV07XG4gICAgICBpZiAoc3dpcGVyLnNsaWRlc1tpbmRleFRvUmVtb3ZlXSkgc3dpcGVyLnNsaWRlcy5lcShpbmRleFRvUmVtb3ZlKS5yZW1vdmUoKTtcbiAgICAgIGlmIChpbmRleFRvUmVtb3ZlIDwgbmV3QWN0aXZlSW5kZXgpIG5ld0FjdGl2ZUluZGV4IC09IDE7XG4gICAgfVxuXG4gICAgbmV3QWN0aXZlSW5kZXggPSBNYXRoLm1heChuZXdBY3RpdmVJbmRleCwgMCk7XG4gIH0gZWxzZSB7XG4gICAgaW5kZXhUb1JlbW92ZSA9IHNsaWRlc0luZGV4ZXM7XG4gICAgaWYgKHN3aXBlci5zbGlkZXNbaW5kZXhUb1JlbW92ZV0pIHN3aXBlci5zbGlkZXMuZXEoaW5kZXhUb1JlbW92ZSkucmVtb3ZlKCk7XG4gICAgaWYgKGluZGV4VG9SZW1vdmUgPCBuZXdBY3RpdmVJbmRleCkgbmV3QWN0aXZlSW5kZXggLT0gMTtcbiAgICBuZXdBY3RpdmVJbmRleCA9IE1hdGgubWF4KG5ld0FjdGl2ZUluZGV4LCAwKTtcbiAgfVxuXG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIHN3aXBlci5sb29wQ3JlYXRlKCk7XG4gIH1cblxuICBpZiAoIShwYXJhbXMub2JzZXJ2ZXIgJiYgc3dpcGVyLnN1cHBvcnQub2JzZXJ2ZXIpKSB7XG4gICAgc3dpcGVyLnVwZGF0ZSgpO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgc3dpcGVyLnNsaWRlVG8obmV3QWN0aXZlSW5kZXggKyBzd2lwZXIubG9vcGVkU2xpZGVzLCAwLCBmYWxzZSk7XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLnNsaWRlVG8obmV3QWN0aXZlSW5kZXgsIDAsIGZhbHNlKTtcbiAgfVxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9tYW5pcHVsYXRpb24vcmVtb3ZlU2xpZGUuanMiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZW1vdmVBbGxTbGlkZXMoKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgc2xpZGVzSW5kZXhlcyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3dpcGVyLnNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHNsaWRlc0luZGV4ZXMucHVzaChpKTtcbiAgfVxuXG4gIHN3aXBlci5yZW1vdmVTbGlkZShzbGlkZXNJbmRleGVzKTtcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvbWFuaXB1bGF0aW9uL3JlbW92ZUFsbFNsaWRlcy5qcyIsImltcG9ydCB7IGdldERvY3VtZW50IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5pbXBvcnQgb25Ub3VjaFN0YXJ0IGZyb20gJy4vb25Ub3VjaFN0YXJ0JztcbmltcG9ydCBvblRvdWNoTW92ZSBmcm9tICcuL29uVG91Y2hNb3ZlJztcbmltcG9ydCBvblRvdWNoRW5kIGZyb20gJy4vb25Ub3VjaEVuZCc7XG5pbXBvcnQgb25SZXNpemUgZnJvbSAnLi9vblJlc2l6ZSc7XG5pbXBvcnQgb25DbGljayBmcm9tICcuL29uQ2xpY2snO1xuaW1wb3J0IG9uU2Nyb2xsIGZyb20gJy4vb25TY3JvbGwnO1xudmFyIGR1bW15RXZlbnRBdHRhY2hlZCA9IGZhbHNlO1xuXG5mdW5jdGlvbiBkdW1teUV2ZW50TGlzdGVuZXIoKSB7fVxuXG5mdW5jdGlvbiBhdHRhY2hFdmVudHMoKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgIHRvdWNoRXZlbnRzID0gc3dpcGVyLnRvdWNoRXZlbnRzLFxuICAgICAgZWwgPSBzd2lwZXIuZWwsXG4gICAgICB3cmFwcGVyRWwgPSBzd2lwZXIud3JhcHBlckVsLFxuICAgICAgZGV2aWNlID0gc3dpcGVyLmRldmljZSxcbiAgICAgIHN1cHBvcnQgPSBzd2lwZXIuc3VwcG9ydDtcbiAgc3dpcGVyLm9uVG91Y2hTdGFydCA9IG9uVG91Y2hTdGFydC5iaW5kKHN3aXBlcik7XG4gIHN3aXBlci5vblRvdWNoTW92ZSA9IG9uVG91Y2hNb3ZlLmJpbmQoc3dpcGVyKTtcbiAgc3dpcGVyLm9uVG91Y2hFbmQgPSBvblRvdWNoRW5kLmJpbmQoc3dpcGVyKTtcblxuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICBzd2lwZXIub25TY3JvbGwgPSBvblNjcm9sbC5iaW5kKHN3aXBlcik7XG4gIH1cblxuICBzd2lwZXIub25DbGljayA9IG9uQ2xpY2suYmluZChzd2lwZXIpO1xuICB2YXIgY2FwdHVyZSA9ICEhcGFyYW1zLm5lc3RlZDsgLy8gVG91Y2ggRXZlbnRzXG5cbiAgaWYgKCFzdXBwb3J0LnRvdWNoICYmIHN1cHBvcnQucG9pbnRlckV2ZW50cykge1xuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMuc3RhcnQsIHN3aXBlci5vblRvdWNoU3RhcnQsIGZhbHNlKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLm1vdmUsIHN3aXBlci5vblRvdWNoTW92ZSwgY2FwdHVyZSk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5lbmQsIHN3aXBlci5vblRvdWNoRW5kLCBmYWxzZSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHN1cHBvcnQudG91Y2gpIHtcbiAgICAgIHZhciBwYXNzaXZlTGlzdGVuZXIgPSB0b3VjaEV2ZW50cy5zdGFydCA9PT0gJ3RvdWNoc3RhcnQnICYmIHN1cHBvcnQucGFzc2l2ZUxpc3RlbmVyICYmIHBhcmFtcy5wYXNzaXZlTGlzdGVuZXJzID8ge1xuICAgICAgICBwYXNzaXZlOiB0cnVlLFxuICAgICAgICBjYXB0dXJlOiBmYWxzZVxuICAgICAgfSA6IGZhbHNlO1xuICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5zdGFydCwgc3dpcGVyLm9uVG91Y2hTdGFydCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMubW92ZSwgc3dpcGVyLm9uVG91Y2hNb3ZlLCBzdXBwb3J0LnBhc3NpdmVMaXN0ZW5lciA/IHtcbiAgICAgICAgcGFzc2l2ZTogZmFsc2UsXG4gICAgICAgIGNhcHR1cmU6IGNhcHR1cmVcbiAgICAgIH0gOiBjYXB0dXJlKTtcbiAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMuZW5kLCBzd2lwZXIub25Ub3VjaEVuZCwgcGFzc2l2ZUxpc3RlbmVyKTtcblxuICAgICAgaWYgKHRvdWNoRXZlbnRzLmNhbmNlbCkge1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLmNhbmNlbCwgc3dpcGVyLm9uVG91Y2hFbmQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgICB9XG5cbiAgICAgIGlmICghZHVtbXlFdmVudEF0dGFjaGVkKSB7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBkdW1teUV2ZW50TGlzdGVuZXIpO1xuICAgICAgICBkdW1teUV2ZW50QXR0YWNoZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwYXJhbXMuc2ltdWxhdGVUb3VjaCAmJiAhZGV2aWNlLmlvcyAmJiAhZGV2aWNlLmFuZHJvaWQgfHwgcGFyYW1zLnNpbXVsYXRlVG91Y2ggJiYgIXN1cHBvcnQudG91Y2ggJiYgZGV2aWNlLmlvcykge1xuICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgc3dpcGVyLm9uVG91Y2hTdGFydCwgZmFsc2UpO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgc3dpcGVyLm9uVG91Y2hNb3ZlLCBjYXB0dXJlKTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBzd2lwZXIub25Ub3VjaEVuZCwgZmFsc2UpO1xuICAgIH1cbiAgfSAvLyBQcmV2ZW50IExpbmtzIENsaWNrc1xuXG5cbiAgaWYgKHBhcmFtcy5wcmV2ZW50Q2xpY2tzIHx8IHBhcmFtcy5wcmV2ZW50Q2xpY2tzUHJvcGFnYXRpb24pIHtcbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHN3aXBlci5vbkNsaWNrLCB0cnVlKTtcbiAgfVxuXG4gIGlmIChwYXJhbXMuY3NzTW9kZSkge1xuICAgIHdyYXBwZXJFbC5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBzd2lwZXIub25TY3JvbGwpO1xuICB9IC8vIFJlc2l6ZSBoYW5kbGVyXG5cblxuICBpZiAocGFyYW1zLnVwZGF0ZU9uV2luZG93UmVzaXplKSB7XG4gICAgc3dpcGVyLm9uKGRldmljZS5pb3MgfHwgZGV2aWNlLmFuZHJvaWQgPyAncmVzaXplIG9yaWVudGF0aW9uY2hhbmdlIG9ic2VydmVyVXBkYXRlJyA6ICdyZXNpemUgb2JzZXJ2ZXJVcGRhdGUnLCBvblJlc2l6ZSwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLm9uKCdvYnNlcnZlclVwZGF0ZScsIG9uUmVzaXplLCB0cnVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkZXRhY2hFdmVudHMoKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgIHRvdWNoRXZlbnRzID0gc3dpcGVyLnRvdWNoRXZlbnRzLFxuICAgICAgZWwgPSBzd2lwZXIuZWwsXG4gICAgICB3cmFwcGVyRWwgPSBzd2lwZXIud3JhcHBlckVsLFxuICAgICAgZGV2aWNlID0gc3dpcGVyLmRldmljZSxcbiAgICAgIHN1cHBvcnQgPSBzd2lwZXIuc3VwcG9ydDtcbiAgdmFyIGNhcHR1cmUgPSAhIXBhcmFtcy5uZXN0ZWQ7IC8vIFRvdWNoIEV2ZW50c1xuXG4gIGlmICghc3VwcG9ydC50b3VjaCAmJiBzdXBwb3J0LnBvaW50ZXJFdmVudHMpIHtcbiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLnN0YXJ0LCBzd2lwZXIub25Ub3VjaFN0YXJ0LCBmYWxzZSk7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5tb3ZlLCBzd2lwZXIub25Ub3VjaE1vdmUsIGNhcHR1cmUpO1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMuZW5kLCBzd2lwZXIub25Ub3VjaEVuZCwgZmFsc2UpO1xuICB9IGVsc2Uge1xuICAgIGlmIChzdXBwb3J0LnRvdWNoKSB7XG4gICAgICB2YXIgcGFzc2l2ZUxpc3RlbmVyID0gdG91Y2hFdmVudHMuc3RhcnQgPT09ICdvblRvdWNoU3RhcnQnICYmIHN1cHBvcnQucGFzc2l2ZUxpc3RlbmVyICYmIHBhcmFtcy5wYXNzaXZlTGlzdGVuZXJzID8ge1xuICAgICAgICBwYXNzaXZlOiB0cnVlLFxuICAgICAgICBjYXB0dXJlOiBmYWxzZVxuICAgICAgfSA6IGZhbHNlO1xuICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5zdGFydCwgc3dpcGVyLm9uVG91Y2hTdGFydCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMubW92ZSwgc3dpcGVyLm9uVG91Y2hNb3ZlLCBjYXB0dXJlKTtcbiAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMuZW5kLCBzd2lwZXIub25Ub3VjaEVuZCwgcGFzc2l2ZUxpc3RlbmVyKTtcblxuICAgICAgaWYgKHRvdWNoRXZlbnRzLmNhbmNlbCkge1xuICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLmNhbmNlbCwgc3dpcGVyLm9uVG91Y2hFbmQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy5zaW11bGF0ZVRvdWNoICYmICFkZXZpY2UuaW9zICYmICFkZXZpY2UuYW5kcm9pZCB8fCBwYXJhbXMuc2ltdWxhdGVUb3VjaCAmJiAhc3VwcG9ydC50b3VjaCAmJiBkZXZpY2UuaW9zKSB7XG4gICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBzd2lwZXIub25Ub3VjaFN0YXJ0LCBmYWxzZSk7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBzd2lwZXIub25Ub3VjaE1vdmUsIGNhcHR1cmUpO1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHN3aXBlci5vblRvdWNoRW5kLCBmYWxzZSk7XG4gICAgfVxuICB9IC8vIFByZXZlbnQgTGlua3MgQ2xpY2tzXG5cblxuICBpZiAocGFyYW1zLnByZXZlbnRDbGlja3MgfHwgcGFyYW1zLnByZXZlbnRDbGlja3NQcm9wYWdhdGlvbikge1xuICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgc3dpcGVyLm9uQ2xpY2ssIHRydWUpO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgd3JhcHBlckVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHN3aXBlci5vblNjcm9sbCk7XG4gIH0gLy8gUmVzaXplIGhhbmRsZXJcblxuXG4gIHN3aXBlci5vZmYoZGV2aWNlLmlvcyB8fCBkZXZpY2UuYW5kcm9pZCA/ICdyZXNpemUgb3JpZW50YXRpb25jaGFuZ2Ugb2JzZXJ2ZXJVcGRhdGUnIDogJ3Jlc2l6ZSBvYnNlcnZlclVwZGF0ZScsIG9uUmVzaXplKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBhdHRhY2hFdmVudHM6IGF0dGFjaEV2ZW50cyxcbiAgZGV0YWNoRXZlbnRzOiBkZXRhY2hFdmVudHNcbn07XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL2V2ZW50cy9pbmRleC5qcyIsImltcG9ydCB7IGdldFdpbmRvdywgZ2V0RG9jdW1lbnQgfSBmcm9tICdzc3Itd2luZG93JztcbmltcG9ydCAkIGZyb20gJy4uLy4uLy4uL3V0aWxzL2RvbSc7XG5pbXBvcnQgeyBleHRlbmQsIG5vdyB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG9uVG91Y2hTdGFydChldmVudCkge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICB2YXIgZGF0YSA9IHN3aXBlci50b3VjaEV2ZW50c0RhdGE7XG4gIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgdG91Y2hlcyA9IHN3aXBlci50b3VjaGVzLFxuICAgICAgZW5hYmxlZCA9IHN3aXBlci5lbmFibGVkO1xuICBpZiAoIWVuYWJsZWQpIHJldHVybjtcblxuICBpZiAoc3dpcGVyLmFuaW1hdGluZyAmJiBwYXJhbXMucHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGUgPSBldmVudDtcbiAgaWYgKGUub3JpZ2luYWxFdmVudCkgZSA9IGUub3JpZ2luYWxFdmVudDtcbiAgdmFyICR0YXJnZXRFbCA9ICQoZS50YXJnZXQpO1xuXG4gIGlmIChwYXJhbXMudG91Y2hFdmVudHNUYXJnZXQgPT09ICd3cmFwcGVyJykge1xuICAgIGlmICghJHRhcmdldEVsLmNsb3Nlc3Qoc3dpcGVyLndyYXBwZXJFbCkubGVuZ3RoKSByZXR1cm47XG4gIH1cblxuICBkYXRhLmlzVG91Y2hFdmVudCA9IGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnO1xuICBpZiAoIWRhdGEuaXNUb3VjaEV2ZW50ICYmICd3aGljaCcgaW4gZSAmJiBlLndoaWNoID09PSAzKSByZXR1cm47XG4gIGlmICghZGF0YS5pc1RvdWNoRXZlbnQgJiYgJ2J1dHRvbicgaW4gZSAmJiBlLmJ1dHRvbiA+IDApIHJldHVybjtcbiAgaWYgKGRhdGEuaXNUb3VjaGVkICYmIGRhdGEuaXNNb3ZlZCkgcmV0dXJuOyAvLyBjaGFuZ2UgdGFyZ2V0IGVsIGZvciBzaGFkb3cgcm9vdCBjb21wb25lbmV0XG5cbiAgdmFyIHN3aXBpbmdDbGFzc0hhc1ZhbHVlID0gISFwYXJhbXMubm9Td2lwaW5nQ2xhc3MgJiYgcGFyYW1zLm5vU3dpcGluZ0NsYXNzICE9PSAnJztcblxuICBpZiAoc3dpcGluZ0NsYXNzSGFzVmFsdWUgJiYgZS50YXJnZXQgJiYgZS50YXJnZXQuc2hhZG93Um9vdCAmJiBldmVudC5wYXRoICYmIGV2ZW50LnBhdGhbMF0pIHtcbiAgICAkdGFyZ2V0RWwgPSAkKGV2ZW50LnBhdGhbMF0pO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5ub1N3aXBpbmcgJiYgJHRhcmdldEVsLmNsb3Nlc3QocGFyYW1zLm5vU3dpcGluZ1NlbGVjdG9yID8gcGFyYW1zLm5vU3dpcGluZ1NlbGVjdG9yIDogXCIuXCIgKyBwYXJhbXMubm9Td2lwaW5nQ2xhc3MpWzBdKSB7XG4gICAgc3dpcGVyLmFsbG93Q2xpY2sgPSB0cnVlO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChwYXJhbXMuc3dpcGVIYW5kbGVyKSB7XG4gICAgaWYgKCEkdGFyZ2V0RWwuY2xvc2VzdChwYXJhbXMuc3dpcGVIYW5kbGVyKVswXSkgcmV0dXJuO1xuICB9XG5cbiAgdG91Y2hlcy5jdXJyZW50WCA9IGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWDtcbiAgdG91Y2hlcy5jdXJyZW50WSA9IGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZIDogZS5wYWdlWTtcbiAgdmFyIHN0YXJ0WCA9IHRvdWNoZXMuY3VycmVudFg7XG4gIHZhciBzdGFydFkgPSB0b3VjaGVzLmN1cnJlbnRZOyAvLyBEbyBOT1Qgc3RhcnQgaWYgaU9TIGVkZ2Ugc3dpcGUgaXMgZGV0ZWN0ZWQuIE90aGVyd2lzZSBpT1MgYXBwIGNhbm5vdCBzd2lwZS10by1nby1iYWNrIGFueW1vcmVcblxuICB2YXIgZWRnZVN3aXBlRGV0ZWN0aW9uID0gcGFyYW1zLmVkZ2VTd2lwZURldGVjdGlvbiB8fCBwYXJhbXMuaU9TRWRnZVN3aXBlRGV0ZWN0aW9uO1xuICB2YXIgZWRnZVN3aXBlVGhyZXNob2xkID0gcGFyYW1zLmVkZ2VTd2lwZVRocmVzaG9sZCB8fCBwYXJhbXMuaU9TRWRnZVN3aXBlVGhyZXNob2xkO1xuXG4gIGlmIChlZGdlU3dpcGVEZXRlY3Rpb24gJiYgKHN0YXJ0WCA8PSBlZGdlU3dpcGVUaHJlc2hvbGQgfHwgc3RhcnRYID49IHdpbmRvdy5pbm5lcldpZHRoIC0gZWRnZVN3aXBlVGhyZXNob2xkKSkge1xuICAgIGlmIChlZGdlU3dpcGVEZXRlY3Rpb24gPT09ICdwcmV2ZW50Jykge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIGV4dGVuZChkYXRhLCB7XG4gICAgaXNUb3VjaGVkOiB0cnVlLFxuICAgIGlzTW92ZWQ6IGZhbHNlLFxuICAgIGFsbG93VG91Y2hDYWxsYmFja3M6IHRydWUsXG4gICAgaXNTY3JvbGxpbmc6IHVuZGVmaW5lZCxcbiAgICBzdGFydE1vdmluZzogdW5kZWZpbmVkXG4gIH0pO1xuICB0b3VjaGVzLnN0YXJ0WCA9IHN0YXJ0WDtcbiAgdG91Y2hlcy5zdGFydFkgPSBzdGFydFk7XG4gIGRhdGEudG91Y2hTdGFydFRpbWUgPSBub3coKTtcbiAgc3dpcGVyLmFsbG93Q2xpY2sgPSB0cnVlO1xuICBzd2lwZXIudXBkYXRlU2l6ZSgpO1xuICBzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPSB1bmRlZmluZWQ7XG4gIGlmIChwYXJhbXMudGhyZXNob2xkID4gMCkgZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUgPSBmYWxzZTtcblxuICBpZiAoZS50eXBlICE9PSAndG91Y2hzdGFydCcpIHtcbiAgICB2YXIgcHJldmVudERlZmF1bHQgPSB0cnVlO1xuICAgIGlmICgkdGFyZ2V0RWwuaXMoZGF0YS5mb3JtRWxlbWVudHMpKSBwcmV2ZW50RGVmYXVsdCA9IGZhbHNlO1xuXG4gICAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgJChkb2N1bWVudC5hY3RpdmVFbGVtZW50KS5pcyhkYXRhLmZvcm1FbGVtZW50cykgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gJHRhcmdldEVsWzBdKSB7XG4gICAgICBkb2N1bWVudC5hY3RpdmVFbGVtZW50LmJsdXIoKTtcbiAgICB9XG5cbiAgICB2YXIgc2hvdWxkUHJldmVudERlZmF1bHQgPSBwcmV2ZW50RGVmYXVsdCAmJiBzd2lwZXIuYWxsb3dUb3VjaE1vdmUgJiYgcGFyYW1zLnRvdWNoU3RhcnRQcmV2ZW50RGVmYXVsdDtcblxuICAgIGlmICgocGFyYW1zLnRvdWNoU3RhcnRGb3JjZVByZXZlbnREZWZhdWx0IHx8IHNob3VsZFByZXZlbnREZWZhdWx0KSAmJiAhJHRhcmdldEVsWzBdLmlzQ29udGVudEVkaXRhYmxlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9XG5cbiAgc3dpcGVyLmVtaXQoJ3RvdWNoU3RhcnQnLCBlKTtcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvZXZlbnRzL29uVG91Y2hTdGFydC5qcyIsImltcG9ydCB7IGdldERvY3VtZW50IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5pbXBvcnQgJCBmcm9tICcuLi8uLi8uLi91dGlscy9kb20nO1xuaW1wb3J0IHsgZXh0ZW5kLCBub3cgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlscyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvblRvdWNoTW92ZShldmVudCkge1xuICB2YXIgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIGRhdGEgPSBzd2lwZXIudG91Y2hFdmVudHNEYXRhO1xuICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgIHRvdWNoZXMgPSBzd2lwZXIudG91Y2hlcyxcbiAgICAgIHJ0bCA9IHN3aXBlci5ydGxUcmFuc2xhdGUsXG4gICAgICBlbmFibGVkID0gc3dpcGVyLmVuYWJsZWQ7XG4gIGlmICghZW5hYmxlZCkgcmV0dXJuO1xuICB2YXIgZSA9IGV2ZW50O1xuICBpZiAoZS5vcmlnaW5hbEV2ZW50KSBlID0gZS5vcmlnaW5hbEV2ZW50O1xuXG4gIGlmICghZGF0YS5pc1RvdWNoZWQpIHtcbiAgICBpZiAoZGF0YS5zdGFydE1vdmluZyAmJiBkYXRhLmlzU2Nyb2xsaW5nKSB7XG4gICAgICBzd2lwZXIuZW1pdCgndG91Y2hNb3ZlT3Bwb3NpdGUnLCBlKTtcbiAgICB9XG5cbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoZGF0YS5pc1RvdWNoRXZlbnQgJiYgZS50eXBlICE9PSAndG91Y2htb3ZlJykgcmV0dXJuO1xuICB2YXIgdGFyZ2V0VG91Y2ggPSBlLnR5cGUgPT09ICd0b3VjaG1vdmUnICYmIGUudGFyZ2V0VG91Y2hlcyAmJiAoZS50YXJnZXRUb3VjaGVzWzBdIHx8IGUuY2hhbmdlZFRvdWNoZXNbMF0pO1xuICB2YXIgcGFnZVggPSBlLnR5cGUgPT09ICd0b3VjaG1vdmUnID8gdGFyZ2V0VG91Y2gucGFnZVggOiBlLnBhZ2VYO1xuICB2YXIgcGFnZVkgPSBlLnR5cGUgPT09ICd0b3VjaG1vdmUnID8gdGFyZ2V0VG91Y2gucGFnZVkgOiBlLnBhZ2VZO1xuXG4gIGlmIChlLnByZXZlbnRlZEJ5TmVzdGVkU3dpcGVyKSB7XG4gICAgdG91Y2hlcy5zdGFydFggPSBwYWdlWDtcbiAgICB0b3VjaGVzLnN0YXJ0WSA9IHBhZ2VZO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICghc3dpcGVyLmFsbG93VG91Y2hNb3ZlKSB7XG4gICAgLy8gaXNNb3ZlZCA9IHRydWU7XG4gICAgc3dpcGVyLmFsbG93Q2xpY2sgPSBmYWxzZTtcblxuICAgIGlmIChkYXRhLmlzVG91Y2hlZCkge1xuICAgICAgZXh0ZW5kKHRvdWNoZXMsIHtcbiAgICAgICAgc3RhcnRYOiBwYWdlWCxcbiAgICAgICAgc3RhcnRZOiBwYWdlWSxcbiAgICAgICAgY3VycmVudFg6IHBhZ2VYLFxuICAgICAgICBjdXJyZW50WTogcGFnZVlcbiAgICAgIH0pO1xuICAgICAgZGF0YS50b3VjaFN0YXJ0VGltZSA9IG5vdygpO1xuICAgIH1cblxuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChkYXRhLmlzVG91Y2hFdmVudCAmJiBwYXJhbXMudG91Y2hSZWxlYXNlT25FZGdlcyAmJiAhcGFyYW1zLmxvb3ApIHtcbiAgICBpZiAoc3dpcGVyLmlzVmVydGljYWwoKSkge1xuICAgICAgLy8gVmVydGljYWxcbiAgICAgIGlmIChwYWdlWSA8IHRvdWNoZXMuc3RhcnRZICYmIHN3aXBlci50cmFuc2xhdGUgPD0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIHx8IHBhZ2VZID4gdG91Y2hlcy5zdGFydFkgJiYgc3dpcGVyLnRyYW5zbGF0ZSA+PSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIHtcbiAgICAgICAgZGF0YS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICAgICAgZGF0YS5pc01vdmVkID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHBhZ2VYIDwgdG91Y2hlcy5zdGFydFggJiYgc3dpcGVyLnRyYW5zbGF0ZSA8PSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgfHwgcGFnZVggPiB0b3VjaGVzLnN0YXJ0WCAmJiBzd2lwZXIudHJhbnNsYXRlID49IHN3aXBlci5taW5UcmFuc2xhdGUoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIGlmIChkYXRhLmlzVG91Y2hFdmVudCAmJiBkb2N1bWVudC5hY3RpdmVFbGVtZW50KSB7XG4gICAgaWYgKGUudGFyZ2V0ID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmICQoZS50YXJnZXQpLmlzKGRhdGEuZm9ybUVsZW1lbnRzKSkge1xuICAgICAgZGF0YS5pc01vdmVkID0gdHJ1ZTtcbiAgICAgIHN3aXBlci5hbGxvd0NsaWNrID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgaWYgKGRhdGEuYWxsb3dUb3VjaENhbGxiYWNrcykge1xuICAgIHN3aXBlci5lbWl0KCd0b3VjaE1vdmUnLCBlKTtcbiAgfVxuXG4gIGlmIChlLnRhcmdldFRvdWNoZXMgJiYgZS50YXJnZXRUb3VjaGVzLmxlbmd0aCA+IDEpIHJldHVybjtcbiAgdG91Y2hlcy5jdXJyZW50WCA9IHBhZ2VYO1xuICB0b3VjaGVzLmN1cnJlbnRZID0gcGFnZVk7XG4gIHZhciBkaWZmWCA9IHRvdWNoZXMuY3VycmVudFggLSB0b3VjaGVzLnN0YXJ0WDtcbiAgdmFyIGRpZmZZID0gdG91Y2hlcy5jdXJyZW50WSAtIHRvdWNoZXMuc3RhcnRZO1xuICBpZiAoc3dpcGVyLnBhcmFtcy50aHJlc2hvbGQgJiYgTWF0aC5zcXJ0KE1hdGgucG93KGRpZmZYLCAyKSArIE1hdGgucG93KGRpZmZZLCAyKSkgPCBzd2lwZXIucGFyYW1zLnRocmVzaG9sZCkgcmV0dXJuO1xuXG4gIGlmICh0eXBlb2YgZGF0YS5pc1Njcm9sbGluZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgdG91Y2hBbmdsZTtcblxuICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkgJiYgdG91Y2hlcy5jdXJyZW50WSA9PT0gdG91Y2hlcy5zdGFydFkgfHwgc3dpcGVyLmlzVmVydGljYWwoKSAmJiB0b3VjaGVzLmN1cnJlbnRYID09PSB0b3VjaGVzLnN0YXJ0WCkge1xuICAgICAgZGF0YS5pc1Njcm9sbGluZyA9IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIGlmIChkaWZmWCAqIGRpZmZYICsgZGlmZlkgKiBkaWZmWSA+PSAyNSkge1xuICAgICAgICB0b3VjaEFuZ2xlID0gTWF0aC5hdGFuMihNYXRoLmFicyhkaWZmWSksIE1hdGguYWJzKGRpZmZYKSkgKiAxODAgLyBNYXRoLlBJO1xuICAgICAgICBkYXRhLmlzU2Nyb2xsaW5nID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gdG91Y2hBbmdsZSA+IHBhcmFtcy50b3VjaEFuZ2xlIDogOTAgLSB0b3VjaEFuZ2xlID4gcGFyYW1zLnRvdWNoQW5nbGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKGRhdGEuaXNTY3JvbGxpbmcpIHtcbiAgICBzd2lwZXIuZW1pdCgndG91Y2hNb3ZlT3Bwb3NpdGUnLCBlKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZGF0YS5zdGFydE1vdmluZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAodG91Y2hlcy5jdXJyZW50WCAhPT0gdG91Y2hlcy5zdGFydFggfHwgdG91Y2hlcy5jdXJyZW50WSAhPT0gdG91Y2hlcy5zdGFydFkpIHtcbiAgICAgIGRhdGEuc3RhcnRNb3ZpbmcgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChkYXRhLmlzU2Nyb2xsaW5nKSB7XG4gICAgZGF0YS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoIWRhdGEuc3RhcnRNb3ZpbmcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBzd2lwZXIuYWxsb3dDbGljayA9IGZhbHNlO1xuXG4gIGlmICghcGFyYW1zLmNzc01vZGUgJiYgZS5jYW5jZWxhYmxlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG5cbiAgaWYgKHBhcmFtcy50b3VjaE1vdmVTdG9wUHJvcGFnYXRpb24gJiYgIXBhcmFtcy5uZXN0ZWQpIHtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICB9XG5cbiAgaWYgKCFkYXRhLmlzTW92ZWQpIHtcbiAgICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICAgIHN3aXBlci5sb29wRml4KCk7XG4gICAgfVxuXG4gICAgZGF0YS5zdGFydFRyYW5zbGF0ZSA9IHN3aXBlci5nZXRUcmFuc2xhdGUoKTtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbigwKTtcblxuICAgIGlmIChzd2lwZXIuYW5pbWF0aW5nKSB7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbC50cmlnZ2VyKCd3ZWJraXRUcmFuc2l0aW9uRW5kIHRyYW5zaXRpb25lbmQnKTtcbiAgICB9XG5cbiAgICBkYXRhLmFsbG93TW9tZW50dW1Cb3VuY2UgPSBmYWxzZTsgLy8gR3JhYiBDdXJzb3JcblxuICAgIGlmIChwYXJhbXMuZ3JhYkN1cnNvciAmJiAoc3dpcGVyLmFsbG93U2xpZGVOZXh0ID09PSB0cnVlIHx8IHN3aXBlci5hbGxvd1NsaWRlUHJldiA9PT0gdHJ1ZSkpIHtcbiAgICAgIHN3aXBlci5zZXRHcmFiQ3Vyc29yKHRydWUpO1xuICAgIH1cblxuICAgIHN3aXBlci5lbWl0KCdzbGlkZXJGaXJzdE1vdmUnLCBlKTtcbiAgfVxuXG4gIHN3aXBlci5lbWl0KCdzbGlkZXJNb3ZlJywgZSk7XG4gIGRhdGEuaXNNb3ZlZCA9IHRydWU7XG4gIHZhciBkaWZmID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gZGlmZlggOiBkaWZmWTtcbiAgdG91Y2hlcy5kaWZmID0gZGlmZjtcbiAgZGlmZiAqPSBwYXJhbXMudG91Y2hSYXRpbztcbiAgaWYgKHJ0bCkgZGlmZiA9IC1kaWZmO1xuICBzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPSBkaWZmID4gMCA/ICdwcmV2JyA6ICduZXh0JztcbiAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gZGlmZiArIGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gIHZhciBkaXNhYmxlUGFyZW50U3dpcGVyID0gdHJ1ZTtcbiAgdmFyIHJlc2lzdGFuY2VSYXRpbyA9IHBhcmFtcy5yZXNpc3RhbmNlUmF0aW87XG5cbiAgaWYgKHBhcmFtcy50b3VjaFJlbGVhc2VPbkVkZ2VzKSB7XG4gICAgcmVzaXN0YW5jZVJhdGlvID0gMDtcbiAgfVxuXG4gIGlmIChkaWZmID4gMCAmJiBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPiBzd2lwZXIubWluVHJhbnNsYXRlKCkpIHtcbiAgICBkaXNhYmxlUGFyZW50U3dpcGVyID0gZmFsc2U7XG4gICAgaWYgKHBhcmFtcy5yZXNpc3RhbmNlKSBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBzd2lwZXIubWluVHJhbnNsYXRlKCkgLSAxICsgTWF0aC5wb3coLXN3aXBlci5taW5UcmFuc2xhdGUoKSArIGRhdGEuc3RhcnRUcmFuc2xhdGUgKyBkaWZmLCByZXNpc3RhbmNlUmF0aW8pO1xuICB9IGVsc2UgaWYgKGRpZmYgPCAwICYmIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA8IHN3aXBlci5tYXhUcmFuc2xhdGUoKSkge1xuICAgIGRpc2FibGVQYXJlbnRTd2lwZXIgPSBmYWxzZTtcbiAgICBpZiAocGFyYW1zLnJlc2lzdGFuY2UpIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSArIDEgLSBNYXRoLnBvdyhzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBkYXRhLnN0YXJ0VHJhbnNsYXRlIC0gZGlmZiwgcmVzaXN0YW5jZVJhdGlvKTtcbiAgfVxuXG4gIGlmIChkaXNhYmxlUGFyZW50U3dpcGVyKSB7XG4gICAgZS5wcmV2ZW50ZWRCeU5lc3RlZFN3aXBlciA9IHRydWU7XG4gIH0gLy8gRGlyZWN0aW9ucyBsb2Nrc1xuXG5cbiAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZU5leHQgJiYgc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAnbmV4dCcgJiYgZGF0YS5jdXJyZW50VHJhbnNsYXRlIDwgZGF0YS5zdGFydFRyYW5zbGF0ZSkge1xuICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gIH1cblxuICBpZiAoIXN3aXBlci5hbGxvd1NsaWRlUHJldiAmJiBzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICdwcmV2JyAmJiBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPiBkYXRhLnN0YXJ0VHJhbnNsYXRlKSB7XG4gICAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gZGF0YS5zdGFydFRyYW5zbGF0ZTtcbiAgfVxuXG4gIGlmICghc3dpcGVyLmFsbG93U2xpZGVQcmV2ICYmICFzd2lwZXIuYWxsb3dTbGlkZU5leHQpIHtcbiAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICB9IC8vIFRocmVzaG9sZFxuXG5cbiAgaWYgKHBhcmFtcy50aHJlc2hvbGQgPiAwKSB7XG4gICAgaWYgKE1hdGguYWJzKGRpZmYpID4gcGFyYW1zLnRocmVzaG9sZCB8fCBkYXRhLmFsbG93VGhyZXNob2xkTW92ZSkge1xuICAgICAgaWYgKCFkYXRhLmFsbG93VGhyZXNob2xkTW92ZSkge1xuICAgICAgICBkYXRhLmFsbG93VGhyZXNob2xkTW92ZSA9IHRydWU7XG4gICAgICAgIHRvdWNoZXMuc3RhcnRYID0gdG91Y2hlcy5jdXJyZW50WDtcbiAgICAgICAgdG91Y2hlcy5zdGFydFkgPSB0b3VjaGVzLmN1cnJlbnRZO1xuICAgICAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICAgICAgICB0b3VjaGVzLmRpZmYgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyB0b3VjaGVzLmN1cnJlbnRYIC0gdG91Y2hlcy5zdGFydFggOiB0b3VjaGVzLmN1cnJlbnRZIC0gdG91Y2hlcy5zdGFydFk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gZGF0YS5zdGFydFRyYW5zbGF0ZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cblxuICBpZiAoIXBhcmFtcy5mb2xsb3dGaW5nZXIgfHwgcGFyYW1zLmNzc01vZGUpIHJldHVybjsgLy8gVXBkYXRlIGFjdGl2ZSBpbmRleCBpbiBmcmVlIG1vZGVcblxuICBpZiAocGFyYW1zLmZyZWVNb2RlIHx8IHBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzIHx8IHBhcmFtcy53YXRjaFNsaWRlc1Zpc2liaWxpdHkpIHtcbiAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5mcmVlTW9kZSkge1xuICAgIC8vIFZlbG9jaXR5XG4gICAgaWYgKGRhdGEudmVsb2NpdGllcy5sZW5ndGggPT09IDApIHtcbiAgICAgIGRhdGEudmVsb2NpdGllcy5wdXNoKHtcbiAgICAgICAgcG9zaXRpb246IHRvdWNoZXNbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3N0YXJ0WCcgOiAnc3RhcnRZJ10sXG4gICAgICAgIHRpbWU6IGRhdGEudG91Y2hTdGFydFRpbWVcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGRhdGEudmVsb2NpdGllcy5wdXNoKHtcbiAgICAgIHBvc2l0aW9uOiB0b3VjaGVzW3N3aXBlci5pc0hvcml6b250YWwoKSA/ICdjdXJyZW50WCcgOiAnY3VycmVudFknXSxcbiAgICAgIHRpbWU6IG5vdygpXG4gICAgfSk7XG4gIH0gLy8gVXBkYXRlIHByb2dyZXNzXG5cblxuICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MoZGF0YS5jdXJyZW50VHJhbnNsYXRlKTsgLy8gVXBkYXRlIHRyYW5zbGF0ZVxuXG4gIHN3aXBlci5zZXRUcmFuc2xhdGUoZGF0YS5jdXJyZW50VHJhbnNsYXRlKTtcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvZXZlbnRzL29uVG91Y2hNb3ZlLmpzIiwiaW1wb3J0IHsgbm93LCBuZXh0VGljayB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG9uVG91Y2hFbmQoZXZlbnQpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBkYXRhID0gc3dpcGVyLnRvdWNoRXZlbnRzRGF0YTtcbiAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICB0b3VjaGVzID0gc3dpcGVyLnRvdWNoZXMsXG4gICAgICBydGwgPSBzd2lwZXIucnRsVHJhbnNsYXRlLFxuICAgICAgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsLFxuICAgICAgc2xpZGVzR3JpZCA9IHN3aXBlci5zbGlkZXNHcmlkLFxuICAgICAgc25hcEdyaWQgPSBzd2lwZXIuc25hcEdyaWQsXG4gICAgICBlbmFibGVkID0gc3dpcGVyLmVuYWJsZWQ7XG4gIGlmICghZW5hYmxlZCkgcmV0dXJuO1xuICB2YXIgZSA9IGV2ZW50O1xuICBpZiAoZS5vcmlnaW5hbEV2ZW50KSBlID0gZS5vcmlnaW5hbEV2ZW50O1xuXG4gIGlmIChkYXRhLmFsbG93VG91Y2hDYWxsYmFja3MpIHtcbiAgICBzd2lwZXIuZW1pdCgndG91Y2hFbmQnLCBlKTtcbiAgfVxuXG4gIGRhdGEuYWxsb3dUb3VjaENhbGxiYWNrcyA9IGZhbHNlO1xuXG4gIGlmICghZGF0YS5pc1RvdWNoZWQpIHtcbiAgICBpZiAoZGF0YS5pc01vdmVkICYmIHBhcmFtcy5ncmFiQ3Vyc29yKSB7XG4gICAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcihmYWxzZSk7XG4gICAgfVxuXG4gICAgZGF0YS5pc01vdmVkID0gZmFsc2U7XG4gICAgZGF0YS5zdGFydE1vdmluZyA9IGZhbHNlO1xuICAgIHJldHVybjtcbiAgfSAvLyBSZXR1cm4gR3JhYiBDdXJzb3JcblxuXG4gIGlmIChwYXJhbXMuZ3JhYkN1cnNvciAmJiBkYXRhLmlzTW92ZWQgJiYgZGF0YS5pc1RvdWNoZWQgJiYgKHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9PT0gdHJ1ZSB8fCBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPT09IHRydWUpKSB7XG4gICAgc3dpcGVyLnNldEdyYWJDdXJzb3IoZmFsc2UpO1xuICB9IC8vIFRpbWUgZGlmZlxuXG5cbiAgdmFyIHRvdWNoRW5kVGltZSA9IG5vdygpO1xuICB2YXIgdGltZURpZmYgPSB0b3VjaEVuZFRpbWUgLSBkYXRhLnRvdWNoU3RhcnRUaW1lOyAvLyBUYXAsIGRvdWJsZVRhcCwgQ2xpY2tcblxuICBpZiAoc3dpcGVyLmFsbG93Q2xpY2spIHtcbiAgICBzd2lwZXIudXBkYXRlQ2xpY2tlZFNsaWRlKGUpO1xuICAgIHN3aXBlci5lbWl0KCd0YXAgY2xpY2snLCBlKTtcblxuICAgIGlmICh0aW1lRGlmZiA8IDMwMCAmJiB0b3VjaEVuZFRpbWUgLSBkYXRhLmxhc3RDbGlja1RpbWUgPCAzMDApIHtcbiAgICAgIHN3aXBlci5lbWl0KCdkb3VibGVUYXAgZG91YmxlQ2xpY2snLCBlKTtcbiAgICB9XG4gIH1cblxuICBkYXRhLmxhc3RDbGlja1RpbWUgPSBub3coKTtcbiAgbmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgIGlmICghc3dpcGVyLmRlc3Ryb3llZCkgc3dpcGVyLmFsbG93Q2xpY2sgPSB0cnVlO1xuICB9KTtcblxuICBpZiAoIWRhdGEuaXNUb3VjaGVkIHx8ICFkYXRhLmlzTW92ZWQgfHwgIXN3aXBlci5zd2lwZURpcmVjdGlvbiB8fCB0b3VjaGVzLmRpZmYgPT09IDAgfHwgZGF0YS5jdXJyZW50VHJhbnNsYXRlID09PSBkYXRhLnN0YXJ0VHJhbnNsYXRlKSB7XG4gICAgZGF0YS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICBkYXRhLmlzTW92ZWQgPSBmYWxzZTtcbiAgICBkYXRhLnN0YXJ0TW92aW5nID0gZmFsc2U7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZGF0YS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgZGF0YS5pc01vdmVkID0gZmFsc2U7XG4gIGRhdGEuc3RhcnRNb3ZpbmcgPSBmYWxzZTtcbiAgdmFyIGN1cnJlbnRQb3M7XG5cbiAgaWYgKHBhcmFtcy5mb2xsb3dGaW5nZXIpIHtcbiAgICBjdXJyZW50UG9zID0gcnRsID8gc3dpcGVyLnRyYW5zbGF0ZSA6IC1zd2lwZXIudHJhbnNsYXRlO1xuICB9IGVsc2Uge1xuICAgIGN1cnJlbnRQb3MgPSAtZGF0YS5jdXJyZW50VHJhbnNsYXRlO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5mcmVlTW9kZSkge1xuICAgIGlmIChjdXJyZW50UG9zIDwgLXN3aXBlci5taW5UcmFuc2xhdGUoKSkge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoY3VycmVudFBvcyA+IC1zd2lwZXIubWF4VHJhbnNsYXRlKCkpIHtcbiAgICAgIGlmIChzd2lwZXIuc2xpZGVzLmxlbmd0aCA8IHNuYXBHcmlkLmxlbmd0aCkge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzbmFwR3JpZC5sZW5ndGggLSAxKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLmZyZWVNb2RlTW9tZW50dW0pIHtcbiAgICAgIGlmIChkYXRhLnZlbG9jaXRpZXMubGVuZ3RoID4gMSkge1xuICAgICAgICB2YXIgbGFzdE1vdmVFdmVudCA9IGRhdGEudmVsb2NpdGllcy5wb3AoKTtcbiAgICAgICAgdmFyIHZlbG9jaXR5RXZlbnQgPSBkYXRhLnZlbG9jaXRpZXMucG9wKCk7XG4gICAgICAgIHZhciBkaXN0YW5jZSA9IGxhc3RNb3ZlRXZlbnQucG9zaXRpb24gLSB2ZWxvY2l0eUV2ZW50LnBvc2l0aW9uO1xuICAgICAgICB2YXIgdGltZSA9IGxhc3RNb3ZlRXZlbnQudGltZSAtIHZlbG9jaXR5RXZlbnQudGltZTtcbiAgICAgICAgc3dpcGVyLnZlbG9jaXR5ID0gZGlzdGFuY2UgLyB0aW1lO1xuICAgICAgICBzd2lwZXIudmVsb2NpdHkgLz0gMjtcblxuICAgICAgICBpZiAoTWF0aC5hYnMoc3dpcGVyLnZlbG9jaXR5KSA8IHBhcmFtcy5mcmVlTW9kZU1pbmltdW1WZWxvY2l0eSkge1xuICAgICAgICAgIHN3aXBlci52ZWxvY2l0eSA9IDA7XG4gICAgICAgIH0gLy8gdGhpcyBpbXBsaWVzIHRoYXQgdGhlIHVzZXIgc3RvcHBlZCBtb3ZpbmcgYSBmaW5nZXIgdGhlbiByZWxlYXNlZC5cbiAgICAgICAgLy8gVGhlcmUgd291bGQgYmUgbm8gZXZlbnRzIHdpdGggZGlzdGFuY2UgemVybywgc28gdGhlIGxhc3QgZXZlbnQgaXMgc3RhbGUuXG5cblxuICAgICAgICBpZiAodGltZSA+IDE1MCB8fCBub3coKSAtIGxhc3RNb3ZlRXZlbnQudGltZSA+IDMwMCkge1xuICAgICAgICAgIHN3aXBlci52ZWxvY2l0eSA9IDA7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci52ZWxvY2l0eSA9IDA7XG4gICAgICB9XG5cbiAgICAgIHN3aXBlci52ZWxvY2l0eSAqPSBwYXJhbXMuZnJlZU1vZGVNb21lbnR1bVZlbG9jaXR5UmF0aW87XG4gICAgICBkYXRhLnZlbG9jaXRpZXMubGVuZ3RoID0gMDtcbiAgICAgIHZhciBtb21lbnR1bUR1cmF0aW9uID0gMTAwMCAqIHBhcmFtcy5mcmVlTW9kZU1vbWVudHVtUmF0aW87XG4gICAgICB2YXIgbW9tZW50dW1EaXN0YW5jZSA9IHN3aXBlci52ZWxvY2l0eSAqIG1vbWVudHVtRHVyYXRpb247XG4gICAgICB2YXIgbmV3UG9zaXRpb24gPSBzd2lwZXIudHJhbnNsYXRlICsgbW9tZW50dW1EaXN0YW5jZTtcbiAgICAgIGlmIChydGwpIG5ld1Bvc2l0aW9uID0gLW5ld1Bvc2l0aW9uO1xuICAgICAgdmFyIGRvQm91bmNlID0gZmFsc2U7XG4gICAgICB2YXIgYWZ0ZXJCb3VuY2VQb3NpdGlvbjtcbiAgICAgIHZhciBib3VuY2VBbW91bnQgPSBNYXRoLmFicyhzd2lwZXIudmVsb2NpdHkpICogMjAgKiBwYXJhbXMuZnJlZU1vZGVNb21lbnR1bUJvdW5jZVJhdGlvO1xuICAgICAgdmFyIG5lZWRzTG9vcEZpeDtcblxuICAgICAgaWYgKG5ld1Bvc2l0aW9uIDwgc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSB7XG4gICAgICAgIGlmIChwYXJhbXMuZnJlZU1vZGVNb21lbnR1bUJvdW5jZSkge1xuICAgICAgICAgIGlmIChuZXdQb3NpdGlvbiArIHN3aXBlci5tYXhUcmFuc2xhdGUoKSA8IC1ib3VuY2VBbW91bnQpIHtcbiAgICAgICAgICAgIG5ld1Bvc2l0aW9uID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gYm91bmNlQW1vdW50O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGFmdGVyQm91bmNlUG9zaXRpb24gPSBzd2lwZXIubWF4VHJhbnNsYXRlKCk7XG4gICAgICAgICAgZG9Cb3VuY2UgPSB0cnVlO1xuICAgICAgICAgIGRhdGEuYWxsb3dNb21lbnR1bUJvdW5jZSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3UG9zaXRpb24gPSBzd2lwZXIubWF4VHJhbnNsYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFyYW1zLmxvb3AgJiYgcGFyYW1zLmNlbnRlcmVkU2xpZGVzKSBuZWVkc0xvb3BGaXggPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChuZXdQb3NpdGlvbiA+IHN3aXBlci5taW5UcmFuc2xhdGUoKSkge1xuICAgICAgICBpZiAocGFyYW1zLmZyZWVNb2RlTW9tZW50dW1Cb3VuY2UpIHtcbiAgICAgICAgICBpZiAobmV3UG9zaXRpb24gLSBzd2lwZXIubWluVHJhbnNsYXRlKCkgPiBib3VuY2VBbW91bnQpIHtcbiAgICAgICAgICAgIG5ld1Bvc2l0aW9uID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpICsgYm91bmNlQW1vdW50O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGFmdGVyQm91bmNlUG9zaXRpb24gPSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gICAgICAgICAgZG9Cb3VuY2UgPSB0cnVlO1xuICAgICAgICAgIGRhdGEuYWxsb3dNb21lbnR1bUJvdW5jZSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3UG9zaXRpb24gPSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFyYW1zLmxvb3AgJiYgcGFyYW1zLmNlbnRlcmVkU2xpZGVzKSBuZWVkc0xvb3BGaXggPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChwYXJhbXMuZnJlZU1vZGVTdGlja3kpIHtcbiAgICAgICAgdmFyIG5leHRTbGlkZTtcblxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNuYXBHcmlkLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgICAgaWYgKHNuYXBHcmlkW2pdID4gLW5ld1Bvc2l0aW9uKSB7XG4gICAgICAgICAgICBuZXh0U2xpZGUgPSBqO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKE1hdGguYWJzKHNuYXBHcmlkW25leHRTbGlkZV0gLSBuZXdQb3NpdGlvbikgPCBNYXRoLmFicyhzbmFwR3JpZFtuZXh0U2xpZGUgLSAxXSAtIG5ld1Bvc2l0aW9uKSB8fCBzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICduZXh0Jykge1xuICAgICAgICAgIG5ld1Bvc2l0aW9uID0gc25hcEdyaWRbbmV4dFNsaWRlXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXdQb3NpdGlvbiA9IHNuYXBHcmlkW25leHRTbGlkZSAtIDFdO1xuICAgICAgICB9XG5cbiAgICAgICAgbmV3UG9zaXRpb24gPSAtbmV3UG9zaXRpb247XG4gICAgICB9XG5cbiAgICAgIGlmIChuZWVkc0xvb3BGaXgpIHtcbiAgICAgICAgc3dpcGVyLm9uY2UoJ3RyYW5zaXRpb25FbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICAgICAgfSk7XG4gICAgICB9IC8vIEZpeCBkdXJhdGlvblxuXG5cbiAgICAgIGlmIChzd2lwZXIudmVsb2NpdHkgIT09IDApIHtcbiAgICAgICAgaWYgKHJ0bCkge1xuICAgICAgICAgIG1vbWVudHVtRHVyYXRpb24gPSBNYXRoLmFicygoLW5ld1Bvc2l0aW9uIC0gc3dpcGVyLnRyYW5zbGF0ZSkgLyBzd2lwZXIudmVsb2NpdHkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1vbWVudHVtRHVyYXRpb24gPSBNYXRoLmFicygobmV3UG9zaXRpb24gLSBzd2lwZXIudHJhbnNsYXRlKSAvIHN3aXBlci52ZWxvY2l0eSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFyYW1zLmZyZWVNb2RlU3RpY2t5KSB7XG4gICAgICAgICAgLy8gSWYgZnJlZU1vZGVTdGlja3kgaXMgYWN0aXZlIGFuZCB0aGUgdXNlciBlbmRzIGEgc3dpcGUgd2l0aCBhIHNsb3ctdmVsb2NpdHlcbiAgICAgICAgICAvLyBldmVudCwgdGhlbiBkdXJhdGlvbnMgY2FuIGJlIDIwKyBzZWNvbmRzIHRvIHNsaWRlIG9uZSAob3IgemVybyEpIHNsaWRlcy5cbiAgICAgICAgICAvLyBJdCdzIGVhc3kgdG8gc2VlIHRoaXMgd2hlbiBzaW11bGF0aW5nIHRvdWNoIHdpdGggbW91c2UgZXZlbnRzLiBUbyBmaXggdGhpcyxcbiAgICAgICAgICAvLyBsaW1pdCBzaW5nbGUtc2xpZGUgc3dpcGVzIHRvIHRoZSBkZWZhdWx0IHNsaWRlIGR1cmF0aW9uLiBUaGlzIGFsc28gaGFzIHRoZVxuICAgICAgICAgIC8vIG5pY2Ugc2lkZSBlZmZlY3Qgb2YgbWF0Y2hpbmcgc2xpZGUgc3BlZWQgaWYgdGhlIHVzZXIgc3RvcHBlZCBtb3ZpbmcgYmVmb3JlXG4gICAgICAgICAgLy8gbGlmdGluZyBmaW5nZXIgb3IgbW91c2UgdnMuIG1vdmluZyBzbG93bHkgYmVmb3JlIGxpZnRpbmcgdGhlIGZpbmdlci9tb3VzZS5cbiAgICAgICAgICAvLyBGb3IgZmFzdGVyIHN3aXBlcywgYWxzbyBhcHBseSBsaW1pdHMgKGFsYmVpdCBoaWdoZXIgb25lcykuXG4gICAgICAgICAgdmFyIG1vdmVEaXN0YW5jZSA9IE1hdGguYWJzKChydGwgPyAtbmV3UG9zaXRpb24gOiBuZXdQb3NpdGlvbikgLSBzd2lwZXIudHJhbnNsYXRlKTtcbiAgICAgICAgICB2YXIgY3VycmVudFNsaWRlU2l6ZSA9IHN3aXBlci5zbGlkZXNTaXplc0dyaWRbc3dpcGVyLmFjdGl2ZUluZGV4XTtcblxuICAgICAgICAgIGlmIChtb3ZlRGlzdGFuY2UgPCBjdXJyZW50U2xpZGVTaXplKSB7XG4gICAgICAgICAgICBtb21lbnR1bUR1cmF0aW9uID0gcGFyYW1zLnNwZWVkO1xuICAgICAgICAgIH0gZWxzZSBpZiAobW92ZURpc3RhbmNlIDwgMiAqIGN1cnJlbnRTbGlkZVNpemUpIHtcbiAgICAgICAgICAgIG1vbWVudHVtRHVyYXRpb24gPSBwYXJhbXMuc3BlZWQgKiAxLjU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1vbWVudHVtRHVyYXRpb24gPSBwYXJhbXMuc3BlZWQgKiAyLjU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHBhcmFtcy5mcmVlTW9kZVN0aWNreSkge1xuICAgICAgICBzd2lwZXIuc2xpZGVUb0Nsb3Nlc3QoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAocGFyYW1zLmZyZWVNb2RlTW9tZW50dW1Cb3VuY2UgJiYgZG9Cb3VuY2UpIHtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKGFmdGVyQm91bmNlUG9zaXRpb24pO1xuICAgICAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihtb21lbnR1bUR1cmF0aW9uKTtcbiAgICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShuZXdQb3NpdGlvbik7XG4gICAgICAgIHN3aXBlci50cmFuc2l0aW9uU3RhcnQodHJ1ZSwgc3dpcGVyLnN3aXBlRGlyZWN0aW9uKTtcbiAgICAgICAgc3dpcGVyLmFuaW1hdGluZyA9IHRydWU7XG4gICAgICAgICR3cmFwcGVyRWwudHJhbnNpdGlvbkVuZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhZGF0YS5hbGxvd01vbWVudHVtQm91bmNlKSByZXR1cm47XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ21vbWVudHVtQm91bmNlJyk7XG4gICAgICAgICAgc3dpcGVyLnNldFRyYW5zaXRpb24ocGFyYW1zLnNwZWVkKTtcbiAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUoYWZ0ZXJCb3VuY2VQb3NpdGlvbik7XG4gICAgICAgICAgICAkd3JhcHBlckVsLnRyYW5zaXRpb25FbmQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgICAgICAgICAgIHN3aXBlci50cmFuc2l0aW9uRW5kKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LCAwKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKHN3aXBlci52ZWxvY2l0eSkge1xuICAgICAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MobmV3UG9zaXRpb24pO1xuICAgICAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihtb21lbnR1bUR1cmF0aW9uKTtcbiAgICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShuZXdQb3NpdGlvbik7XG4gICAgICAgIHN3aXBlci50cmFuc2l0aW9uU3RhcnQodHJ1ZSwgc3dpcGVyLnN3aXBlRGlyZWN0aW9uKTtcblxuICAgICAgICBpZiAoIXN3aXBlci5hbmltYXRpbmcpIHtcbiAgICAgICAgICBzd2lwZXIuYW5pbWF0aW5nID0gdHJ1ZTtcbiAgICAgICAgICAkd3JhcHBlckVsLnRyYW5zaXRpb25FbmQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgICAgICAgc3dpcGVyLnRyYW5zaXRpb25FbmQoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLmVtaXQoJ19mcmVlTW9kZU5vTW9tZW50dW1SZWxlYXNlJyk7XG4gICAgICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyhuZXdQb3NpdGlvbik7XG4gICAgICB9XG5cbiAgICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICB9IGVsc2UgaWYgKHBhcmFtcy5mcmVlTW9kZVN0aWNreSkge1xuICAgICAgc3dpcGVyLnNsaWRlVG9DbG9zZXN0KCk7XG4gICAgICByZXR1cm47XG4gICAgfSBlbHNlIGlmIChwYXJhbXMuZnJlZU1vZGUpIHtcbiAgICAgIHN3aXBlci5lbWl0KCdfZnJlZU1vZGVOb01vbWVudHVtUmVsZWFzZScpO1xuICAgIH1cblxuICAgIGlmICghcGFyYW1zLmZyZWVNb2RlTW9tZW50dW0gfHwgdGltZURpZmYgPj0gcGFyYW1zLmxvbmdTd2lwZXNNcykge1xuICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKCk7XG4gICAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuO1xuICB9IC8vIEZpbmQgY3VycmVudCBzbGlkZVxuXG5cbiAgdmFyIHN0b3BJbmRleCA9IDA7XG4gIHZhciBncm91cFNpemUgPSBzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkWzBdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpZGVzR3JpZC5sZW5ndGg7IGkgKz0gaSA8IHBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAgPyAxIDogcGFyYW1zLnNsaWRlc1Blckdyb3VwKSB7XG4gICAgdmFyIF9pbmNyZW1lbnQgPSBpIDwgcGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCAtIDEgPyAxIDogcGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuXG4gICAgaWYgKHR5cGVvZiBzbGlkZXNHcmlkW2kgKyBfaW5jcmVtZW50XSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGlmIChjdXJyZW50UG9zID49IHNsaWRlc0dyaWRbaV0gJiYgY3VycmVudFBvcyA8IHNsaWRlc0dyaWRbaSArIF9pbmNyZW1lbnRdKSB7XG4gICAgICAgIHN0b3BJbmRleCA9IGk7XG4gICAgICAgIGdyb3VwU2l6ZSA9IHNsaWRlc0dyaWRbaSArIF9pbmNyZW1lbnRdIC0gc2xpZGVzR3JpZFtpXTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGN1cnJlbnRQb3MgPj0gc2xpZGVzR3JpZFtpXSkge1xuICAgICAgc3RvcEluZGV4ID0gaTtcbiAgICAgIGdyb3VwU2l6ZSA9IHNsaWRlc0dyaWRbc2xpZGVzR3JpZC5sZW5ndGggLSAxXSAtIHNsaWRlc0dyaWRbc2xpZGVzR3JpZC5sZW5ndGggLSAyXTtcbiAgICB9XG4gIH0gLy8gRmluZCBjdXJyZW50IHNsaWRlIHNpemVcblxuXG4gIHZhciByYXRpbyA9IChjdXJyZW50UG9zIC0gc2xpZGVzR3JpZFtzdG9wSW5kZXhdKSAvIGdyb3VwU2l6ZTtcbiAgdmFyIGluY3JlbWVudCA9IHN0b3BJbmRleCA8IHBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAgLSAxID8gMSA6IHBhcmFtcy5zbGlkZXNQZXJHcm91cDtcblxuICBpZiAodGltZURpZmYgPiBwYXJhbXMubG9uZ1N3aXBlc01zKSB7XG4gICAgLy8gTG9uZyB0b3VjaGVzXG4gICAgaWYgKCFwYXJhbXMubG9uZ1N3aXBlcykge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAnbmV4dCcpIHtcbiAgICAgIGlmIChyYXRpbyA+PSBwYXJhbXMubG9uZ1N3aXBlc1JhdGlvKSBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXggKyBpbmNyZW1lbnQpO2Vsc2Ugc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4KTtcbiAgICB9XG5cbiAgICBpZiAoc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAncHJldicpIHtcbiAgICAgIGlmIChyYXRpbyA+IDEgLSBwYXJhbXMubG9uZ1N3aXBlc1JhdGlvKSBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXggKyBpbmNyZW1lbnQpO2Vsc2Ugc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gU2hvcnQgc3dpcGVzXG4gICAgaWYgKCFwYXJhbXMuc2hvcnRTd2lwZXMpIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGlzTmF2QnV0dG9uVGFyZ2V0ID0gc3dpcGVyLm5hdmlnYXRpb24gJiYgKGUudGFyZ2V0ID09PSBzd2lwZXIubmF2aWdhdGlvbi5uZXh0RWwgfHwgZS50YXJnZXQgPT09IHN3aXBlci5uYXZpZ2F0aW9uLnByZXZFbCk7XG5cbiAgICBpZiAoIWlzTmF2QnV0dG9uVGFyZ2V0KSB7XG4gICAgICBpZiAoc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAnbmV4dCcpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4ICsgaW5jcmVtZW50KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ3ByZXYnKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChlLnRhcmdldCA9PT0gc3dpcGVyLm5hdmlnYXRpb24ubmV4dEVsKSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXggKyBpbmNyZW1lbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXgpO1xuICAgIH1cbiAgfVxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9ldmVudHMvb25Ub3VjaEVuZC5qcyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG9uUmVzaXplKCkge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICBlbCA9IHN3aXBlci5lbDtcbiAgaWYgKGVsICYmIGVsLm9mZnNldFdpZHRoID09PSAwKSByZXR1cm47IC8vIEJyZWFrcG9pbnRzXG5cbiAgaWYgKHBhcmFtcy5icmVha3BvaW50cykge1xuICAgIHN3aXBlci5zZXRCcmVha3BvaW50KCk7XG4gIH0gLy8gU2F2ZSBsb2Nrc1xuXG5cbiAgdmFyIGFsbG93U2xpZGVOZXh0ID0gc3dpcGVyLmFsbG93U2xpZGVOZXh0LFxuICAgICAgYWxsb3dTbGlkZVByZXYgPSBzd2lwZXIuYWxsb3dTbGlkZVByZXYsXG4gICAgICBzbmFwR3JpZCA9IHN3aXBlci5zbmFwR3JpZDsgLy8gRGlzYWJsZSBsb2NrcyBvbiByZXNpemVcblxuICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSB0cnVlO1xuICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSB0cnVlO1xuICBzd2lwZXIudXBkYXRlU2l6ZSgpO1xuICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG5cbiAgaWYgKChwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nIHx8IHBhcmFtcy5zbGlkZXNQZXJWaWV3ID4gMSkgJiYgc3dpcGVyLmlzRW5kICYmICFzd2lwZXIuaXNCZWdpbm5pbmcgJiYgIXN3aXBlci5wYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIDEsIDAsIGZhbHNlLCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgsIDAsIGZhbHNlLCB0cnVlKTtcbiAgfVxuXG4gIGlmIChzd2lwZXIuYXV0b3BsYXkgJiYgc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcgJiYgc3dpcGVyLmF1dG9wbGF5LnBhdXNlZCkge1xuICAgIHN3aXBlci5hdXRvcGxheS5ydW4oKTtcbiAgfSAvLyBSZXR1cm4gbG9ja3MgYWZ0ZXIgcmVzaXplXG5cblxuICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSBhbGxvd1NsaWRlUHJldjtcbiAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gYWxsb3dTbGlkZU5leHQ7XG5cbiAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzbmFwR3JpZCAhPT0gc3dpcGVyLnNuYXBHcmlkKSB7XG4gICAgc3dpcGVyLmNoZWNrT3ZlcmZsb3coKTtcbiAgfVxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9ldmVudHMvb25SZXNpemUuanMiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvbkNsaWNrKGUpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIGlmICghc3dpcGVyLmVuYWJsZWQpIHJldHVybjtcblxuICBpZiAoIXN3aXBlci5hbGxvd0NsaWNrKSB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMucHJldmVudENsaWNrcykgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMucHJldmVudENsaWNrc1Byb3BhZ2F0aW9uICYmIHN3aXBlci5hbmltYXRpbmcpIHtcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgIH1cbiAgfVxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9ldmVudHMvb25DbGljay5qcyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG9uU2Nyb2xsKCkge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIHdyYXBwZXJFbCA9IHN3aXBlci53cmFwcGVyRWwsXG4gICAgICBydGxUcmFuc2xhdGUgPSBzd2lwZXIucnRsVHJhbnNsYXRlLFxuICAgICAgZW5hYmxlZCA9IHN3aXBlci5lbmFibGVkO1xuICBpZiAoIWVuYWJsZWQpIHJldHVybjtcbiAgc3dpcGVyLnByZXZpb3VzVHJhbnNsYXRlID0gc3dpcGVyLnRyYW5zbGF0ZTtcblxuICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgaWYgKHJ0bFRyYW5zbGF0ZSkge1xuICAgICAgc3dpcGVyLnRyYW5zbGF0ZSA9IHdyYXBwZXJFbC5zY3JvbGxXaWR0aCAtIHdyYXBwZXJFbC5vZmZzZXRXaWR0aCAtIHdyYXBwZXJFbC5zY3JvbGxMZWZ0O1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIudHJhbnNsYXRlID0gLXdyYXBwZXJFbC5zY3JvbGxMZWZ0O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIudHJhbnNsYXRlID0gLXdyYXBwZXJFbC5zY3JvbGxUb3A7XG4gIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5cblxuICBpZiAoc3dpcGVyLnRyYW5zbGF0ZSA9PT0gLTApIHN3aXBlci50cmFuc2xhdGUgPSAwO1xuICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgdmFyIG5ld1Byb2dyZXNzO1xuICB2YXIgdHJhbnNsYXRlc0RpZmYgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG5cbiAgaWYgKHRyYW5zbGF0ZXNEaWZmID09PSAwKSB7XG4gICAgbmV3UHJvZ3Jlc3MgPSAwO1xuICB9IGVsc2Uge1xuICAgIG5ld1Byb2dyZXNzID0gKHN3aXBlci50cmFuc2xhdGUgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIC8gdHJhbnNsYXRlc0RpZmY7XG4gIH1cblxuICBpZiAobmV3UHJvZ3Jlc3MgIT09IHN3aXBlci5wcm9ncmVzcykge1xuICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyhydGxUcmFuc2xhdGUgPyAtc3dpcGVyLnRyYW5zbGF0ZSA6IHN3aXBlci50cmFuc2xhdGUpO1xuICB9XG5cbiAgc3dpcGVyLmVtaXQoJ3NldFRyYW5zbGF0ZScsIHN3aXBlci50cmFuc2xhdGUsIGZhbHNlKTtcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvZXZlbnRzL29uU2Nyb2xsLmpzIiwiaW1wb3J0IHNldEJyZWFrcG9pbnQgZnJvbSAnLi9zZXRCcmVha3BvaW50JztcbmltcG9ydCBnZXRCcmVha3BvaW50IGZyb20gJy4vZ2V0QnJlYWtwb2ludCc7XG5leHBvcnQgZGVmYXVsdCB7XG4gIHNldEJyZWFrcG9pbnQ6IHNldEJyZWFrcG9pbnQsXG4gIGdldEJyZWFrcG9pbnQ6IGdldEJyZWFrcG9pbnRcbn07XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL2JyZWFrcG9pbnRzL2luZGV4LmpzIiwiaW1wb3J0IHsgZXh0ZW5kIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0QnJlYWtwb2ludCgpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleCxcbiAgICAgIGluaXRpYWxpemVkID0gc3dpcGVyLmluaXRpYWxpemVkLFxuICAgICAgX3N3aXBlciRsb29wZWRTbGlkZXMgPSBzd2lwZXIubG9vcGVkU2xpZGVzLFxuICAgICAgbG9vcGVkU2xpZGVzID0gX3N3aXBlciRsb29wZWRTbGlkZXMgPT09IHZvaWQgMCA/IDAgOiBfc3dpcGVyJGxvb3BlZFNsaWRlcyxcbiAgICAgIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICAkZWwgPSBzd2lwZXIuJGVsO1xuICB2YXIgYnJlYWtwb2ludHMgPSBwYXJhbXMuYnJlYWtwb2ludHM7XG4gIGlmICghYnJlYWtwb2ludHMgfHwgYnJlYWtwb2ludHMgJiYgT2JqZWN0LmtleXMoYnJlYWtwb2ludHMpLmxlbmd0aCA9PT0gMCkgcmV0dXJuOyAvLyBHZXQgYnJlYWtwb2ludCBmb3Igd2luZG93IHdpZHRoIGFuZCB1cGRhdGUgcGFyYW1ldGVyc1xuXG4gIHZhciBicmVha3BvaW50ID0gc3dpcGVyLmdldEJyZWFrcG9pbnQoYnJlYWtwb2ludHMsIHN3aXBlci5wYXJhbXMuYnJlYWtwb2ludHNCYXNlLCBzd2lwZXIuZWwpO1xuICBpZiAoIWJyZWFrcG9pbnQgfHwgc3dpcGVyLmN1cnJlbnRCcmVha3BvaW50ID09PSBicmVha3BvaW50KSByZXR1cm47XG4gIHZhciBicmVha3BvaW50T25seVBhcmFtcyA9IGJyZWFrcG9pbnQgaW4gYnJlYWtwb2ludHMgPyBicmVha3BvaW50c1ticmVha3BvaW50XSA6IHVuZGVmaW5lZDtcblxuICBpZiAoYnJlYWtwb2ludE9ubHlQYXJhbXMpIHtcbiAgICBbJ3NsaWRlc1BlclZpZXcnLCAnc3BhY2VCZXR3ZWVuJywgJ3NsaWRlc1Blckdyb3VwJywgJ3NsaWRlc1Blckdyb3VwU2tpcCcsICdzbGlkZXNQZXJDb2x1bW4nXS5mb3JFYWNoKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgdmFyIHBhcmFtVmFsdWUgPSBicmVha3BvaW50T25seVBhcmFtc1twYXJhbV07XG4gICAgICBpZiAodHlwZW9mIHBhcmFtVmFsdWUgPT09ICd1bmRlZmluZWQnKSByZXR1cm47XG5cbiAgICAgIGlmIChwYXJhbSA9PT0gJ3NsaWRlc1BlclZpZXcnICYmIChwYXJhbVZhbHVlID09PSAnQVVUTycgfHwgcGFyYW1WYWx1ZSA9PT0gJ2F1dG8nKSkge1xuICAgICAgICBicmVha3BvaW50T25seVBhcmFtc1twYXJhbV0gPSAnYXV0byc7XG4gICAgICB9IGVsc2UgaWYgKHBhcmFtID09PSAnc2xpZGVzUGVyVmlldycpIHtcbiAgICAgICAgYnJlYWtwb2ludE9ubHlQYXJhbXNbcGFyYW1dID0gcGFyc2VGbG9hdChwYXJhbVZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJyZWFrcG9pbnRPbmx5UGFyYW1zW3BhcmFtXSA9IHBhcnNlSW50KHBhcmFtVmFsdWUsIDEwKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHZhciBicmVha3BvaW50UGFyYW1zID0gYnJlYWtwb2ludE9ubHlQYXJhbXMgfHwgc3dpcGVyLm9yaWdpbmFsUGFyYW1zO1xuICB2YXIgd2FzTXVsdGlSb3cgPSBwYXJhbXMuc2xpZGVzUGVyQ29sdW1uID4gMTtcbiAgdmFyIGlzTXVsdGlSb3cgPSBicmVha3BvaW50UGFyYW1zLnNsaWRlc1BlckNvbHVtbiA+IDE7XG4gIHZhciB3YXNFbmFibGVkID0gcGFyYW1zLmVuYWJsZWQ7XG5cbiAgaWYgKHdhc011bHRpUm93ICYmICFpc011bHRpUm93KSB7XG4gICAgJGVsLnJlbW92ZUNsYXNzKHBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzICsgXCJtdWx0aXJvdyBcIiArIHBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzICsgXCJtdWx0aXJvdy1jb2x1bW5cIik7XG4gICAgc3dpcGVyLmVtaXRDb250YWluZXJDbGFzc2VzKCk7XG4gIH0gZWxzZSBpZiAoIXdhc011bHRpUm93ICYmIGlzTXVsdGlSb3cpIHtcbiAgICAkZWwuYWRkQ2xhc3MocGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MgKyBcIm11bHRpcm93XCIpO1xuXG4gICAgaWYgKGJyZWFrcG9pbnRQYXJhbXMuc2xpZGVzUGVyQ29sdW1uRmlsbCA9PT0gJ2NvbHVtbicpIHtcbiAgICAgICRlbC5hZGRDbGFzcyhwYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcyArIFwibXVsdGlyb3ctY29sdW1uXCIpO1xuICAgIH1cblxuICAgIHN3aXBlci5lbWl0Q29udGFpbmVyQ2xhc3NlcygpO1xuICB9XG5cbiAgdmFyIGRpcmVjdGlvbkNoYW5nZWQgPSBicmVha3BvaW50UGFyYW1zLmRpcmVjdGlvbiAmJiBicmVha3BvaW50UGFyYW1zLmRpcmVjdGlvbiAhPT0gcGFyYW1zLmRpcmVjdGlvbjtcbiAgdmFyIG5lZWRzUmVMb29wID0gcGFyYW1zLmxvb3AgJiYgKGJyZWFrcG9pbnRQYXJhbXMuc2xpZGVzUGVyVmlldyAhPT0gcGFyYW1zLnNsaWRlc1BlclZpZXcgfHwgZGlyZWN0aW9uQ2hhbmdlZCk7XG5cbiAgaWYgKGRpcmVjdGlvbkNoYW5nZWQgJiYgaW5pdGlhbGl6ZWQpIHtcbiAgICBzd2lwZXIuY2hhbmdlRGlyZWN0aW9uKCk7XG4gIH1cblxuICBleHRlbmQoc3dpcGVyLnBhcmFtcywgYnJlYWtwb2ludFBhcmFtcyk7XG4gIHZhciBpc0VuYWJsZWQgPSBzd2lwZXIucGFyYW1zLmVuYWJsZWQ7XG4gIGV4dGVuZChzd2lwZXIsIHtcbiAgICBhbGxvd1RvdWNoTW92ZTogc3dpcGVyLnBhcmFtcy5hbGxvd1RvdWNoTW92ZSxcbiAgICBhbGxvd1NsaWRlTmV4dDogc3dpcGVyLnBhcmFtcy5hbGxvd1NsaWRlTmV4dCxcbiAgICBhbGxvd1NsaWRlUHJldjogc3dpcGVyLnBhcmFtcy5hbGxvd1NsaWRlUHJldlxuICB9KTtcblxuICBpZiAod2FzRW5hYmxlZCAmJiAhaXNFbmFibGVkKSB7XG4gICAgc3dpcGVyLmRpc2FibGUoKTtcbiAgfSBlbHNlIGlmICghd2FzRW5hYmxlZCAmJiBpc0VuYWJsZWQpIHtcbiAgICBzd2lwZXIuZW5hYmxlKCk7XG4gIH1cblxuICBzd2lwZXIuY3VycmVudEJyZWFrcG9pbnQgPSBicmVha3BvaW50O1xuICBzd2lwZXIuZW1pdCgnX2JlZm9yZUJyZWFrcG9pbnQnLCBicmVha3BvaW50UGFyYW1zKTtcblxuICBpZiAobmVlZHNSZUxvb3AgJiYgaW5pdGlhbGl6ZWQpIHtcbiAgICBzd2lwZXIubG9vcERlc3Ryb3koKTtcbiAgICBzd2lwZXIubG9vcENyZWF0ZSgpO1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcbiAgICBzd2lwZXIuc2xpZGVUbyhhY3RpdmVJbmRleCAtIGxvb3BlZFNsaWRlcyArIHN3aXBlci5sb29wZWRTbGlkZXMsIDAsIGZhbHNlKTtcbiAgfVxuXG4gIHN3aXBlci5lbWl0KCdicmVha3BvaW50JywgYnJlYWtwb2ludFBhcmFtcyk7XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL2JyZWFrcG9pbnRzL3NldEJyZWFrcG9pbnQuanMiLCJpbXBvcnQgeyBnZXRXaW5kb3cgfSBmcm9tICdzc3Itd2luZG93JztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEJyZWFrcG9pbnQoYnJlYWtwb2ludHMsIGJhc2UsIGNvbnRhaW5lckVsKSB7XG4gIGlmIChiYXNlID09PSB2b2lkIDApIHtcbiAgICBiYXNlID0gJ3dpbmRvdyc7XG4gIH1cblxuICBpZiAoIWJyZWFrcG9pbnRzIHx8IGJhc2UgPT09ICdjb250YWluZXInICYmICFjb250YWluZXJFbCkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgdmFyIGJyZWFrcG9pbnQgPSBmYWxzZTtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICB2YXIgY3VycmVudFdpZHRoID0gYmFzZSA9PT0gJ3dpbmRvdycgPyB3aW5kb3cuaW5uZXJXaWR0aCA6IGNvbnRhaW5lckVsLmNsaWVudFdpZHRoO1xuICB2YXIgY3VycmVudEhlaWdodCA9IGJhc2UgPT09ICd3aW5kb3cnID8gd2luZG93LmlubmVySGVpZ2h0IDogY29udGFpbmVyRWwuY2xpZW50SGVpZ2h0O1xuICB2YXIgcG9pbnRzID0gT2JqZWN0LmtleXMoYnJlYWtwb2ludHMpLm1hcChmdW5jdGlvbiAocG9pbnQpIHtcbiAgICBpZiAodHlwZW9mIHBvaW50ID09PSAnc3RyaW5nJyAmJiBwb2ludC5pbmRleE9mKCdAJykgPT09IDApIHtcbiAgICAgIHZhciBtaW5SYXRpbyA9IHBhcnNlRmxvYXQocG9pbnQuc3Vic3RyKDEpKTtcbiAgICAgIHZhciB2YWx1ZSA9IGN1cnJlbnRIZWlnaHQgKiBtaW5SYXRpbztcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgcG9pbnQ6IHBvaW50XG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZTogcG9pbnQsXG4gICAgICBwb2ludDogcG9pbnRcbiAgICB9O1xuICB9KTtcbiAgcG9pbnRzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gcGFyc2VJbnQoYS52YWx1ZSwgMTApIC0gcGFyc2VJbnQoYi52YWx1ZSwgMTApO1xuICB9KTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHZhciBfcG9pbnRzJGkgPSBwb2ludHNbaV0sXG4gICAgICAgIHBvaW50ID0gX3BvaW50cyRpLnBvaW50LFxuICAgICAgICB2YWx1ZSA9IF9wb2ludHMkaS52YWx1ZTtcblxuICAgIGlmICh2YWx1ZSA8PSBjdXJyZW50V2lkdGgpIHtcbiAgICAgIGJyZWFrcG9pbnQgPSBwb2ludDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnJlYWtwb2ludCB8fCAnbWF4Jztcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvYnJlYWtwb2ludHMvZ2V0QnJlYWtwb2ludC5qcyIsImltcG9ydCBhZGRDbGFzc2VzIGZyb20gJy4vYWRkQ2xhc3Nlcyc7XG5pbXBvcnQgcmVtb3ZlQ2xhc3NlcyBmcm9tICcuL3JlbW92ZUNsYXNzZXMnO1xuZXhwb3J0IGRlZmF1bHQge1xuICBhZGRDbGFzc2VzOiBhZGRDbGFzc2VzLFxuICByZW1vdmVDbGFzc2VzOiByZW1vdmVDbGFzc2VzXG59O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9jbGFzc2VzL2luZGV4LmpzIiwiZnVuY3Rpb24gcHJlcGFyZUNsYXNzZXMoZW50cmllcywgcHJlZml4KSB7XG4gIHZhciByZXN1bHRDbGFzc2VzID0gW107XG4gIGVudHJpZXMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgIGlmICh0eXBlb2YgaXRlbSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIE9iamVjdC5rZXlzKGl0ZW0pLmZvckVhY2goZnVuY3Rpb24gKGNsYXNzTmFtZXMpIHtcbiAgICAgICAgaWYgKGl0ZW1bY2xhc3NOYW1lc10pIHtcbiAgICAgICAgICByZXN1bHRDbGFzc2VzLnB1c2gocHJlZml4ICsgY2xhc3NOYW1lcyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGl0ZW0gPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXN1bHRDbGFzc2VzLnB1c2gocHJlZml4ICsgaXRlbSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdENsYXNzZXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZENsYXNzZXMoKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgY2xhc3NOYW1lcyA9IHN3aXBlci5jbGFzc05hbWVzLFxuICAgICAgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgIHJ0bCA9IHN3aXBlci5ydGwsXG4gICAgICAkZWwgPSBzd2lwZXIuJGVsLFxuICAgICAgZGV2aWNlID0gc3dpcGVyLmRldmljZSxcbiAgICAgIHN1cHBvcnQgPSBzd2lwZXIuc3VwcG9ydDsgLy8gcHJldHRpZXItaWdub3JlXG5cbiAgdmFyIHN1ZmZpeGVzID0gcHJlcGFyZUNsYXNzZXMoWydpbml0aWFsaXplZCcsIHBhcmFtcy5kaXJlY3Rpb24sIHtcbiAgICAncG9pbnRlci1ldmVudHMnOiBzdXBwb3J0LnBvaW50ZXJFdmVudHMgJiYgIXN1cHBvcnQudG91Y2hcbiAgfSwge1xuICAgICdmcmVlLW1vZGUnOiBwYXJhbXMuZnJlZU1vZGVcbiAgfSwge1xuICAgICdhdXRvaGVpZ2h0JzogcGFyYW1zLmF1dG9IZWlnaHRcbiAgfSwge1xuICAgICdydGwnOiBydGxcbiAgfSwge1xuICAgICdtdWx0aXJvdyc6IHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4gPiAxXG4gIH0sIHtcbiAgICAnbXVsdGlyb3ctY29sdW1uJzogcGFyYW1zLnNsaWRlc1BlckNvbHVtbiA+IDEgJiYgcGFyYW1zLnNsaWRlc1BlckNvbHVtbkZpbGwgPT09ICdjb2x1bW4nXG4gIH0sIHtcbiAgICAnYW5kcm9pZCc6IGRldmljZS5hbmRyb2lkXG4gIH0sIHtcbiAgICAnaW9zJzogZGV2aWNlLmlvc1xuICB9LCB7XG4gICAgJ2Nzcy1tb2RlJzogcGFyYW1zLmNzc01vZGVcbiAgfV0sIHBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzKTtcbiAgY2xhc3NOYW1lcy5wdXNoLmFwcGx5KGNsYXNzTmFtZXMsIHN1ZmZpeGVzKTtcbiAgJGVsLmFkZENsYXNzKFtdLmNvbmNhdChjbGFzc05hbWVzKS5qb2luKCcgJykpO1xuICBzd2lwZXIuZW1pdENvbnRhaW5lckNsYXNzZXMoKTtcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvY2xhc3Nlcy9hZGRDbGFzc2VzLmpzIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVtb3ZlQ2xhc3NlcygpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciAkZWwgPSBzd2lwZXIuJGVsLFxuICAgICAgY2xhc3NOYW1lcyA9IHN3aXBlci5jbGFzc05hbWVzO1xuICAkZWwucmVtb3ZlQ2xhc3MoY2xhc3NOYW1lcy5qb2luKCcgJykpO1xuICBzd2lwZXIuZW1pdENvbnRhaW5lckNsYXNzZXMoKTtcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvY2xhc3Nlcy9yZW1vdmVDbGFzc2VzLmpzIiwiaW1wb3J0IGxvYWRJbWFnZSBmcm9tICcuL2xvYWRJbWFnZSc7XG5pbXBvcnQgcHJlbG9hZEltYWdlcyBmcm9tICcuL3ByZWxvYWRJbWFnZXMnO1xuZXhwb3J0IGRlZmF1bHQge1xuICBsb2FkSW1hZ2U6IGxvYWRJbWFnZSxcbiAgcHJlbG9hZEltYWdlczogcHJlbG9hZEltYWdlc1xufTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvaW1hZ2VzL2luZGV4LmpzIiwiaW1wb3J0IHsgZ2V0V2luZG93IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5pbXBvcnQgJCBmcm9tICcuLi8uLi8uLi91dGlscy9kb20nO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbG9hZEltYWdlKGltYWdlRWwsIHNyYywgc3Jjc2V0LCBzaXplcywgY2hlY2tGb3JDb21wbGV0ZSwgY2FsbGJhY2spIHtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICB2YXIgaW1hZ2U7XG5cbiAgZnVuY3Rpb24gb25SZWFkeSgpIHtcbiAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKCk7XG4gIH1cblxuICB2YXIgaXNQaWN0dXJlID0gJChpbWFnZUVsKS5wYXJlbnQoJ3BpY3R1cmUnKVswXTtcblxuICBpZiAoIWlzUGljdHVyZSAmJiAoIWltYWdlRWwuY29tcGxldGUgfHwgIWNoZWNrRm9yQ29tcGxldGUpKSB7XG4gICAgaWYgKHNyYykge1xuICAgICAgaW1hZ2UgPSBuZXcgd2luZG93LkltYWdlKCk7XG4gICAgICBpbWFnZS5vbmxvYWQgPSBvblJlYWR5O1xuICAgICAgaW1hZ2Uub25lcnJvciA9IG9uUmVhZHk7XG5cbiAgICAgIGlmIChzaXplcykge1xuICAgICAgICBpbWFnZS5zaXplcyA9IHNpemVzO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3Jjc2V0KSB7XG4gICAgICAgIGltYWdlLnNyY3NldCA9IHNyY3NldDtcbiAgICAgIH1cblxuICAgICAgaWYgKHNyYykge1xuICAgICAgICBpbWFnZS5zcmMgPSBzcmM7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG9uUmVhZHkoKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gaW1hZ2UgYWxyZWFkeSBsb2FkZWQuLi5cbiAgICBvblJlYWR5KCk7XG4gIH1cbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvaW1hZ2VzL2xvYWRJbWFnZS5qcyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHByZWxvYWRJbWFnZXMoKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICBzd2lwZXIuaW1hZ2VzVG9Mb2FkID0gc3dpcGVyLiRlbC5maW5kKCdpbWcnKTtcblxuICBmdW5jdGlvbiBvblJlYWR5KCkge1xuICAgIGlmICh0eXBlb2Ygc3dpcGVyID09PSAndW5kZWZpbmVkJyB8fCBzd2lwZXIgPT09IG51bGwgfHwgIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgaWYgKHN3aXBlci5pbWFnZXNMb2FkZWQgIT09IHVuZGVmaW5lZCkgc3dpcGVyLmltYWdlc0xvYWRlZCArPSAxO1xuXG4gICAgaWYgKHN3aXBlci5pbWFnZXNMb2FkZWQgPT09IHN3aXBlci5pbWFnZXNUb0xvYWQubGVuZ3RoKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy51cGRhdGVPbkltYWdlc1JlYWR5KSBzd2lwZXIudXBkYXRlKCk7XG4gICAgICBzd2lwZXIuZW1pdCgnaW1hZ2VzUmVhZHknKTtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN3aXBlci5pbWFnZXNUb0xvYWQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB2YXIgaW1hZ2VFbCA9IHN3aXBlci5pbWFnZXNUb0xvYWRbaV07XG4gICAgc3dpcGVyLmxvYWRJbWFnZShpbWFnZUVsLCBpbWFnZUVsLmN1cnJlbnRTcmMgfHwgaW1hZ2VFbC5nZXRBdHRyaWJ1dGUoJ3NyYycpLCBpbWFnZUVsLnNyY3NldCB8fCBpbWFnZUVsLmdldEF0dHJpYnV0ZSgnc3Jjc2V0JyksIGltYWdlRWwuc2l6ZXMgfHwgaW1hZ2VFbC5nZXRBdHRyaWJ1dGUoJ3NpemVzJyksIHRydWUsIG9uUmVhZHkpO1xuICB9XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL2ltYWdlcy9wcmVsb2FkSW1hZ2VzLmpzIiwiZnVuY3Rpb24gY2hlY2tPdmVyZmxvdygpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICB2YXIgd2FzTG9ja2VkID0gc3dpcGVyLmlzTG9ja2VkO1xuICB2YXIgbGFzdFNsaWRlUG9zaXRpb24gPSBzd2lwZXIuc2xpZGVzLmxlbmd0aCA+IDAgJiYgcGFyYW1zLnNsaWRlc09mZnNldEJlZm9yZSArIHBhcmFtcy5zcGFjZUJldHdlZW4gKiAoc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxKSArIHN3aXBlci5zbGlkZXNbMF0ub2Zmc2V0V2lkdGggKiBzd2lwZXIuc2xpZGVzLmxlbmd0aDtcblxuICBpZiAocGFyYW1zLnNsaWRlc09mZnNldEJlZm9yZSAmJiBwYXJhbXMuc2xpZGVzT2Zmc2V0QWZ0ZXIgJiYgbGFzdFNsaWRlUG9zaXRpb24pIHtcbiAgICBzd2lwZXIuaXNMb2NrZWQgPSBsYXN0U2xpZGVQb3NpdGlvbiA8PSBzd2lwZXIuc2l6ZTtcbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIuaXNMb2NrZWQgPSBzd2lwZXIuc25hcEdyaWQubGVuZ3RoID09PSAxO1xuICB9XG5cbiAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gIXN3aXBlci5pc0xvY2tlZDtcbiAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gIXN3aXBlci5pc0xvY2tlZDsgLy8gZXZlbnRzXG5cbiAgaWYgKHdhc0xvY2tlZCAhPT0gc3dpcGVyLmlzTG9ja2VkKSBzd2lwZXIuZW1pdChzd2lwZXIuaXNMb2NrZWQgPyAnbG9jaycgOiAndW5sb2NrJyk7XG5cbiAgaWYgKHdhc0xvY2tlZCAmJiB3YXNMb2NrZWQgIT09IHN3aXBlci5pc0xvY2tlZCkge1xuICAgIHN3aXBlci5pc0VuZCA9IGZhbHNlO1xuICAgIGlmIChzd2lwZXIubmF2aWdhdGlvbikgc3dpcGVyLm5hdmlnYXRpb24udXBkYXRlKCk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBjaGVja092ZXJmbG93OiBjaGVja092ZXJmbG93XG59O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9jaGVjay1vdmVyZmxvdy9pbmRleC5qcyIsImV4cG9ydCBkZWZhdWx0IHtcbiAgaW5pdDogdHJ1ZSxcbiAgZGlyZWN0aW9uOiAnaG9yaXpvbnRhbCcsXG4gIHRvdWNoRXZlbnRzVGFyZ2V0OiAnY29udGFpbmVyJyxcbiAgaW5pdGlhbFNsaWRlOiAwLFxuICBzcGVlZDogMzAwLFxuICBjc3NNb2RlOiBmYWxzZSxcbiAgdXBkYXRlT25XaW5kb3dSZXNpemU6IHRydWUsXG4gIHJlc2l6ZU9ic2VydmVyOiBmYWxzZSxcbiAgbmVzdGVkOiBmYWxzZSxcbiAgY3JlYXRlRWxlbWVudHM6IGZhbHNlLFxuICBlbmFibGVkOiB0cnVlLFxuICAvLyBPdmVycmlkZXNcbiAgd2lkdGg6IG51bGwsXG4gIGhlaWdodDogbnVsbCxcbiAgLy9cbiAgcHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uOiBmYWxzZSxcbiAgLy8gc3NyXG4gIHVzZXJBZ2VudDogbnVsbCxcbiAgdXJsOiBudWxsLFxuICAvLyBUbyBzdXBwb3J0IGlPUydzIHN3aXBlLXRvLWdvLWJhY2sgZ2VzdHVyZSAod2hlbiBiZWluZyB1c2VkIGluLWFwcCkuXG4gIGVkZ2VTd2lwZURldGVjdGlvbjogZmFsc2UsXG4gIGVkZ2VTd2lwZVRocmVzaG9sZDogMjAsXG4gIC8vIEZyZWUgbW9kZVxuICBmcmVlTW9kZTogZmFsc2UsXG4gIGZyZWVNb2RlTW9tZW50dW06IHRydWUsXG4gIGZyZWVNb2RlTW9tZW50dW1SYXRpbzogMSxcbiAgZnJlZU1vZGVNb21lbnR1bUJvdW5jZTogdHJ1ZSxcbiAgZnJlZU1vZGVNb21lbnR1bUJvdW5jZVJhdGlvOiAxLFxuICBmcmVlTW9kZU1vbWVudHVtVmVsb2NpdHlSYXRpbzogMSxcbiAgZnJlZU1vZGVTdGlja3k6IGZhbHNlLFxuICBmcmVlTW9kZU1pbmltdW1WZWxvY2l0eTogMC4wMixcbiAgLy8gQXV0b2hlaWdodFxuICBhdXRvSGVpZ2h0OiBmYWxzZSxcbiAgLy8gU2V0IHdyYXBwZXIgd2lkdGhcbiAgc2V0V3JhcHBlclNpemU6IGZhbHNlLFxuICAvLyBWaXJ0dWFsIFRyYW5zbGF0ZVxuICB2aXJ0dWFsVHJhbnNsYXRlOiBmYWxzZSxcbiAgLy8gRWZmZWN0c1xuICBlZmZlY3Q6ICdzbGlkZScsXG4gIC8vICdzbGlkZScgb3IgJ2ZhZGUnIG9yICdjdWJlJyBvciAnY292ZXJmbG93JyBvciAnZmxpcCdcbiAgLy8gQnJlYWtwb2ludHNcbiAgYnJlYWtwb2ludHM6IHVuZGVmaW5lZCxcbiAgYnJlYWtwb2ludHNCYXNlOiAnd2luZG93JyxcbiAgLy8gU2xpZGVzIGdyaWRcbiAgc3BhY2VCZXR3ZWVuOiAwLFxuICBzbGlkZXNQZXJWaWV3OiAxLFxuICBzbGlkZXNQZXJDb2x1bW46IDEsXG4gIHNsaWRlc1BlckNvbHVtbkZpbGw6ICdjb2x1bW4nLFxuICBzbGlkZXNQZXJHcm91cDogMSxcbiAgc2xpZGVzUGVyR3JvdXBTa2lwOiAwLFxuICBjZW50ZXJlZFNsaWRlczogZmFsc2UsXG4gIGNlbnRlcmVkU2xpZGVzQm91bmRzOiBmYWxzZSxcbiAgc2xpZGVzT2Zmc2V0QmVmb3JlOiAwLFxuICAvLyBpbiBweFxuICBzbGlkZXNPZmZzZXRBZnRlcjogMCxcbiAgLy8gaW4gcHhcbiAgbm9ybWFsaXplU2xpZGVJbmRleDogdHJ1ZSxcbiAgY2VudGVySW5zdWZmaWNpZW50U2xpZGVzOiBmYWxzZSxcbiAgLy8gRGlzYWJsZSBzd2lwZXIgYW5kIGhpZGUgbmF2aWdhdGlvbiB3aGVuIGNvbnRhaW5lciBub3Qgb3ZlcmZsb3dcbiAgd2F0Y2hPdmVyZmxvdzogZmFsc2UsXG4gIC8vIFJvdW5kIGxlbmd0aFxuICByb3VuZExlbmd0aHM6IGZhbHNlLFxuICAvLyBUb3VjaGVzXG4gIHRvdWNoUmF0aW86IDEsXG4gIHRvdWNoQW5nbGU6IDQ1LFxuICBzaW11bGF0ZVRvdWNoOiB0cnVlLFxuICBzaG9ydFN3aXBlczogdHJ1ZSxcbiAgbG9uZ1N3aXBlczogdHJ1ZSxcbiAgbG9uZ1N3aXBlc1JhdGlvOiAwLjUsXG4gIGxvbmdTd2lwZXNNczogMzAwLFxuICBmb2xsb3dGaW5nZXI6IHRydWUsXG4gIGFsbG93VG91Y2hNb3ZlOiB0cnVlLFxuICB0aHJlc2hvbGQ6IDAsXG4gIHRvdWNoTW92ZVN0b3BQcm9wYWdhdGlvbjogZmFsc2UsXG4gIHRvdWNoU3RhcnRQcmV2ZW50RGVmYXVsdDogdHJ1ZSxcbiAgdG91Y2hTdGFydEZvcmNlUHJldmVudERlZmF1bHQ6IGZhbHNlLFxuICB0b3VjaFJlbGVhc2VPbkVkZ2VzOiBmYWxzZSxcbiAgLy8gVW5pcXVlIE5hdmlnYXRpb24gRWxlbWVudHNcbiAgdW5pcXVlTmF2RWxlbWVudHM6IHRydWUsXG4gIC8vIFJlc2lzdGFuY2VcbiAgcmVzaXN0YW5jZTogdHJ1ZSxcbiAgcmVzaXN0YW5jZVJhdGlvOiAwLjg1LFxuICAvLyBQcm9ncmVzc1xuICB3YXRjaFNsaWRlc1Byb2dyZXNzOiBmYWxzZSxcbiAgd2F0Y2hTbGlkZXNWaXNpYmlsaXR5OiBmYWxzZSxcbiAgLy8gQ3Vyc29yXG4gIGdyYWJDdXJzb3I6IGZhbHNlLFxuICAvLyBDbGlja3NcbiAgcHJldmVudENsaWNrczogdHJ1ZSxcbiAgcHJldmVudENsaWNrc1Byb3BhZ2F0aW9uOiB0cnVlLFxuICBzbGlkZVRvQ2xpY2tlZFNsaWRlOiBmYWxzZSxcbiAgLy8gSW1hZ2VzXG4gIHByZWxvYWRJbWFnZXM6IHRydWUsXG4gIHVwZGF0ZU9uSW1hZ2VzUmVhZHk6IHRydWUsXG4gIC8vIGxvb3BcbiAgbG9vcDogZmFsc2UsXG4gIGxvb3BBZGRpdGlvbmFsU2xpZGVzOiAwLFxuICBsb29wZWRTbGlkZXM6IG51bGwsXG4gIGxvb3BGaWxsR3JvdXBXaXRoQmxhbms6IGZhbHNlLFxuICBsb29wUHJldmVudHNTbGlkZTogdHJ1ZSxcbiAgLy8gU3dpcGluZy9ubyBzd2lwaW5nXG4gIGFsbG93U2xpZGVQcmV2OiB0cnVlLFxuICBhbGxvd1NsaWRlTmV4dDogdHJ1ZSxcbiAgc3dpcGVIYW5kbGVyOiBudWxsLFxuICAvLyAnLnN3aXBlLWhhbmRsZXInLFxuICBub1N3aXBpbmc6IHRydWUsXG4gIG5vU3dpcGluZ0NsYXNzOiAnc3dpcGVyLW5vLXN3aXBpbmcnLFxuICBub1N3aXBpbmdTZWxlY3RvcjogbnVsbCxcbiAgLy8gUGFzc2l2ZSBMaXN0ZW5lcnNcbiAgcGFzc2l2ZUxpc3RlbmVyczogdHJ1ZSxcbiAgLy8gTlNcbiAgY29udGFpbmVyTW9kaWZpZXJDbGFzczogJ3N3aXBlci1jb250YWluZXItJyxcbiAgLy8gTkVXXG4gIHNsaWRlQ2xhc3M6ICdzd2lwZXItc2xpZGUnLFxuICBzbGlkZUJsYW5rQ2xhc3M6ICdzd2lwZXItc2xpZGUtaW52aXNpYmxlLWJsYW5rJyxcbiAgc2xpZGVBY3RpdmVDbGFzczogJ3N3aXBlci1zbGlkZS1hY3RpdmUnLFxuICBzbGlkZUR1cGxpY2F0ZUFjdGl2ZUNsYXNzOiAnc3dpcGVyLXNsaWRlLWR1cGxpY2F0ZS1hY3RpdmUnLFxuICBzbGlkZVZpc2libGVDbGFzczogJ3N3aXBlci1zbGlkZS12aXNpYmxlJyxcbiAgc2xpZGVEdXBsaWNhdGVDbGFzczogJ3N3aXBlci1zbGlkZS1kdXBsaWNhdGUnLFxuICBzbGlkZU5leHRDbGFzczogJ3N3aXBlci1zbGlkZS1uZXh0JyxcbiAgc2xpZGVEdXBsaWNhdGVOZXh0Q2xhc3M6ICdzd2lwZXItc2xpZGUtZHVwbGljYXRlLW5leHQnLFxuICBzbGlkZVByZXZDbGFzczogJ3N3aXBlci1zbGlkZS1wcmV2JyxcbiAgc2xpZGVEdXBsaWNhdGVQcmV2Q2xhc3M6ICdzd2lwZXItc2xpZGUtZHVwbGljYXRlLXByZXYnLFxuICB3cmFwcGVyQ2xhc3M6ICdzd2lwZXItd3JhcHBlcicsXG4gIC8vIENhbGxiYWNrc1xuICBydW5DYWxsYmFja3NPbkluaXQ6IHRydWUsXG4gIC8vIEludGVybmFsc1xuICBfZW1pdENsYXNzZXM6IGZhbHNlXG59O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9kZWZhdWx0cy5qcyIsImZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmltcG9ydCAkIGZyb20gJy4uLy4uL3V0aWxzL2RvbSc7XG5pbXBvcnQgeyBleHRlbmQsIGJpbmRNb2R1bGVNZXRob2RzIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xudmFyIFZpcnR1YWwgPSB7XG4gIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKGZvcmNlKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIF9zd2lwZXIkcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgICAgc2xpZGVzUGVyVmlldyA9IF9zd2lwZXIkcGFyYW1zLnNsaWRlc1BlclZpZXcsXG4gICAgICAgIHNsaWRlc1Blckdyb3VwID0gX3N3aXBlciRwYXJhbXMuc2xpZGVzUGVyR3JvdXAsXG4gICAgICAgIGNlbnRlcmVkU2xpZGVzID0gX3N3aXBlciRwYXJhbXMuY2VudGVyZWRTbGlkZXM7XG4gICAgdmFyIF9zd2lwZXIkcGFyYW1zJHZpcnR1YSA9IHN3aXBlci5wYXJhbXMudmlydHVhbCxcbiAgICAgICAgYWRkU2xpZGVzQmVmb3JlID0gX3N3aXBlciRwYXJhbXMkdmlydHVhLmFkZFNsaWRlc0JlZm9yZSxcbiAgICAgICAgYWRkU2xpZGVzQWZ0ZXIgPSBfc3dpcGVyJHBhcmFtcyR2aXJ0dWEuYWRkU2xpZGVzQWZ0ZXI7XG4gICAgdmFyIF9zd2lwZXIkdmlydHVhbCA9IHN3aXBlci52aXJ0dWFsLFxuICAgICAgICBwcmV2aW91c0Zyb20gPSBfc3dpcGVyJHZpcnR1YWwuZnJvbSxcbiAgICAgICAgcHJldmlvdXNUbyA9IF9zd2lwZXIkdmlydHVhbC50byxcbiAgICAgICAgc2xpZGVzID0gX3N3aXBlciR2aXJ0dWFsLnNsaWRlcyxcbiAgICAgICAgcHJldmlvdXNTbGlkZXNHcmlkID0gX3N3aXBlciR2aXJ0dWFsLnNsaWRlc0dyaWQsXG4gICAgICAgIHJlbmRlclNsaWRlID0gX3N3aXBlciR2aXJ0dWFsLnJlbmRlclNsaWRlLFxuICAgICAgICBwcmV2aW91c09mZnNldCA9IF9zd2lwZXIkdmlydHVhbC5vZmZzZXQ7XG4gICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgdmFyIGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4IHx8IDA7XG4gICAgdmFyIG9mZnNldFByb3A7XG4gICAgaWYgKHN3aXBlci5ydGxUcmFuc2xhdGUpIG9mZnNldFByb3AgPSAncmlnaHQnO2Vsc2Ugb2Zmc2V0UHJvcCA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/ICdsZWZ0JyA6ICd0b3AnO1xuICAgIHZhciBzbGlkZXNBZnRlcjtcbiAgICB2YXIgc2xpZGVzQmVmb3JlO1xuXG4gICAgaWYgKGNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICBzbGlkZXNBZnRlciA9IE1hdGguZmxvb3Ioc2xpZGVzUGVyVmlldyAvIDIpICsgc2xpZGVzUGVyR3JvdXAgKyBhZGRTbGlkZXNBZnRlcjtcbiAgICAgIHNsaWRlc0JlZm9yZSA9IE1hdGguZmxvb3Ioc2xpZGVzUGVyVmlldyAvIDIpICsgc2xpZGVzUGVyR3JvdXAgKyBhZGRTbGlkZXNCZWZvcmU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNsaWRlc0FmdGVyID0gc2xpZGVzUGVyVmlldyArIChzbGlkZXNQZXJHcm91cCAtIDEpICsgYWRkU2xpZGVzQWZ0ZXI7XG4gICAgICBzbGlkZXNCZWZvcmUgPSBzbGlkZXNQZXJHcm91cCArIGFkZFNsaWRlc0JlZm9yZTtcbiAgICB9XG5cbiAgICB2YXIgZnJvbSA9IE1hdGgubWF4KChhY3RpdmVJbmRleCB8fCAwKSAtIHNsaWRlc0JlZm9yZSwgMCk7XG4gICAgdmFyIHRvID0gTWF0aC5taW4oKGFjdGl2ZUluZGV4IHx8IDApICsgc2xpZGVzQWZ0ZXIsIHNsaWRlcy5sZW5ndGggLSAxKTtcbiAgICB2YXIgb2Zmc2V0ID0gKHN3aXBlci5zbGlkZXNHcmlkW2Zyb21dIHx8IDApIC0gKHN3aXBlci5zbGlkZXNHcmlkWzBdIHx8IDApO1xuICAgIGV4dGVuZChzd2lwZXIudmlydHVhbCwge1xuICAgICAgZnJvbTogZnJvbSxcbiAgICAgIHRvOiB0byxcbiAgICAgIG9mZnNldDogb2Zmc2V0LFxuICAgICAgc2xpZGVzR3JpZDogc3dpcGVyLnNsaWRlc0dyaWRcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIG9uUmVuZGVyZWQoKSB7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gICAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MoKTtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG5cbiAgICAgIGlmIChzd2lwZXIubGF6eSAmJiBzd2lwZXIucGFyYW1zLmxhenkuZW5hYmxlZCkge1xuICAgICAgICBzd2lwZXIubGF6eS5sb2FkKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHByZXZpb3VzRnJvbSA9PT0gZnJvbSAmJiBwcmV2aW91c1RvID09PSB0byAmJiAhZm9yY2UpIHtcbiAgICAgIGlmIChzd2lwZXIuc2xpZGVzR3JpZCAhPT0gcHJldmlvdXNTbGlkZXNHcmlkICYmIG9mZnNldCAhPT0gcHJldmlvdXNPZmZzZXQpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlcy5jc3Mob2Zmc2V0UHJvcCwgb2Zmc2V0ICsgXCJweFwiKTtcbiAgICAgIH1cblxuICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMudmlydHVhbC5yZW5kZXJFeHRlcm5hbCkge1xuICAgICAgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLnJlbmRlckV4dGVybmFsLmNhbGwoc3dpcGVyLCB7XG4gICAgICAgIG9mZnNldDogb2Zmc2V0LFxuICAgICAgICBmcm9tOiBmcm9tLFxuICAgICAgICB0bzogdG8sXG4gICAgICAgIHNsaWRlczogZnVuY3Rpb24gZ2V0U2xpZGVzKCkge1xuICAgICAgICAgIHZhciBzbGlkZXNUb1JlbmRlciA9IFtdO1xuXG4gICAgICAgICAgZm9yICh2YXIgaSA9IGZyb207IGkgPD0gdG87IGkgKz0gMSkge1xuICAgICAgICAgICAgc2xpZGVzVG9SZW5kZXIucHVzaChzbGlkZXNbaV0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBzbGlkZXNUb1JlbmRlcjtcbiAgICAgICAgfSgpXG4gICAgICB9KTtcblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMudmlydHVhbC5yZW5kZXJFeHRlcm5hbFVwZGF0ZSkge1xuICAgICAgICBvblJlbmRlcmVkKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgcHJlcGVuZEluZGV4ZXMgPSBbXTtcbiAgICB2YXIgYXBwZW5kSW5kZXhlcyA9IFtdO1xuXG4gICAgaWYgKGZvcmNlKSB7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbC5maW5kKFwiLlwiICsgc3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzKS5yZW1vdmUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yICh2YXIgaSA9IHByZXZpb3VzRnJvbTsgaSA8PSBwcmV2aW91c1RvOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKGkgPCBmcm9tIHx8IGkgPiB0bykge1xuICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsLmZpbmQoXCIuXCIgKyBzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3MgKyBcIltkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyBpICsgXCJcXFwiXVwiKS5yZW1vdmUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBzbGlkZXMubGVuZ3RoOyBfaSArPSAxKSB7XG4gICAgICBpZiAoX2kgPj0gZnJvbSAmJiBfaSA8PSB0bykge1xuICAgICAgICBpZiAodHlwZW9mIHByZXZpb3VzVG8gPT09ICd1bmRlZmluZWQnIHx8IGZvcmNlKSB7XG4gICAgICAgICAgYXBwZW5kSW5kZXhlcy5wdXNoKF9pKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoX2kgPiBwcmV2aW91c1RvKSBhcHBlbmRJbmRleGVzLnB1c2goX2kpO1xuICAgICAgICAgIGlmIChfaSA8IHByZXZpb3VzRnJvbSkgcHJlcGVuZEluZGV4ZXMucHVzaChfaSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBhcHBlbmRJbmRleGVzLmZvckVhY2goZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbC5hcHBlbmQocmVuZGVyU2xpZGUoc2xpZGVzW2luZGV4XSwgaW5kZXgpKTtcbiAgICB9KTtcbiAgICBwcmVwZW5kSW5kZXhlcy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gYiAtIGE7XG4gICAgfSkuZm9yRWFjaChmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsLnByZXBlbmQocmVuZGVyU2xpZGUoc2xpZGVzW2luZGV4XSwgaW5kZXgpKTtcbiAgICB9KTtcbiAgICBzd2lwZXIuJHdyYXBwZXJFbC5jaGlsZHJlbignLnN3aXBlci1zbGlkZScpLmNzcyhvZmZzZXRQcm9wLCBvZmZzZXQgKyBcInB4XCIpO1xuICAgIG9uUmVuZGVyZWQoKTtcbiAgfSxcbiAgcmVuZGVyU2xpZGU6IGZ1bmN0aW9uIHJlbmRlclNsaWRlKHNsaWRlLCBpbmRleCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnZpcnR1YWw7XG5cbiAgICBpZiAocGFyYW1zLmNhY2hlICYmIHN3aXBlci52aXJ0dWFsLmNhY2hlW2luZGV4XSkge1xuICAgICAgcmV0dXJuIHN3aXBlci52aXJ0dWFsLmNhY2hlW2luZGV4XTtcbiAgICB9XG5cbiAgICB2YXIgJHNsaWRlRWwgPSBwYXJhbXMucmVuZGVyU2xpZGUgPyAkKHBhcmFtcy5yZW5kZXJTbGlkZS5jYWxsKHN3aXBlciwgc2xpZGUsIGluZGV4KSkgOiAkKFwiPGRpdiBjbGFzcz1cXFwiXCIgKyBzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3MgKyBcIlxcXCIgZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIlwiICsgaW5kZXggKyBcIlxcXCI+XCIgKyBzbGlkZSArIFwiPC9kaXY+XCIpO1xuICAgIGlmICghJHNsaWRlRWwuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSkgJHNsaWRlRWwuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnLCBpbmRleCk7XG4gICAgaWYgKHBhcmFtcy5jYWNoZSkgc3dpcGVyLnZpcnR1YWwuY2FjaGVbaW5kZXhdID0gJHNsaWRlRWw7XG4gICAgcmV0dXJuICRzbGlkZUVsO1xuICB9LFxuICBhcHBlbmRTbGlkZTogZnVuY3Rpb24gYXBwZW5kU2xpZGUoc2xpZGVzKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG5cbiAgICBpZiAodHlwZW9mIHNsaWRlcyA9PT0gJ29iamVjdCcgJiYgJ2xlbmd0aCcgaW4gc2xpZGVzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAoc2xpZGVzW2ldKSBzd2lwZXIudmlydHVhbC5zbGlkZXMucHVzaChzbGlkZXNbaV0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIudmlydHVhbC5zbGlkZXMucHVzaChzbGlkZXMpO1xuICAgIH1cblxuICAgIHN3aXBlci52aXJ0dWFsLnVwZGF0ZSh0cnVlKTtcbiAgfSxcbiAgcHJlcGVuZFNsaWRlOiBmdW5jdGlvbiBwcmVwZW5kU2xpZGUoc2xpZGVzKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuICAgIHZhciBuZXdBY3RpdmVJbmRleCA9IGFjdGl2ZUluZGV4ICsgMTtcbiAgICB2YXIgbnVtYmVyT2ZOZXdTbGlkZXMgPSAxO1xuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc2xpZGVzKSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHNsaWRlc1tpXSkgc3dpcGVyLnZpcnR1YWwuc2xpZGVzLnVuc2hpZnQoc2xpZGVzW2ldKTtcbiAgICAgIH1cblxuICAgICAgbmV3QWN0aXZlSW5kZXggPSBhY3RpdmVJbmRleCArIHNsaWRlcy5sZW5ndGg7XG4gICAgICBudW1iZXJPZk5ld1NsaWRlcyA9IHNsaWRlcy5sZW5ndGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci52aXJ0dWFsLnNsaWRlcy51bnNoaWZ0KHNsaWRlcyk7XG4gICAgfVxuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMudmlydHVhbC5jYWNoZSkge1xuICAgICAgdmFyIGNhY2hlID0gc3dpcGVyLnZpcnR1YWwuY2FjaGU7XG4gICAgICB2YXIgbmV3Q2FjaGUgPSB7fTtcbiAgICAgIE9iamVjdC5rZXlzKGNhY2hlKS5mb3JFYWNoKGZ1bmN0aW9uIChjYWNoZWRJbmRleCkge1xuICAgICAgICB2YXIgJGNhY2hlZEVsID0gY2FjaGVbY2FjaGVkSW5kZXhdO1xuICAgICAgICB2YXIgY2FjaGVkRWxJbmRleCA9ICRjYWNoZWRFbC5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpO1xuXG4gICAgICAgIGlmIChjYWNoZWRFbEluZGV4KSB7XG4gICAgICAgICAgJGNhY2hlZEVsLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JywgcGFyc2VJbnQoY2FjaGVkRWxJbmRleCwgMTApICsgMSk7XG4gICAgICAgIH1cblxuICAgICAgICBuZXdDYWNoZVtwYXJzZUludChjYWNoZWRJbmRleCwgMTApICsgbnVtYmVyT2ZOZXdTbGlkZXNdID0gJGNhY2hlZEVsO1xuICAgICAgfSk7XG4gICAgICBzd2lwZXIudmlydHVhbC5jYWNoZSA9IG5ld0NhY2hlO1xuICAgIH1cblxuICAgIHN3aXBlci52aXJ0dWFsLnVwZGF0ZSh0cnVlKTtcbiAgICBzd2lwZXIuc2xpZGVUbyhuZXdBY3RpdmVJbmRleCwgMCk7XG4gIH0sXG4gIHJlbW92ZVNsaWRlOiBmdW5jdGlvbiByZW1vdmVTbGlkZShzbGlkZXNJbmRleGVzKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKHR5cGVvZiBzbGlkZXNJbmRleGVzID09PSAndW5kZWZpbmVkJyB8fCBzbGlkZXNJbmRleGVzID09PSBudWxsKSByZXR1cm47XG4gICAgdmFyIGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc2xpZGVzSW5kZXhlcykpIHtcbiAgICAgIGZvciAodmFyIGkgPSBzbGlkZXNJbmRleGVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgICAgIHN3aXBlci52aXJ0dWFsLnNsaWRlcy5zcGxpY2Uoc2xpZGVzSW5kZXhlc1tpXSwgMSk7XG5cbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMudmlydHVhbC5jYWNoZSkge1xuICAgICAgICAgIGRlbGV0ZSBzd2lwZXIudmlydHVhbC5jYWNoZVtzbGlkZXNJbmRleGVzW2ldXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzbGlkZXNJbmRleGVzW2ldIDwgYWN0aXZlSW5kZXgpIGFjdGl2ZUluZGV4IC09IDE7XG4gICAgICAgIGFjdGl2ZUluZGV4ID0gTWF0aC5tYXgoYWN0aXZlSW5kZXgsIDApO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIudmlydHVhbC5zbGlkZXMuc3BsaWNlKHNsaWRlc0luZGV4ZXMsIDEpO1xuXG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmNhY2hlKSB7XG4gICAgICAgIGRlbGV0ZSBzd2lwZXIudmlydHVhbC5jYWNoZVtzbGlkZXNJbmRleGVzXTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNsaWRlc0luZGV4ZXMgPCBhY3RpdmVJbmRleCkgYWN0aXZlSW5kZXggLT0gMTtcbiAgICAgIGFjdGl2ZUluZGV4ID0gTWF0aC5tYXgoYWN0aXZlSW5kZXgsIDApO1xuICAgIH1cblxuICAgIHN3aXBlci52aXJ0dWFsLnVwZGF0ZSh0cnVlKTtcbiAgICBzd2lwZXIuc2xpZGVUbyhhY3RpdmVJbmRleCwgMCk7XG4gIH0sXG4gIHJlbW92ZUFsbFNsaWRlczogZnVuY3Rpb24gcmVtb3ZlQWxsU2xpZGVzKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHN3aXBlci52aXJ0dWFsLnNsaWRlcyA9IFtdO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMudmlydHVhbC5jYWNoZSkge1xuICAgICAgc3dpcGVyLnZpcnR1YWwuY2FjaGUgPSB7fTtcbiAgICB9XG5cbiAgICBzd2lwZXIudmlydHVhbC51cGRhdGUodHJ1ZSk7XG4gICAgc3dpcGVyLnNsaWRlVG8oMCwgMCk7XG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICd2aXJ0dWFsJyxcbiAgcGFyYW1zOiB7XG4gICAgdmlydHVhbDoge1xuICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICBzbGlkZXM6IFtdLFxuICAgICAgY2FjaGU6IHRydWUsXG4gICAgICByZW5kZXJTbGlkZTogbnVsbCxcbiAgICAgIHJlbmRlckV4dGVybmFsOiBudWxsLFxuICAgICAgcmVuZGVyRXh0ZXJuYWxVcGRhdGU6IHRydWUsXG4gICAgICBhZGRTbGlkZXNCZWZvcmU6IDAsXG4gICAgICBhZGRTbGlkZXNBZnRlcjogMFxuICAgIH1cbiAgfSxcbiAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgYmluZE1vZHVsZU1ldGhvZHMoc3dpcGVyLCB7XG4gICAgICB2aXJ0dWFsOiBfZXh0ZW5kcyh7fSwgVmlydHVhbCwge1xuICAgICAgICBzbGlkZXM6IHN3aXBlci5wYXJhbXMudmlydHVhbC5zbGlkZXMsXG4gICAgICAgIGNhY2hlOiB7fVxuICAgICAgfSlcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBiZWZvcmVJbml0OiBmdW5jdGlvbiBiZWZvcmVJbml0KHN3aXBlcikge1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLmNsYXNzTmFtZXMucHVzaChzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MgKyBcInZpcnR1YWxcIik7XG4gICAgICB2YXIgb3ZlcndyaXRlUGFyYW1zID0ge1xuICAgICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiB0cnVlXG4gICAgICB9O1xuICAgICAgZXh0ZW5kKHN3aXBlci5wYXJhbXMsIG92ZXJ3cml0ZVBhcmFtcyk7XG4gICAgICBleHRlbmQoc3dpcGVyLm9yaWdpbmFsUGFyYW1zLCBvdmVyd3JpdGVQYXJhbXMpO1xuXG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMuaW5pdGlhbFNsaWRlKSB7XG4gICAgICAgIHN3aXBlci52aXJ0dWFsLnVwZGF0ZSgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2V0VHJhbnNsYXRlOiBmdW5jdGlvbiBzZXRUcmFuc2xhdGUoc3dpcGVyKSB7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkKSByZXR1cm47XG4gICAgICBzd2lwZXIudmlydHVhbC51cGRhdGUoKTtcbiAgICB9XG4gIH1cbn07XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy92aXJ0dWFsL3ZpcnR1YWwuanMiLCJmdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG4vKiBlc2xpbnQtZGlzYWJsZSBjb25zaXN0ZW50LXJldHVybiAqL1xuaW1wb3J0IHsgZ2V0V2luZG93LCBnZXREb2N1bWVudCB9IGZyb20gJ3Nzci13aW5kb3cnO1xuaW1wb3J0ICQgZnJvbSAnLi4vLi4vdXRpbHMvZG9tJztcbmltcG9ydCB7IGJpbmRNb2R1bGVNZXRob2RzIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xudmFyIEtleWJvYXJkID0ge1xuICBoYW5kbGU6IGZ1bmN0aW9uIGhhbmRsZShldmVudCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLmVuYWJsZWQpIHJldHVybjtcbiAgICB2YXIgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gICAgdmFyIGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgICB2YXIgcnRsID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZTtcbiAgICB2YXIgZSA9IGV2ZW50O1xuICAgIGlmIChlLm9yaWdpbmFsRXZlbnQpIGUgPSBlLm9yaWdpbmFsRXZlbnQ7IC8vIGpxdWVyeSBmaXhcblxuICAgIHZhciBrYyA9IGUua2V5Q29kZSB8fCBlLmNoYXJDb2RlO1xuICAgIHZhciBwYWdlVXBEb3duID0gc3dpcGVyLnBhcmFtcy5rZXlib2FyZC5wYWdlVXBEb3duO1xuICAgIHZhciBpc1BhZ2VVcCA9IHBhZ2VVcERvd24gJiYga2MgPT09IDMzO1xuICAgIHZhciBpc1BhZ2VEb3duID0gcGFnZVVwRG93biAmJiBrYyA9PT0gMzQ7XG4gICAgdmFyIGlzQXJyb3dMZWZ0ID0ga2MgPT09IDM3O1xuICAgIHZhciBpc0Fycm93UmlnaHQgPSBrYyA9PT0gMzk7XG4gICAgdmFyIGlzQXJyb3dVcCA9IGtjID09PSAzODtcbiAgICB2YXIgaXNBcnJvd0Rvd24gPSBrYyA9PT0gNDA7IC8vIERpcmVjdGlvbnMgbG9ja3NcblxuICAgIGlmICghc3dpcGVyLmFsbG93U2xpZGVOZXh0ICYmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkgJiYgaXNBcnJvd1JpZ2h0IHx8IHN3aXBlci5pc1ZlcnRpY2FsKCkgJiYgaXNBcnJvd0Rvd24gfHwgaXNQYWdlRG93bikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoIXN3aXBlci5hbGxvd1NsaWRlUHJldiAmJiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpICYmIGlzQXJyb3dMZWZ0IHx8IHN3aXBlci5pc1ZlcnRpY2FsKCkgJiYgaXNBcnJvd1VwIHx8IGlzUGFnZVVwKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChlLnNoaWZ0S2V5IHx8IGUuYWx0S2V5IHx8IGUuY3RybEtleSB8fCBlLm1ldGFLZXkpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ub2RlTmFtZSAmJiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnaW5wdXQnIHx8IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3RleHRhcmVhJykpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMua2V5Ym9hcmQub25seUluVmlld3BvcnQgJiYgKGlzUGFnZVVwIHx8IGlzUGFnZURvd24gfHwgaXNBcnJvd0xlZnQgfHwgaXNBcnJvd1JpZ2h0IHx8IGlzQXJyb3dVcCB8fCBpc0Fycm93RG93bikpIHtcbiAgICAgIHZhciBpblZpZXcgPSBmYWxzZTsgLy8gQ2hlY2sgdGhhdCBzd2lwZXIgc2hvdWxkIGJlIGluc2lkZSBvZiB2aXNpYmxlIGFyZWEgb2Ygd2luZG93XG5cbiAgICAgIGlmIChzd2lwZXIuJGVsLnBhcmVudHMoXCIuXCIgKyBzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3MpLmxlbmd0aCA+IDAgJiYgc3dpcGVyLiRlbC5wYXJlbnRzKFwiLlwiICsgc3dpcGVyLnBhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgdmFyICRlbCA9IHN3aXBlci4kZWw7XG4gICAgICB2YXIgc3dpcGVyV2lkdGggPSAkZWxbMF0uY2xpZW50V2lkdGg7XG4gICAgICB2YXIgc3dpcGVySGVpZ2h0ID0gJGVsWzBdLmNsaWVudEhlaWdodDtcbiAgICAgIHZhciB3aW5kb3dXaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICAgICAgdmFyIHdpbmRvd0hlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICAgIHZhciBzd2lwZXJPZmZzZXQgPSBzd2lwZXIuJGVsLm9mZnNldCgpO1xuICAgICAgaWYgKHJ0bCkgc3dpcGVyT2Zmc2V0LmxlZnQgLT0gc3dpcGVyLiRlbFswXS5zY3JvbGxMZWZ0O1xuICAgICAgdmFyIHN3aXBlckNvb3JkID0gW1tzd2lwZXJPZmZzZXQubGVmdCwgc3dpcGVyT2Zmc2V0LnRvcF0sIFtzd2lwZXJPZmZzZXQubGVmdCArIHN3aXBlcldpZHRoLCBzd2lwZXJPZmZzZXQudG9wXSwgW3N3aXBlck9mZnNldC5sZWZ0LCBzd2lwZXJPZmZzZXQudG9wICsgc3dpcGVySGVpZ2h0XSwgW3N3aXBlck9mZnNldC5sZWZ0ICsgc3dpcGVyV2lkdGgsIHN3aXBlck9mZnNldC50b3AgKyBzd2lwZXJIZWlnaHRdXTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzd2lwZXJDb29yZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB2YXIgcG9pbnQgPSBzd2lwZXJDb29yZFtpXTtcblxuICAgICAgICBpZiAocG9pbnRbMF0gPj0gMCAmJiBwb2ludFswXSA8PSB3aW5kb3dXaWR0aCAmJiBwb2ludFsxXSA+PSAwICYmIHBvaW50WzFdIDw9IHdpbmRvd0hlaWdodCkge1xuICAgICAgICAgIGlmIChwb2ludFswXSA9PT0gMCAmJiBwb2ludFsxXSA9PT0gMCkgY29udGludWU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICAgICAgICAgIGluVmlldyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCFpblZpZXcpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgaWYgKGlzUGFnZVVwIHx8IGlzUGFnZURvd24gfHwgaXNBcnJvd0xlZnQgfHwgaXNBcnJvd1JpZ2h0KSB7XG4gICAgICAgIGlmIChlLnByZXZlbnREZWZhdWx0KSBlLnByZXZlbnREZWZhdWx0KCk7ZWxzZSBlLnJldHVyblZhbHVlID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmICgoaXNQYWdlRG93biB8fCBpc0Fycm93UmlnaHQpICYmICFydGwgfHwgKGlzUGFnZVVwIHx8IGlzQXJyb3dMZWZ0KSAmJiBydGwpIHN3aXBlci5zbGlkZU5leHQoKTtcbiAgICAgIGlmICgoaXNQYWdlVXAgfHwgaXNBcnJvd0xlZnQpICYmICFydGwgfHwgKGlzUGFnZURvd24gfHwgaXNBcnJvd1JpZ2h0KSAmJiBydGwpIHN3aXBlci5zbGlkZVByZXYoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGlzUGFnZVVwIHx8IGlzUGFnZURvd24gfHwgaXNBcnJvd1VwIHx8IGlzQXJyb3dEb3duKSB7XG4gICAgICAgIGlmIChlLnByZXZlbnREZWZhdWx0KSBlLnByZXZlbnREZWZhdWx0KCk7ZWxzZSBlLnJldHVyblZhbHVlID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc1BhZ2VEb3duIHx8IGlzQXJyb3dEb3duKSBzd2lwZXIuc2xpZGVOZXh0KCk7XG4gICAgICBpZiAoaXNQYWdlVXAgfHwgaXNBcnJvd1VwKSBzd2lwZXIuc2xpZGVQcmV2KCk7XG4gICAgfVxuXG4gICAgc3dpcGVyLmVtaXQoJ2tleVByZXNzJywga2MpO1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH0sXG4gIGVuYWJsZTogZnVuY3Rpb24gZW5hYmxlKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gICAgaWYgKHN3aXBlci5rZXlib2FyZC5lbmFibGVkKSByZXR1cm47XG4gICAgJChkb2N1bWVudCkub24oJ2tleWRvd24nLCBzd2lwZXIua2V5Ym9hcmQuaGFuZGxlKTtcbiAgICBzd2lwZXIua2V5Ym9hcmQuZW5hYmxlZCA9IHRydWU7XG4gIH0sXG4gIGRpc2FibGU6IGZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgICBpZiAoIXN3aXBlci5rZXlib2FyZC5lbmFibGVkKSByZXR1cm47XG4gICAgJChkb2N1bWVudCkub2ZmKCdrZXlkb3duJywgc3dpcGVyLmtleWJvYXJkLmhhbmRsZSk7XG4gICAgc3dpcGVyLmtleWJvYXJkLmVuYWJsZWQgPSBmYWxzZTtcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ2tleWJvYXJkJyxcbiAgcGFyYW1zOiB7XG4gICAga2V5Ym9hcmQ6IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgb25seUluVmlld3BvcnQ6IHRydWUsXG4gICAgICBwYWdlVXBEb3duOiB0cnVlXG4gICAgfVxuICB9LFxuICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBiaW5kTW9kdWxlTWV0aG9kcyhzd2lwZXIsIHtcbiAgICAgIGtleWJvYXJkOiBfZXh0ZW5kcyh7XG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICB9LCBLZXlib2FyZClcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBpbml0OiBmdW5jdGlvbiBpbml0KHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMua2V5Ym9hcmQuZW5hYmxlZCkge1xuICAgICAgICBzd2lwZXIua2V5Ym9hcmQuZW5hYmxlKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5rZXlib2FyZC5lbmFibGVkKSB7XG4gICAgICAgIHN3aXBlci5rZXlib2FyZC5kaXNhYmxlKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMva2V5Ym9hcmQva2V5Ym9hcmQuanMiLCIvKiBlc2xpbnQtZGlzYWJsZSBjb25zaXN0ZW50LXJldHVybiAqL1xuaW1wb3J0IHsgZ2V0V2luZG93LCBnZXREb2N1bWVudCB9IGZyb20gJ3Nzci13aW5kb3cnO1xuaW1wb3J0ICQgZnJvbSAnLi4vLi4vdXRpbHMvZG9tJztcbmltcG9ydCB7IG5vdywgbmV4dFRpY2ssIGJpbmRNb2R1bGVNZXRob2RzIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xuXG5mdW5jdGlvbiBpc0V2ZW50U3VwcG9ydGVkKCkge1xuICB2YXIgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICB2YXIgZXZlbnROYW1lID0gJ29ud2hlZWwnO1xuICB2YXIgaXNTdXBwb3J0ZWQgPSAoZXZlbnROYW1lIGluIGRvY3VtZW50KTtcblxuICBpZiAoIWlzU3VwcG9ydGVkKSB7XG4gICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShldmVudE5hbWUsICdyZXR1cm47Jyk7XG4gICAgaXNTdXBwb3J0ZWQgPSB0eXBlb2YgZWxlbWVudFtldmVudE5hbWVdID09PSAnZnVuY3Rpb24nO1xuICB9XG5cbiAgaWYgKCFpc1N1cHBvcnRlZCAmJiBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbiAmJiBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlICYmIC8vIGFsd2F5cyByZXR1cm5zIHRydWUgaW4gbmV3ZXIgYnJvd3NlcnMgYXMgcGVyIHRoZSBzdGFuZGFyZC5cbiAgLy8gQHNlZSBodHRwOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jZG9tLWRvbWltcGxlbWVudGF0aW9uLWhhc2ZlYXR1cmVcbiAgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZSgnJywgJycpICE9PSB0cnVlKSB7XG4gICAgLy8gVGhpcyBpcyB0aGUgb25seSB3YXkgdG8gdGVzdCBzdXBwb3J0IGZvciB0aGUgYHdoZWVsYCBldmVudCBpbiBJRTkrLlxuICAgIGlzU3VwcG9ydGVkID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZSgnRXZlbnRzLndoZWVsJywgJzMuMCcpO1xuICB9XG5cbiAgcmV0dXJuIGlzU3VwcG9ydGVkO1xufVxuXG52YXIgTW91c2V3aGVlbCA9IHtcbiAgbGFzdFNjcm9sbFRpbWU6IG5vdygpLFxuICBsYXN0RXZlbnRCZWZvcmVTbmFwOiB1bmRlZmluZWQsXG4gIHJlY2VudFdoZWVsRXZlbnRzOiBbXSxcbiAgZXZlbnQ6IGZ1bmN0aW9uIGV2ZW50KCkge1xuICAgIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgICBpZiAod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignZmlyZWZveCcpID4gLTEpIHJldHVybiAnRE9NTW91c2VTY3JvbGwnO1xuICAgIHJldHVybiBpc0V2ZW50U3VwcG9ydGVkKCkgPyAnd2hlZWwnIDogJ21vdXNld2hlZWwnO1xuICB9LFxuICBub3JtYWxpemU6IGZ1bmN0aW9uIG5vcm1hbGl6ZShlKSB7XG4gICAgLy8gUmVhc29uYWJsZSBkZWZhdWx0c1xuICAgIHZhciBQSVhFTF9TVEVQID0gMTA7XG4gICAgdmFyIExJTkVfSEVJR0hUID0gNDA7XG4gICAgdmFyIFBBR0VfSEVJR0hUID0gODAwO1xuICAgIHZhciBzWCA9IDA7XG4gICAgdmFyIHNZID0gMDsgLy8gc3BpblgsIHNwaW5ZXG5cbiAgICB2YXIgcFggPSAwO1xuICAgIHZhciBwWSA9IDA7IC8vIHBpeGVsWCwgcGl4ZWxZXG4gICAgLy8gTGVnYWN5XG5cbiAgICBpZiAoJ2RldGFpbCcgaW4gZSkge1xuICAgICAgc1kgPSBlLmRldGFpbDtcbiAgICB9XG5cbiAgICBpZiAoJ3doZWVsRGVsdGEnIGluIGUpIHtcbiAgICAgIHNZID0gLWUud2hlZWxEZWx0YSAvIDEyMDtcbiAgICB9XG5cbiAgICBpZiAoJ3doZWVsRGVsdGFZJyBpbiBlKSB7XG4gICAgICBzWSA9IC1lLndoZWVsRGVsdGFZIC8gMTIwO1xuICAgIH1cblxuICAgIGlmICgnd2hlZWxEZWx0YVgnIGluIGUpIHtcbiAgICAgIHNYID0gLWUud2hlZWxEZWx0YVggLyAxMjA7XG4gICAgfSAvLyBzaWRlIHNjcm9sbGluZyBvbiBGRiB3aXRoIERPTU1vdXNlU2Nyb2xsXG5cblxuICAgIGlmICgnYXhpcycgaW4gZSAmJiBlLmF4aXMgPT09IGUuSE9SSVpPTlRBTF9BWElTKSB7XG4gICAgICBzWCA9IHNZO1xuICAgICAgc1kgPSAwO1xuICAgIH1cblxuICAgIHBYID0gc1ggKiBQSVhFTF9TVEVQO1xuICAgIHBZID0gc1kgKiBQSVhFTF9TVEVQO1xuXG4gICAgaWYgKCdkZWx0YVknIGluIGUpIHtcbiAgICAgIHBZID0gZS5kZWx0YVk7XG4gICAgfVxuXG4gICAgaWYgKCdkZWx0YVgnIGluIGUpIHtcbiAgICAgIHBYID0gZS5kZWx0YVg7XG4gICAgfVxuXG4gICAgaWYgKGUuc2hpZnRLZXkgJiYgIXBYKSB7XG4gICAgICAvLyBpZiB1c2VyIHNjcm9sbHMgd2l0aCBzaGlmdCBoZSB3YW50cyBob3Jpem9udGFsIHNjcm9sbFxuICAgICAgcFggPSBwWTtcbiAgICAgIHBZID0gMDtcbiAgICB9XG5cbiAgICBpZiAoKHBYIHx8IHBZKSAmJiBlLmRlbHRhTW9kZSkge1xuICAgICAgaWYgKGUuZGVsdGFNb2RlID09PSAxKSB7XG4gICAgICAgIC8vIGRlbHRhIGluIExJTkUgdW5pdHNcbiAgICAgICAgcFggKj0gTElORV9IRUlHSFQ7XG4gICAgICAgIHBZICo9IExJTkVfSEVJR0hUO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZGVsdGEgaW4gUEFHRSB1bml0c1xuICAgICAgICBwWCAqPSBQQUdFX0hFSUdIVDtcbiAgICAgICAgcFkgKj0gUEFHRV9IRUlHSFQ7XG4gICAgICB9XG4gICAgfSAvLyBGYWxsLWJhY2sgaWYgc3BpbiBjYW5ub3QgYmUgZGV0ZXJtaW5lZFxuXG5cbiAgICBpZiAocFggJiYgIXNYKSB7XG4gICAgICBzWCA9IHBYIDwgMSA/IC0xIDogMTtcbiAgICB9XG5cbiAgICBpZiAocFkgJiYgIXNZKSB7XG4gICAgICBzWSA9IHBZIDwgMSA/IC0xIDogMTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgc3Bpblg6IHNYLFxuICAgICAgc3Bpblk6IHNZLFxuICAgICAgcGl4ZWxYOiBwWCxcbiAgICAgIHBpeGVsWTogcFlcbiAgICB9O1xuICB9LFxuICBoYW5kbGVNb3VzZUVudGVyOiBmdW5jdGlvbiBoYW5kbGVNb3VzZUVudGVyKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLmVuYWJsZWQpIHJldHVybjtcbiAgICBzd2lwZXIubW91c2VFbnRlcmVkID0gdHJ1ZTtcbiAgfSxcbiAgaGFuZGxlTW91c2VMZWF2ZTogZnVuY3Rpb24gaGFuZGxlTW91c2VMZWF2ZSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5lbmFibGVkKSByZXR1cm47XG4gICAgc3dpcGVyLm1vdXNlRW50ZXJlZCA9IGZhbHNlO1xuICB9LFxuICBoYW5kbGU6IGZ1bmN0aW9uIGhhbmRsZShldmVudCkge1xuICAgIHZhciBlID0gZXZlbnQ7XG4gICAgdmFyIGRpc2FibGVQYXJlbnRTd2lwZXIgPSB0cnVlO1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLmVuYWJsZWQpIHJldHVybjtcbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIHZhciB0YXJnZXQgPSBzd2lwZXIuJGVsO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMubW91c2V3aGVlbC5ldmVudHNUYXJnZXQgIT09ICdjb250YWluZXInKSB7XG4gICAgICB0YXJnZXQgPSAkKHN3aXBlci5wYXJhbXMubW91c2V3aGVlbC5ldmVudHNUYXJnZXQpO1xuICAgIH1cblxuICAgIGlmICghc3dpcGVyLm1vdXNlRW50ZXJlZCAmJiAhdGFyZ2V0WzBdLmNvbnRhaW5zKGUudGFyZ2V0KSAmJiAhcGFyYW1zLnJlbGVhc2VPbkVkZ2VzKSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoZS5vcmlnaW5hbEV2ZW50KSBlID0gZS5vcmlnaW5hbEV2ZW50OyAvLyBqcXVlcnkgZml4XG5cbiAgICB2YXIgZGVsdGEgPSAwO1xuICAgIHZhciBydGxGYWN0b3IgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gLTEgOiAxO1xuICAgIHZhciBkYXRhID0gTW91c2V3aGVlbC5ub3JtYWxpemUoZSk7XG5cbiAgICBpZiAocGFyYW1zLmZvcmNlVG9BeGlzKSB7XG4gICAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgIGlmIChNYXRoLmFicyhkYXRhLnBpeGVsWCkgPiBNYXRoLmFicyhkYXRhLnBpeGVsWSkpIGRlbHRhID0gLWRhdGEucGl4ZWxYICogcnRsRmFjdG9yO2Vsc2UgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2UgaWYgKE1hdGguYWJzKGRhdGEucGl4ZWxZKSA+IE1hdGguYWJzKGRhdGEucGl4ZWxYKSkgZGVsdGEgPSAtZGF0YS5waXhlbFk7ZWxzZSByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsdGEgPSBNYXRoLmFicyhkYXRhLnBpeGVsWCkgPiBNYXRoLmFicyhkYXRhLnBpeGVsWSkgPyAtZGF0YS5waXhlbFggKiBydGxGYWN0b3IgOiAtZGF0YS5waXhlbFk7XG4gICAgfVxuXG4gICAgaWYgKGRlbHRhID09PSAwKSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAocGFyYW1zLmludmVydCkgZGVsdGEgPSAtZGVsdGE7IC8vIEdldCB0aGUgc2Nyb2xsIHBvc2l0aW9uc1xuXG4gICAgdmFyIHBvc2l0aW9ucyA9IHN3aXBlci5nZXRUcmFuc2xhdGUoKSArIGRlbHRhICogcGFyYW1zLnNlbnNpdGl2aXR5O1xuICAgIGlmIChwb3NpdGlvbnMgPj0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSBwb3NpdGlvbnMgPSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gICAgaWYgKHBvc2l0aW9ucyA8PSBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHBvc2l0aW9ucyA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKTsgLy8gV2hlbiBsb29wIGlzIHRydWU6XG4gICAgLy8gICAgIHRoZSBkaXNhYmxlUGFyZW50U3dpcGVyIHdpbGwgYmUgdHJ1ZS5cbiAgICAvLyBXaGVuIGxvb3AgaXMgZmFsc2U6XG4gICAgLy8gICAgIGlmIHRoZSBzY3JvbGwgcG9zaXRpb25zIGlzIG5vdCBvbiBlZGdlLFxuICAgIC8vICAgICB0aGVuIHRoZSBkaXNhYmxlUGFyZW50U3dpcGVyIHdpbGwgYmUgdHJ1ZS5cbiAgICAvLyAgICAgaWYgdGhlIHNjcm9sbCBvbiBlZGdlIHBvc2l0aW9ucyxcbiAgICAvLyAgICAgdGhlbiB0aGUgZGlzYWJsZVBhcmVudFN3aXBlciB3aWxsIGJlIGZhbHNlLlxuXG4gICAgZGlzYWJsZVBhcmVudFN3aXBlciA9IHN3aXBlci5wYXJhbXMubG9vcCA/IHRydWUgOiAhKHBvc2l0aW9ucyA9PT0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpIHx8IHBvc2l0aW9ucyA9PT0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpKTtcbiAgICBpZiAoZGlzYWJsZVBhcmVudFN3aXBlciAmJiBzd2lwZXIucGFyYW1zLm5lc3RlZCkgZS5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgIGlmICghc3dpcGVyLnBhcmFtcy5mcmVlTW9kZSkge1xuICAgICAgLy8gUmVnaXN0ZXIgdGhlIG5ldyBldmVudCBpbiBhIHZhcmlhYmxlIHdoaWNoIHN0b3JlcyB0aGUgcmVsZXZhbnQgZGF0YVxuICAgICAgdmFyIG5ld0V2ZW50ID0ge1xuICAgICAgICB0aW1lOiBub3coKSxcbiAgICAgICAgZGVsdGE6IE1hdGguYWJzKGRlbHRhKSxcbiAgICAgICAgZGlyZWN0aW9uOiBNYXRoLnNpZ24oZGVsdGEpLFxuICAgICAgICByYXc6IGV2ZW50XG4gICAgICB9OyAvLyBLZWVwIHRoZSBtb3N0IHJlY2VudCBldmVudHNcblxuICAgICAgdmFyIHJlY2VudFdoZWVsRXZlbnRzID0gc3dpcGVyLm1vdXNld2hlZWwucmVjZW50V2hlZWxFdmVudHM7XG5cbiAgICAgIGlmIChyZWNlbnRXaGVlbEV2ZW50cy5sZW5ndGggPj0gMikge1xuICAgICAgICByZWNlbnRXaGVlbEV2ZW50cy5zaGlmdCgpOyAvLyBvbmx5IHN0b3JlIHRoZSBsYXN0IE4gZXZlbnRzXG4gICAgICB9XG5cbiAgICAgIHZhciBwcmV2RXZlbnQgPSByZWNlbnRXaGVlbEV2ZW50cy5sZW5ndGggPyByZWNlbnRXaGVlbEV2ZW50c1tyZWNlbnRXaGVlbEV2ZW50cy5sZW5ndGggLSAxXSA6IHVuZGVmaW5lZDtcbiAgICAgIHJlY2VudFdoZWVsRXZlbnRzLnB1c2gobmV3RXZlbnQpOyAvLyBJZiB0aGVyZSBpcyBhdCBsZWFzdCBvbmUgcHJldmlvdXMgcmVjb3JkZWQgZXZlbnQ6XG4gICAgICAvLyAgIElmIGRpcmVjdGlvbiBoYXMgY2hhbmdlZCBvclxuICAgICAgLy8gICBpZiB0aGUgc2Nyb2xsIGlzIHF1aWNrZXIgdGhhbiB0aGUgcHJldmlvdXMgb25lOlxuICAgICAgLy8gICAgIEFuaW1hdGUgdGhlIHNsaWRlci5cbiAgICAgIC8vIEVsc2UgKHRoaXMgaXMgdGhlIGZpcnN0IHRpbWUgdGhlIHdoZWVsIGlzIG1vdmVkKTpcbiAgICAgIC8vICAgICBBbmltYXRlIHRoZSBzbGlkZXIuXG5cbiAgICAgIGlmIChwcmV2RXZlbnQpIHtcbiAgICAgICAgaWYgKG5ld0V2ZW50LmRpcmVjdGlvbiAhPT0gcHJldkV2ZW50LmRpcmVjdGlvbiB8fCBuZXdFdmVudC5kZWx0YSA+IHByZXZFdmVudC5kZWx0YSB8fCBuZXdFdmVudC50aW1lID4gcHJldkV2ZW50LnRpbWUgKyAxNTApIHtcbiAgICAgICAgICBzd2lwZXIubW91c2V3aGVlbC5hbmltYXRlU2xpZGVyKG5ld0V2ZW50KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLm1vdXNld2hlZWwuYW5pbWF0ZVNsaWRlcihuZXdFdmVudCk7XG4gICAgICB9IC8vIElmIGl0J3MgdGltZSB0byByZWxlYXNlIHRoZSBzY3JvbGw6XG4gICAgICAvLyAgIFJldHVybiBub3cgc28geW91IGRvbid0IGhpdCB0aGUgcHJldmVudERlZmF1bHQuXG5cblxuICAgICAgaWYgKHN3aXBlci5tb3VzZXdoZWVsLnJlbGVhc2VTY3JvbGwobmV3RXZlbnQpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBGcmVlbW9kZSBvciBzY3JvbGxDb250YWluZXI6XG4gICAgICAvLyBJZiB3ZSByZWNlbnRseSBzbmFwcGVkIGFmdGVyIGEgbW9tZW50dW0gc2Nyb2xsLCB0aGVuIGlnbm9yZSB3aGVlbCBldmVudHNcbiAgICAgIC8vIHRvIGdpdmUgdGltZSBmb3IgdGhlIGRlY2VsZXJhdGlvbiB0byBmaW5pc2guIFN0b3AgaWdub3JpbmcgYWZ0ZXIgNTAwIG1zZWNzXG4gICAgICAvLyBvciBpZiBpdCdzIGEgbmV3IHNjcm9sbCAobGFyZ2VyIGRlbHRhIG9yIGludmVyc2Ugc2lnbiBhcyBsYXN0IGV2ZW50IGJlZm9yZVxuICAgICAgLy8gYW4gZW5kLW9mLW1vbWVudHVtIHNuYXApLlxuICAgICAgdmFyIF9uZXdFdmVudCA9IHtcbiAgICAgICAgdGltZTogbm93KCksXG4gICAgICAgIGRlbHRhOiBNYXRoLmFicyhkZWx0YSksXG4gICAgICAgIGRpcmVjdGlvbjogTWF0aC5zaWduKGRlbHRhKVxuICAgICAgfTtcbiAgICAgIHZhciBsYXN0RXZlbnRCZWZvcmVTbmFwID0gc3dpcGVyLm1vdXNld2hlZWwubGFzdEV2ZW50QmVmb3JlU25hcDtcbiAgICAgIHZhciBpZ25vcmVXaGVlbEV2ZW50cyA9IGxhc3RFdmVudEJlZm9yZVNuYXAgJiYgX25ld0V2ZW50LnRpbWUgPCBsYXN0RXZlbnRCZWZvcmVTbmFwLnRpbWUgKyA1MDAgJiYgX25ld0V2ZW50LmRlbHRhIDw9IGxhc3RFdmVudEJlZm9yZVNuYXAuZGVsdGEgJiYgX25ld0V2ZW50LmRpcmVjdGlvbiA9PT0gbGFzdEV2ZW50QmVmb3JlU25hcC5kaXJlY3Rpb247XG5cbiAgICAgIGlmICghaWdub3JlV2hlZWxFdmVudHMpIHtcbiAgICAgICAgc3dpcGVyLm1vdXNld2hlZWwubGFzdEV2ZW50QmVmb3JlU25hcCA9IHVuZGVmaW5lZDtcblxuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICAgICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwb3NpdGlvbiA9IHN3aXBlci5nZXRUcmFuc2xhdGUoKSArIGRlbHRhICogcGFyYW1zLnNlbnNpdGl2aXR5O1xuICAgICAgICB2YXIgd2FzQmVnaW5uaW5nID0gc3dpcGVyLmlzQmVnaW5uaW5nO1xuICAgICAgICB2YXIgd2FzRW5kID0gc3dpcGVyLmlzRW5kO1xuICAgICAgICBpZiAocG9zaXRpb24gPj0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSBwb3NpdGlvbiA9IHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgICAgICAgaWYgKHBvc2l0aW9uIDw9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSkgcG9zaXRpb24gPSBzd2lwZXIubWF4VHJhbnNsYXRlKCk7XG4gICAgICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKDApO1xuICAgICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKHBvc2l0aW9uKTtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKCk7XG4gICAgICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuXG4gICAgICAgIGlmICghd2FzQmVnaW5uaW5nICYmIHN3aXBlci5pc0JlZ2lubmluZyB8fCAhd2FzRW5kICYmIHN3aXBlci5pc0VuZCkge1xuICAgICAgICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5mcmVlTW9kZVN0aWNreSkge1xuICAgICAgICAgIC8vIFdoZW4gd2hlZWwgc2Nyb2xsaW5nIHN0YXJ0cyB3aXRoIHN0aWNreSAoYWthIHNuYXApIGVuYWJsZWQsIHRoZW4gZGV0ZWN0XG4gICAgICAgICAgLy8gdGhlIGVuZCBvZiBhIG1vbWVudHVtIHNjcm9sbCBieSBzdG9yaW5nIHJlY2VudCAoTj0xNT8pIHdoZWVsIGV2ZW50cy5cbiAgICAgICAgICAvLyAxLiBkbyBhbGwgTiBldmVudHMgaGF2ZSBkZWNyZWFzaW5nIG9yIHNhbWUgKGFic29sdXRlIHZhbHVlKSBkZWx0YT9cbiAgICAgICAgICAvLyAyLiBkaWQgYWxsIE4gZXZlbnRzIGFycml2ZSBpbiB0aGUgbGFzdCBNIChNPTUwMD8pIG1zZWNzP1xuICAgICAgICAgIC8vIDMuIGRvZXMgdGhlIGVhcmxpZXN0IGV2ZW50IGhhdmUgYW4gKGFic29sdXRlIHZhbHVlKSBkZWx0YSB0aGF0J3NcbiAgICAgICAgICAvLyAgICBhdCBsZWFzdCBQIChQPTE/KSBsYXJnZXIgdGhhbiB0aGUgbW9zdCByZWNlbnQgZXZlbnQncyBkZWx0YT9cbiAgICAgICAgICAvLyA0LiBkb2VzIHRoZSBsYXRlc3QgZXZlbnQgaGF2ZSBhIGRlbHRhIHRoYXQncyBzbWFsbGVyIHRoYW4gUSAoUT02PykgcGl4ZWxzP1xuICAgICAgICAgIC8vIElmIDEtNCBhcmUgXCJ5ZXNcIiB0aGVuIHdlJ3JlIG5lYXIgdGhlIGVuZCBvZiBhIG1vbWVudHVtIHNjcm9sbCBkZWNlbGVyYXRpb24uXG4gICAgICAgICAgLy8gU25hcCBpbW1lZGlhdGVseSBhbmQgaWdub3JlIHJlbWFpbmluZyB3aGVlbCBldmVudHMgaW4gdGhpcyBzY3JvbGwuXG4gICAgICAgICAgLy8gU2VlIGNvbW1lbnQgYWJvdmUgZm9yIFwicmVtYWluaW5nIHdoZWVsIGV2ZW50cyBpbiB0aGlzIHNjcm9sbFwiIGRldGVybWluYXRpb24uXG4gICAgICAgICAgLy8gSWYgMS00IGFyZW4ndCBzYXRpc2ZpZWQsIHRoZW4gd2FpdCB0byBzbmFwIHVudGlsIDUwMG1zIGFmdGVyIHRoZSBsYXN0IGV2ZW50LlxuICAgICAgICAgIGNsZWFyVGltZW91dChzd2lwZXIubW91c2V3aGVlbC50aW1lb3V0KTtcbiAgICAgICAgICBzd2lwZXIubW91c2V3aGVlbC50aW1lb3V0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgIHZhciBfcmVjZW50V2hlZWxFdmVudHMgPSBzd2lwZXIubW91c2V3aGVlbC5yZWNlbnRXaGVlbEV2ZW50cztcblxuICAgICAgICAgIGlmIChfcmVjZW50V2hlZWxFdmVudHMubGVuZ3RoID49IDE1KSB7XG4gICAgICAgICAgICBfcmVjZW50V2hlZWxFdmVudHMuc2hpZnQoKTsgLy8gb25seSBzdG9yZSB0aGUgbGFzdCBOIGV2ZW50c1xuXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIF9wcmV2RXZlbnQgPSBfcmVjZW50V2hlZWxFdmVudHMubGVuZ3RoID8gX3JlY2VudFdoZWVsRXZlbnRzW19yZWNlbnRXaGVlbEV2ZW50cy5sZW5ndGggLSAxXSA6IHVuZGVmaW5lZDtcblxuICAgICAgICAgIHZhciBmaXJzdEV2ZW50ID0gX3JlY2VudFdoZWVsRXZlbnRzWzBdO1xuXG4gICAgICAgICAgX3JlY2VudFdoZWVsRXZlbnRzLnB1c2goX25ld0V2ZW50KTtcblxuICAgICAgICAgIGlmIChfcHJldkV2ZW50ICYmIChfbmV3RXZlbnQuZGVsdGEgPiBfcHJldkV2ZW50LmRlbHRhIHx8IF9uZXdFdmVudC5kaXJlY3Rpb24gIT09IF9wcmV2RXZlbnQuZGlyZWN0aW9uKSkge1xuICAgICAgICAgICAgLy8gSW5jcmVhc2luZyBvciByZXZlcnNlLXNpZ24gZGVsdGEgbWVhbnMgdGhlIHVzZXIgc3RhcnRlZCBzY3JvbGxpbmcgYWdhaW4uIENsZWFyIHRoZSB3aGVlbCBldmVudCBsb2cuXG4gICAgICAgICAgICBfcmVjZW50V2hlZWxFdmVudHMuc3BsaWNlKDApO1xuICAgICAgICAgIH0gZWxzZSBpZiAoX3JlY2VudFdoZWVsRXZlbnRzLmxlbmd0aCA+PSAxNSAmJiBfbmV3RXZlbnQudGltZSAtIGZpcnN0RXZlbnQudGltZSA8IDUwMCAmJiBmaXJzdEV2ZW50LmRlbHRhIC0gX25ld0V2ZW50LmRlbHRhID49IDEgJiYgX25ld0V2ZW50LmRlbHRhIDw9IDYpIHtcbiAgICAgICAgICAgIC8vIFdlJ3JlIGF0IHRoZSBlbmQgb2YgdGhlIGRlY2VsZXJhdGlvbiBvZiBhIG1vbWVudHVtIHNjcm9sbCwgc28gdGhlcmUncyBubyBuZWVkXG4gICAgICAgICAgICAvLyB0byB3YWl0IGZvciBtb3JlIGV2ZW50cy4gU25hcCBBU0FQIG9uIHRoZSBuZXh0IHRpY2suXG4gICAgICAgICAgICAvLyBBbHNvLCBiZWNhdXNlIHRoZXJlJ3Mgc29tZSByZW1haW5pbmcgbW9tZW50dW0gd2UnbGwgYmlhcyB0aGUgc25hcCBpbiB0aGVcbiAgICAgICAgICAgIC8vIGRpcmVjdGlvbiBvZiB0aGUgb25nb2luZyBzY3JvbGwgYmVjYXVzZSBpdCdzIGJldHRlciBVWCBmb3IgdGhlIHNjcm9sbCB0byBzbmFwXG4gICAgICAgICAgICAvLyBpbiB0aGUgc2FtZSBkaXJlY3Rpb24gYXMgdGhlIHNjcm9sbCBpbnN0ZWFkIG9mIHJldmVyc2luZyB0byBzbmFwLiAgVGhlcmVmb3JlLFxuICAgICAgICAgICAgLy8gaWYgaXQncyBhbHJlYWR5IHNjcm9sbGVkIG1vcmUgdGhhbiAyMCUgaW4gdGhlIGN1cnJlbnQgZGlyZWN0aW9uLCBrZWVwIGdvaW5nLlxuICAgICAgICAgICAgdmFyIHNuYXBUb1RocmVzaG9sZCA9IGRlbHRhID4gMCA/IDAuOCA6IDAuMjtcbiAgICAgICAgICAgIHN3aXBlci5tb3VzZXdoZWVsLmxhc3RFdmVudEJlZm9yZVNuYXAgPSBfbmV3RXZlbnQ7XG5cbiAgICAgICAgICAgIF9yZWNlbnRXaGVlbEV2ZW50cy5zcGxpY2UoMCk7XG5cbiAgICAgICAgICAgIHN3aXBlci5tb3VzZXdoZWVsLnRpbWVvdXQgPSBuZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHN3aXBlci5zbGlkZVRvQ2xvc2VzdChzd2lwZXIucGFyYW1zLnNwZWVkLCB0cnVlLCB1bmRlZmluZWQsIHNuYXBUb1RocmVzaG9sZCk7XG4gICAgICAgICAgICB9LCAwKTsgLy8gbm8gZGVsYXk7IG1vdmUgb24gbmV4dCB0aWNrXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFzd2lwZXIubW91c2V3aGVlbC50aW1lb3V0KSB7XG4gICAgICAgICAgICAvLyBpZiB3ZSBnZXQgaGVyZSwgdGhlbiB3ZSBoYXZlbid0IGRldGVjdGVkIHRoZSBlbmQgb2YgYSBtb21lbnR1bSBzY3JvbGwsIHNvXG4gICAgICAgICAgICAvLyB3ZSdsbCBjb25zaWRlciBhIHNjcm9sbCBcImNvbXBsZXRlXCIgd2hlbiB0aGVyZSBoYXZlbid0IGJlZW4gYW55IHdoZWVsIGV2ZW50c1xuICAgICAgICAgICAgLy8gZm9yIDUwMG1zLlxuICAgICAgICAgICAgc3dpcGVyLm1vdXNld2hlZWwudGltZW91dCA9IG5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgdmFyIHNuYXBUb1RocmVzaG9sZCA9IDAuNTtcbiAgICAgICAgICAgICAgc3dpcGVyLm1vdXNld2hlZWwubGFzdEV2ZW50QmVmb3JlU25hcCA9IF9uZXdFdmVudDtcblxuICAgICAgICAgICAgICBfcmVjZW50V2hlZWxFdmVudHMuc3BsaWNlKDApO1xuXG4gICAgICAgICAgICAgIHN3aXBlci5zbGlkZVRvQ2xvc2VzdChzd2lwZXIucGFyYW1zLnNwZWVkLCB0cnVlLCB1bmRlZmluZWQsIHNuYXBUb1RocmVzaG9sZCk7XG4gICAgICAgICAgICB9LCA1MDApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSAvLyBFbWl0IGV2ZW50XG5cblxuICAgICAgICBpZiAoIWlnbm9yZVdoZWVsRXZlbnRzKSBzd2lwZXIuZW1pdCgnc2Nyb2xsJywgZSk7IC8vIFN0b3AgYXV0b3BsYXlcblxuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5hdXRvcGxheSAmJiBzd2lwZXIucGFyYW1zLmF1dG9wbGF5RGlzYWJsZU9uSW50ZXJhY3Rpb24pIHN3aXBlci5hdXRvcGxheS5zdG9wKCk7IC8vIFJldHVybiBwYWdlIHNjcm9sbCBvbiBlZGdlIHBvc2l0aW9uc1xuXG4gICAgICAgIGlmIChwb3NpdGlvbiA9PT0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpIHx8IHBvc2l0aW9uID09PSBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChlLnByZXZlbnREZWZhdWx0KSBlLnByZXZlbnREZWZhdWx0KCk7ZWxzZSBlLnJldHVyblZhbHVlID0gZmFsc2U7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBhbmltYXRlU2xpZGVyOiBmdW5jdGlvbiBhbmltYXRlU2xpZGVyKG5ld0V2ZW50KSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuXG4gICAgaWYgKHRoaXMucGFyYW1zLm1vdXNld2hlZWwudGhyZXNob2xkRGVsdGEgJiYgbmV3RXZlbnQuZGVsdGEgPCB0aGlzLnBhcmFtcy5tb3VzZXdoZWVsLnRocmVzaG9sZERlbHRhKSB7XG4gICAgICAvLyBQcmV2ZW50IGlmIGRlbHRhIG9mIHdoZWVsIHNjcm9sbCBkZWx0YSBpcyBiZWxvdyBjb25maWd1cmVkIHRocmVzaG9sZFxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnBhcmFtcy5tb3VzZXdoZWVsLnRocmVzaG9sZFRpbWUgJiYgbm93KCkgLSBzd2lwZXIubW91c2V3aGVlbC5sYXN0U2Nyb2xsVGltZSA8IHRoaXMucGFyYW1zLm1vdXNld2hlZWwudGhyZXNob2xkVGltZSkge1xuICAgICAgLy8gUHJldmVudCBpZiB0aW1lIGJldHdlZW4gc2Nyb2xscyBpcyBiZWxvdyBjb25maWd1cmVkIHRocmVzaG9sZFxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gLy8gSWYgdGhlIG1vdmVtZW50IGlzIE5PVCBiaWcgZW5vdWdoIGFuZFxuICAgIC8vIGlmIHRoZSBsYXN0IHRpbWUgdGhlIHVzZXIgc2Nyb2xsZWQgd2FzIHRvbyBjbG9zZSB0byB0aGUgY3VycmVudCBvbmUgKGF2b2lkIGNvbnRpbnVvdXNseSB0cmlnZ2VyaW5nIHRoZSBzbGlkZXIpOlxuICAgIC8vICAgRG9uJ3QgZ28gYW55IGZ1cnRoZXIgKGF2b2lkIGluc2lnbmlmaWNhbnQgc2Nyb2xsIG1vdmVtZW50KS5cblxuXG4gICAgaWYgKG5ld0V2ZW50LmRlbHRhID49IDYgJiYgbm93KCkgLSBzd2lwZXIubW91c2V3aGVlbC5sYXN0U2Nyb2xsVGltZSA8IDYwKSB7XG4gICAgICAvLyBSZXR1cm4gZmFsc2UgYXMgYSBkZWZhdWx0XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IC8vIElmIHVzZXIgaXMgc2Nyb2xsaW5nIHRvd2FyZHMgdGhlIGVuZDpcbiAgICAvLyAgIElmIHRoZSBzbGlkZXIgaGFzbid0IGhpdCB0aGUgbGF0ZXN0IHNsaWRlIG9yXG4gICAgLy8gICBpZiB0aGUgc2xpZGVyIGlzIGEgbG9vcCBhbmRcbiAgICAvLyAgIGlmIHRoZSBzbGlkZXIgaXNuJ3QgbW92aW5nIHJpZ2h0IG5vdzpcbiAgICAvLyAgICAgR28gdG8gbmV4dCBzbGlkZSBhbmRcbiAgICAvLyAgICAgZW1pdCBhIHNjcm9sbCBldmVudC5cbiAgICAvLyBFbHNlICh0aGUgdXNlciBpcyBzY3JvbGxpbmcgdG93YXJkcyB0aGUgYmVnaW5uaW5nKSBhbmRcbiAgICAvLyBpZiB0aGUgc2xpZGVyIGhhc24ndCBoaXQgdGhlIGZpcnN0IHNsaWRlIG9yXG4gICAgLy8gaWYgdGhlIHNsaWRlciBpcyBhIGxvb3AgYW5kXG4gICAgLy8gaWYgdGhlIHNsaWRlciBpc24ndCBtb3ZpbmcgcmlnaHQgbm93OlxuICAgIC8vICAgR28gdG8gcHJldiBzbGlkZSBhbmRcbiAgICAvLyAgIGVtaXQgYSBzY3JvbGwgZXZlbnQuXG5cblxuICAgIGlmIChuZXdFdmVudC5kaXJlY3Rpb24gPCAwKSB7XG4gICAgICBpZiAoKCFzd2lwZXIuaXNFbmQgfHwgc3dpcGVyLnBhcmFtcy5sb29wKSAmJiAhc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgICBzd2lwZXIuc2xpZGVOZXh0KCk7XG4gICAgICAgIHN3aXBlci5lbWl0KCdzY3JvbGwnLCBuZXdFdmVudC5yYXcpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoKCFzd2lwZXIuaXNCZWdpbm5pbmcgfHwgc3dpcGVyLnBhcmFtcy5sb29wKSAmJiAhc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgc3dpcGVyLnNsaWRlUHJldigpO1xuICAgICAgc3dpcGVyLmVtaXQoJ3Njcm9sbCcsIG5ld0V2ZW50LnJhdyk7XG4gICAgfSAvLyBJZiB5b3UgZ290IGhlcmUgaXMgYmVjYXVzZSBhbiBhbmltYXRpb24gaGFzIGJlZW4gdHJpZ2dlcmVkIHNvIHN0b3JlIHRoZSBjdXJyZW50IHRpbWVcblxuXG4gICAgc3dpcGVyLm1vdXNld2hlZWwubGFzdFNjcm9sbFRpbWUgPSBuZXcgd2luZG93LkRhdGUoKS5nZXRUaW1lKCk7IC8vIFJldHVybiBmYWxzZSBhcyBhIGRlZmF1bHRcblxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgcmVsZWFzZVNjcm9sbDogZnVuY3Rpb24gcmVsZWFzZVNjcm9sbChuZXdFdmVudCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLm1vdXNld2hlZWw7XG5cbiAgICBpZiAobmV3RXZlbnQuZGlyZWN0aW9uIDwgMCkge1xuICAgICAgaWYgKHN3aXBlci5pc0VuZCAmJiAhc3dpcGVyLnBhcmFtcy5sb29wICYmIHBhcmFtcy5yZWxlYXNlT25FZGdlcykge1xuICAgICAgICAvLyBSZXR1cm4gdHJ1ZSB0byBhbmltYXRlIHNjcm9sbCBvbiBlZGdlc1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHN3aXBlci5pc0JlZ2lubmluZyAmJiAhc3dpcGVyLnBhcmFtcy5sb29wICYmIHBhcmFtcy5yZWxlYXNlT25FZGdlcykge1xuICAgICAgLy8gUmV0dXJuIHRydWUgdG8gYW5pbWF0ZSBzY3JvbGwgb24gZWRnZXNcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgZW5hYmxlOiBmdW5jdGlvbiBlbmFibGUoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIGV2ZW50ID0gTW91c2V3aGVlbC5ldmVudCgpO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgICAgc3dpcGVyLndyYXBwZXJFbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBzd2lwZXIubW91c2V3aGVlbC5oYW5kbGUpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKCFldmVudCkgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChzd2lwZXIubW91c2V3aGVlbC5lbmFibGVkKSByZXR1cm4gZmFsc2U7XG4gICAgdmFyIHRhcmdldCA9IHN3aXBlci4kZWw7XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsLmV2ZW50c1RhcmdldCAhPT0gJ2NvbnRhaW5lcicpIHtcbiAgICAgIHRhcmdldCA9ICQoc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsLmV2ZW50c1RhcmdldCk7XG4gICAgfVxuXG4gICAgdGFyZ2V0Lm9uKCdtb3VzZWVudGVyJywgc3dpcGVyLm1vdXNld2hlZWwuaGFuZGxlTW91c2VFbnRlcik7XG4gICAgdGFyZ2V0Lm9uKCdtb3VzZWxlYXZlJywgc3dpcGVyLm1vdXNld2hlZWwuaGFuZGxlTW91c2VMZWF2ZSk7XG4gICAgdGFyZ2V0Lm9uKGV2ZW50LCBzd2lwZXIubW91c2V3aGVlbC5oYW5kbGUpO1xuICAgIHN3aXBlci5tb3VzZXdoZWVsLmVuYWJsZWQgPSB0cnVlO1xuICAgIHJldHVybiB0cnVlO1xuICB9LFxuICBkaXNhYmxlOiBmdW5jdGlvbiBkaXNhYmxlKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBldmVudCA9IE1vdXNld2hlZWwuZXZlbnQoKTtcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgIHN3aXBlci53cmFwcGVyRWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgc3dpcGVyLm1vdXNld2hlZWwuaGFuZGxlKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmICghZXZlbnQpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoIXN3aXBlci5tb3VzZXdoZWVsLmVuYWJsZWQpIHJldHVybiBmYWxzZTtcbiAgICB2YXIgdGFyZ2V0ID0gc3dpcGVyLiRlbDtcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLm1vdXNld2hlZWwuZXZlbnRzVGFyZ2V0ICE9PSAnY29udGFpbmVyJykge1xuICAgICAgdGFyZ2V0ID0gJChzd2lwZXIucGFyYW1zLm1vdXNld2hlZWwuZXZlbnRzVGFyZ2V0KTtcbiAgICB9XG5cbiAgICB0YXJnZXQub2ZmKGV2ZW50LCBzd2lwZXIubW91c2V3aGVlbC5oYW5kbGUpO1xuICAgIHN3aXBlci5tb3VzZXdoZWVsLmVuYWJsZWQgPSBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ21vdXNld2hlZWwnLFxuICBwYXJhbXM6IHtcbiAgICBtb3VzZXdoZWVsOiB7XG4gICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgIHJlbGVhc2VPbkVkZ2VzOiBmYWxzZSxcbiAgICAgIGludmVydDogZmFsc2UsXG4gICAgICBmb3JjZVRvQXhpczogZmFsc2UsXG4gICAgICBzZW5zaXRpdml0eTogMSxcbiAgICAgIGV2ZW50c1RhcmdldDogJ2NvbnRhaW5lcicsXG4gICAgICB0aHJlc2hvbGREZWx0YTogbnVsbCxcbiAgICAgIHRocmVzaG9sZFRpbWU6IG51bGxcbiAgICB9XG4gIH0sXG4gIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIGJpbmRNb2R1bGVNZXRob2RzKHN3aXBlciwge1xuICAgICAgbW91c2V3aGVlbDoge1xuICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgICAgbGFzdFNjcm9sbFRpbWU6IG5vdygpLFxuICAgICAgICBsYXN0RXZlbnRCZWZvcmVTbmFwOiB1bmRlZmluZWQsXG4gICAgICAgIHJlY2VudFdoZWVsRXZlbnRzOiBbXSxcbiAgICAgICAgZW5hYmxlOiBNb3VzZXdoZWVsLmVuYWJsZSxcbiAgICAgICAgZGlzYWJsZTogTW91c2V3aGVlbC5kaXNhYmxlLFxuICAgICAgICBoYW5kbGU6IE1vdXNld2hlZWwuaGFuZGxlLFxuICAgICAgICBoYW5kbGVNb3VzZUVudGVyOiBNb3VzZXdoZWVsLmhhbmRsZU1vdXNlRW50ZXIsXG4gICAgICAgIGhhbmRsZU1vdXNlTGVhdmU6IE1vdXNld2hlZWwuaGFuZGxlTW91c2VMZWF2ZSxcbiAgICAgICAgYW5pbWF0ZVNsaWRlcjogTW91c2V3aGVlbC5hbmltYXRlU2xpZGVyLFxuICAgICAgICByZWxlYXNlU2Nyb2xsOiBNb3VzZXdoZWVsLnJlbGVhc2VTY3JvbGxcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBpbml0OiBmdW5jdGlvbiBpbml0KHN3aXBlcikge1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLm1vdXNld2hlZWwuZW5hYmxlZCAmJiBzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgICAgc3dpcGVyLm1vdXNld2hlZWwuZGlzYWJsZSgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsLmVuYWJsZWQpIHN3aXBlci5tb3VzZXdoZWVsLmVuYWJsZSgpO1xuICAgIH0sXG4gICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveShzd2lwZXIpIHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgICAgc3dpcGVyLm1vdXNld2hlZWwuZW5hYmxlKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzd2lwZXIubW91c2V3aGVlbC5lbmFibGVkKSBzd2lwZXIubW91c2V3aGVlbC5kaXNhYmxlKCk7XG4gICAgfVxuICB9XG59O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvbW91c2V3aGVlbC9tb3VzZXdoZWVsLmpzIiwiZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuaW1wb3J0ICQgZnJvbSAnLi4vLi4vdXRpbHMvZG9tJztcbmltcG9ydCB7IGV4dGVuZCwgYmluZE1vZHVsZU1ldGhvZHMsIGNyZWF0ZUVsZW1lbnRJZk5vdERlZmluZWQgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XG52YXIgTmF2aWdhdGlvbiA9IHtcbiAgdG9nZ2xlRWw6IGZ1bmN0aW9uIHRvZ2dsZUVsKCRlbCwgZGlzYWJsZWQpIHtcbiAgICAkZWxbZGlzYWJsZWQgPyAnYWRkQ2xhc3MnIDogJ3JlbW92ZUNsYXNzJ10odGhpcy5wYXJhbXMubmF2aWdhdGlvbi5kaXNhYmxlZENsYXNzKTtcbiAgICBpZiAoJGVsWzBdICYmICRlbFswXS50YWdOYW1lID09PSAnQlVUVE9OJykgJGVsWzBdLmRpc2FibGVkID0gZGlzYWJsZWQ7XG4gIH0sXG4gIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgIC8vIFVwZGF0ZSBOYXZpZ2F0aW9uIEJ1dHRvbnNcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uO1xuICAgIHZhciB0b2dnbGVFbCA9IHN3aXBlci5uYXZpZ2F0aW9uLnRvZ2dsZUVsO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHJldHVybjtcbiAgICB2YXIgX3N3aXBlciRuYXZpZ2F0aW9uID0gc3dpcGVyLm5hdmlnYXRpb24sXG4gICAgICAgICRuZXh0RWwgPSBfc3dpcGVyJG5hdmlnYXRpb24uJG5leHRFbCxcbiAgICAgICAgJHByZXZFbCA9IF9zd2lwZXIkbmF2aWdhdGlvbi4kcHJldkVsO1xuXG4gICAgaWYgKCRwcmV2RWwgJiYgJHByZXZFbC5sZW5ndGggPiAwKSB7XG4gICAgICBpZiAoc3dpcGVyLmlzQmVnaW5uaW5nKSB7XG4gICAgICAgIHRvZ2dsZUVsKCRwcmV2RWwsIHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdG9nZ2xlRWwoJHByZXZFbCwgZmFsc2UpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHN3aXBlci5lbmFibGVkKSB7XG4gICAgICAgICRwcmV2RWxbc3dpcGVyLmlzTG9ja2VkID8gJ2FkZENsYXNzJyA6ICdyZW1vdmVDbGFzcyddKHBhcmFtcy5sb2NrQ2xhc3MpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICgkbmV4dEVsICYmICRuZXh0RWwubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKHN3aXBlci5pc0VuZCkge1xuICAgICAgICB0b2dnbGVFbCgkbmV4dEVsLCB0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRvZ2dsZUVsKCRuZXh0RWwsIGZhbHNlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzd2lwZXIuZW5hYmxlZCkge1xuICAgICAgICAkbmV4dEVsW3N3aXBlci5pc0xvY2tlZCA/ICdhZGRDbGFzcycgOiAncmVtb3ZlQ2xhc3MnXShwYXJhbXMubG9ja0NsYXNzKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIG9uUHJldkNsaWNrOiBmdW5jdGlvbiBvblByZXZDbGljayhlKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGlmIChzd2lwZXIuaXNCZWdpbm5pbmcgJiYgIXN3aXBlci5wYXJhbXMubG9vcCkgcmV0dXJuO1xuICAgIHN3aXBlci5zbGlkZVByZXYoKTtcbiAgfSxcbiAgb25OZXh0Q2xpY2s6IGZ1bmN0aW9uIG9uTmV4dENsaWNrKGUpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgaWYgKHN3aXBlci5pc0VuZCAmJiAhc3dpcGVyLnBhcmFtcy5sb29wKSByZXR1cm47XG4gICAgc3dpcGVyLnNsaWRlTmV4dCgpO1xuICB9LFxuICBpbml0OiBmdW5jdGlvbiBpbml0KCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLm5hdmlnYXRpb247XG4gICAgc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uID0gY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZChzd2lwZXIuJGVsLCBzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24sIHN3aXBlci5wYXJhbXMuY3JlYXRlRWxlbWVudHMsIHtcbiAgICAgIG5leHRFbDogJ3N3aXBlci1idXR0b24tbmV4dCcsXG4gICAgICBwcmV2RWw6ICdzd2lwZXItYnV0dG9uLXByZXYnXG4gICAgfSk7XG4gICAgaWYgKCEocGFyYW1zLm5leHRFbCB8fCBwYXJhbXMucHJldkVsKSkgcmV0dXJuO1xuICAgIHZhciAkbmV4dEVsO1xuICAgIHZhciAkcHJldkVsO1xuXG4gICAgaWYgKHBhcmFtcy5uZXh0RWwpIHtcbiAgICAgICRuZXh0RWwgPSAkKHBhcmFtcy5uZXh0RWwpO1xuXG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy51bmlxdWVOYXZFbGVtZW50cyAmJiB0eXBlb2YgcGFyYW1zLm5leHRFbCA9PT0gJ3N0cmluZycgJiYgJG5leHRFbC5sZW5ndGggPiAxICYmIHN3aXBlci4kZWwuZmluZChwYXJhbXMubmV4dEVsKS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgJG5leHRFbCA9IHN3aXBlci4kZWwuZmluZChwYXJhbXMubmV4dEVsKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLnByZXZFbCkge1xuICAgICAgJHByZXZFbCA9ICQocGFyYW1zLnByZXZFbCk7XG5cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLnVuaXF1ZU5hdkVsZW1lbnRzICYmIHR5cGVvZiBwYXJhbXMucHJldkVsID09PSAnc3RyaW5nJyAmJiAkcHJldkVsLmxlbmd0aCA+IDEgJiYgc3dpcGVyLiRlbC5maW5kKHBhcmFtcy5wcmV2RWwpLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAkcHJldkVsID0gc3dpcGVyLiRlbC5maW5kKHBhcmFtcy5wcmV2RWwpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICgkbmV4dEVsICYmICRuZXh0RWwubGVuZ3RoID4gMCkge1xuICAgICAgJG5leHRFbC5vbignY2xpY2snLCBzd2lwZXIubmF2aWdhdGlvbi5vbk5leHRDbGljayk7XG4gICAgfVxuXG4gICAgaWYgKCRwcmV2RWwgJiYgJHByZXZFbC5sZW5ndGggPiAwKSB7XG4gICAgICAkcHJldkVsLm9uKCdjbGljaycsIHN3aXBlci5uYXZpZ2F0aW9uLm9uUHJldkNsaWNrKTtcbiAgICB9XG5cbiAgICBleHRlbmQoc3dpcGVyLm5hdmlnYXRpb24sIHtcbiAgICAgICRuZXh0RWw6ICRuZXh0RWwsXG4gICAgICBuZXh0RWw6ICRuZXh0RWwgJiYgJG5leHRFbFswXSxcbiAgICAgICRwcmV2RWw6ICRwcmV2RWwsXG4gICAgICBwcmV2RWw6ICRwcmV2RWwgJiYgJHByZXZFbFswXVxuICAgIH0pO1xuXG4gICAgaWYgKCFzd2lwZXIuZW5hYmxlZCkge1xuICAgICAgaWYgKCRuZXh0RWwpICRuZXh0RWwuYWRkQ2xhc3MocGFyYW1zLmxvY2tDbGFzcyk7XG4gICAgICBpZiAoJHByZXZFbCkgJHByZXZFbC5hZGRDbGFzcyhwYXJhbXMubG9ja0NsYXNzKTtcbiAgICB9XG4gIH0sXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIF9zd2lwZXIkbmF2aWdhdGlvbjIgPSBzd2lwZXIubmF2aWdhdGlvbixcbiAgICAgICAgJG5leHRFbCA9IF9zd2lwZXIkbmF2aWdhdGlvbjIuJG5leHRFbCxcbiAgICAgICAgJHByZXZFbCA9IF9zd2lwZXIkbmF2aWdhdGlvbjIuJHByZXZFbDtcblxuICAgIGlmICgkbmV4dEVsICYmICRuZXh0RWwubGVuZ3RoKSB7XG4gICAgICAkbmV4dEVsLm9mZignY2xpY2snLCBzd2lwZXIubmF2aWdhdGlvbi5vbk5leHRDbGljayk7XG4gICAgICAkbmV4dEVsLnJlbW92ZUNsYXNzKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5kaXNhYmxlZENsYXNzKTtcbiAgICB9XG5cbiAgICBpZiAoJHByZXZFbCAmJiAkcHJldkVsLmxlbmd0aCkge1xuICAgICAgJHByZXZFbC5vZmYoJ2NsaWNrJywgc3dpcGVyLm5hdmlnYXRpb24ub25QcmV2Q2xpY2spO1xuICAgICAgJHByZXZFbC5yZW1vdmVDbGFzcyhzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uZGlzYWJsZWRDbGFzcyk7XG4gICAgfVxuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnbmF2aWdhdGlvbicsXG4gIHBhcmFtczoge1xuICAgIG5hdmlnYXRpb246IHtcbiAgICAgIG5leHRFbDogbnVsbCxcbiAgICAgIHByZXZFbDogbnVsbCxcbiAgICAgIGhpZGVPbkNsaWNrOiBmYWxzZSxcbiAgICAgIGRpc2FibGVkQ2xhc3M6ICdzd2lwZXItYnV0dG9uLWRpc2FibGVkJyxcbiAgICAgIGhpZGRlbkNsYXNzOiAnc3dpcGVyLWJ1dHRvbi1oaWRkZW4nLFxuICAgICAgbG9ja0NsYXNzOiAnc3dpcGVyLWJ1dHRvbi1sb2NrJ1xuICAgIH1cbiAgfSxcbiAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgYmluZE1vZHVsZU1ldGhvZHMoc3dpcGVyLCB7XG4gICAgICBuYXZpZ2F0aW9uOiBfZXh0ZW5kcyh7fSwgTmF2aWdhdGlvbilcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBpbml0OiBmdW5jdGlvbiBpbml0KHN3aXBlcikge1xuICAgICAgc3dpcGVyLm5hdmlnYXRpb24uaW5pdCgpO1xuICAgICAgc3dpcGVyLm5hdmlnYXRpb24udXBkYXRlKCk7XG4gICAgfSxcbiAgICB0b0VkZ2U6IGZ1bmN0aW9uIHRvRWRnZShzd2lwZXIpIHtcbiAgICAgIHN3aXBlci5uYXZpZ2F0aW9uLnVwZGF0ZSgpO1xuICAgIH0sXG4gICAgZnJvbUVkZ2U6IGZ1bmN0aW9uIGZyb21FZGdlKHN3aXBlcikge1xuICAgICAgc3dpcGVyLm5hdmlnYXRpb24udXBkYXRlKCk7XG4gICAgfSxcbiAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KHN3aXBlcikge1xuICAgICAgc3dpcGVyLm5hdmlnYXRpb24uZGVzdHJveSgpO1xuICAgIH0sXG4gICAgJ2VuYWJsZSBkaXNhYmxlJzogZnVuY3Rpb24gZW5hYmxlRGlzYWJsZShzd2lwZXIpIHtcbiAgICAgIHZhciBfc3dpcGVyJG5hdmlnYXRpb24zID0gc3dpcGVyLm5hdmlnYXRpb24sXG4gICAgICAgICAgJG5leHRFbCA9IF9zd2lwZXIkbmF2aWdhdGlvbjMuJG5leHRFbCxcbiAgICAgICAgICAkcHJldkVsID0gX3N3aXBlciRuYXZpZ2F0aW9uMy4kcHJldkVsO1xuXG4gICAgICBpZiAoJG5leHRFbCkge1xuICAgICAgICAkbmV4dEVsW3N3aXBlci5lbmFibGVkID8gJ3JlbW92ZUNsYXNzJyA6ICdhZGRDbGFzcyddKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5sb2NrQ2xhc3MpO1xuICAgICAgfVxuXG4gICAgICBpZiAoJHByZXZFbCkge1xuICAgICAgICAkcHJldkVsW3N3aXBlci5lbmFibGVkID8gJ3JlbW92ZUNsYXNzJyA6ICdhZGRDbGFzcyddKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5sb2NrQ2xhc3MpO1xuICAgICAgfVxuICAgIH0sXG4gICAgY2xpY2s6IGZ1bmN0aW9uIGNsaWNrKHN3aXBlciwgZSkge1xuICAgICAgdmFyIF9zd2lwZXIkbmF2aWdhdGlvbjQgPSBzd2lwZXIubmF2aWdhdGlvbixcbiAgICAgICAgICAkbmV4dEVsID0gX3N3aXBlciRuYXZpZ2F0aW9uNC4kbmV4dEVsLFxuICAgICAgICAgICRwcmV2RWwgPSBfc3dpcGVyJG5hdmlnYXRpb240LiRwcmV2RWw7XG4gICAgICB2YXIgdGFyZ2V0RWwgPSBlLnRhcmdldDtcblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5oaWRlT25DbGljayAmJiAhJCh0YXJnZXRFbCkuaXMoJHByZXZFbCkgJiYgISQodGFyZ2V0RWwpLmlzKCRuZXh0RWwpKSB7XG4gICAgICAgIGlmIChzd2lwZXIucGFnaW5hdGlvbiAmJiBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24gJiYgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmNsaWNrYWJsZSAmJiAoc3dpcGVyLnBhZ2luYXRpb24uZWwgPT09IHRhcmdldEVsIHx8IHN3aXBlci5wYWdpbmF0aW9uLmVsLmNvbnRhaW5zKHRhcmdldEVsKSkpIHJldHVybjtcbiAgICAgICAgdmFyIGlzSGlkZGVuO1xuXG4gICAgICAgIGlmICgkbmV4dEVsKSB7XG4gICAgICAgICAgaXNIaWRkZW4gPSAkbmV4dEVsLmhhc0NsYXNzKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5oaWRkZW5DbGFzcyk7XG4gICAgICAgIH0gZWxzZSBpZiAoJHByZXZFbCkge1xuICAgICAgICAgIGlzSGlkZGVuID0gJHByZXZFbC5oYXNDbGFzcyhzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uaGlkZGVuQ2xhc3MpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzSGlkZGVuID09PSB0cnVlKSB7XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ25hdmlnYXRpb25TaG93Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ25hdmlnYXRpb25IaWRlJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoJG5leHRFbCkge1xuICAgICAgICAgICRuZXh0RWwudG9nZ2xlQ2xhc3Moc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmhpZGRlbkNsYXNzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgkcHJldkVsKSB7XG4gICAgICAgICAgJHByZXZFbC50b2dnbGVDbGFzcyhzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uaGlkZGVuQ2xhc3MpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvbmF2aWdhdGlvbi9uYXZpZ2F0aW9uLmpzIiwiZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuaW1wb3J0ICQgZnJvbSAnLi4vLi4vdXRpbHMvZG9tJztcbmltcG9ydCB7IGV4dGVuZCwgYmluZE1vZHVsZU1ldGhvZHMsIGNsYXNzZXNUb1NlbGVjdG9yLCBjcmVhdGVFbGVtZW50SWZOb3REZWZpbmVkIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xudmFyIFBhZ2luYXRpb24gPSB7XG4gIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgIC8vIFJlbmRlciB8fCBVcGRhdGUgUGFnaW5hdGlvbiBidWxsZXRzL2l0ZW1zXG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHJ0bCA9IHN3aXBlci5ydGw7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICBpZiAoIXBhcmFtcy5lbCB8fCAhc3dpcGVyLnBhZ2luYXRpb24uZWwgfHwgIXN3aXBlci5wYWdpbmF0aW9uLiRlbCB8fCBzd2lwZXIucGFnaW5hdGlvbi4kZWwubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgdmFyIHNsaWRlc0xlbmd0aCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IHN3aXBlci5zbGlkZXMubGVuZ3RoO1xuICAgIHZhciAkZWwgPSBzd2lwZXIucGFnaW5hdGlvbi4kZWw7IC8vIEN1cnJlbnQvVG90YWxcblxuICAgIHZhciBjdXJyZW50O1xuICAgIHZhciB0b3RhbCA9IHN3aXBlci5wYXJhbXMubG9vcCA/IE1hdGguY2VpbCgoc2xpZGVzTGVuZ3RoIC0gc3dpcGVyLmxvb3BlZFNsaWRlcyAqIDIpIC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCkgOiBzd2lwZXIuc25hcEdyaWQubGVuZ3RoO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgY3VycmVudCA9IE1hdGguY2VpbCgoc3dpcGVyLmFjdGl2ZUluZGV4IC0gc3dpcGVyLmxvb3BlZFNsaWRlcykgLyBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwKTtcblxuICAgICAgaWYgKGN1cnJlbnQgPiBzbGlkZXNMZW5ndGggLSAxIC0gc3dpcGVyLmxvb3BlZFNsaWRlcyAqIDIpIHtcbiAgICAgICAgY3VycmVudCAtPSBzbGlkZXNMZW5ndGggLSBzd2lwZXIubG9vcGVkU2xpZGVzICogMjtcbiAgICAgIH1cblxuICAgICAgaWYgKGN1cnJlbnQgPiB0b3RhbCAtIDEpIGN1cnJlbnQgLT0gdG90YWw7XG4gICAgICBpZiAoY3VycmVudCA8IDAgJiYgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uVHlwZSAhPT0gJ2J1bGxldHMnKSBjdXJyZW50ID0gdG90YWwgKyBjdXJyZW50O1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHN3aXBlci5zbmFwSW5kZXggIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjdXJyZW50ID0gc3dpcGVyLnNuYXBJbmRleDtcbiAgICB9IGVsc2Uge1xuICAgICAgY3VycmVudCA9IHN3aXBlci5hY3RpdmVJbmRleCB8fCAwO1xuICAgIH0gLy8gVHlwZXNcblxuXG4gICAgaWYgKHBhcmFtcy50eXBlID09PSAnYnVsbGV0cycgJiYgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cyAmJiBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzLmxlbmd0aCA+IDApIHtcbiAgICAgIHZhciBidWxsZXRzID0gc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cztcbiAgICAgIHZhciBmaXJzdEluZGV4O1xuICAgICAgdmFyIGxhc3RJbmRleDtcbiAgICAgIHZhciBtaWRJbmRleDtcblxuICAgICAgaWYgKHBhcmFtcy5keW5hbWljQnVsbGV0cykge1xuICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRTaXplID0gYnVsbGV0cy5lcSgwKVtzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnb3V0ZXJXaWR0aCcgOiAnb3V0ZXJIZWlnaHQnXSh0cnVlKTtcbiAgICAgICAgJGVsLmNzcyhzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnd2lkdGgnIDogJ2hlaWdodCcsIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldFNpemUgKiAocGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyArIDQpICsgXCJweFwiKTtcblxuICAgICAgICBpZiAocGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyA+IDEgJiYgc3dpcGVyLnByZXZpb3VzSW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLmR5bmFtaWNCdWxsZXRJbmRleCArPSBjdXJyZW50IC0gc3dpcGVyLnByZXZpb3VzSW5kZXg7XG5cbiAgICAgICAgICBpZiAoc3dpcGVyLnBhZ2luYXRpb24uZHluYW1pY0J1bGxldEluZGV4ID4gcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyAtIDEpIHtcbiAgICAgICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLmR5bmFtaWNCdWxsZXRJbmRleCA9IHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgLSAxO1xuICAgICAgICAgIH0gZWxzZSBpZiAoc3dpcGVyLnBhZ2luYXRpb24uZHluYW1pY0J1bGxldEluZGV4IDwgMCkge1xuICAgICAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24uZHluYW1pY0J1bGxldEluZGV4ID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmaXJzdEluZGV4ID0gY3VycmVudCAtIHN3aXBlci5wYWdpbmF0aW9uLmR5bmFtaWNCdWxsZXRJbmRleDtcbiAgICAgICAgbGFzdEluZGV4ID0gZmlyc3RJbmRleCArIChNYXRoLm1pbihidWxsZXRzLmxlbmd0aCwgcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cykgLSAxKTtcbiAgICAgICAgbWlkSW5kZXggPSAobGFzdEluZGV4ICsgZmlyc3RJbmRleCkgLyAyO1xuICAgICAgfVxuXG4gICAgICBidWxsZXRzLnJlbW92ZUNsYXNzKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyArIFwiIFwiICsgcGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzICsgXCItbmV4dCBcIiArIHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyArIFwiLW5leHQtbmV4dCBcIiArIHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyArIFwiLXByZXYgXCIgKyBwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MgKyBcIi1wcmV2LXByZXYgXCIgKyBwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MgKyBcIi1tYWluXCIpO1xuXG4gICAgICBpZiAoJGVsLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgYnVsbGV0cy5lYWNoKGZ1bmN0aW9uIChidWxsZXQpIHtcbiAgICAgICAgICB2YXIgJGJ1bGxldCA9ICQoYnVsbGV0KTtcbiAgICAgICAgICB2YXIgYnVsbGV0SW5kZXggPSAkYnVsbGV0LmluZGV4KCk7XG5cbiAgICAgICAgICBpZiAoYnVsbGV0SW5kZXggPT09IGN1cnJlbnQpIHtcbiAgICAgICAgICAgICRidWxsZXQuYWRkQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocGFyYW1zLmR5bmFtaWNCdWxsZXRzKSB7XG4gICAgICAgICAgICBpZiAoYnVsbGV0SW5kZXggPj0gZmlyc3RJbmRleCAmJiBidWxsZXRJbmRleCA8PSBsYXN0SW5kZXgpIHtcbiAgICAgICAgICAgICAgJGJ1bGxldC5hZGRDbGFzcyhwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MgKyBcIi1tYWluXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoYnVsbGV0SW5kZXggPT09IGZpcnN0SW5kZXgpIHtcbiAgICAgICAgICAgICAgJGJ1bGxldC5wcmV2KCkuYWRkQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzICsgXCItcHJldlwiKS5wcmV2KCkuYWRkQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzICsgXCItcHJldi1wcmV2XCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoYnVsbGV0SW5kZXggPT09IGxhc3RJbmRleCkge1xuICAgICAgICAgICAgICAkYnVsbGV0Lm5leHQoKS5hZGRDbGFzcyhwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MgKyBcIi1uZXh0XCIpLm5leHQoKS5hZGRDbGFzcyhwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MgKyBcIi1uZXh0LW5leHRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciAkYnVsbGV0ID0gYnVsbGV0cy5lcShjdXJyZW50KTtcbiAgICAgICAgdmFyIGJ1bGxldEluZGV4ID0gJGJ1bGxldC5pbmRleCgpO1xuICAgICAgICAkYnVsbGV0LmFkZENsYXNzKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyk7XG5cbiAgICAgICAgaWYgKHBhcmFtcy5keW5hbWljQnVsbGV0cykge1xuICAgICAgICAgIHZhciAkZmlyc3REaXNwbGF5ZWRCdWxsZXQgPSBidWxsZXRzLmVxKGZpcnN0SW5kZXgpO1xuICAgICAgICAgIHZhciAkbGFzdERpc3BsYXllZEJ1bGxldCA9IGJ1bGxldHMuZXEobGFzdEluZGV4KTtcblxuICAgICAgICAgIGZvciAodmFyIGkgPSBmaXJzdEluZGV4OyBpIDw9IGxhc3RJbmRleDsgaSArPSAxKSB7XG4gICAgICAgICAgICBidWxsZXRzLmVxKGkpLmFkZENsYXNzKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyArIFwiLW1haW5cIik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICAgICAgaWYgKGJ1bGxldEluZGV4ID49IGJ1bGxldHMubGVuZ3RoIC0gcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cykge1xuICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHM7IF9pID49IDA7IF9pIC09IDEpIHtcbiAgICAgICAgICAgICAgICBidWxsZXRzLmVxKGJ1bGxldHMubGVuZ3RoIC0gX2kpLmFkZENsYXNzKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyArIFwiLW1haW5cIik7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBidWxsZXRzLmVxKGJ1bGxldHMubGVuZ3RoIC0gcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyAtIDEpLmFkZENsYXNzKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyArIFwiLXByZXZcIik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAkZmlyc3REaXNwbGF5ZWRCdWxsZXQucHJldigpLmFkZENsYXNzKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyArIFwiLXByZXZcIikucHJldigpLmFkZENsYXNzKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyArIFwiLXByZXYtcHJldlwiKTtcbiAgICAgICAgICAgICAgJGxhc3REaXNwbGF5ZWRCdWxsZXQubmV4dCgpLmFkZENsYXNzKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyArIFwiLW5leHRcIikubmV4dCgpLmFkZENsYXNzKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyArIFwiLW5leHQtbmV4dFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJGZpcnN0RGlzcGxheWVkQnVsbGV0LnByZXYoKS5hZGRDbGFzcyhwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MgKyBcIi1wcmV2XCIpLnByZXYoKS5hZGRDbGFzcyhwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MgKyBcIi1wcmV2LXByZXZcIik7XG4gICAgICAgICAgICAkbGFzdERpc3BsYXllZEJ1bGxldC5uZXh0KCkuYWRkQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzICsgXCItbmV4dFwiKS5uZXh0KCkuYWRkQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzICsgXCItbmV4dC1uZXh0XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAocGFyYW1zLmR5bmFtaWNCdWxsZXRzKSB7XG4gICAgICAgIHZhciBkeW5hbWljQnVsbGV0c0xlbmd0aCA9IE1hdGgubWluKGJ1bGxldHMubGVuZ3RoLCBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzICsgNCk7XG4gICAgICAgIHZhciBidWxsZXRzT2Zmc2V0ID0gKHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldFNpemUgKiBkeW5hbWljQnVsbGV0c0xlbmd0aCAtIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldFNpemUpIC8gMiAtIG1pZEluZGV4ICogc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0U2l6ZTtcbiAgICAgICAgdmFyIG9mZnNldFByb3AgPSBydGwgPyAncmlnaHQnIDogJ2xlZnQnO1xuICAgICAgICBidWxsZXRzLmNzcyhzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBvZmZzZXRQcm9wIDogJ3RvcCcsIGJ1bGxldHNPZmZzZXQgKyBcInB4XCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2ZyYWN0aW9uJykge1xuICAgICAgJGVsLmZpbmQoY2xhc3Nlc1RvU2VsZWN0b3IocGFyYW1zLmN1cnJlbnRDbGFzcykpLnRleHQocGFyYW1zLmZvcm1hdEZyYWN0aW9uQ3VycmVudChjdXJyZW50ICsgMSkpO1xuICAgICAgJGVsLmZpbmQoY2xhc3Nlc1RvU2VsZWN0b3IocGFyYW1zLnRvdGFsQ2xhc3MpKS50ZXh0KHBhcmFtcy5mb3JtYXRGcmFjdGlvblRvdGFsKHRvdGFsKSk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy50eXBlID09PSAncHJvZ3Jlc3NiYXInKSB7XG4gICAgICB2YXIgcHJvZ3Jlc3NiYXJEaXJlY3Rpb247XG5cbiAgICAgIGlmIChwYXJhbXMucHJvZ3Jlc3NiYXJPcHBvc2l0ZSkge1xuICAgICAgICBwcm9ncmVzc2JhckRpcmVjdGlvbiA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9ncmVzc2JhckRpcmVjdGlvbiA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/ICdob3Jpem9udGFsJyA6ICd2ZXJ0aWNhbCc7XG4gICAgICB9XG5cbiAgICAgIHZhciBzY2FsZSA9IChjdXJyZW50ICsgMSkgLyB0b3RhbDtcbiAgICAgIHZhciBzY2FsZVggPSAxO1xuICAgICAgdmFyIHNjYWxlWSA9IDE7XG5cbiAgICAgIGlmIChwcm9ncmVzc2JhckRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICAgIHNjYWxlWCA9IHNjYWxlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2NhbGVZID0gc2NhbGU7XG4gICAgICB9XG5cbiAgICAgICRlbC5maW5kKGNsYXNzZXNUb1NlbGVjdG9yKHBhcmFtcy5wcm9ncmVzc2JhckZpbGxDbGFzcykpLnRyYW5zZm9ybShcInRyYW5zbGF0ZTNkKDAsMCwwKSBzY2FsZVgoXCIgKyBzY2FsZVggKyBcIikgc2NhbGVZKFwiICsgc2NhbGVZICsgXCIpXCIpLnRyYW5zaXRpb24oc3dpcGVyLnBhcmFtcy5zcGVlZCk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy50eXBlID09PSAnY3VzdG9tJyAmJiBwYXJhbXMucmVuZGVyQ3VzdG9tKSB7XG4gICAgICAkZWwuaHRtbChwYXJhbXMucmVuZGVyQ3VzdG9tKHN3aXBlciwgY3VycmVudCArIDEsIHRvdGFsKSk7XG4gICAgICBzd2lwZXIuZW1pdCgncGFnaW5hdGlvblJlbmRlcicsICRlbFswXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5lbWl0KCdwYWdpbmF0aW9uVXBkYXRlJywgJGVsWzBdKTtcbiAgICB9XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHN3aXBlci5lbmFibGVkKSB7XG4gICAgICAkZWxbc3dpcGVyLmlzTG9ja2VkID8gJ2FkZENsYXNzJyA6ICdyZW1vdmVDbGFzcyddKHBhcmFtcy5sb2NrQ2xhc3MpO1xuICAgIH1cbiAgfSxcbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgLy8gUmVuZGVyIENvbnRhaW5lclxuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb247XG4gICAgaWYgKCFwYXJhbXMuZWwgfHwgIXN3aXBlci5wYWdpbmF0aW9uLmVsIHx8ICFzd2lwZXIucGFnaW5hdGlvbi4kZWwgfHwgc3dpcGVyLnBhZ2luYXRpb24uJGVsLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIHZhciBzbGlkZXNMZW5ndGggPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCA/IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggOiBzd2lwZXIuc2xpZGVzLmxlbmd0aDtcbiAgICB2YXIgJGVsID0gc3dpcGVyLnBhZ2luYXRpb24uJGVsO1xuICAgIHZhciBwYWdpbmF0aW9uSFRNTCA9ICcnO1xuXG4gICAgaWYgKHBhcmFtcy50eXBlID09PSAnYnVsbGV0cycpIHtcbiAgICAgIHZhciBudW1iZXJPZkJ1bGxldHMgPSBzd2lwZXIucGFyYW1zLmxvb3AgPyBNYXRoLmNlaWwoKHNsaWRlc0xlbmd0aCAtIHN3aXBlci5sb29wZWRTbGlkZXMgKiAyKSAvIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXApIDogc3dpcGVyLnNuYXBHcmlkLmxlbmd0aDtcblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZnJlZU1vZGUgJiYgIXN3aXBlci5wYXJhbXMubG9vcCAmJiBudW1iZXJPZkJ1bGxldHMgPiBzbGlkZXNMZW5ndGgpIHtcbiAgICAgICAgbnVtYmVyT2ZCdWxsZXRzID0gc2xpZGVzTGVuZ3RoO1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bWJlck9mQnVsbGV0czsgaSArPSAxKSB7XG4gICAgICAgIGlmIChwYXJhbXMucmVuZGVyQnVsbGV0KSB7XG4gICAgICAgICAgcGFnaW5hdGlvbkhUTUwgKz0gcGFyYW1zLnJlbmRlckJ1bGxldC5jYWxsKHN3aXBlciwgaSwgcGFyYW1zLmJ1bGxldENsYXNzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYWdpbmF0aW9uSFRNTCArPSBcIjxcIiArIHBhcmFtcy5idWxsZXRFbGVtZW50ICsgXCIgY2xhc3M9XFxcIlwiICsgcGFyYW1zLmJ1bGxldENsYXNzICsgXCJcXFwiPjwvXCIgKyBwYXJhbXMuYnVsbGV0RWxlbWVudCArIFwiPlwiO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgICRlbC5odG1sKHBhZ2luYXRpb25IVE1MKTtcbiAgICAgIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMgPSAkZWwuZmluZChjbGFzc2VzVG9TZWxlY3RvcihwYXJhbXMuYnVsbGV0Q2xhc3MpKTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdmcmFjdGlvbicpIHtcbiAgICAgIGlmIChwYXJhbXMucmVuZGVyRnJhY3Rpb24pIHtcbiAgICAgICAgcGFnaW5hdGlvbkhUTUwgPSBwYXJhbXMucmVuZGVyRnJhY3Rpb24uY2FsbChzd2lwZXIsIHBhcmFtcy5jdXJyZW50Q2xhc3MsIHBhcmFtcy50b3RhbENsYXNzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhZ2luYXRpb25IVE1MID0gXCI8c3BhbiBjbGFzcz1cXFwiXCIgKyBwYXJhbXMuY3VycmVudENsYXNzICsgXCJcXFwiPjwvc3Bhbj5cIiArICcgLyAnICsgKFwiPHNwYW4gY2xhc3M9XFxcIlwiICsgcGFyYW1zLnRvdGFsQ2xhc3MgKyBcIlxcXCI+PC9zcGFuPlwiKTtcbiAgICAgIH1cblxuICAgICAgJGVsLmh0bWwocGFnaW5hdGlvbkhUTUwpO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ3Byb2dyZXNzYmFyJykge1xuICAgICAgaWYgKHBhcmFtcy5yZW5kZXJQcm9ncmVzc2Jhcikge1xuICAgICAgICBwYWdpbmF0aW9uSFRNTCA9IHBhcmFtcy5yZW5kZXJQcm9ncmVzc2Jhci5jYWxsKHN3aXBlciwgcGFyYW1zLnByb2dyZXNzYmFyRmlsbENsYXNzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhZ2luYXRpb25IVE1MID0gXCI8c3BhbiBjbGFzcz1cXFwiXCIgKyBwYXJhbXMucHJvZ3Jlc3NiYXJGaWxsQ2xhc3MgKyBcIlxcXCI+PC9zcGFuPlwiO1xuICAgICAgfVxuXG4gICAgICAkZWwuaHRtbChwYWdpbmF0aW9uSFRNTCk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy50eXBlICE9PSAnY3VzdG9tJykge1xuICAgICAgc3dpcGVyLmVtaXQoJ3BhZ2luYXRpb25SZW5kZXInLCBzd2lwZXIucGFnaW5hdGlvbi4kZWxbMF0pO1xuICAgIH1cbiAgfSxcbiAgaW5pdDogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24gPSBjcmVhdGVFbGVtZW50SWZOb3REZWZpbmVkKHN3aXBlci4kZWwsIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbiwgc3dpcGVyLnBhcmFtcy5jcmVhdGVFbGVtZW50cywge1xuICAgICAgZWw6ICdzd2lwZXItcGFnaW5hdGlvbidcbiAgICB9KTtcbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uO1xuICAgIGlmICghcGFyYW1zLmVsKSByZXR1cm47XG4gICAgdmFyICRlbCA9ICQocGFyYW1zLmVsKTtcbiAgICBpZiAoJGVsLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMudW5pcXVlTmF2RWxlbWVudHMgJiYgdHlwZW9mIHBhcmFtcy5lbCA9PT0gJ3N0cmluZycgJiYgJGVsLmxlbmd0aCA+IDEpIHtcbiAgICAgICRlbCA9IHN3aXBlci4kZWwuZmluZChwYXJhbXMuZWwpO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2J1bGxldHMnICYmIHBhcmFtcy5jbGlja2FibGUpIHtcbiAgICAgICRlbC5hZGRDbGFzcyhwYXJhbXMuY2xpY2thYmxlQ2xhc3MpO1xuICAgIH1cblxuICAgICRlbC5hZGRDbGFzcyhwYXJhbXMubW9kaWZpZXJDbGFzcyArIHBhcmFtcy50eXBlKTtcblxuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2J1bGxldHMnICYmIHBhcmFtcy5keW5hbWljQnVsbGV0cykge1xuICAgICAgJGVsLmFkZENsYXNzKFwiXCIgKyBwYXJhbXMubW9kaWZpZXJDbGFzcyArIHBhcmFtcy50eXBlICsgXCItZHluYW1pY1wiKTtcbiAgICAgIHN3aXBlci5wYWdpbmF0aW9uLmR5bmFtaWNCdWxsZXRJbmRleCA9IDA7XG5cbiAgICAgIGlmIChwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzIDwgMSkge1xuICAgICAgICBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzID0gMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdwcm9ncmVzc2JhcicgJiYgcGFyYW1zLnByb2dyZXNzYmFyT3Bwb3NpdGUpIHtcbiAgICAgICRlbC5hZGRDbGFzcyhwYXJhbXMucHJvZ3Jlc3NiYXJPcHBvc2l0ZUNsYXNzKTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLmNsaWNrYWJsZSkge1xuICAgICAgJGVsLm9uKCdjbGljaycsIGNsYXNzZXNUb1NlbGVjdG9yKHBhcmFtcy5idWxsZXRDbGFzcyksIGZ1bmN0aW9uIG9uQ2xpY2soZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHZhciBpbmRleCA9ICQodGhpcykuaW5kZXgoKSAqIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIGluZGV4ICs9IHN3aXBlci5sb29wZWRTbGlkZXM7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKGluZGV4KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGV4dGVuZChzd2lwZXIucGFnaW5hdGlvbiwge1xuICAgICAgJGVsOiAkZWwsXG4gICAgICBlbDogJGVsWzBdXG4gICAgfSk7XG5cbiAgICBpZiAoIXN3aXBlci5lbmFibGVkKSB7XG4gICAgICAkZWwuYWRkQ2xhc3MocGFyYW1zLmxvY2tDbGFzcyk7XG4gICAgfVxuICB9LFxuICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb247XG4gICAgaWYgKCFwYXJhbXMuZWwgfHwgIXN3aXBlci5wYWdpbmF0aW9uLmVsIHx8ICFzd2lwZXIucGFnaW5hdGlvbi4kZWwgfHwgc3dpcGVyLnBhZ2luYXRpb24uJGVsLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIHZhciAkZWwgPSBzd2lwZXIucGFnaW5hdGlvbi4kZWw7XG4gICAgJGVsLnJlbW92ZUNsYXNzKHBhcmFtcy5oaWRkZW5DbGFzcyk7XG4gICAgJGVsLnJlbW92ZUNsYXNzKHBhcmFtcy5tb2RpZmllckNsYXNzICsgcGFyYW1zLnR5cGUpO1xuICAgIGlmIChzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzKSBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzLnJlbW92ZUNsYXNzKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyk7XG5cbiAgICBpZiAocGFyYW1zLmNsaWNrYWJsZSkge1xuICAgICAgJGVsLm9mZignY2xpY2snLCBjbGFzc2VzVG9TZWxlY3RvcihwYXJhbXMuYnVsbGV0Q2xhc3MpKTtcbiAgICB9XG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdwYWdpbmF0aW9uJyxcbiAgcGFyYW1zOiB7XG4gICAgcGFnaW5hdGlvbjoge1xuICAgICAgZWw6IG51bGwsXG4gICAgICBidWxsZXRFbGVtZW50OiAnc3BhbicsXG4gICAgICBjbGlja2FibGU6IGZhbHNlLFxuICAgICAgaGlkZU9uQ2xpY2s6IGZhbHNlLFxuICAgICAgcmVuZGVyQnVsbGV0OiBudWxsLFxuICAgICAgcmVuZGVyUHJvZ3Jlc3NiYXI6IG51bGwsXG4gICAgICByZW5kZXJGcmFjdGlvbjogbnVsbCxcbiAgICAgIHJlbmRlckN1c3RvbTogbnVsbCxcbiAgICAgIHByb2dyZXNzYmFyT3Bwb3NpdGU6IGZhbHNlLFxuICAgICAgdHlwZTogJ2J1bGxldHMnLFxuICAgICAgLy8gJ2J1bGxldHMnIG9yICdwcm9ncmVzc2Jhcicgb3IgJ2ZyYWN0aW9uJyBvciAnY3VzdG9tJ1xuICAgICAgZHluYW1pY0J1bGxldHM6IGZhbHNlLFxuICAgICAgZHluYW1pY01haW5CdWxsZXRzOiAxLFxuICAgICAgZm9ybWF0RnJhY3Rpb25DdXJyZW50OiBmdW5jdGlvbiBmb3JtYXRGcmFjdGlvbkN1cnJlbnQobnVtYmVyKSB7XG4gICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICB9LFxuICAgICAgZm9ybWF0RnJhY3Rpb25Ub3RhbDogZnVuY3Rpb24gZm9ybWF0RnJhY3Rpb25Ub3RhbChudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgIH0sXG4gICAgICBidWxsZXRDbGFzczogJ3N3aXBlci1wYWdpbmF0aW9uLWJ1bGxldCcsXG4gICAgICBidWxsZXRBY3RpdmVDbGFzczogJ3N3aXBlci1wYWdpbmF0aW9uLWJ1bGxldC1hY3RpdmUnLFxuICAgICAgbW9kaWZpZXJDbGFzczogJ3N3aXBlci1wYWdpbmF0aW9uLScsXG4gICAgICAvLyBORVdcbiAgICAgIGN1cnJlbnRDbGFzczogJ3N3aXBlci1wYWdpbmF0aW9uLWN1cnJlbnQnLFxuICAgICAgdG90YWxDbGFzczogJ3N3aXBlci1wYWdpbmF0aW9uLXRvdGFsJyxcbiAgICAgIGhpZGRlbkNsYXNzOiAnc3dpcGVyLXBhZ2luYXRpb24taGlkZGVuJyxcbiAgICAgIHByb2dyZXNzYmFyRmlsbENsYXNzOiAnc3dpcGVyLXBhZ2luYXRpb24tcHJvZ3Jlc3NiYXItZmlsbCcsXG4gICAgICBwcm9ncmVzc2Jhck9wcG9zaXRlQ2xhc3M6ICdzd2lwZXItcGFnaW5hdGlvbi1wcm9ncmVzc2Jhci1vcHBvc2l0ZScsXG4gICAgICBjbGlja2FibGVDbGFzczogJ3N3aXBlci1wYWdpbmF0aW9uLWNsaWNrYWJsZScsXG4gICAgICAvLyBORVdcbiAgICAgIGxvY2tDbGFzczogJ3N3aXBlci1wYWdpbmF0aW9uLWxvY2snXG4gICAgfVxuICB9LFxuICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBiaW5kTW9kdWxlTWV0aG9kcyhzd2lwZXIsIHtcbiAgICAgIHBhZ2luYXRpb246IF9leHRlbmRzKHtcbiAgICAgICAgZHluYW1pY0J1bGxldEluZGV4OiAwXG4gICAgICB9LCBQYWdpbmF0aW9uKVxuICAgIH0pO1xuICB9LFxuICBvbjoge1xuICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoc3dpcGVyKSB7XG4gICAgICBzd2lwZXIucGFnaW5hdGlvbi5pbml0KCk7XG4gICAgICBzd2lwZXIucGFnaW5hdGlvbi5yZW5kZXIoKTtcbiAgICAgIHN3aXBlci5wYWdpbmF0aW9uLnVwZGF0ZSgpO1xuICAgIH0sXG4gICAgYWN0aXZlSW5kZXhDaGFuZ2U6IGZ1bmN0aW9uIGFjdGl2ZUluZGV4Q2hhbmdlKHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi51cGRhdGUoKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHN3aXBlci5zbmFwSW5kZXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLnVwZGF0ZSgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgc25hcEluZGV4Q2hhbmdlOiBmdW5jdGlvbiBzbmFwSW5kZXhDaGFuZ2Uoc3dpcGVyKSB7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi51cGRhdGUoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNsaWRlc0xlbmd0aENoYW5nZTogZnVuY3Rpb24gc2xpZGVzTGVuZ3RoQ2hhbmdlKHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi5yZW5kZXIoKTtcbiAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24udXBkYXRlKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBzbmFwR3JpZExlbmd0aENoYW5nZTogZnVuY3Rpb24gc25hcEdyaWRMZW5ndGhDaGFuZ2Uoc3dpcGVyKSB7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi5yZW5kZXIoKTtcbiAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24udXBkYXRlKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KHN3aXBlcikge1xuICAgICAgc3dpcGVyLnBhZ2luYXRpb24uZGVzdHJveSgpO1xuICAgIH0sXG4gICAgJ2VuYWJsZSBkaXNhYmxlJzogZnVuY3Rpb24gZW5hYmxlRGlzYWJsZShzd2lwZXIpIHtcbiAgICAgIHZhciAkZWwgPSBzd2lwZXIucGFnaW5hdGlvbi4kZWw7XG5cbiAgICAgIGlmICgkZWwpIHtcbiAgICAgICAgJGVsW3N3aXBlci5lbmFibGVkID8gJ3JlbW92ZUNsYXNzJyA6ICdhZGRDbGFzcyddKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5sb2NrQ2xhc3MpO1xuICAgICAgfVxuICAgIH0sXG4gICAgY2xpY2s6IGZ1bmN0aW9uIGNsaWNrKHN3aXBlciwgZSkge1xuICAgICAgdmFyIHRhcmdldEVsID0gZS50YXJnZXQ7XG5cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uZWwgJiYgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmhpZGVPbkNsaWNrICYmIHN3aXBlci5wYWdpbmF0aW9uLiRlbC5sZW5ndGggPiAwICYmICEkKHRhcmdldEVsKS5oYXNDbGFzcyhzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uYnVsbGV0Q2xhc3MpKSB7XG4gICAgICAgIGlmIChzd2lwZXIubmF2aWdhdGlvbiAmJiAoc3dpcGVyLm5hdmlnYXRpb24ubmV4dEVsICYmIHRhcmdldEVsID09PSBzd2lwZXIubmF2aWdhdGlvbi5uZXh0RWwgfHwgc3dpcGVyLm5hdmlnYXRpb24ucHJldkVsICYmIHRhcmdldEVsID09PSBzd2lwZXIubmF2aWdhdGlvbi5wcmV2RWwpKSByZXR1cm47XG4gICAgICAgIHZhciBpc0hpZGRlbiA9IHN3aXBlci5wYWdpbmF0aW9uLiRlbC5oYXNDbGFzcyhzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uaGlkZGVuQ2xhc3MpO1xuXG4gICAgICAgIGlmIChpc0hpZGRlbiA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHN3aXBlci5lbWl0KCdwYWdpbmF0aW9uU2hvdycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN3aXBlci5lbWl0KCdwYWdpbmF0aW9uSGlkZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24uJGVsLnRvZ2dsZUNsYXNzKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5oaWRkZW5DbGFzcyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvcGFnaW5hdGlvbi9wYWdpbmF0aW9uLmpzIiwiZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuaW1wb3J0IHsgZ2V0RG9jdW1lbnQgfSBmcm9tICdzc3Itd2luZG93JztcbmltcG9ydCAkIGZyb20gJy4uLy4uL3V0aWxzL2RvbSc7XG5pbXBvcnQgeyBleHRlbmQsIG5leHRUaWNrLCBiaW5kTW9kdWxlTWV0aG9kcywgY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZCB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcbnZhciBTY3JvbGxiYXIgPSB7XG4gIHNldFRyYW5zbGF0ZTogZnVuY3Rpb24gc2V0VHJhbnNsYXRlKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZWwgfHwgIXN3aXBlci5zY3JvbGxiYXIuZWwpIHJldHVybjtcbiAgICB2YXIgc2Nyb2xsYmFyID0gc3dpcGVyLnNjcm9sbGJhcixcbiAgICAgICAgcnRsID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSxcbiAgICAgICAgcHJvZ3Jlc3MgPSBzd2lwZXIucHJvZ3Jlc3M7XG4gICAgdmFyIGRyYWdTaXplID0gc2Nyb2xsYmFyLmRyYWdTaXplLFxuICAgICAgICB0cmFja1NpemUgPSBzY3JvbGxiYXIudHJhY2tTaXplLFxuICAgICAgICAkZHJhZ0VsID0gc2Nyb2xsYmFyLiRkcmFnRWwsXG4gICAgICAgICRlbCA9IHNjcm9sbGJhci4kZWw7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyO1xuICAgIHZhciBuZXdTaXplID0gZHJhZ1NpemU7XG4gICAgdmFyIG5ld1BvcyA9ICh0cmFja1NpemUgLSBkcmFnU2l6ZSkgKiBwcm9ncmVzcztcblxuICAgIGlmIChydGwpIHtcbiAgICAgIG5ld1BvcyA9IC1uZXdQb3M7XG5cbiAgICAgIGlmIChuZXdQb3MgPiAwKSB7XG4gICAgICAgIG5ld1NpemUgPSBkcmFnU2l6ZSAtIG5ld1BvcztcbiAgICAgICAgbmV3UG9zID0gMDtcbiAgICAgIH0gZWxzZSBpZiAoLW5ld1BvcyArIGRyYWdTaXplID4gdHJhY2tTaXplKSB7XG4gICAgICAgIG5ld1NpemUgPSB0cmFja1NpemUgKyBuZXdQb3M7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChuZXdQb3MgPCAwKSB7XG4gICAgICBuZXdTaXplID0gZHJhZ1NpemUgKyBuZXdQb3M7XG4gICAgICBuZXdQb3MgPSAwO1xuICAgIH0gZWxzZSBpZiAobmV3UG9zICsgZHJhZ1NpemUgPiB0cmFja1NpemUpIHtcbiAgICAgIG5ld1NpemUgPSB0cmFja1NpemUgLSBuZXdQb3M7XG4gICAgfVxuXG4gICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgJGRyYWdFbC50cmFuc2Zvcm0oXCJ0cmFuc2xhdGUzZChcIiArIG5ld1BvcyArIFwicHgsIDAsIDApXCIpO1xuICAgICAgJGRyYWdFbFswXS5zdHlsZS53aWR0aCA9IG5ld1NpemUgKyBcInB4XCI7XG4gICAgfSBlbHNlIHtcbiAgICAgICRkcmFnRWwudHJhbnNmb3JtKFwidHJhbnNsYXRlM2QoMHB4LCBcIiArIG5ld1BvcyArIFwicHgsIDApXCIpO1xuICAgICAgJGRyYWdFbFswXS5zdHlsZS5oZWlnaHQgPSBuZXdTaXplICsgXCJweFwiO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXMuaGlkZSkge1xuICAgICAgY2xlYXJUaW1lb3V0KHN3aXBlci5zY3JvbGxiYXIudGltZW91dCk7XG4gICAgICAkZWxbMF0uc3R5bGUub3BhY2l0eSA9IDE7XG4gICAgICBzd2lwZXIuc2Nyb2xsYmFyLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJGVsWzBdLnN0eWxlLm9wYWNpdHkgPSAwO1xuICAgICAgICAkZWwudHJhbnNpdGlvbig0MDApO1xuICAgICAgfSwgMTAwMCk7XG4gICAgfVxuICB9LFxuICBzZXRUcmFuc2l0aW9uOiBmdW5jdGlvbiBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5lbCB8fCAhc3dpcGVyLnNjcm9sbGJhci5lbCkgcmV0dXJuO1xuICAgIHN3aXBlci5zY3JvbGxiYXIuJGRyYWdFbC50cmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgfSxcbiAgdXBkYXRlU2l6ZTogZnVuY3Rpb24gdXBkYXRlU2l6ZSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmVsIHx8ICFzd2lwZXIuc2Nyb2xsYmFyLmVsKSByZXR1cm47XG4gICAgdmFyIHNjcm9sbGJhciA9IHN3aXBlci5zY3JvbGxiYXI7XG4gICAgdmFyICRkcmFnRWwgPSBzY3JvbGxiYXIuJGRyYWdFbCxcbiAgICAgICAgJGVsID0gc2Nyb2xsYmFyLiRlbDtcbiAgICAkZHJhZ0VsWzBdLnN0eWxlLndpZHRoID0gJyc7XG4gICAgJGRyYWdFbFswXS5zdHlsZS5oZWlnaHQgPSAnJztcbiAgICB2YXIgdHJhY2tTaXplID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJGVsWzBdLm9mZnNldFdpZHRoIDogJGVsWzBdLm9mZnNldEhlaWdodDtcbiAgICB2YXIgZGl2aWRlciA9IHN3aXBlci5zaXplIC8gc3dpcGVyLnZpcnR1YWxTaXplO1xuICAgIHZhciBtb3ZlRGl2aWRlciA9IGRpdmlkZXIgKiAodHJhY2tTaXplIC8gc3dpcGVyLnNpemUpO1xuICAgIHZhciBkcmFnU2l6ZTtcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5kcmFnU2l6ZSA9PT0gJ2F1dG8nKSB7XG4gICAgICBkcmFnU2l6ZSA9IHRyYWNrU2l6ZSAqIGRpdmlkZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRyYWdTaXplID0gcGFyc2VJbnQoc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZHJhZ1NpemUsIDEwKTtcbiAgICB9XG5cbiAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAkZHJhZ0VsWzBdLnN0eWxlLndpZHRoID0gZHJhZ1NpemUgKyBcInB4XCI7XG4gICAgfSBlbHNlIHtcbiAgICAgICRkcmFnRWxbMF0uc3R5bGUuaGVpZ2h0ID0gZHJhZ1NpemUgKyBcInB4XCI7XG4gICAgfVxuXG4gICAgaWYgKGRpdmlkZXIgPj0gMSkge1xuICAgICAgJGVsWzBdLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgfSBlbHNlIHtcbiAgICAgICRlbFswXS5zdHlsZS5kaXNwbGF5ID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmhpZGUpIHtcbiAgICAgICRlbFswXS5zdHlsZS5vcGFjaXR5ID0gMDtcbiAgICB9XG5cbiAgICBleHRlbmQoc2Nyb2xsYmFyLCB7XG4gICAgICB0cmFja1NpemU6IHRyYWNrU2l6ZSxcbiAgICAgIGRpdmlkZXI6IGRpdmlkZXIsXG4gICAgICBtb3ZlRGl2aWRlcjogbW92ZURpdmlkZXIsXG4gICAgICBkcmFnU2l6ZTogZHJhZ1NpemVcbiAgICB9KTtcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc3dpcGVyLmVuYWJsZWQpIHtcbiAgICAgIHNjcm9sbGJhci4kZWxbc3dpcGVyLmlzTG9ja2VkID8gJ2FkZENsYXNzJyA6ICdyZW1vdmVDbGFzcyddKHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmxvY2tDbGFzcyk7XG4gICAgfVxuICB9LFxuICBnZXRQb2ludGVyUG9zaXRpb246IGZ1bmN0aW9uIGdldFBvaW50ZXJQb3NpdGlvbihlKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG5cbiAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICByZXR1cm4gZS50eXBlID09PSAndG91Y2hzdGFydCcgfHwgZS50eXBlID09PSAndG91Y2htb3ZlJyA/IGUudGFyZ2V0VG91Y2hlc1swXS5jbGllbnRYIDogZS5jbGllbnRYO1xuICAgIH1cblxuICAgIHJldHVybiBlLnR5cGUgPT09ICd0b3VjaHN0YXJ0JyB8fCBlLnR5cGUgPT09ICd0b3VjaG1vdmUnID8gZS50YXJnZXRUb3VjaGVzWzBdLmNsaWVudFkgOiBlLmNsaWVudFk7XG4gIH0sXG4gIHNldERyYWdQb3NpdGlvbjogZnVuY3Rpb24gc2V0RHJhZ1Bvc2l0aW9uKGUpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgc2Nyb2xsYmFyID0gc3dpcGVyLnNjcm9sbGJhcixcbiAgICAgICAgcnRsID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZTtcbiAgICB2YXIgJGVsID0gc2Nyb2xsYmFyLiRlbCxcbiAgICAgICAgZHJhZ1NpemUgPSBzY3JvbGxiYXIuZHJhZ1NpemUsXG4gICAgICAgIHRyYWNrU2l6ZSA9IHNjcm9sbGJhci50cmFja1NpemUsXG4gICAgICAgIGRyYWdTdGFydFBvcyA9IHNjcm9sbGJhci5kcmFnU3RhcnRQb3M7XG4gICAgdmFyIHBvc2l0aW9uUmF0aW87XG4gICAgcG9zaXRpb25SYXRpbyA9IChzY3JvbGxiYXIuZ2V0UG9pbnRlclBvc2l0aW9uKGUpIC0gJGVsLm9mZnNldCgpW3N3aXBlci5pc0hvcml6b250YWwoKSA/ICdsZWZ0JyA6ICd0b3AnXSAtIChkcmFnU3RhcnRQb3MgIT09IG51bGwgPyBkcmFnU3RhcnRQb3MgOiBkcmFnU2l6ZSAvIDIpKSAvICh0cmFja1NpemUgLSBkcmFnU2l6ZSk7XG4gICAgcG9zaXRpb25SYXRpbyA9IE1hdGgubWF4KE1hdGgubWluKHBvc2l0aW9uUmF0aW8sIDEpLCAwKTtcblxuICAgIGlmIChydGwpIHtcbiAgICAgIHBvc2l0aW9uUmF0aW8gPSAxIC0gcG9zaXRpb25SYXRpbztcbiAgICB9XG5cbiAgICB2YXIgcG9zaXRpb24gPSBzd2lwZXIubWluVHJhbnNsYXRlKCkgKyAoc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSAqIHBvc2l0aW9uUmF0aW87XG4gICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKHBvc2l0aW9uKTtcbiAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKHBvc2l0aW9uKTtcbiAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICB9LFxuICBvbkRyYWdTdGFydDogZnVuY3Rpb24gb25EcmFnU3RhcnQoZSkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnNjcm9sbGJhcjtcbiAgICB2YXIgc2Nyb2xsYmFyID0gc3dpcGVyLnNjcm9sbGJhcixcbiAgICAgICAgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsO1xuICAgIHZhciAkZWwgPSBzY3JvbGxiYXIuJGVsLFxuICAgICAgICAkZHJhZ0VsID0gc2Nyb2xsYmFyLiRkcmFnRWw7XG4gICAgc3dpcGVyLnNjcm9sbGJhci5pc1RvdWNoZWQgPSB0cnVlO1xuICAgIHN3aXBlci5zY3JvbGxiYXIuZHJhZ1N0YXJ0UG9zID0gZS50YXJnZXQgPT09ICRkcmFnRWxbMF0gfHwgZS50YXJnZXQgPT09ICRkcmFnRWwgPyBzY3JvbGxiYXIuZ2V0UG9pbnRlclBvc2l0aW9uKGUpIC0gZS50YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ2xlZnQnIDogJ3RvcCddIDogbnVsbDtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAkd3JhcHBlckVsLnRyYW5zaXRpb24oMTAwKTtcbiAgICAkZHJhZ0VsLnRyYW5zaXRpb24oMTAwKTtcbiAgICBzY3JvbGxiYXIuc2V0RHJhZ1Bvc2l0aW9uKGUpO1xuICAgIGNsZWFyVGltZW91dChzd2lwZXIuc2Nyb2xsYmFyLmRyYWdUaW1lb3V0KTtcbiAgICAkZWwudHJhbnNpdGlvbigwKTtcblxuICAgIGlmIChwYXJhbXMuaGlkZSkge1xuICAgICAgJGVsLmNzcygnb3BhY2l0eScsIDEpO1xuICAgIH1cblxuICAgIGlmIChzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsLmNzcygnc2Nyb2xsLXNuYXAtdHlwZScsICdub25lJyk7XG4gICAgfVxuXG4gICAgc3dpcGVyLmVtaXQoJ3Njcm9sbGJhckRyYWdTdGFydCcsIGUpO1xuICB9LFxuICBvbkRyYWdNb3ZlOiBmdW5jdGlvbiBvbkRyYWdNb3ZlKGUpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgc2Nyb2xsYmFyID0gc3dpcGVyLnNjcm9sbGJhcixcbiAgICAgICAgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsO1xuICAgIHZhciAkZWwgPSBzY3JvbGxiYXIuJGVsLFxuICAgICAgICAkZHJhZ0VsID0gc2Nyb2xsYmFyLiRkcmFnRWw7XG4gICAgaWYgKCFzd2lwZXIuc2Nyb2xsYmFyLmlzVG91Y2hlZCkgcmV0dXJuO1xuICAgIGlmIChlLnByZXZlbnREZWZhdWx0KSBlLnByZXZlbnREZWZhdWx0KCk7ZWxzZSBlLnJldHVyblZhbHVlID0gZmFsc2U7XG4gICAgc2Nyb2xsYmFyLnNldERyYWdQb3NpdGlvbihlKTtcbiAgICAkd3JhcHBlckVsLnRyYW5zaXRpb24oMCk7XG4gICAgJGVsLnRyYW5zaXRpb24oMCk7XG4gICAgJGRyYWdFbC50cmFuc2l0aW9uKDApO1xuICAgIHN3aXBlci5lbWl0KCdzY3JvbGxiYXJEcmFnTW92ZScsIGUpO1xuICB9LFxuICBvbkRyYWdFbmQ6IGZ1bmN0aW9uIG9uRHJhZ0VuZChlKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyO1xuICAgIHZhciBzY3JvbGxiYXIgPSBzd2lwZXIuc2Nyb2xsYmFyLFxuICAgICAgICAkd3JhcHBlckVsID0gc3dpcGVyLiR3cmFwcGVyRWw7XG4gICAgdmFyICRlbCA9IHNjcm9sbGJhci4kZWw7XG4gICAgaWYgKCFzd2lwZXIuc2Nyb2xsYmFyLmlzVG91Y2hlZCkgcmV0dXJuO1xuICAgIHN3aXBlci5zY3JvbGxiYXIuaXNUb3VjaGVkID0gZmFsc2U7XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbC5jc3MoJ3Njcm9sbC1zbmFwLXR5cGUnLCAnJyk7XG4gICAgICAkd3JhcHBlckVsLnRyYW5zaXRpb24oJycpO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXMuaGlkZSkge1xuICAgICAgY2xlYXJUaW1lb3V0KHN3aXBlci5zY3JvbGxiYXIuZHJhZ1RpbWVvdXQpO1xuICAgICAgc3dpcGVyLnNjcm9sbGJhci5kcmFnVGltZW91dCA9IG5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJGVsLmNzcygnb3BhY2l0eScsIDApO1xuICAgICAgICAkZWwudHJhbnNpdGlvbig0MDApO1xuICAgICAgfSwgMTAwMCk7XG4gICAgfVxuXG4gICAgc3dpcGVyLmVtaXQoJ3Njcm9sbGJhckRyYWdFbmQnLCBlKTtcblxuICAgIGlmIChwYXJhbXMuc25hcE9uUmVsZWFzZSkge1xuICAgICAgc3dpcGVyLnNsaWRlVG9DbG9zZXN0KCk7XG4gICAgfVxuICB9LFxuICBlbmFibGVEcmFnZ2FibGU6IGZ1bmN0aW9uIGVuYWJsZURyYWdnYWJsZSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmVsKSByZXR1cm47XG4gICAgdmFyIGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgICB2YXIgc2Nyb2xsYmFyID0gc3dpcGVyLnNjcm9sbGJhcixcbiAgICAgICAgdG91Y2hFdmVudHNUb3VjaCA9IHN3aXBlci50b3VjaEV2ZW50c1RvdWNoLFxuICAgICAgICB0b3VjaEV2ZW50c0Rlc2t0b3AgPSBzd2lwZXIudG91Y2hFdmVudHNEZXNrdG9wLFxuICAgICAgICBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgICBzdXBwb3J0ID0gc3dpcGVyLnN1cHBvcnQ7XG4gICAgdmFyICRlbCA9IHNjcm9sbGJhci4kZWw7XG4gICAgdmFyIHRhcmdldCA9ICRlbFswXTtcbiAgICB2YXIgYWN0aXZlTGlzdGVuZXIgPSBzdXBwb3J0LnBhc3NpdmVMaXN0ZW5lciAmJiBwYXJhbXMucGFzc2l2ZUxpc3RlbmVycyA/IHtcbiAgICAgIHBhc3NpdmU6IGZhbHNlLFxuICAgICAgY2FwdHVyZTogZmFsc2VcbiAgICB9IDogZmFsc2U7XG4gICAgdmFyIHBhc3NpdmVMaXN0ZW5lciA9IHN1cHBvcnQucGFzc2l2ZUxpc3RlbmVyICYmIHBhcmFtcy5wYXNzaXZlTGlzdGVuZXJzID8ge1xuICAgICAgcGFzc2l2ZTogdHJ1ZSxcbiAgICAgIGNhcHR1cmU6IGZhbHNlXG4gICAgfSA6IGZhbHNlO1xuICAgIGlmICghdGFyZ2V0KSByZXR1cm47XG5cbiAgICBpZiAoIXN1cHBvcnQudG91Y2gpIHtcbiAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzRGVza3RvcC5zdGFydCwgc3dpcGVyLnNjcm9sbGJhci5vbkRyYWdTdGFydCwgYWN0aXZlTGlzdGVuZXIpO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50c0Rlc2t0b3AubW92ZSwgc3dpcGVyLnNjcm9sbGJhci5vbkRyYWdNb3ZlLCBhY3RpdmVMaXN0ZW5lcik7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzRGVza3RvcC5lbmQsIHN3aXBlci5zY3JvbGxiYXIub25EcmFnRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50c1RvdWNoLnN0YXJ0LCBzd2lwZXIuc2Nyb2xsYmFyLm9uRHJhZ1N0YXJ0LCBhY3RpdmVMaXN0ZW5lcik7XG4gICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50c1RvdWNoLm1vdmUsIHN3aXBlci5zY3JvbGxiYXIub25EcmFnTW92ZSwgYWN0aXZlTGlzdGVuZXIpO1xuICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHNUb3VjaC5lbmQsIHN3aXBlci5zY3JvbGxiYXIub25EcmFnRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgIH1cbiAgfSxcbiAgZGlzYWJsZURyYWdnYWJsZTogZnVuY3Rpb24gZGlzYWJsZURyYWdnYWJsZSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmVsKSByZXR1cm47XG4gICAgdmFyIGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgICB2YXIgc2Nyb2xsYmFyID0gc3dpcGVyLnNjcm9sbGJhcixcbiAgICAgICAgdG91Y2hFdmVudHNUb3VjaCA9IHN3aXBlci50b3VjaEV2ZW50c1RvdWNoLFxuICAgICAgICB0b3VjaEV2ZW50c0Rlc2t0b3AgPSBzd2lwZXIudG91Y2hFdmVudHNEZXNrdG9wLFxuICAgICAgICBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgICBzdXBwb3J0ID0gc3dpcGVyLnN1cHBvcnQ7XG4gICAgdmFyICRlbCA9IHNjcm9sbGJhci4kZWw7XG4gICAgdmFyIHRhcmdldCA9ICRlbFswXTtcbiAgICB2YXIgYWN0aXZlTGlzdGVuZXIgPSBzdXBwb3J0LnBhc3NpdmVMaXN0ZW5lciAmJiBwYXJhbXMucGFzc2l2ZUxpc3RlbmVycyA/IHtcbiAgICAgIHBhc3NpdmU6IGZhbHNlLFxuICAgICAgY2FwdHVyZTogZmFsc2VcbiAgICB9IDogZmFsc2U7XG4gICAgdmFyIHBhc3NpdmVMaXN0ZW5lciA9IHN1cHBvcnQucGFzc2l2ZUxpc3RlbmVyICYmIHBhcmFtcy5wYXNzaXZlTGlzdGVuZXJzID8ge1xuICAgICAgcGFzc2l2ZTogdHJ1ZSxcbiAgICAgIGNhcHR1cmU6IGZhbHNlXG4gICAgfSA6IGZhbHNlO1xuICAgIGlmICghdGFyZ2V0KSByZXR1cm47XG5cbiAgICBpZiAoIXN1cHBvcnQudG91Y2gpIHtcbiAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzRGVza3RvcC5zdGFydCwgc3dpcGVyLnNjcm9sbGJhci5vbkRyYWdTdGFydCwgYWN0aXZlTGlzdGVuZXIpO1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50c0Rlc2t0b3AubW92ZSwgc3dpcGVyLnNjcm9sbGJhci5vbkRyYWdNb3ZlLCBhY3RpdmVMaXN0ZW5lcik7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzRGVza3RvcC5lbmQsIHN3aXBlci5zY3JvbGxiYXIub25EcmFnRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50c1RvdWNoLnN0YXJ0LCBzd2lwZXIuc2Nyb2xsYmFyLm9uRHJhZ1N0YXJ0LCBhY3RpdmVMaXN0ZW5lcik7XG4gICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50c1RvdWNoLm1vdmUsIHN3aXBlci5zY3JvbGxiYXIub25EcmFnTW92ZSwgYWN0aXZlTGlzdGVuZXIpO1xuICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHNUb3VjaC5lbmQsIHN3aXBlci5zY3JvbGxiYXIub25EcmFnRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgIH1cbiAgfSxcbiAgaW5pdDogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgc2Nyb2xsYmFyID0gc3dpcGVyLnNjcm9sbGJhcixcbiAgICAgICAgJHN3aXBlckVsID0gc3dpcGVyLiRlbDtcbiAgICBzd2lwZXIucGFyYW1zLnNjcm9sbGJhciA9IGNyZWF0ZUVsZW1lbnRJZk5vdERlZmluZWQoJHN3aXBlckVsLCBzd2lwZXIucGFyYW1zLnNjcm9sbGJhciwgc3dpcGVyLnBhcmFtcy5jcmVhdGVFbGVtZW50cywge1xuICAgICAgZWw6ICdzd2lwZXItc2Nyb2xsYmFyJ1xuICAgIH0pO1xuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnNjcm9sbGJhcjtcbiAgICBpZiAoIXBhcmFtcy5lbCkgcmV0dXJuO1xuICAgIHZhciAkZWwgPSAkKHBhcmFtcy5lbCk7XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy51bmlxdWVOYXZFbGVtZW50cyAmJiB0eXBlb2YgcGFyYW1zLmVsID09PSAnc3RyaW5nJyAmJiAkZWwubGVuZ3RoID4gMSAmJiAkc3dpcGVyRWwuZmluZChwYXJhbXMuZWwpLmxlbmd0aCA9PT0gMSkge1xuICAgICAgJGVsID0gJHN3aXBlckVsLmZpbmQocGFyYW1zLmVsKTtcbiAgICB9XG5cbiAgICB2YXIgJGRyYWdFbCA9ICRlbC5maW5kKFwiLlwiICsgc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZHJhZ0NsYXNzKTtcblxuICAgIGlmICgkZHJhZ0VsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgJGRyYWdFbCA9ICQoXCI8ZGl2IGNsYXNzPVxcXCJcIiArIHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmRyYWdDbGFzcyArIFwiXFxcIj48L2Rpdj5cIik7XG4gICAgICAkZWwuYXBwZW5kKCRkcmFnRWwpO1xuICAgIH1cblxuICAgIGV4dGVuZChzY3JvbGxiYXIsIHtcbiAgICAgICRlbDogJGVsLFxuICAgICAgZWw6ICRlbFswXSxcbiAgICAgICRkcmFnRWw6ICRkcmFnRWwsXG4gICAgICBkcmFnRWw6ICRkcmFnRWxbMF1cbiAgICB9KTtcblxuICAgIGlmIChwYXJhbXMuZHJhZ2dhYmxlKSB7XG4gICAgICBzY3JvbGxiYXIuZW5hYmxlRHJhZ2dhYmxlKCk7XG4gICAgfVxuXG4gICAgaWYgKCRlbCkge1xuICAgICAgJGVsW3N3aXBlci5lbmFibGVkID8gJ3JlbW92ZUNsYXNzJyA6ICdhZGRDbGFzcyddKHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmxvY2tDbGFzcyk7XG4gICAgfVxuICB9LFxuICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHN3aXBlci5zY3JvbGxiYXIuZGlzYWJsZURyYWdnYWJsZSgpO1xuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnc2Nyb2xsYmFyJyxcbiAgcGFyYW1zOiB7XG4gICAgc2Nyb2xsYmFyOiB7XG4gICAgICBlbDogbnVsbCxcbiAgICAgIGRyYWdTaXplOiAnYXV0bycsXG4gICAgICBoaWRlOiBmYWxzZSxcbiAgICAgIGRyYWdnYWJsZTogZmFsc2UsXG4gICAgICBzbmFwT25SZWxlYXNlOiB0cnVlLFxuICAgICAgbG9ja0NsYXNzOiAnc3dpcGVyLXNjcm9sbGJhci1sb2NrJyxcbiAgICAgIGRyYWdDbGFzczogJ3N3aXBlci1zY3JvbGxiYXItZHJhZydcbiAgICB9XG4gIH0sXG4gIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIGJpbmRNb2R1bGVNZXRob2RzKHN3aXBlciwge1xuICAgICAgc2Nyb2xsYmFyOiBfZXh0ZW5kcyh7XG4gICAgICAgIGlzVG91Y2hlZDogZmFsc2UsXG4gICAgICAgIHRpbWVvdXQ6IG51bGwsXG4gICAgICAgIGRyYWdUaW1lb3V0OiBudWxsXG4gICAgICB9LCBTY3JvbGxiYXIpXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgaW5pdDogZnVuY3Rpb24gaW5pdChzd2lwZXIpIHtcbiAgICAgIHN3aXBlci5zY3JvbGxiYXIuaW5pdCgpO1xuICAgICAgc3dpcGVyLnNjcm9sbGJhci51cGRhdGVTaXplKCk7XG4gICAgICBzd2lwZXIuc2Nyb2xsYmFyLnNldFRyYW5zbGF0ZSgpO1xuICAgIH0sXG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoc3dpcGVyKSB7XG4gICAgICBzd2lwZXIuc2Nyb2xsYmFyLnVwZGF0ZVNpemUoKTtcbiAgICB9LFxuICAgIHJlc2l6ZTogZnVuY3Rpb24gcmVzaXplKHN3aXBlcikge1xuICAgICAgc3dpcGVyLnNjcm9sbGJhci51cGRhdGVTaXplKCk7XG4gICAgfSxcbiAgICBvYnNlcnZlclVwZGF0ZTogZnVuY3Rpb24gb2JzZXJ2ZXJVcGRhdGUoc3dpcGVyKSB7XG4gICAgICBzd2lwZXIuc2Nyb2xsYmFyLnVwZGF0ZVNpemUoKTtcbiAgICB9LFxuICAgIHNldFRyYW5zbGF0ZTogZnVuY3Rpb24gc2V0VHJhbnNsYXRlKHN3aXBlcikge1xuICAgICAgc3dpcGVyLnNjcm9sbGJhci5zZXRUcmFuc2xhdGUoKTtcbiAgICB9LFxuICAgIHNldFRyYW5zaXRpb246IGZ1bmN0aW9uIHNldFRyYW5zaXRpb24oc3dpcGVyLCBkdXJhdGlvbikge1xuICAgICAgc3dpcGVyLnNjcm9sbGJhci5zZXRUcmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgICB9LFxuICAgICdlbmFibGUgZGlzYWJsZSc6IGZ1bmN0aW9uIGVuYWJsZURpc2FibGUoc3dpcGVyKSB7XG4gICAgICB2YXIgJGVsID0gc3dpcGVyLnNjcm9sbGJhci4kZWw7XG5cbiAgICAgIGlmICgkZWwpIHtcbiAgICAgICAgJGVsW3N3aXBlci5lbmFibGVkID8gJ3JlbW92ZUNsYXNzJyA6ICdhZGRDbGFzcyddKHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmxvY2tDbGFzcyk7XG4gICAgICB9XG4gICAgfSxcbiAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KHN3aXBlcikge1xuICAgICAgc3dpcGVyLnNjcm9sbGJhci5kZXN0cm95KCk7XG4gICAgfVxuICB9XG59O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvc2Nyb2xsYmFyL3Njcm9sbGJhci5qcyIsImZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmltcG9ydCAkIGZyb20gJy4uLy4uL3V0aWxzL2RvbSc7XG5pbXBvcnQgeyBiaW5kTW9kdWxlTWV0aG9kcyB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcbnZhciBQYXJhbGxheCA9IHtcbiAgc2V0VHJhbnNmb3JtOiBmdW5jdGlvbiBzZXRUcmFuc2Zvcm0oZWwsIHByb2dyZXNzKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHJ0bCA9IHN3aXBlci5ydGw7XG4gICAgdmFyICRlbCA9ICQoZWwpO1xuICAgIHZhciBydGxGYWN0b3IgPSBydGwgPyAtMSA6IDE7XG4gICAgdmFyIHAgPSAkZWwuYXR0cignZGF0YS1zd2lwZXItcGFyYWxsYXgnKSB8fCAnMCc7XG4gICAgdmFyIHggPSAkZWwuYXR0cignZGF0YS1zd2lwZXItcGFyYWxsYXgteCcpO1xuICAgIHZhciB5ID0gJGVsLmF0dHIoJ2RhdGEtc3dpcGVyLXBhcmFsbGF4LXknKTtcbiAgICB2YXIgc2NhbGUgPSAkZWwuYXR0cignZGF0YS1zd2lwZXItcGFyYWxsYXgtc2NhbGUnKTtcbiAgICB2YXIgb3BhY2l0eSA9ICRlbC5hdHRyKCdkYXRhLXN3aXBlci1wYXJhbGxheC1vcGFjaXR5Jyk7XG5cbiAgICBpZiAoeCB8fCB5KSB7XG4gICAgICB4ID0geCB8fCAnMCc7XG4gICAgICB5ID0geSB8fCAnMCc7XG4gICAgfSBlbHNlIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIHggPSBwO1xuICAgICAgeSA9ICcwJztcbiAgICB9IGVsc2Uge1xuICAgICAgeSA9IHA7XG4gICAgICB4ID0gJzAnO1xuICAgIH1cblxuICAgIGlmICh4LmluZGV4T2YoJyUnKSA+PSAwKSB7XG4gICAgICB4ID0gcGFyc2VJbnQoeCwgMTApICogcHJvZ3Jlc3MgKiBydGxGYWN0b3IgKyBcIiVcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgeCA9IHggKiBwcm9ncmVzcyAqIHJ0bEZhY3RvciArIFwicHhcIjtcbiAgICB9XG5cbiAgICBpZiAoeS5pbmRleE9mKCclJykgPj0gMCkge1xuICAgICAgeSA9IHBhcnNlSW50KHksIDEwKSAqIHByb2dyZXNzICsgXCIlXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHkgPSB5ICogcHJvZ3Jlc3MgKyBcInB4XCI7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvcGFjaXR5ICE9PSAndW5kZWZpbmVkJyAmJiBvcGFjaXR5ICE9PSBudWxsKSB7XG4gICAgICB2YXIgY3VycmVudE9wYWNpdHkgPSBvcGFjaXR5IC0gKG9wYWNpdHkgLSAxKSAqICgxIC0gTWF0aC5hYnMocHJvZ3Jlc3MpKTtcbiAgICAgICRlbFswXS5zdHlsZS5vcGFjaXR5ID0gY3VycmVudE9wYWNpdHk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBzY2FsZSA9PT0gJ3VuZGVmaW5lZCcgfHwgc2NhbGUgPT09IG51bGwpIHtcbiAgICAgICRlbC50cmFuc2Zvcm0oXCJ0cmFuc2xhdGUzZChcIiArIHggKyBcIiwgXCIgKyB5ICsgXCIsIDBweClcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBjdXJyZW50U2NhbGUgPSBzY2FsZSAtIChzY2FsZSAtIDEpICogKDEgLSBNYXRoLmFicyhwcm9ncmVzcykpO1xuICAgICAgJGVsLnRyYW5zZm9ybShcInRyYW5zbGF0ZTNkKFwiICsgeCArIFwiLCBcIiArIHkgKyBcIiwgMHB4KSBzY2FsZShcIiArIGN1cnJlbnRTY2FsZSArIFwiKVwiKTtcbiAgICB9XG4gIH0sXG4gIHNldFRyYW5zbGF0ZTogZnVuY3Rpb24gc2V0VHJhbnNsYXRlKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciAkZWwgPSBzd2lwZXIuJGVsLFxuICAgICAgICBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzLFxuICAgICAgICBwcm9ncmVzcyA9IHN3aXBlci5wcm9ncmVzcyxcbiAgICAgICAgc25hcEdyaWQgPSBzd2lwZXIuc25hcEdyaWQ7XG4gICAgJGVsLmNoaWxkcmVuKCdbZGF0YS1zd2lwZXItcGFyYWxsYXhdLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgteF0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC15XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LW9wYWNpdHldLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgtc2NhbGVdJykuZWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgIHN3aXBlci5wYXJhbGxheC5zZXRUcmFuc2Zvcm0oZWwsIHByb2dyZXNzKTtcbiAgICB9KTtcbiAgICBzbGlkZXMuZWFjaChmdW5jdGlvbiAoc2xpZGVFbCwgc2xpZGVJbmRleCkge1xuICAgICAgdmFyIHNsaWRlUHJvZ3Jlc3MgPSBzbGlkZUVsLnByb2dyZXNzO1xuXG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCA+IDEgJiYgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ICE9PSAnYXV0bycpIHtcbiAgICAgICAgc2xpZGVQcm9ncmVzcyArPSBNYXRoLmNlaWwoc2xpZGVJbmRleCAvIDIpIC0gcHJvZ3Jlc3MgKiAoc25hcEdyaWQubGVuZ3RoIC0gMSk7XG4gICAgICB9XG5cbiAgICAgIHNsaWRlUHJvZ3Jlc3MgPSBNYXRoLm1pbihNYXRoLm1heChzbGlkZVByb2dyZXNzLCAtMSksIDEpO1xuICAgICAgJChzbGlkZUVsKS5maW5kKCdbZGF0YS1zd2lwZXItcGFyYWxsYXhdLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgteF0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC15XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LW9wYWNpdHldLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgtc2NhbGVdJykuZWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgc3dpcGVyLnBhcmFsbGF4LnNldFRyYW5zZm9ybShlbCwgc2xpZGVQcm9ncmVzcyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSxcbiAgc2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihkdXJhdGlvbikge1xuICAgIGlmIChkdXJhdGlvbiA9PT0gdm9pZCAwKSB7XG4gICAgICBkdXJhdGlvbiA9IHRoaXMucGFyYW1zLnNwZWVkO1xuICAgIH1cblxuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciAkZWwgPSBzd2lwZXIuJGVsO1xuICAgICRlbC5maW5kKCdbZGF0YS1zd2lwZXItcGFyYWxsYXhdLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgteF0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC15XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LW9wYWNpdHldLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgtc2NhbGVdJykuZWFjaChmdW5jdGlvbiAocGFyYWxsYXhFbCkge1xuICAgICAgdmFyICRwYXJhbGxheEVsID0gJChwYXJhbGxheEVsKTtcbiAgICAgIHZhciBwYXJhbGxheER1cmF0aW9uID0gcGFyc2VJbnQoJHBhcmFsbGF4RWwuYXR0cignZGF0YS1zd2lwZXItcGFyYWxsYXgtZHVyYXRpb24nKSwgMTApIHx8IGR1cmF0aW9uO1xuICAgICAgaWYgKGR1cmF0aW9uID09PSAwKSBwYXJhbGxheER1cmF0aW9uID0gMDtcbiAgICAgICRwYXJhbGxheEVsLnRyYW5zaXRpb24ocGFyYWxsYXhEdXJhdGlvbik7XG4gICAgfSk7XG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdwYXJhbGxheCcsXG4gIHBhcmFtczoge1xuICAgIHBhcmFsbGF4OiB7XG4gICAgICBlbmFibGVkOiBmYWxzZVxuICAgIH1cbiAgfSxcbiAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgYmluZE1vZHVsZU1ldGhvZHMoc3dpcGVyLCB7XG4gICAgICBwYXJhbGxheDogX2V4dGVuZHMoe30sIFBhcmFsbGF4KVxuICAgIH0pO1xuICB9LFxuICBvbjoge1xuICAgIGJlZm9yZUluaXQ6IGZ1bmN0aW9uIGJlZm9yZUluaXQoc3dpcGVyKSB7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMucGFyYWxsYXguZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLnBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzID0gdHJ1ZTtcbiAgICAgIHN3aXBlci5vcmlnaW5hbFBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzID0gdHJ1ZTtcbiAgICB9LFxuICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoc3dpcGVyKSB7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMucGFyYWxsYXguZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLnBhcmFsbGF4LnNldFRyYW5zbGF0ZSgpO1xuICAgIH0sXG4gICAgc2V0VHJhbnNsYXRlOiBmdW5jdGlvbiBzZXRUcmFuc2xhdGUoc3dpcGVyKSB7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMucGFyYWxsYXguZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLnBhcmFsbGF4LnNldFRyYW5zbGF0ZSgpO1xuICAgIH0sXG4gICAgc2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihzd2lwZXIsIGR1cmF0aW9uKSB7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMucGFyYWxsYXguZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLnBhcmFsbGF4LnNldFRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgIH1cbiAgfVxufTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL3BhcmFsbGF4L3BhcmFsbGF4LmpzIiwiZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuaW1wb3J0IHsgZ2V0V2luZG93IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5pbXBvcnQgJCBmcm9tICcuLi8uLi91dGlscy9kb20nO1xuaW1wb3J0IHsgYmluZE1vZHVsZU1ldGhvZHMsIGdldFRyYW5zbGF0ZSB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcbnZhciBab29tID0ge1xuICAvLyBDYWxjIFNjYWxlIEZyb20gTXVsdGktdG91Y2hlc1xuICBnZXREaXN0YW5jZUJldHdlZW5Ub3VjaGVzOiBmdW5jdGlvbiBnZXREaXN0YW5jZUJldHdlZW5Ub3VjaGVzKGUpIHtcbiAgICBpZiAoZS50YXJnZXRUb3VjaGVzLmxlbmd0aCA8IDIpIHJldHVybiAxO1xuICAgIHZhciB4MSA9IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWDtcbiAgICB2YXIgeTEgPSBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVk7XG4gICAgdmFyIHgyID0gZS50YXJnZXRUb3VjaGVzWzFdLnBhZ2VYO1xuICAgIHZhciB5MiA9IGUudGFyZ2V0VG91Y2hlc1sxXS5wYWdlWTtcbiAgICB2YXIgZGlzdGFuY2UgPSBNYXRoLnNxcnQoTWF0aC5wb3coeDIgLSB4MSwgMikgKyBNYXRoLnBvdyh5MiAtIHkxLCAyKSk7XG4gICAgcmV0dXJuIGRpc3RhbmNlO1xuICB9LFxuICAvLyBFdmVudHNcbiAgb25HZXN0dXJlU3RhcnQ6IGZ1bmN0aW9uIG9uR2VzdHVyZVN0YXJ0KGUpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgc3VwcG9ydCA9IHN3aXBlci5zdXBwb3J0O1xuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnpvb207XG4gICAgdmFyIHpvb20gPSBzd2lwZXIuem9vbTtcbiAgICB2YXIgZ2VzdHVyZSA9IHpvb20uZ2VzdHVyZTtcbiAgICB6b29tLmZha2VHZXN0dXJlVG91Y2hlZCA9IGZhbHNlO1xuICAgIHpvb20uZmFrZUdlc3R1cmVNb3ZlZCA9IGZhbHNlO1xuXG4gICAgaWYgKCFzdXBwb3J0Lmdlc3R1cmVzKSB7XG4gICAgICBpZiAoZS50eXBlICE9PSAndG91Y2hzdGFydCcgfHwgZS50eXBlID09PSAndG91Y2hzdGFydCcgJiYgZS50YXJnZXRUb3VjaGVzLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB6b29tLmZha2VHZXN0dXJlVG91Y2hlZCA9IHRydWU7XG4gICAgICBnZXN0dXJlLnNjYWxlU3RhcnQgPSBab29tLmdldERpc3RhbmNlQmV0d2VlblRvdWNoZXMoZSk7XG4gICAgfVxuXG4gICAgaWYgKCFnZXN0dXJlLiRzbGlkZUVsIHx8ICFnZXN0dXJlLiRzbGlkZUVsLmxlbmd0aCkge1xuICAgICAgZ2VzdHVyZS4kc2xpZGVFbCA9ICQoZS50YXJnZXQpLmNsb3Nlc3QoXCIuXCIgKyBzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3MpO1xuICAgICAgaWYgKGdlc3R1cmUuJHNsaWRlRWwubGVuZ3RoID09PSAwKSBnZXN0dXJlLiRzbGlkZUVsID0gc3dpcGVyLnNsaWRlcy5lcShzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgICAgZ2VzdHVyZS4kaW1hZ2VFbCA9IGdlc3R1cmUuJHNsaWRlRWwuZmluZCgnaW1nLCBzdmcsIGNhbnZhcywgcGljdHVyZSwgLnN3aXBlci16b29tLXRhcmdldCcpO1xuICAgICAgZ2VzdHVyZS4kaW1hZ2VXcmFwRWwgPSBnZXN0dXJlLiRpbWFnZUVsLnBhcmVudChcIi5cIiArIHBhcmFtcy5jb250YWluZXJDbGFzcyk7XG4gICAgICBnZXN0dXJlLm1heFJhdGlvID0gZ2VzdHVyZS4kaW1hZ2VXcmFwRWwuYXR0cignZGF0YS1zd2lwZXItem9vbScpIHx8IHBhcmFtcy5tYXhSYXRpbztcblxuICAgICAgaWYgKGdlc3R1cmUuJGltYWdlV3JhcEVsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBnZXN0dXJlLiRpbWFnZUVsID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGdlc3R1cmUuJGltYWdlRWwpIHtcbiAgICAgIGdlc3R1cmUuJGltYWdlRWwudHJhbnNpdGlvbigwKTtcbiAgICB9XG5cbiAgICBzd2lwZXIuem9vbS5pc1NjYWxpbmcgPSB0cnVlO1xuICB9LFxuICBvbkdlc3R1cmVDaGFuZ2U6IGZ1bmN0aW9uIG9uR2VzdHVyZUNoYW5nZShlKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHN1cHBvcnQgPSBzd2lwZXIuc3VwcG9ydDtcbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy56b29tO1xuICAgIHZhciB6b29tID0gc3dpcGVyLnpvb207XG4gICAgdmFyIGdlc3R1cmUgPSB6b29tLmdlc3R1cmU7XG5cbiAgICBpZiAoIXN1cHBvcnQuZ2VzdHVyZXMpIHtcbiAgICAgIGlmIChlLnR5cGUgIT09ICd0b3VjaG1vdmUnIHx8IGUudHlwZSA9PT0gJ3RvdWNobW92ZScgJiYgZS50YXJnZXRUb3VjaGVzLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB6b29tLmZha2VHZXN0dXJlTW92ZWQgPSB0cnVlO1xuICAgICAgZ2VzdHVyZS5zY2FsZU1vdmUgPSBab29tLmdldERpc3RhbmNlQmV0d2VlblRvdWNoZXMoZSk7XG4gICAgfVxuXG4gICAgaWYgKCFnZXN0dXJlLiRpbWFnZUVsIHx8IGdlc3R1cmUuJGltYWdlRWwubGVuZ3RoID09PSAwKSB7XG4gICAgICBpZiAoZS50eXBlID09PSAnZ2VzdHVyZWNoYW5nZScpIHpvb20ub25HZXN0dXJlU3RhcnQoZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHN1cHBvcnQuZ2VzdHVyZXMpIHtcbiAgICAgIHpvb20uc2NhbGUgPSBlLnNjYWxlICogem9vbS5jdXJyZW50U2NhbGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHpvb20uc2NhbGUgPSBnZXN0dXJlLnNjYWxlTW92ZSAvIGdlc3R1cmUuc2NhbGVTdGFydCAqIHpvb20uY3VycmVudFNjYWxlO1xuICAgIH1cblxuICAgIGlmICh6b29tLnNjYWxlID4gZ2VzdHVyZS5tYXhSYXRpbykge1xuICAgICAgem9vbS5zY2FsZSA9IGdlc3R1cmUubWF4UmF0aW8gLSAxICsgTWF0aC5wb3coem9vbS5zY2FsZSAtIGdlc3R1cmUubWF4UmF0aW8gKyAxLCAwLjUpO1xuICAgIH1cblxuICAgIGlmICh6b29tLnNjYWxlIDwgcGFyYW1zLm1pblJhdGlvKSB7XG4gICAgICB6b29tLnNjYWxlID0gcGFyYW1zLm1pblJhdGlvICsgMSAtIE1hdGgucG93KHBhcmFtcy5taW5SYXRpbyAtIHpvb20uc2NhbGUgKyAxLCAwLjUpO1xuICAgIH1cblxuICAgIGdlc3R1cmUuJGltYWdlRWwudHJhbnNmb3JtKFwidHJhbnNsYXRlM2QoMCwwLDApIHNjYWxlKFwiICsgem9vbS5zY2FsZSArIFwiKVwiKTtcbiAgfSxcbiAgb25HZXN0dXJlRW5kOiBmdW5jdGlvbiBvbkdlc3R1cmVFbmQoZSkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBkZXZpY2UgPSBzd2lwZXIuZGV2aWNlO1xuICAgIHZhciBzdXBwb3J0ID0gc3dpcGVyLnN1cHBvcnQ7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuem9vbTtcbiAgICB2YXIgem9vbSA9IHN3aXBlci56b29tO1xuICAgIHZhciBnZXN0dXJlID0gem9vbS5nZXN0dXJlO1xuXG4gICAgaWYgKCFzdXBwb3J0Lmdlc3R1cmVzKSB7XG4gICAgICBpZiAoIXpvb20uZmFrZUdlc3R1cmVUb3VjaGVkIHx8ICF6b29tLmZha2VHZXN0dXJlTW92ZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoZS50eXBlICE9PSAndG91Y2hlbmQnIHx8IGUudHlwZSA9PT0gJ3RvdWNoZW5kJyAmJiBlLmNoYW5nZWRUb3VjaGVzLmxlbmd0aCA8IDIgJiYgIWRldmljZS5hbmRyb2lkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgem9vbS5mYWtlR2VzdHVyZVRvdWNoZWQgPSBmYWxzZTtcbiAgICAgIHpvb20uZmFrZUdlc3R1cmVNb3ZlZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmICghZ2VzdHVyZS4kaW1hZ2VFbCB8fCBnZXN0dXJlLiRpbWFnZUVsLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIHpvb20uc2NhbGUgPSBNYXRoLm1heChNYXRoLm1pbih6b29tLnNjYWxlLCBnZXN0dXJlLm1heFJhdGlvKSwgcGFyYW1zLm1pblJhdGlvKTtcbiAgICBnZXN0dXJlLiRpbWFnZUVsLnRyYW5zaXRpb24oc3dpcGVyLnBhcmFtcy5zcGVlZCkudHJhbnNmb3JtKFwidHJhbnNsYXRlM2QoMCwwLDApIHNjYWxlKFwiICsgem9vbS5zY2FsZSArIFwiKVwiKTtcbiAgICB6b29tLmN1cnJlbnRTY2FsZSA9IHpvb20uc2NhbGU7XG4gICAgem9vbS5pc1NjYWxpbmcgPSBmYWxzZTtcbiAgICBpZiAoem9vbS5zY2FsZSA9PT0gMSkgZ2VzdHVyZS4kc2xpZGVFbCA9IHVuZGVmaW5lZDtcbiAgfSxcbiAgb25Ub3VjaFN0YXJ0OiBmdW5jdGlvbiBvblRvdWNoU3RhcnQoZSkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBkZXZpY2UgPSBzd2lwZXIuZGV2aWNlO1xuICAgIHZhciB6b29tID0gc3dpcGVyLnpvb207XG4gICAgdmFyIGdlc3R1cmUgPSB6b29tLmdlc3R1cmUsXG4gICAgICAgIGltYWdlID0gem9vbS5pbWFnZTtcbiAgICBpZiAoIWdlc3R1cmUuJGltYWdlRWwgfHwgZ2VzdHVyZS4kaW1hZ2VFbC5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICBpZiAoaW1hZ2UuaXNUb3VjaGVkKSByZXR1cm47XG4gICAgaWYgKGRldmljZS5hbmRyb2lkICYmIGUuY2FuY2VsYWJsZSkgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGltYWdlLmlzVG91Y2hlZCA9IHRydWU7XG4gICAgaW1hZ2UudG91Y2hlc1N0YXJ0LnggPSBlLnR5cGUgPT09ICd0b3VjaHN0YXJ0JyA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWCA6IGUucGFnZVg7XG4gICAgaW1hZ2UudG91Y2hlc1N0YXJ0LnkgPSBlLnR5cGUgPT09ICd0b3VjaHN0YXJ0JyA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVk7XG4gIH0sXG4gIG9uVG91Y2hNb3ZlOiBmdW5jdGlvbiBvblRvdWNoTW92ZShlKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHpvb20gPSBzd2lwZXIuem9vbTtcbiAgICB2YXIgZ2VzdHVyZSA9IHpvb20uZ2VzdHVyZSxcbiAgICAgICAgaW1hZ2UgPSB6b29tLmltYWdlLFxuICAgICAgICB2ZWxvY2l0eSA9IHpvb20udmVsb2NpdHk7XG4gICAgaWYgKCFnZXN0dXJlLiRpbWFnZUVsIHx8IGdlc3R1cmUuJGltYWdlRWwubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgc3dpcGVyLmFsbG93Q2xpY2sgPSBmYWxzZTtcbiAgICBpZiAoIWltYWdlLmlzVG91Y2hlZCB8fCAhZ2VzdHVyZS4kc2xpZGVFbCkgcmV0dXJuO1xuXG4gICAgaWYgKCFpbWFnZS5pc01vdmVkKSB7XG4gICAgICBpbWFnZS53aWR0aCA9IGdlc3R1cmUuJGltYWdlRWxbMF0ub2Zmc2V0V2lkdGg7XG4gICAgICBpbWFnZS5oZWlnaHQgPSBnZXN0dXJlLiRpbWFnZUVsWzBdLm9mZnNldEhlaWdodDtcbiAgICAgIGltYWdlLnN0YXJ0WCA9IGdldFRyYW5zbGF0ZShnZXN0dXJlLiRpbWFnZVdyYXBFbFswXSwgJ3gnKSB8fCAwO1xuICAgICAgaW1hZ2Uuc3RhcnRZID0gZ2V0VHJhbnNsYXRlKGdlc3R1cmUuJGltYWdlV3JhcEVsWzBdLCAneScpIHx8IDA7XG4gICAgICBnZXN0dXJlLnNsaWRlV2lkdGggPSBnZXN0dXJlLiRzbGlkZUVsWzBdLm9mZnNldFdpZHRoO1xuICAgICAgZ2VzdHVyZS5zbGlkZUhlaWdodCA9IGdlc3R1cmUuJHNsaWRlRWxbMF0ub2Zmc2V0SGVpZ2h0O1xuICAgICAgZ2VzdHVyZS4kaW1hZ2VXcmFwRWwudHJhbnNpdGlvbigwKTtcblxuICAgICAgaWYgKHN3aXBlci5ydGwpIHtcbiAgICAgICAgaW1hZ2Uuc3RhcnRYID0gLWltYWdlLnN0YXJ0WDtcbiAgICAgICAgaW1hZ2Uuc3RhcnRZID0gLWltYWdlLnN0YXJ0WTtcbiAgICAgIH1cbiAgICB9IC8vIERlZmluZSBpZiB3ZSBuZWVkIGltYWdlIGRyYWdcblxuXG4gICAgdmFyIHNjYWxlZFdpZHRoID0gaW1hZ2Uud2lkdGggKiB6b29tLnNjYWxlO1xuICAgIHZhciBzY2FsZWRIZWlnaHQgPSBpbWFnZS5oZWlnaHQgKiB6b29tLnNjYWxlO1xuICAgIGlmIChzY2FsZWRXaWR0aCA8IGdlc3R1cmUuc2xpZGVXaWR0aCAmJiBzY2FsZWRIZWlnaHQgPCBnZXN0dXJlLnNsaWRlSGVpZ2h0KSByZXR1cm47XG4gICAgaW1hZ2UubWluWCA9IE1hdGgubWluKGdlc3R1cmUuc2xpZGVXaWR0aCAvIDIgLSBzY2FsZWRXaWR0aCAvIDIsIDApO1xuICAgIGltYWdlLm1heFggPSAtaW1hZ2UubWluWDtcbiAgICBpbWFnZS5taW5ZID0gTWF0aC5taW4oZ2VzdHVyZS5zbGlkZUhlaWdodCAvIDIgLSBzY2FsZWRIZWlnaHQgLyAyLCAwKTtcbiAgICBpbWFnZS5tYXhZID0gLWltYWdlLm1pblk7XG4gICAgaW1hZ2UudG91Y2hlc0N1cnJlbnQueCA9IGUudHlwZSA9PT0gJ3RvdWNobW92ZScgPyBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVggOiBlLnBhZ2VYO1xuICAgIGltYWdlLnRvdWNoZXNDdXJyZW50LnkgPSBlLnR5cGUgPT09ICd0b3VjaG1vdmUnID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZIDogZS5wYWdlWTtcblxuICAgIGlmICghaW1hZ2UuaXNNb3ZlZCAmJiAhem9vbS5pc1NjYWxpbmcpIHtcbiAgICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkgJiYgKE1hdGguZmxvb3IoaW1hZ2UubWluWCkgPT09IE1hdGguZmxvb3IoaW1hZ2Uuc3RhcnRYKSAmJiBpbWFnZS50b3VjaGVzQ3VycmVudC54IDwgaW1hZ2UudG91Y2hlc1N0YXJ0LnggfHwgTWF0aC5mbG9vcihpbWFnZS5tYXhYKSA9PT0gTWF0aC5mbG9vcihpbWFnZS5zdGFydFgpICYmIGltYWdlLnRvdWNoZXNDdXJyZW50LnggPiBpbWFnZS50b3VjaGVzU3RhcnQueCkpIHtcbiAgICAgICAgaW1hZ2UuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCFzd2lwZXIuaXNIb3Jpem9udGFsKCkgJiYgKE1hdGguZmxvb3IoaW1hZ2UubWluWSkgPT09IE1hdGguZmxvb3IoaW1hZ2Uuc3RhcnRZKSAmJiBpbWFnZS50b3VjaGVzQ3VycmVudC55IDwgaW1hZ2UudG91Y2hlc1N0YXJ0LnkgfHwgTWF0aC5mbG9vcihpbWFnZS5tYXhZKSA9PT0gTWF0aC5mbG9vcihpbWFnZS5zdGFydFkpICYmIGltYWdlLnRvdWNoZXNDdXJyZW50LnkgPiBpbWFnZS50b3VjaGVzU3RhcnQueSkpIHtcbiAgICAgICAgaW1hZ2UuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZS5jYW5jZWxhYmxlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBpbWFnZS5pc01vdmVkID0gdHJ1ZTtcbiAgICBpbWFnZS5jdXJyZW50WCA9IGltYWdlLnRvdWNoZXNDdXJyZW50LnggLSBpbWFnZS50b3VjaGVzU3RhcnQueCArIGltYWdlLnN0YXJ0WDtcbiAgICBpbWFnZS5jdXJyZW50WSA9IGltYWdlLnRvdWNoZXNDdXJyZW50LnkgLSBpbWFnZS50b3VjaGVzU3RhcnQueSArIGltYWdlLnN0YXJ0WTtcblxuICAgIGlmIChpbWFnZS5jdXJyZW50WCA8IGltYWdlLm1pblgpIHtcbiAgICAgIGltYWdlLmN1cnJlbnRYID0gaW1hZ2UubWluWCArIDEgLSBNYXRoLnBvdyhpbWFnZS5taW5YIC0gaW1hZ2UuY3VycmVudFggKyAxLCAwLjgpO1xuICAgIH1cblxuICAgIGlmIChpbWFnZS5jdXJyZW50WCA+IGltYWdlLm1heFgpIHtcbiAgICAgIGltYWdlLmN1cnJlbnRYID0gaW1hZ2UubWF4WCAtIDEgKyBNYXRoLnBvdyhpbWFnZS5jdXJyZW50WCAtIGltYWdlLm1heFggKyAxLCAwLjgpO1xuICAgIH1cblxuICAgIGlmIChpbWFnZS5jdXJyZW50WSA8IGltYWdlLm1pblkpIHtcbiAgICAgIGltYWdlLmN1cnJlbnRZID0gaW1hZ2UubWluWSArIDEgLSBNYXRoLnBvdyhpbWFnZS5taW5ZIC0gaW1hZ2UuY3VycmVudFkgKyAxLCAwLjgpO1xuICAgIH1cblxuICAgIGlmIChpbWFnZS5jdXJyZW50WSA+IGltYWdlLm1heFkpIHtcbiAgICAgIGltYWdlLmN1cnJlbnRZID0gaW1hZ2UubWF4WSAtIDEgKyBNYXRoLnBvdyhpbWFnZS5jdXJyZW50WSAtIGltYWdlLm1heFkgKyAxLCAwLjgpO1xuICAgIH0gLy8gVmVsb2NpdHlcblxuXG4gICAgaWYgKCF2ZWxvY2l0eS5wcmV2UG9zaXRpb25YKSB2ZWxvY2l0eS5wcmV2UG9zaXRpb25YID0gaW1hZ2UudG91Y2hlc0N1cnJlbnQueDtcbiAgICBpZiAoIXZlbG9jaXR5LnByZXZQb3NpdGlvblkpIHZlbG9jaXR5LnByZXZQb3NpdGlvblkgPSBpbWFnZS50b3VjaGVzQ3VycmVudC55O1xuICAgIGlmICghdmVsb2NpdHkucHJldlRpbWUpIHZlbG9jaXR5LnByZXZUaW1lID0gRGF0ZS5ub3coKTtcbiAgICB2ZWxvY2l0eS54ID0gKGltYWdlLnRvdWNoZXNDdXJyZW50LnggLSB2ZWxvY2l0eS5wcmV2UG9zaXRpb25YKSAvIChEYXRlLm5vdygpIC0gdmVsb2NpdHkucHJldlRpbWUpIC8gMjtcbiAgICB2ZWxvY2l0eS55ID0gKGltYWdlLnRvdWNoZXNDdXJyZW50LnkgLSB2ZWxvY2l0eS5wcmV2UG9zaXRpb25ZKSAvIChEYXRlLm5vdygpIC0gdmVsb2NpdHkucHJldlRpbWUpIC8gMjtcbiAgICBpZiAoTWF0aC5hYnMoaW1hZ2UudG91Y2hlc0N1cnJlbnQueCAtIHZlbG9jaXR5LnByZXZQb3NpdGlvblgpIDwgMikgdmVsb2NpdHkueCA9IDA7XG4gICAgaWYgKE1hdGguYWJzKGltYWdlLnRvdWNoZXNDdXJyZW50LnkgLSB2ZWxvY2l0eS5wcmV2UG9zaXRpb25ZKSA8IDIpIHZlbG9jaXR5LnkgPSAwO1xuICAgIHZlbG9jaXR5LnByZXZQb3NpdGlvblggPSBpbWFnZS50b3VjaGVzQ3VycmVudC54O1xuICAgIHZlbG9jaXR5LnByZXZQb3NpdGlvblkgPSBpbWFnZS50b3VjaGVzQ3VycmVudC55O1xuICAgIHZlbG9jaXR5LnByZXZUaW1lID0gRGF0ZS5ub3coKTtcbiAgICBnZXN0dXJlLiRpbWFnZVdyYXBFbC50cmFuc2Zvcm0oXCJ0cmFuc2xhdGUzZChcIiArIGltYWdlLmN1cnJlbnRYICsgXCJweCwgXCIgKyBpbWFnZS5jdXJyZW50WSArIFwicHgsMClcIik7XG4gIH0sXG4gIG9uVG91Y2hFbmQ6IGZ1bmN0aW9uIG9uVG91Y2hFbmQoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHpvb20gPSBzd2lwZXIuem9vbTtcbiAgICB2YXIgZ2VzdHVyZSA9IHpvb20uZ2VzdHVyZSxcbiAgICAgICAgaW1hZ2UgPSB6b29tLmltYWdlLFxuICAgICAgICB2ZWxvY2l0eSA9IHpvb20udmVsb2NpdHk7XG4gICAgaWYgKCFnZXN0dXJlLiRpbWFnZUVsIHx8IGdlc3R1cmUuJGltYWdlRWwubGVuZ3RoID09PSAwKSByZXR1cm47XG5cbiAgICBpZiAoIWltYWdlLmlzVG91Y2hlZCB8fCAhaW1hZ2UuaXNNb3ZlZCkge1xuICAgICAgaW1hZ2UuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgICBpbWFnZS5pc01vdmVkID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaW1hZ2UuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgaW1hZ2UuaXNNb3ZlZCA9IGZhbHNlO1xuICAgIHZhciBtb21lbnR1bUR1cmF0aW9uWCA9IDMwMDtcbiAgICB2YXIgbW9tZW50dW1EdXJhdGlvblkgPSAzMDA7XG4gICAgdmFyIG1vbWVudHVtRGlzdGFuY2VYID0gdmVsb2NpdHkueCAqIG1vbWVudHVtRHVyYXRpb25YO1xuICAgIHZhciBuZXdQb3NpdGlvblggPSBpbWFnZS5jdXJyZW50WCArIG1vbWVudHVtRGlzdGFuY2VYO1xuICAgIHZhciBtb21lbnR1bURpc3RhbmNlWSA9IHZlbG9jaXR5LnkgKiBtb21lbnR1bUR1cmF0aW9uWTtcbiAgICB2YXIgbmV3UG9zaXRpb25ZID0gaW1hZ2UuY3VycmVudFkgKyBtb21lbnR1bURpc3RhbmNlWTsgLy8gRml4IGR1cmF0aW9uXG5cbiAgICBpZiAodmVsb2NpdHkueCAhPT0gMCkgbW9tZW50dW1EdXJhdGlvblggPSBNYXRoLmFicygobmV3UG9zaXRpb25YIC0gaW1hZ2UuY3VycmVudFgpIC8gdmVsb2NpdHkueCk7XG4gICAgaWYgKHZlbG9jaXR5LnkgIT09IDApIG1vbWVudHVtRHVyYXRpb25ZID0gTWF0aC5hYnMoKG5ld1Bvc2l0aW9uWSAtIGltYWdlLmN1cnJlbnRZKSAvIHZlbG9jaXR5LnkpO1xuICAgIHZhciBtb21lbnR1bUR1cmF0aW9uID0gTWF0aC5tYXgobW9tZW50dW1EdXJhdGlvblgsIG1vbWVudHVtRHVyYXRpb25ZKTtcbiAgICBpbWFnZS5jdXJyZW50WCA9IG5ld1Bvc2l0aW9uWDtcbiAgICBpbWFnZS5jdXJyZW50WSA9IG5ld1Bvc2l0aW9uWTsgLy8gRGVmaW5lIGlmIHdlIG5lZWQgaW1hZ2UgZHJhZ1xuXG4gICAgdmFyIHNjYWxlZFdpZHRoID0gaW1hZ2Uud2lkdGggKiB6b29tLnNjYWxlO1xuICAgIHZhciBzY2FsZWRIZWlnaHQgPSBpbWFnZS5oZWlnaHQgKiB6b29tLnNjYWxlO1xuICAgIGltYWdlLm1pblggPSBNYXRoLm1pbihnZXN0dXJlLnNsaWRlV2lkdGggLyAyIC0gc2NhbGVkV2lkdGggLyAyLCAwKTtcbiAgICBpbWFnZS5tYXhYID0gLWltYWdlLm1pblg7XG4gICAgaW1hZ2UubWluWSA9IE1hdGgubWluKGdlc3R1cmUuc2xpZGVIZWlnaHQgLyAyIC0gc2NhbGVkSGVpZ2h0IC8gMiwgMCk7XG4gICAgaW1hZ2UubWF4WSA9IC1pbWFnZS5taW5ZO1xuICAgIGltYWdlLmN1cnJlbnRYID0gTWF0aC5tYXgoTWF0aC5taW4oaW1hZ2UuY3VycmVudFgsIGltYWdlLm1heFgpLCBpbWFnZS5taW5YKTtcbiAgICBpbWFnZS5jdXJyZW50WSA9IE1hdGgubWF4KE1hdGgubWluKGltYWdlLmN1cnJlbnRZLCBpbWFnZS5tYXhZKSwgaW1hZ2UubWluWSk7XG4gICAgZ2VzdHVyZS4kaW1hZ2VXcmFwRWwudHJhbnNpdGlvbihtb21lbnR1bUR1cmF0aW9uKS50cmFuc2Zvcm0oXCJ0cmFuc2xhdGUzZChcIiArIGltYWdlLmN1cnJlbnRYICsgXCJweCwgXCIgKyBpbWFnZS5jdXJyZW50WSArIFwicHgsMClcIik7XG4gIH0sXG4gIG9uVHJhbnNpdGlvbkVuZDogZnVuY3Rpb24gb25UcmFuc2l0aW9uRW5kKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciB6b29tID0gc3dpcGVyLnpvb207XG4gICAgdmFyIGdlc3R1cmUgPSB6b29tLmdlc3R1cmU7XG5cbiAgICBpZiAoZ2VzdHVyZS4kc2xpZGVFbCAmJiBzd2lwZXIucHJldmlvdXNJbmRleCAhPT0gc3dpcGVyLmFjdGl2ZUluZGV4KSB7XG4gICAgICBpZiAoZ2VzdHVyZS4kaW1hZ2VFbCkge1xuICAgICAgICBnZXN0dXJlLiRpbWFnZUVsLnRyYW5zZm9ybSgndHJhbnNsYXRlM2QoMCwwLDApIHNjYWxlKDEpJyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChnZXN0dXJlLiRpbWFnZVdyYXBFbCkge1xuICAgICAgICBnZXN0dXJlLiRpbWFnZVdyYXBFbC50cmFuc2Zvcm0oJ3RyYW5zbGF0ZTNkKDAsMCwwKScpO1xuICAgICAgfVxuXG4gICAgICB6b29tLnNjYWxlID0gMTtcbiAgICAgIHpvb20uY3VycmVudFNjYWxlID0gMTtcbiAgICAgIGdlc3R1cmUuJHNsaWRlRWwgPSB1bmRlZmluZWQ7XG4gICAgICBnZXN0dXJlLiRpbWFnZUVsID0gdW5kZWZpbmVkO1xuICAgICAgZ2VzdHVyZS4kaW1hZ2VXcmFwRWwgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9LFxuICAvLyBUb2dnbGUgWm9vbVxuICB0b2dnbGU6IGZ1bmN0aW9uIHRvZ2dsZShlKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHpvb20gPSBzd2lwZXIuem9vbTtcblxuICAgIGlmICh6b29tLnNjYWxlICYmIHpvb20uc2NhbGUgIT09IDEpIHtcbiAgICAgIC8vIFpvb20gT3V0XG4gICAgICB6b29tLm91dCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBab29tIEluXG4gICAgICB6b29tLmluKGUpO1xuICAgIH1cbiAgfSxcbiAgaW46IGZ1bmN0aW9uIF9pbihlKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICAgIHZhciB6b29tID0gc3dpcGVyLnpvb207XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuem9vbTtcbiAgICB2YXIgZ2VzdHVyZSA9IHpvb20uZ2VzdHVyZSxcbiAgICAgICAgaW1hZ2UgPSB6b29tLmltYWdlO1xuXG4gICAgaWYgKCFnZXN0dXJlLiRzbGlkZUVsKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkICYmIHN3aXBlci52aXJ0dWFsKSB7XG4gICAgICAgIGdlc3R1cmUuJHNsaWRlRWwgPSBzd2lwZXIuJHdyYXBwZXJFbC5jaGlsZHJlbihcIi5cIiArIHN3aXBlci5wYXJhbXMuc2xpZGVBY3RpdmVDbGFzcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBnZXN0dXJlLiRzbGlkZUVsID0gc3dpcGVyLnNsaWRlcy5lcShzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgICAgfVxuXG4gICAgICBnZXN0dXJlLiRpbWFnZUVsID0gZ2VzdHVyZS4kc2xpZGVFbC5maW5kKCdpbWcsIHN2ZywgY2FudmFzLCBwaWN0dXJlLCAuc3dpcGVyLXpvb20tdGFyZ2V0Jyk7XG4gICAgICBnZXN0dXJlLiRpbWFnZVdyYXBFbCA9IGdlc3R1cmUuJGltYWdlRWwucGFyZW50KFwiLlwiICsgcGFyYW1zLmNvbnRhaW5lckNsYXNzKTtcbiAgICB9XG5cbiAgICBpZiAoIWdlc3R1cmUuJGltYWdlRWwgfHwgZ2VzdHVyZS4kaW1hZ2VFbC5sZW5ndGggPT09IDAgfHwgIWdlc3R1cmUuJGltYWdlV3JhcEVsIHx8IGdlc3R1cmUuJGltYWdlV3JhcEVsLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIGdlc3R1cmUuJHNsaWRlRWwuYWRkQ2xhc3MoXCJcIiArIHBhcmFtcy56b29tZWRTbGlkZUNsYXNzKTtcbiAgICB2YXIgdG91Y2hYO1xuICAgIHZhciB0b3VjaFk7XG4gICAgdmFyIG9mZnNldFg7XG4gICAgdmFyIG9mZnNldFk7XG4gICAgdmFyIGRpZmZYO1xuICAgIHZhciBkaWZmWTtcbiAgICB2YXIgdHJhbnNsYXRlWDtcbiAgICB2YXIgdHJhbnNsYXRlWTtcbiAgICB2YXIgaW1hZ2VXaWR0aDtcbiAgICB2YXIgaW1hZ2VIZWlnaHQ7XG4gICAgdmFyIHNjYWxlZFdpZHRoO1xuICAgIHZhciBzY2FsZWRIZWlnaHQ7XG4gICAgdmFyIHRyYW5zbGF0ZU1pblg7XG4gICAgdmFyIHRyYW5zbGF0ZU1pblk7XG4gICAgdmFyIHRyYW5zbGF0ZU1heFg7XG4gICAgdmFyIHRyYW5zbGF0ZU1heFk7XG4gICAgdmFyIHNsaWRlV2lkdGg7XG4gICAgdmFyIHNsaWRlSGVpZ2h0O1xuXG4gICAgaWYgKHR5cGVvZiBpbWFnZS50b3VjaGVzU3RhcnQueCA9PT0gJ3VuZGVmaW5lZCcgJiYgZSkge1xuICAgICAgdG91Y2hYID0gZS50eXBlID09PSAndG91Y2hlbmQnID8gZS5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWCA6IGUucGFnZVg7XG4gICAgICB0b3VjaFkgPSBlLnR5cGUgPT09ICd0b3VjaGVuZCcgPyBlLmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VZIDogZS5wYWdlWTtcbiAgICB9IGVsc2Uge1xuICAgICAgdG91Y2hYID0gaW1hZ2UudG91Y2hlc1N0YXJ0Lng7XG4gICAgICB0b3VjaFkgPSBpbWFnZS50b3VjaGVzU3RhcnQueTtcbiAgICB9XG5cbiAgICB6b29tLnNjYWxlID0gZ2VzdHVyZS4kaW1hZ2VXcmFwRWwuYXR0cignZGF0YS1zd2lwZXItem9vbScpIHx8IHBhcmFtcy5tYXhSYXRpbztcbiAgICB6b29tLmN1cnJlbnRTY2FsZSA9IGdlc3R1cmUuJGltYWdlV3JhcEVsLmF0dHIoJ2RhdGEtc3dpcGVyLXpvb20nKSB8fCBwYXJhbXMubWF4UmF0aW87XG5cbiAgICBpZiAoZSkge1xuICAgICAgc2xpZGVXaWR0aCA9IGdlc3R1cmUuJHNsaWRlRWxbMF0ub2Zmc2V0V2lkdGg7XG4gICAgICBzbGlkZUhlaWdodCA9IGdlc3R1cmUuJHNsaWRlRWxbMF0ub2Zmc2V0SGVpZ2h0O1xuICAgICAgb2Zmc2V0WCA9IGdlc3R1cmUuJHNsaWRlRWwub2Zmc2V0KCkubGVmdCArIHdpbmRvdy5zY3JvbGxYO1xuICAgICAgb2Zmc2V0WSA9IGdlc3R1cmUuJHNsaWRlRWwub2Zmc2V0KCkudG9wICsgd2luZG93LnNjcm9sbFk7XG4gICAgICBkaWZmWCA9IG9mZnNldFggKyBzbGlkZVdpZHRoIC8gMiAtIHRvdWNoWDtcbiAgICAgIGRpZmZZID0gb2Zmc2V0WSArIHNsaWRlSGVpZ2h0IC8gMiAtIHRvdWNoWTtcbiAgICAgIGltYWdlV2lkdGggPSBnZXN0dXJlLiRpbWFnZUVsWzBdLm9mZnNldFdpZHRoO1xuICAgICAgaW1hZ2VIZWlnaHQgPSBnZXN0dXJlLiRpbWFnZUVsWzBdLm9mZnNldEhlaWdodDtcbiAgICAgIHNjYWxlZFdpZHRoID0gaW1hZ2VXaWR0aCAqIHpvb20uc2NhbGU7XG4gICAgICBzY2FsZWRIZWlnaHQgPSBpbWFnZUhlaWdodCAqIHpvb20uc2NhbGU7XG4gICAgICB0cmFuc2xhdGVNaW5YID0gTWF0aC5taW4oc2xpZGVXaWR0aCAvIDIgLSBzY2FsZWRXaWR0aCAvIDIsIDApO1xuICAgICAgdHJhbnNsYXRlTWluWSA9IE1hdGgubWluKHNsaWRlSGVpZ2h0IC8gMiAtIHNjYWxlZEhlaWdodCAvIDIsIDApO1xuICAgICAgdHJhbnNsYXRlTWF4WCA9IC10cmFuc2xhdGVNaW5YO1xuICAgICAgdHJhbnNsYXRlTWF4WSA9IC10cmFuc2xhdGVNaW5ZO1xuICAgICAgdHJhbnNsYXRlWCA9IGRpZmZYICogem9vbS5zY2FsZTtcbiAgICAgIHRyYW5zbGF0ZVkgPSBkaWZmWSAqIHpvb20uc2NhbGU7XG5cbiAgICAgIGlmICh0cmFuc2xhdGVYIDwgdHJhbnNsYXRlTWluWCkge1xuICAgICAgICB0cmFuc2xhdGVYID0gdHJhbnNsYXRlTWluWDtcbiAgICAgIH1cblxuICAgICAgaWYgKHRyYW5zbGF0ZVggPiB0cmFuc2xhdGVNYXhYKSB7XG4gICAgICAgIHRyYW5zbGF0ZVggPSB0cmFuc2xhdGVNYXhYO1xuICAgICAgfVxuXG4gICAgICBpZiAodHJhbnNsYXRlWSA8IHRyYW5zbGF0ZU1pblkpIHtcbiAgICAgICAgdHJhbnNsYXRlWSA9IHRyYW5zbGF0ZU1pblk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0cmFuc2xhdGVZID4gdHJhbnNsYXRlTWF4WSkge1xuICAgICAgICB0cmFuc2xhdGVZID0gdHJhbnNsYXRlTWF4WTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdHJhbnNsYXRlWCA9IDA7XG4gICAgICB0cmFuc2xhdGVZID0gMDtcbiAgICB9XG5cbiAgICBnZXN0dXJlLiRpbWFnZVdyYXBFbC50cmFuc2l0aW9uKDMwMCkudHJhbnNmb3JtKFwidHJhbnNsYXRlM2QoXCIgKyB0cmFuc2xhdGVYICsgXCJweCwgXCIgKyB0cmFuc2xhdGVZICsgXCJweCwwKVwiKTtcbiAgICBnZXN0dXJlLiRpbWFnZUVsLnRyYW5zaXRpb24oMzAwKS50cmFuc2Zvcm0oXCJ0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGUoXCIgKyB6b29tLnNjYWxlICsgXCIpXCIpO1xuICB9LFxuICBvdXQ6IGZ1bmN0aW9uIG91dCgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgem9vbSA9IHN3aXBlci56b29tO1xuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnpvb207XG4gICAgdmFyIGdlc3R1cmUgPSB6b29tLmdlc3R1cmU7XG5cbiAgICBpZiAoIWdlc3R1cmUuJHNsaWRlRWwpIHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgJiYgc3dpcGVyLnZpcnR1YWwpIHtcbiAgICAgICAgZ2VzdHVyZS4kc2xpZGVFbCA9IHN3aXBlci4kd3JhcHBlckVsLmNoaWxkcmVuKFwiLlwiICsgc3dpcGVyLnBhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGdlc3R1cmUuJHNsaWRlRWwgPSBzd2lwZXIuc2xpZGVzLmVxKHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgICB9XG5cbiAgICAgIGdlc3R1cmUuJGltYWdlRWwgPSBnZXN0dXJlLiRzbGlkZUVsLmZpbmQoJ2ltZywgc3ZnLCBjYW52YXMsIHBpY3R1cmUsIC5zd2lwZXItem9vbS10YXJnZXQnKTtcbiAgICAgIGdlc3R1cmUuJGltYWdlV3JhcEVsID0gZ2VzdHVyZS4kaW1hZ2VFbC5wYXJlbnQoXCIuXCIgKyBwYXJhbXMuY29udGFpbmVyQ2xhc3MpO1xuICAgIH1cblxuICAgIGlmICghZ2VzdHVyZS4kaW1hZ2VFbCB8fCBnZXN0dXJlLiRpbWFnZUVsLmxlbmd0aCA9PT0gMCB8fCAhZ2VzdHVyZS4kaW1hZ2VXcmFwRWwgfHwgZ2VzdHVyZS4kaW1hZ2VXcmFwRWwubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgem9vbS5zY2FsZSA9IDE7XG4gICAgem9vbS5jdXJyZW50U2NhbGUgPSAxO1xuICAgIGdlc3R1cmUuJGltYWdlV3JhcEVsLnRyYW5zaXRpb24oMzAwKS50cmFuc2Zvcm0oJ3RyYW5zbGF0ZTNkKDAsMCwwKScpO1xuICAgIGdlc3R1cmUuJGltYWdlRWwudHJhbnNpdGlvbigzMDApLnRyYW5zZm9ybSgndHJhbnNsYXRlM2QoMCwwLDApIHNjYWxlKDEpJyk7XG4gICAgZ2VzdHVyZS4kc2xpZGVFbC5yZW1vdmVDbGFzcyhcIlwiICsgcGFyYW1zLnpvb21lZFNsaWRlQ2xhc3MpO1xuICAgIGdlc3R1cmUuJHNsaWRlRWwgPSB1bmRlZmluZWQ7XG4gIH0sXG4gIHRvZ2dsZUdlc3R1cmVzOiBmdW5jdGlvbiB0b2dnbGVHZXN0dXJlcyhtZXRob2QpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgem9vbSA9IHN3aXBlci56b29tO1xuICAgIHZhciBzZWxlY3RvciA9IHpvb20uc2xpZGVTZWxlY3RvcixcbiAgICAgICAgcGFzc2l2ZSA9IHpvb20ucGFzc2l2ZUxpc3RlbmVyO1xuICAgIHN3aXBlci4kd3JhcHBlckVsW21ldGhvZF0oJ2dlc3R1cmVzdGFydCcsIHNlbGVjdG9yLCB6b29tLm9uR2VzdHVyZVN0YXJ0LCBwYXNzaXZlKTtcbiAgICBzd2lwZXIuJHdyYXBwZXJFbFttZXRob2RdKCdnZXN0dXJlY2hhbmdlJywgc2VsZWN0b3IsIHpvb20ub25HZXN0dXJlQ2hhbmdlLCBwYXNzaXZlKTtcbiAgICBzd2lwZXIuJHdyYXBwZXJFbFttZXRob2RdKCdnZXN0dXJlZW5kJywgc2VsZWN0b3IsIHpvb20ub25HZXN0dXJlRW5kLCBwYXNzaXZlKTtcbiAgfSxcbiAgZW5hYmxlR2VzdHVyZXM6IGZ1bmN0aW9uIGVuYWJsZUdlc3R1cmVzKCkge1xuICAgIGlmICh0aGlzLnpvb20uZ2VzdHVyZXNFbmFibGVkKSByZXR1cm47XG4gICAgdGhpcy56b29tLmdlc3R1cmVzRW5hYmxlZCA9IHRydWU7XG4gICAgdGhpcy56b29tLnRvZ2dsZUdlc3R1cmVzKCdvbicpO1xuICB9LFxuICBkaXNhYmxlR2VzdHVyZXM6IGZ1bmN0aW9uIGRpc2FibGVHZXN0dXJlcygpIHtcbiAgICBpZiAoIXRoaXMuem9vbS5nZXN0dXJlc0VuYWJsZWQpIHJldHVybjtcbiAgICB0aGlzLnpvb20uZ2VzdHVyZXNFbmFibGVkID0gZmFsc2U7XG4gICAgdGhpcy56b29tLnRvZ2dsZUdlc3R1cmVzKCdvZmYnKTtcbiAgfSxcbiAgLy8gQXR0YWNoL0RldGFjaCBFdmVudHNcbiAgZW5hYmxlOiBmdW5jdGlvbiBlbmFibGUoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHN1cHBvcnQgPSBzd2lwZXIuc3VwcG9ydDtcbiAgICB2YXIgem9vbSA9IHN3aXBlci56b29tO1xuICAgIGlmICh6b29tLmVuYWJsZWQpIHJldHVybjtcbiAgICB6b29tLmVuYWJsZWQgPSB0cnVlO1xuICAgIHZhciBwYXNzaXZlTGlzdGVuZXIgPSBzd2lwZXIudG91Y2hFdmVudHMuc3RhcnQgPT09ICd0b3VjaHN0YXJ0JyAmJiBzdXBwb3J0LnBhc3NpdmVMaXN0ZW5lciAmJiBzd2lwZXIucGFyYW1zLnBhc3NpdmVMaXN0ZW5lcnMgPyB7XG4gICAgICBwYXNzaXZlOiB0cnVlLFxuICAgICAgY2FwdHVyZTogZmFsc2VcbiAgICB9IDogZmFsc2U7XG4gICAgdmFyIGFjdGl2ZUxpc3RlbmVyV2l0aENhcHR1cmUgPSBzdXBwb3J0LnBhc3NpdmVMaXN0ZW5lciA/IHtcbiAgICAgIHBhc3NpdmU6IGZhbHNlLFxuICAgICAgY2FwdHVyZTogdHJ1ZVxuICAgIH0gOiB0cnVlO1xuICAgIHZhciBzbGlkZVNlbGVjdG9yID0gXCIuXCIgKyBzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3M7XG4gICAgc3dpcGVyLnpvb20ucGFzc2l2ZUxpc3RlbmVyID0gcGFzc2l2ZUxpc3RlbmVyO1xuICAgIHN3aXBlci56b29tLnNsaWRlU2VsZWN0b3IgPSBzbGlkZVNlbGVjdG9yOyAvLyBTY2FsZSBpbWFnZVxuXG4gICAgaWYgKHN1cHBvcnQuZ2VzdHVyZXMpIHtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsLm9uKHN3aXBlci50b3VjaEV2ZW50cy5zdGFydCwgc3dpcGVyLnpvb20uZW5hYmxlR2VzdHVyZXMsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbC5vbihzd2lwZXIudG91Y2hFdmVudHMuZW5kLCBzd2lwZXIuem9vbS5kaXNhYmxlR2VzdHVyZXMsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgfSBlbHNlIGlmIChzd2lwZXIudG91Y2hFdmVudHMuc3RhcnQgPT09ICd0b3VjaHN0YXJ0Jykge1xuICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub24oc3dpcGVyLnRvdWNoRXZlbnRzLnN0YXJ0LCBzbGlkZVNlbGVjdG9yLCB6b29tLm9uR2VzdHVyZVN0YXJ0LCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub24oc3dpcGVyLnRvdWNoRXZlbnRzLm1vdmUsIHNsaWRlU2VsZWN0b3IsIHpvb20ub25HZXN0dXJlQ2hhbmdlLCBhY3RpdmVMaXN0ZW5lcldpdGhDYXB0dXJlKTtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsLm9uKHN3aXBlci50b3VjaEV2ZW50cy5lbmQsIHNsaWRlU2VsZWN0b3IsIHpvb20ub25HZXN0dXJlRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuXG4gICAgICBpZiAoc3dpcGVyLnRvdWNoRXZlbnRzLmNhbmNlbCkge1xuICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbC5vbihzd2lwZXIudG91Y2hFdmVudHMuY2FuY2VsLCBzbGlkZVNlbGVjdG9yLCB6b29tLm9uR2VzdHVyZUVuZCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgIH1cbiAgICB9IC8vIE1vdmUgaW1hZ2VcblxuXG4gICAgc3dpcGVyLiR3cmFwcGVyRWwub24oc3dpcGVyLnRvdWNoRXZlbnRzLm1vdmUsIFwiLlwiICsgc3dpcGVyLnBhcmFtcy56b29tLmNvbnRhaW5lckNsYXNzLCB6b29tLm9uVG91Y2hNb3ZlLCBhY3RpdmVMaXN0ZW5lcldpdGhDYXB0dXJlKTtcbiAgfSxcbiAgZGlzYWJsZTogZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgem9vbSA9IHN3aXBlci56b29tO1xuICAgIGlmICghem9vbS5lbmFibGVkKSByZXR1cm47XG4gICAgdmFyIHN1cHBvcnQgPSBzd2lwZXIuc3VwcG9ydDtcbiAgICBzd2lwZXIuem9vbS5lbmFibGVkID0gZmFsc2U7XG4gICAgdmFyIHBhc3NpdmVMaXN0ZW5lciA9IHN3aXBlci50b3VjaEV2ZW50cy5zdGFydCA9PT0gJ3RvdWNoc3RhcnQnICYmIHN1cHBvcnQucGFzc2l2ZUxpc3RlbmVyICYmIHN3aXBlci5wYXJhbXMucGFzc2l2ZUxpc3RlbmVycyA/IHtcbiAgICAgIHBhc3NpdmU6IHRydWUsXG4gICAgICBjYXB0dXJlOiBmYWxzZVxuICAgIH0gOiBmYWxzZTtcbiAgICB2YXIgYWN0aXZlTGlzdGVuZXJXaXRoQ2FwdHVyZSA9IHN1cHBvcnQucGFzc2l2ZUxpc3RlbmVyID8ge1xuICAgICAgcGFzc2l2ZTogZmFsc2UsXG4gICAgICBjYXB0dXJlOiB0cnVlXG4gICAgfSA6IHRydWU7XG4gICAgdmFyIHNsaWRlU2VsZWN0b3IgPSBcIi5cIiArIHN3aXBlci5wYXJhbXMuc2xpZGVDbGFzczsgLy8gU2NhbGUgaW1hZ2VcblxuICAgIGlmIChzdXBwb3J0Lmdlc3R1cmVzKSB7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbC5vZmYoc3dpcGVyLnRvdWNoRXZlbnRzLnN0YXJ0LCBzd2lwZXIuem9vbS5lbmFibGVHZXN0dXJlcywgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsLm9mZihzd2lwZXIudG91Y2hFdmVudHMuZW5kLCBzd2lwZXIuem9vbS5kaXNhYmxlR2VzdHVyZXMsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgfSBlbHNlIGlmIChzd2lwZXIudG91Y2hFdmVudHMuc3RhcnQgPT09ICd0b3VjaHN0YXJ0Jykge1xuICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub2ZmKHN3aXBlci50b3VjaEV2ZW50cy5zdGFydCwgc2xpZGVTZWxlY3Rvciwgem9vbS5vbkdlc3R1cmVTdGFydCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsLm9mZihzd2lwZXIudG91Y2hFdmVudHMubW92ZSwgc2xpZGVTZWxlY3Rvciwgem9vbS5vbkdlc3R1cmVDaGFuZ2UsIGFjdGl2ZUxpc3RlbmVyV2l0aENhcHR1cmUpO1xuICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub2ZmKHN3aXBlci50b3VjaEV2ZW50cy5lbmQsIHNsaWRlU2VsZWN0b3IsIHpvb20ub25HZXN0dXJlRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuXG4gICAgICBpZiAoc3dpcGVyLnRvdWNoRXZlbnRzLmNhbmNlbCkge1xuICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbC5vZmYoc3dpcGVyLnRvdWNoRXZlbnRzLmNhbmNlbCwgc2xpZGVTZWxlY3Rvciwgem9vbS5vbkdlc3R1cmVFbmQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgICB9XG4gICAgfSAvLyBNb3ZlIGltYWdlXG5cblxuICAgIHN3aXBlci4kd3JhcHBlckVsLm9mZihzd2lwZXIudG91Y2hFdmVudHMubW92ZSwgXCIuXCIgKyBzd2lwZXIucGFyYW1zLnpvb20uY29udGFpbmVyQ2xhc3MsIHpvb20ub25Ub3VjaE1vdmUsIGFjdGl2ZUxpc3RlbmVyV2l0aENhcHR1cmUpO1xuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnem9vbScsXG4gIHBhcmFtczoge1xuICAgIHpvb206IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgbWF4UmF0aW86IDMsXG4gICAgICBtaW5SYXRpbzogMSxcbiAgICAgIHRvZ2dsZTogdHJ1ZSxcbiAgICAgIGNvbnRhaW5lckNsYXNzOiAnc3dpcGVyLXpvb20tY29udGFpbmVyJyxcbiAgICAgIHpvb21lZFNsaWRlQ2xhc3M6ICdzd2lwZXItc2xpZGUtem9vbWVkJ1xuICAgIH1cbiAgfSxcbiAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgYmluZE1vZHVsZU1ldGhvZHMoc3dpcGVyLCB7XG4gICAgICB6b29tOiBfZXh0ZW5kcyh7XG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICBzY2FsZTogMSxcbiAgICAgICAgY3VycmVudFNjYWxlOiAxLFxuICAgICAgICBpc1NjYWxpbmc6IGZhbHNlLFxuICAgICAgICBnZXN0dXJlOiB7XG4gICAgICAgICAgJHNsaWRlRWw6IHVuZGVmaW5lZCxcbiAgICAgICAgICBzbGlkZVdpZHRoOiB1bmRlZmluZWQsXG4gICAgICAgICAgc2xpZGVIZWlnaHQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAkaW1hZ2VFbDogdW5kZWZpbmVkLFxuICAgICAgICAgICRpbWFnZVdyYXBFbDogdW5kZWZpbmVkLFxuICAgICAgICAgIG1heFJhdGlvOiAzXG4gICAgICAgIH0sXG4gICAgICAgIGltYWdlOiB7XG4gICAgICAgICAgaXNUb3VjaGVkOiB1bmRlZmluZWQsXG4gICAgICAgICAgaXNNb3ZlZDogdW5kZWZpbmVkLFxuICAgICAgICAgIGN1cnJlbnRYOiB1bmRlZmluZWQsXG4gICAgICAgICAgY3VycmVudFk6IHVuZGVmaW5lZCxcbiAgICAgICAgICBtaW5YOiB1bmRlZmluZWQsXG4gICAgICAgICAgbWluWTogdW5kZWZpbmVkLFxuICAgICAgICAgIG1heFg6IHVuZGVmaW5lZCxcbiAgICAgICAgICBtYXhZOiB1bmRlZmluZWQsXG4gICAgICAgICAgd2lkdGg6IHVuZGVmaW5lZCxcbiAgICAgICAgICBoZWlnaHQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICBzdGFydFg6IHVuZGVmaW5lZCxcbiAgICAgICAgICBzdGFydFk6IHVuZGVmaW5lZCxcbiAgICAgICAgICB0b3VjaGVzU3RhcnQ6IHt9LFxuICAgICAgICAgIHRvdWNoZXNDdXJyZW50OiB7fVxuICAgICAgICB9LFxuICAgICAgICB2ZWxvY2l0eToge1xuICAgICAgICAgIHg6IHVuZGVmaW5lZCxcbiAgICAgICAgICB5OiB1bmRlZmluZWQsXG4gICAgICAgICAgcHJldlBvc2l0aW9uWDogdW5kZWZpbmVkLFxuICAgICAgICAgIHByZXZQb3NpdGlvblk6IHVuZGVmaW5lZCxcbiAgICAgICAgICBwcmV2VGltZTogdW5kZWZpbmVkXG4gICAgICAgIH1cbiAgICAgIH0sIFpvb20pXG4gICAgfSk7XG4gICAgdmFyIHNjYWxlID0gMTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc3dpcGVyLnpvb20sICdzY2FsZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gc2NhbGU7XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgICAgaWYgKHNjYWxlICE9PSB2YWx1ZSkge1xuICAgICAgICAgIHZhciBpbWFnZUVsID0gc3dpcGVyLnpvb20uZ2VzdHVyZS4kaW1hZ2VFbCA/IHN3aXBlci56b29tLmdlc3R1cmUuJGltYWdlRWxbMF0gOiB1bmRlZmluZWQ7XG4gICAgICAgICAgdmFyIHNsaWRlRWwgPSBzd2lwZXIuem9vbS5nZXN0dXJlLiRzbGlkZUVsID8gc3dpcGVyLnpvb20uZ2VzdHVyZS4kc2xpZGVFbFswXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICBzd2lwZXIuZW1pdCgnem9vbUNoYW5nZScsIHZhbHVlLCBpbWFnZUVsLCBzbGlkZUVsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNjYWxlID0gdmFsdWU7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgaW5pdDogZnVuY3Rpb24gaW5pdChzd2lwZXIpIHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLnpvb20uZW5hYmxlZCkge1xuICAgICAgICBzd2lwZXIuem9vbS5lbmFibGUoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koc3dpcGVyKSB7XG4gICAgICBzd2lwZXIuem9vbS5kaXNhYmxlKCk7XG4gICAgfSxcbiAgICB0b3VjaFN0YXJ0OiBmdW5jdGlvbiB0b3VjaFN0YXJ0KHN3aXBlciwgZSkge1xuICAgICAgaWYgKCFzd2lwZXIuem9vbS5lbmFibGVkKSByZXR1cm47XG4gICAgICBzd2lwZXIuem9vbS5vblRvdWNoU3RhcnQoZSk7XG4gICAgfSxcbiAgICB0b3VjaEVuZDogZnVuY3Rpb24gdG91Y2hFbmQoc3dpcGVyLCBlKSB7XG4gICAgICBpZiAoIXN3aXBlci56b29tLmVuYWJsZWQpIHJldHVybjtcbiAgICAgIHN3aXBlci56b29tLm9uVG91Y2hFbmQoZSk7XG4gICAgfSxcbiAgICBkb3VibGVUYXA6IGZ1bmN0aW9uIGRvdWJsZVRhcChzd2lwZXIsIGUpIHtcbiAgICAgIGlmICghc3dpcGVyLmFuaW1hdGluZyAmJiBzd2lwZXIucGFyYW1zLnpvb20uZW5hYmxlZCAmJiBzd2lwZXIuem9vbS5lbmFibGVkICYmIHN3aXBlci5wYXJhbXMuem9vbS50b2dnbGUpIHtcbiAgICAgICAgc3dpcGVyLnpvb20udG9nZ2xlKGUpO1xuICAgICAgfVxuICAgIH0sXG4gICAgdHJhbnNpdGlvbkVuZDogZnVuY3Rpb24gdHJhbnNpdGlvbkVuZChzd2lwZXIpIHtcbiAgICAgIGlmIChzd2lwZXIuem9vbS5lbmFibGVkICYmIHN3aXBlci5wYXJhbXMuem9vbS5lbmFibGVkKSB7XG4gICAgICAgIHN3aXBlci56b29tLm9uVHJhbnNpdGlvbkVuZCgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2xpZGVDaGFuZ2U6IGZ1bmN0aW9uIHNsaWRlQ2hhbmdlKHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci56b29tLmVuYWJsZWQgJiYgc3dpcGVyLnBhcmFtcy56b29tLmVuYWJsZWQgJiYgc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICAgIHN3aXBlci56b29tLm9uVHJhbnNpdGlvbkVuZCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL3pvb20vem9vbS5qcyIsImZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmltcG9ydCB7IGdldFdpbmRvdyB9IGZyb20gJ3Nzci13aW5kb3cnO1xuaW1wb3J0ICQgZnJvbSAnLi4vLi4vdXRpbHMvZG9tJztcbmltcG9ydCB7IGJpbmRNb2R1bGVNZXRob2RzIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xudmFyIExhenkgPSB7XG4gIGxvYWRJblNsaWRlOiBmdW5jdGlvbiBsb2FkSW5TbGlkZShpbmRleCwgbG9hZEluRHVwbGljYXRlKSB7XG4gICAgaWYgKGxvYWRJbkR1cGxpY2F0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICBsb2FkSW5EdXBsaWNhdGUgPSB0cnVlO1xuICAgIH1cblxuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLmxhenk7XG4gICAgaWYgKHR5cGVvZiBpbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybjtcbiAgICBpZiAoc3dpcGVyLnNsaWRlcy5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICB2YXIgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gICAgdmFyICRzbGlkZUVsID0gaXNWaXJ0dWFsID8gc3dpcGVyLiR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuXCIgKyBzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3MgKyBcIltkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyBpbmRleCArIFwiXFxcIl1cIikgOiBzd2lwZXIuc2xpZGVzLmVxKGluZGV4KTtcbiAgICB2YXIgJGltYWdlcyA9ICRzbGlkZUVsLmZpbmQoXCIuXCIgKyBwYXJhbXMuZWxlbWVudENsYXNzICsgXCI6bm90KC5cIiArIHBhcmFtcy5sb2FkZWRDbGFzcyArIFwiKTpub3QoLlwiICsgcGFyYW1zLmxvYWRpbmdDbGFzcyArIFwiKVwiKTtcblxuICAgIGlmICgkc2xpZGVFbC5oYXNDbGFzcyhwYXJhbXMuZWxlbWVudENsYXNzKSAmJiAhJHNsaWRlRWwuaGFzQ2xhc3MocGFyYW1zLmxvYWRlZENsYXNzKSAmJiAhJHNsaWRlRWwuaGFzQ2xhc3MocGFyYW1zLmxvYWRpbmdDbGFzcykpIHtcbiAgICAgICRpbWFnZXMucHVzaCgkc2xpZGVFbFswXSk7XG4gICAgfVxuXG4gICAgaWYgKCRpbWFnZXMubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgJGltYWdlcy5lYWNoKGZ1bmN0aW9uIChpbWFnZUVsKSB7XG4gICAgICB2YXIgJGltYWdlRWwgPSAkKGltYWdlRWwpO1xuICAgICAgJGltYWdlRWwuYWRkQ2xhc3MocGFyYW1zLmxvYWRpbmdDbGFzcyk7XG4gICAgICB2YXIgYmFja2dyb3VuZCA9ICRpbWFnZUVsLmF0dHIoJ2RhdGEtYmFja2dyb3VuZCcpO1xuICAgICAgdmFyIHNyYyA9ICRpbWFnZUVsLmF0dHIoJ2RhdGEtc3JjJyk7XG4gICAgICB2YXIgc3Jjc2V0ID0gJGltYWdlRWwuYXR0cignZGF0YS1zcmNzZXQnKTtcbiAgICAgIHZhciBzaXplcyA9ICRpbWFnZUVsLmF0dHIoJ2RhdGEtc2l6ZXMnKTtcbiAgICAgIHZhciAkcGljdHVyZUVsID0gJGltYWdlRWwucGFyZW50KCdwaWN0dXJlJyk7XG4gICAgICBzd2lwZXIubG9hZEltYWdlKCRpbWFnZUVsWzBdLCBzcmMgfHwgYmFja2dyb3VuZCwgc3Jjc2V0LCBzaXplcywgZmFsc2UsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzd2lwZXIgPT09ICd1bmRlZmluZWQnIHx8IHN3aXBlciA9PT0gbnVsbCB8fCAhc3dpcGVyIHx8IHN3aXBlciAmJiAhc3dpcGVyLnBhcmFtcyB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG5cbiAgICAgICAgaWYgKGJhY2tncm91bmQpIHtcbiAgICAgICAgICAkaW1hZ2VFbC5jc3MoJ2JhY2tncm91bmQtaW1hZ2UnLCBcInVybChcXFwiXCIgKyBiYWNrZ3JvdW5kICsgXCJcXFwiKVwiKTtcbiAgICAgICAgICAkaW1hZ2VFbC5yZW1vdmVBdHRyKCdkYXRhLWJhY2tncm91bmQnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoc3Jjc2V0KSB7XG4gICAgICAgICAgICAkaW1hZ2VFbC5hdHRyKCdzcmNzZXQnLCBzcmNzZXQpO1xuICAgICAgICAgICAgJGltYWdlRWwucmVtb3ZlQXR0cignZGF0YS1zcmNzZXQnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2l6ZXMpIHtcbiAgICAgICAgICAgICRpbWFnZUVsLmF0dHIoJ3NpemVzJywgc2l6ZXMpO1xuICAgICAgICAgICAgJGltYWdlRWwucmVtb3ZlQXR0cignZGF0YS1zaXplcycpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICgkcGljdHVyZUVsLmxlbmd0aCkge1xuICAgICAgICAgICAgJHBpY3R1cmVFbC5jaGlsZHJlbignc291cmNlJykuZWFjaChmdW5jdGlvbiAoc291cmNlRWwpIHtcbiAgICAgICAgICAgICAgdmFyICRzb3VyY2UgPSAkKHNvdXJjZUVsKTtcblxuICAgICAgICAgICAgICBpZiAoJHNvdXJjZS5hdHRyKCdkYXRhLXNyY3NldCcpKSB7XG4gICAgICAgICAgICAgICAgJHNvdXJjZS5hdHRyKCdzcmNzZXQnLCAkc291cmNlLmF0dHIoJ2RhdGEtc3Jjc2V0JykpO1xuICAgICAgICAgICAgICAgICRzb3VyY2UucmVtb3ZlQXR0cignZGF0YS1zcmNzZXQnKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNyYykge1xuICAgICAgICAgICAgJGltYWdlRWwuYXR0cignc3JjJywgc3JjKTtcbiAgICAgICAgICAgICRpbWFnZUVsLnJlbW92ZUF0dHIoJ2RhdGEtc3JjJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgJGltYWdlRWwuYWRkQ2xhc3MocGFyYW1zLmxvYWRlZENsYXNzKS5yZW1vdmVDbGFzcyhwYXJhbXMubG9hZGluZ0NsYXNzKTtcbiAgICAgICAgJHNsaWRlRWwuZmluZChcIi5cIiArIHBhcmFtcy5wcmVsb2FkZXJDbGFzcykucmVtb3ZlKCk7XG5cbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCAmJiBsb2FkSW5EdXBsaWNhdGUpIHtcbiAgICAgICAgICB2YXIgc2xpZGVPcmlnaW5hbEluZGV4ID0gJHNsaWRlRWwuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKTtcblxuICAgICAgICAgIGlmICgkc2xpZGVFbC5oYXNDbGFzcyhzd2lwZXIucGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKSB7XG4gICAgICAgICAgICB2YXIgb3JpZ2luYWxTbGlkZSA9IHN3aXBlci4kd3JhcHBlckVsLmNoaWxkcmVuKFwiW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVxcXCJcIiArIHNsaWRlT3JpZ2luYWxJbmRleCArIFwiXFxcIl06bm90KC5cIiArIHN3aXBlci5wYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcyArIFwiKVwiKTtcbiAgICAgICAgICAgIHN3aXBlci5sYXp5LmxvYWRJblNsaWRlKG9yaWdpbmFsU2xpZGUuaW5kZXgoKSwgZmFsc2UpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgZHVwbGljYXRlZFNsaWRlID0gc3dpcGVyLiR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuXCIgKyBzd2lwZXIucGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MgKyBcIltkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyBzbGlkZU9yaWdpbmFsSW5kZXggKyBcIlxcXCJdXCIpO1xuICAgICAgICAgICAgc3dpcGVyLmxhenkubG9hZEluU2xpZGUoZHVwbGljYXRlZFNsaWRlLmluZGV4KCksIGZhbHNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzd2lwZXIuZW1pdCgnbGF6eUltYWdlUmVhZHknLCAkc2xpZGVFbFswXSwgJGltYWdlRWxbMF0pO1xuXG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmF1dG9IZWlnaHQpIHtcbiAgICAgICAgICBzd2lwZXIudXBkYXRlQXV0b0hlaWdodCgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHN3aXBlci5lbWl0KCdsYXp5SW1hZ2VMb2FkJywgJHNsaWRlRWxbMF0sICRpbWFnZUVsWzBdKTtcbiAgICB9KTtcbiAgfSxcbiAgbG9hZDogZnVuY3Rpb24gbG9hZCgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsLFxuICAgICAgICBzd2lwZXJQYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgICBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzLFxuICAgICAgICBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcbiAgICB2YXIgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyUGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyUGFyYW1zLmxhenk7XG4gICAgdmFyIHNsaWRlc1BlclZpZXcgPSBzd2lwZXJQYXJhbXMuc2xpZGVzUGVyVmlldztcblxuICAgIGlmIChzbGlkZXNQZXJWaWV3ID09PSAnYXV0bycpIHtcbiAgICAgIHNsaWRlc1BlclZpZXcgPSAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNsaWRlRXhpc3QoaW5kZXgpIHtcbiAgICAgIGlmIChpc1ZpcnR1YWwpIHtcbiAgICAgICAgaWYgKCR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuXCIgKyBzd2lwZXJQYXJhbXMuc2xpZGVDbGFzcyArIFwiW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVxcXCJcIiArIGluZGV4ICsgXCJcXFwiXVwiKS5sZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChzbGlkZXNbaW5kZXhdKSByZXR1cm4gdHJ1ZTtcblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNsaWRlSW5kZXgoc2xpZGVFbCkge1xuICAgICAgaWYgKGlzVmlydHVhbCkge1xuICAgICAgICByZXR1cm4gJChzbGlkZUVsKS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gJChzbGlkZUVsKS5pbmRleCgpO1xuICAgIH1cblxuICAgIGlmICghc3dpcGVyLmxhenkuaW5pdGlhbEltYWdlTG9hZGVkKSBzd2lwZXIubGF6eS5pbml0aWFsSW1hZ2VMb2FkZWQgPSB0cnVlO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hTbGlkZXNWaXNpYmlsaXR5KSB7XG4gICAgICAkd3JhcHBlckVsLmNoaWxkcmVuKFwiLlwiICsgc3dpcGVyUGFyYW1zLnNsaWRlVmlzaWJsZUNsYXNzKS5lYWNoKGZ1bmN0aW9uIChzbGlkZUVsKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGlzVmlydHVhbCA/ICQoc2xpZGVFbCkuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSA6ICQoc2xpZGVFbCkuaW5kZXgoKTtcbiAgICAgICAgc3dpcGVyLmxhenkubG9hZEluU2xpZGUoaW5kZXgpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChzbGlkZXNQZXJWaWV3ID4gMSkge1xuICAgICAgZm9yICh2YXIgaSA9IGFjdGl2ZUluZGV4OyBpIDwgYWN0aXZlSW5kZXggKyBzbGlkZXNQZXJWaWV3OyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHNsaWRlRXhpc3QoaSkpIHN3aXBlci5sYXp5LmxvYWRJblNsaWRlKGkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIubGF6eS5sb2FkSW5TbGlkZShhY3RpdmVJbmRleCk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy5sb2FkUHJldk5leHQpIHtcbiAgICAgIGlmIChzbGlkZXNQZXJWaWV3ID4gMSB8fCBwYXJhbXMubG9hZFByZXZOZXh0QW1vdW50ICYmIHBhcmFtcy5sb2FkUHJldk5leHRBbW91bnQgPiAxKSB7XG4gICAgICAgIHZhciBhbW91bnQgPSBwYXJhbXMubG9hZFByZXZOZXh0QW1vdW50O1xuICAgICAgICB2YXIgc3B2ID0gc2xpZGVzUGVyVmlldztcbiAgICAgICAgdmFyIG1heEluZGV4ID0gTWF0aC5taW4oYWN0aXZlSW5kZXggKyBzcHYgKyBNYXRoLm1heChhbW91bnQsIHNwdiksIHNsaWRlcy5sZW5ndGgpO1xuICAgICAgICB2YXIgbWluSW5kZXggPSBNYXRoLm1heChhY3RpdmVJbmRleCAtIE1hdGgubWF4KHNwdiwgYW1vdW50KSwgMCk7IC8vIE5leHQgU2xpZGVzXG5cbiAgICAgICAgZm9yICh2YXIgX2kgPSBhY3RpdmVJbmRleCArIHNsaWRlc1BlclZpZXc7IF9pIDwgbWF4SW5kZXg7IF9pICs9IDEpIHtcbiAgICAgICAgICBpZiAoc2xpZGVFeGlzdChfaSkpIHN3aXBlci5sYXp5LmxvYWRJblNsaWRlKF9pKTtcbiAgICAgICAgfSAvLyBQcmV2IFNsaWRlc1xuXG5cbiAgICAgICAgZm9yICh2YXIgX2kyID0gbWluSW5kZXg7IF9pMiA8IGFjdGl2ZUluZGV4OyBfaTIgKz0gMSkge1xuICAgICAgICAgIGlmIChzbGlkZUV4aXN0KF9pMikpIHN3aXBlci5sYXp5LmxvYWRJblNsaWRlKF9pMik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBuZXh0U2xpZGUgPSAkd3JhcHBlckVsLmNoaWxkcmVuKFwiLlwiICsgc3dpcGVyUGFyYW1zLnNsaWRlTmV4dENsYXNzKTtcbiAgICAgICAgaWYgKG5leHRTbGlkZS5sZW5ndGggPiAwKSBzd2lwZXIubGF6eS5sb2FkSW5TbGlkZShzbGlkZUluZGV4KG5leHRTbGlkZSkpO1xuICAgICAgICB2YXIgcHJldlNsaWRlID0gJHdyYXBwZXJFbC5jaGlsZHJlbihcIi5cIiArIHN3aXBlclBhcmFtcy5zbGlkZVByZXZDbGFzcyk7XG4gICAgICAgIGlmIChwcmV2U2xpZGUubGVuZ3RoID4gMCkgc3dpcGVyLmxhenkubG9hZEluU2xpZGUoc2xpZGVJbmRleChwcmV2U2xpZGUpKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGNoZWNrSW5WaWV3T25Mb2FkOiBmdW5jdGlvbiBjaGVja0luVmlld09uTG9hZCgpIHtcbiAgICB2YXIgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgIHZhciAkc2Nyb2xsRWxlbWVudCA9IHN3aXBlci5wYXJhbXMubGF6eS5zY3JvbGxpbmdFbGVtZW50ID8gJChzd2lwZXIucGFyYW1zLmxhenkuc2Nyb2xsaW5nRWxlbWVudCkgOiAkKHdpbmRvdyk7XG4gICAgdmFyIGlzV2luZG93ID0gJHNjcm9sbEVsZW1lbnRbMF0gPT09IHdpbmRvdztcbiAgICB2YXIgc2Nyb2xsRWxlbWVudFdpZHRoID0gaXNXaW5kb3cgPyB3aW5kb3cuaW5uZXJXaWR0aCA6ICRzY3JvbGxFbGVtZW50WzBdLm9mZnNldFdpZHRoO1xuICAgIHZhciBzY3JvbGxFbGVtZW50SGVpZ2h0ID0gaXNXaW5kb3cgPyB3aW5kb3cuaW5uZXJIZWlnaHQgOiAkc2Nyb2xsRWxlbWVudFswXS5vZmZzZXRIZWlnaHQ7XG4gICAgdmFyIHN3aXBlck9mZnNldCA9IHN3aXBlci4kZWwub2Zmc2V0KCk7XG4gICAgdmFyIHJ0bCA9IHN3aXBlci5ydGxUcmFuc2xhdGU7XG4gICAgdmFyIGluVmlldyA9IGZhbHNlO1xuICAgIGlmIChydGwpIHN3aXBlck9mZnNldC5sZWZ0IC09IHN3aXBlci4kZWxbMF0uc2Nyb2xsTGVmdDtcbiAgICB2YXIgc3dpcGVyQ29vcmQgPSBbW3N3aXBlck9mZnNldC5sZWZ0LCBzd2lwZXJPZmZzZXQudG9wXSwgW3N3aXBlck9mZnNldC5sZWZ0ICsgc3dpcGVyLndpZHRoLCBzd2lwZXJPZmZzZXQudG9wXSwgW3N3aXBlck9mZnNldC5sZWZ0LCBzd2lwZXJPZmZzZXQudG9wICsgc3dpcGVyLmhlaWdodF0sIFtzd2lwZXJPZmZzZXQubGVmdCArIHN3aXBlci53aWR0aCwgc3dpcGVyT2Zmc2V0LnRvcCArIHN3aXBlci5oZWlnaHRdXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3dpcGVyQ29vcmQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIHZhciBwb2ludCA9IHN3aXBlckNvb3JkW2ldO1xuXG4gICAgICBpZiAocG9pbnRbMF0gPj0gMCAmJiBwb2ludFswXSA8PSBzY3JvbGxFbGVtZW50V2lkdGggJiYgcG9pbnRbMV0gPj0gMCAmJiBwb2ludFsxXSA8PSBzY3JvbGxFbGVtZW50SGVpZ2h0KSB7XG4gICAgICAgIGlmIChwb2ludFswXSA9PT0gMCAmJiBwb2ludFsxXSA9PT0gMCkgY29udGludWU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICAgICAgICBpblZpZXcgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwYXNzaXZlTGlzdGVuZXIgPSBzd2lwZXIudG91Y2hFdmVudHMuc3RhcnQgPT09ICd0b3VjaHN0YXJ0JyAmJiBzd2lwZXIuc3VwcG9ydC5wYXNzaXZlTGlzdGVuZXIgJiYgc3dpcGVyLnBhcmFtcy5wYXNzaXZlTGlzdGVuZXJzID8ge1xuICAgICAgcGFzc2l2ZTogdHJ1ZSxcbiAgICAgIGNhcHR1cmU6IGZhbHNlXG4gICAgfSA6IGZhbHNlO1xuXG4gICAgaWYgKGluVmlldykge1xuICAgICAgc3dpcGVyLmxhenkubG9hZCgpO1xuICAgICAgJHNjcm9sbEVsZW1lbnQub2ZmKCdzY3JvbGwnLCBzd2lwZXIubGF6eS5jaGVja0luVmlld09uTG9hZCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICB9IGVsc2UgaWYgKCFzd2lwZXIubGF6eS5zY3JvbGxIYW5kbGVyQXR0YWNoZWQpIHtcbiAgICAgIHN3aXBlci5sYXp5LnNjcm9sbEhhbmRsZXJBdHRhY2hlZCA9IHRydWU7XG4gICAgICAkc2Nyb2xsRWxlbWVudC5vbignc2Nyb2xsJywgc3dpcGVyLmxhenkuY2hlY2tJblZpZXdPbkxvYWQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgfVxuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnbGF6eScsXG4gIHBhcmFtczoge1xuICAgIGxhenk6IHtcbiAgICAgIGNoZWNrSW5WaWV3OiBmYWxzZSxcbiAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgbG9hZFByZXZOZXh0OiBmYWxzZSxcbiAgICAgIGxvYWRQcmV2TmV4dEFtb3VudDogMSxcbiAgICAgIGxvYWRPblRyYW5zaXRpb25TdGFydDogZmFsc2UsXG4gICAgICBzY3JvbGxpbmdFbGVtZW50OiAnJyxcbiAgICAgIGVsZW1lbnRDbGFzczogJ3N3aXBlci1sYXp5JyxcbiAgICAgIGxvYWRpbmdDbGFzczogJ3N3aXBlci1sYXp5LWxvYWRpbmcnLFxuICAgICAgbG9hZGVkQ2xhc3M6ICdzd2lwZXItbGF6eS1sb2FkZWQnLFxuICAgICAgcHJlbG9hZGVyQ2xhc3M6ICdzd2lwZXItbGF6eS1wcmVsb2FkZXInXG4gICAgfVxuICB9LFxuICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBiaW5kTW9kdWxlTWV0aG9kcyhzd2lwZXIsIHtcbiAgICAgIGxhenk6IF9leHRlbmRzKHtcbiAgICAgICAgaW5pdGlhbEltYWdlTG9hZGVkOiBmYWxzZVxuICAgICAgfSwgTGF6eSlcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBiZWZvcmVJbml0OiBmdW5jdGlvbiBiZWZvcmVJbml0KHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMubGF6eS5lbmFibGVkICYmIHN3aXBlci5wYXJhbXMucHJlbG9hZEltYWdlcykge1xuICAgICAgICBzd2lwZXIucGFyYW1zLnByZWxvYWRJbWFnZXMgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoc3dpcGVyKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sYXp5LmVuYWJsZWQgJiYgIXN3aXBlci5wYXJhbXMubG9vcCAmJiBzd2lwZXIucGFyYW1zLmluaXRpYWxTbGlkZSA9PT0gMCkge1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sYXp5LmNoZWNrSW5WaWV3KSB7XG4gICAgICAgICAgc3dpcGVyLmxhenkuY2hlY2tJblZpZXdPbkxvYWQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzd2lwZXIubGF6eS5sb2FkKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHNjcm9sbDogZnVuY3Rpb24gc2Nyb2xsKHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZnJlZU1vZGUgJiYgIXN3aXBlci5wYXJhbXMuZnJlZU1vZGVTdGlja3kpIHtcbiAgICAgICAgc3dpcGVyLmxhenkubG9hZCgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgJ3Njcm9sbGJhckRyYWdNb3ZlIHJlc2l6ZSBfZnJlZU1vZGVOb01vbWVudHVtUmVsZWFzZSc6IGZ1bmN0aW9uIGxhenlMb2FkKHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMubGF6eS5lbmFibGVkKSB7XG4gICAgICAgIHN3aXBlci5sYXp5LmxvYWQoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHRyYW5zaXRpb25TdGFydDogZnVuY3Rpb24gdHJhbnNpdGlvblN0YXJ0KHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMubGF6eS5lbmFibGVkKSB7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxhenkubG9hZE9uVHJhbnNpdGlvblN0YXJ0IHx8ICFzd2lwZXIucGFyYW1zLmxhenkubG9hZE9uVHJhbnNpdGlvblN0YXJ0ICYmICFzd2lwZXIubGF6eS5pbml0aWFsSW1hZ2VMb2FkZWQpIHtcbiAgICAgICAgICBzd2lwZXIubGF6eS5sb2FkKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHRyYW5zaXRpb25FbmQ6IGZ1bmN0aW9uIHRyYW5zaXRpb25FbmQoc3dpcGVyKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sYXp5LmVuYWJsZWQgJiYgIXN3aXBlci5wYXJhbXMubGF6eS5sb2FkT25UcmFuc2l0aW9uU3RhcnQpIHtcbiAgICAgICAgc3dpcGVyLmxhenkubG9hZCgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2xpZGVDaGFuZ2U6IGZ1bmN0aW9uIHNsaWRlQ2hhbmdlKHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMubGF6eS5lbmFibGVkICYmIHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgICAgICBzd2lwZXIubGF6eS5sb2FkKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvbGF6eS9sYXp5LmpzIiwiZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuLyogZXNsaW50IG5vLWJpdHdpc2U6IFtcImVycm9yXCIsIHsgXCJhbGxvd1wiOiBbXCI+PlwiXSB9XSAqL1xuaW1wb3J0IHsgbmV4dFRpY2ssIGJpbmRNb2R1bGVNZXRob2RzIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xudmFyIENvbnRyb2xsZXIgPSB7XG4gIExpbmVhclNwbGluZTogZnVuY3Rpb24gTGluZWFyU3BsaW5lKHgsIHkpIHtcbiAgICB2YXIgYmluYXJ5U2VhcmNoID0gZnVuY3Rpb24gc2VhcmNoKCkge1xuICAgICAgdmFyIG1heEluZGV4O1xuICAgICAgdmFyIG1pbkluZGV4O1xuICAgICAgdmFyIGd1ZXNzO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhcnJheSwgdmFsKSB7XG4gICAgICAgIG1pbkluZGV4ID0gLTE7XG4gICAgICAgIG1heEluZGV4ID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlIChtYXhJbmRleCAtIG1pbkluZGV4ID4gMSkge1xuICAgICAgICAgIGd1ZXNzID0gbWF4SW5kZXggKyBtaW5JbmRleCA+PiAxO1xuXG4gICAgICAgICAgaWYgKGFycmF5W2d1ZXNzXSA8PSB2YWwpIHtcbiAgICAgICAgICAgIG1pbkluZGV4ID0gZ3Vlc3M7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1heEluZGV4ID0gZ3Vlc3M7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1heEluZGV4O1xuICAgICAgfTtcbiAgICB9KCk7XG5cbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gICAgdGhpcy5sYXN0SW5kZXggPSB4Lmxlbmd0aCAtIDE7IC8vIEdpdmVuIGFuIHggdmFsdWUgKHgyKSwgcmV0dXJuIHRoZSBleHBlY3RlZCB5MiB2YWx1ZTpcbiAgICAvLyAoeDEseTEpIGlzIHRoZSBrbm93biBwb2ludCBiZWZvcmUgZ2l2ZW4gdmFsdWUsXG4gICAgLy8gKHgzLHkzKSBpcyB0aGUga25vd24gcG9pbnQgYWZ0ZXIgZ2l2ZW4gdmFsdWUuXG5cbiAgICB2YXIgaTE7XG4gICAgdmFyIGkzO1xuXG4gICAgdGhpcy5pbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uIGludGVycG9sYXRlKHgyKSB7XG4gICAgICBpZiAoIXgyKSByZXR1cm4gMDsgLy8gR2V0IHRoZSBpbmRleGVzIG9mIHgxIGFuZCB4MyAodGhlIGFycmF5IGluZGV4ZXMgYmVmb3JlIGFuZCBhZnRlciBnaXZlbiB4Mik6XG5cbiAgICAgIGkzID0gYmluYXJ5U2VhcmNoKHRoaXMueCwgeDIpO1xuICAgICAgaTEgPSBpMyAtIDE7IC8vIFdlIGhhdmUgb3VyIGluZGV4ZXMgaTEgJiBpMywgc28gd2UgY2FuIGNhbGN1bGF0ZSBhbHJlYWR5OlxuICAgICAgLy8geTIgOj0gKCh4MuKIkngxKSDDlyAoeTPiiJJ5MSkpIMO3ICh4M+KIkngxKSArIHkxXG5cbiAgICAgIHJldHVybiAoeDIgLSB0aGlzLnhbaTFdKSAqICh0aGlzLnlbaTNdIC0gdGhpcy55W2kxXSkgLyAodGhpcy54W2kzXSAtIHRoaXMueFtpMV0pICsgdGhpcy55W2kxXTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIC8vIHh4eDogZm9yIG5vdyBpIHdpbGwganVzdCBzYXZlIG9uZSBzcGxpbmUgZnVuY3Rpb24gdG8gdG9cbiAgZ2V0SW50ZXJwb2xhdGVGdW5jdGlvbjogZnVuY3Rpb24gZ2V0SW50ZXJwb2xhdGVGdW5jdGlvbihjKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG5cbiAgICBpZiAoIXN3aXBlci5jb250cm9sbGVyLnNwbGluZSkge1xuICAgICAgc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lID0gc3dpcGVyLnBhcmFtcy5sb29wID8gbmV3IENvbnRyb2xsZXIuTGluZWFyU3BsaW5lKHN3aXBlci5zbGlkZXNHcmlkLCBjLnNsaWRlc0dyaWQpIDogbmV3IENvbnRyb2xsZXIuTGluZWFyU3BsaW5lKHN3aXBlci5zbmFwR3JpZCwgYy5zbmFwR3JpZCk7XG4gICAgfVxuICB9LFxuICBzZXRUcmFuc2xhdGU6IGZ1bmN0aW9uIHNldFRyYW5zbGF0ZShfc2V0VHJhbnNsYXRlLCBieUNvbnRyb2xsZXIpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgY29udHJvbGxlZCA9IHN3aXBlci5jb250cm9sbGVyLmNvbnRyb2w7XG4gICAgdmFyIG11bHRpcGxpZXI7XG4gICAgdmFyIGNvbnRyb2xsZWRUcmFuc2xhdGU7XG4gICAgdmFyIFN3aXBlciA9IHN3aXBlci5jb25zdHJ1Y3RvcjtcblxuICAgIGZ1bmN0aW9uIHNldENvbnRyb2xsZWRUcmFuc2xhdGUoYykge1xuICAgICAgLy8gdGhpcyB3aWxsIGNyZWF0ZSBhbiBJbnRlcnBvbGF0ZSBmdW5jdGlvbiBiYXNlZCBvbiB0aGUgc25hcEdyaWRzXG4gICAgICAvLyB4IGlzIHRoZSBHcmlkIG9mIHRoZSBzY3JvbGxlZCBzY3JvbGxlciBhbmQgeSB3aWxsIGJlIHRoZSBjb250cm9sbGVkIHNjcm9sbGVyXG4gICAgICAvLyBpdCBtYWtlcyBzZW5zZSB0byBjcmVhdGUgdGhpcyBvbmx5IG9uY2UgYW5kIHJlY2FsbCBpdCBmb3IgdGhlIGludGVycG9sYXRpb25cbiAgICAgIC8vIHRoZSBmdW5jdGlvbiBkb2VzIGEgbG90IG9mIHZhbHVlIGNhY2hpbmcgZm9yIHBlcmZvcm1hbmNlXG4gICAgICB2YXIgdHJhbnNsYXRlID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSA/IC1zd2lwZXIudHJhbnNsYXRlIDogc3dpcGVyLnRyYW5zbGF0ZTtcblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuY29udHJvbGxlci5ieSA9PT0gJ3NsaWRlJykge1xuICAgICAgICBzd2lwZXIuY29udHJvbGxlci5nZXRJbnRlcnBvbGF0ZUZ1bmN0aW9uKGMpOyAvLyBpIGFtIG5vdCBzdXJlIHdoeSB0aGUgdmFsdWVzIGhhdmUgdG8gYmUgbXVsdGlwbGljYXRlZCB0aGlzIHdheSwgdHJpZWQgdG8gaW52ZXJ0IHRoZSBzbmFwR3JpZFxuICAgICAgICAvLyBidXQgaXQgZGlkIG5vdCB3b3JrIG91dFxuXG4gICAgICAgIGNvbnRyb2xsZWRUcmFuc2xhdGUgPSAtc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lLmludGVycG9sYXRlKC10cmFuc2xhdGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWNvbnRyb2xsZWRUcmFuc2xhdGUgfHwgc3dpcGVyLnBhcmFtcy5jb250cm9sbGVyLmJ5ID09PSAnY29udGFpbmVyJykge1xuICAgICAgICBtdWx0aXBsaWVyID0gKGMubWF4VHJhbnNsYXRlKCkgLSBjLm1pblRyYW5zbGF0ZSgpKSAvIChzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpO1xuICAgICAgICBjb250cm9sbGVkVHJhbnNsYXRlID0gKHRyYW5zbGF0ZSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSkgKiBtdWx0aXBsaWVyICsgYy5taW5UcmFuc2xhdGUoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuY29udHJvbGxlci5pbnZlcnNlKSB7XG4gICAgICAgIGNvbnRyb2xsZWRUcmFuc2xhdGUgPSBjLm1heFRyYW5zbGF0ZSgpIC0gY29udHJvbGxlZFRyYW5zbGF0ZTtcbiAgICAgIH1cblxuICAgICAgYy51cGRhdGVQcm9ncmVzcyhjb250cm9sbGVkVHJhbnNsYXRlKTtcbiAgICAgIGMuc2V0VHJhbnNsYXRlKGNvbnRyb2xsZWRUcmFuc2xhdGUsIHN3aXBlcik7XG4gICAgICBjLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgICBjLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICB9XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheShjb250cm9sbGVkKSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb250cm9sbGVkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChjb250cm9sbGVkW2ldICE9PSBieUNvbnRyb2xsZXIgJiYgY29udHJvbGxlZFtpXSBpbnN0YW5jZW9mIFN3aXBlcikge1xuICAgICAgICAgIHNldENvbnRyb2xsZWRUcmFuc2xhdGUoY29udHJvbGxlZFtpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNvbnRyb2xsZWQgaW5zdGFuY2VvZiBTd2lwZXIgJiYgYnlDb250cm9sbGVyICE9PSBjb250cm9sbGVkKSB7XG4gICAgICBzZXRDb250cm9sbGVkVHJhbnNsYXRlKGNvbnRyb2xsZWQpO1xuICAgIH1cbiAgfSxcbiAgc2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihkdXJhdGlvbiwgYnlDb250cm9sbGVyKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIFN3aXBlciA9IHN3aXBlci5jb25zdHJ1Y3RvcjtcbiAgICB2YXIgY29udHJvbGxlZCA9IHN3aXBlci5jb250cm9sbGVyLmNvbnRyb2w7XG4gICAgdmFyIGk7XG5cbiAgICBmdW5jdGlvbiBzZXRDb250cm9sbGVkVHJhbnNpdGlvbihjKSB7XG4gICAgICBjLnNldFRyYW5zaXRpb24oZHVyYXRpb24sIHN3aXBlcik7XG5cbiAgICAgIGlmIChkdXJhdGlvbiAhPT0gMCkge1xuICAgICAgICBjLnRyYW5zaXRpb25TdGFydCgpO1xuXG4gICAgICAgIGlmIChjLnBhcmFtcy5hdXRvSGVpZ2h0KSB7XG4gICAgICAgICAgbmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgYy51cGRhdGVBdXRvSGVpZ2h0KCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBjLiR3cmFwcGVyRWwudHJhbnNpdGlvbkVuZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKCFjb250cm9sbGVkKSByZXR1cm47XG5cbiAgICAgICAgICBpZiAoYy5wYXJhbXMubG9vcCAmJiBzd2lwZXIucGFyYW1zLmNvbnRyb2xsZXIuYnkgPT09ICdzbGlkZScpIHtcbiAgICAgICAgICAgIGMubG9vcEZpeCgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGMudHJhbnNpdGlvbkVuZCgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheShjb250cm9sbGVkKSkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IGNvbnRyb2xsZWQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKGNvbnRyb2xsZWRbaV0gIT09IGJ5Q29udHJvbGxlciAmJiBjb250cm9sbGVkW2ldIGluc3RhbmNlb2YgU3dpcGVyKSB7XG4gICAgICAgICAgc2V0Q29udHJvbGxlZFRyYW5zaXRpb24oY29udHJvbGxlZFtpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNvbnRyb2xsZWQgaW5zdGFuY2VvZiBTd2lwZXIgJiYgYnlDb250cm9sbGVyICE9PSBjb250cm9sbGVkKSB7XG4gICAgICBzZXRDb250cm9sbGVkVHJhbnNpdGlvbihjb250cm9sbGVkKTtcbiAgICB9XG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdjb250cm9sbGVyJyxcbiAgcGFyYW1zOiB7XG4gICAgY29udHJvbGxlcjoge1xuICAgICAgY29udHJvbDogdW5kZWZpbmVkLFxuICAgICAgaW52ZXJzZTogZmFsc2UsXG4gICAgICBieTogJ3NsaWRlJyAvLyBvciAnY29udGFpbmVyJ1xuXG4gICAgfVxuICB9LFxuICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBiaW5kTW9kdWxlTWV0aG9kcyhzd2lwZXIsIHtcbiAgICAgIGNvbnRyb2xsZXI6IF9leHRlbmRzKHtcbiAgICAgICAgY29udHJvbDogc3dpcGVyLnBhcmFtcy5jb250cm9sbGVyLmNvbnRyb2xcbiAgICAgIH0sIENvbnRyb2xsZXIpXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoc3dpcGVyKSB7XG4gICAgICBpZiAoIXN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wpIHJldHVybjtcblxuICAgICAgaWYgKHN3aXBlci5jb250cm9sbGVyLnNwbGluZSkge1xuICAgICAgICBzd2lwZXIuY29udHJvbGxlci5zcGxpbmUgPSB1bmRlZmluZWQ7XG4gICAgICAgIGRlbGV0ZSBzd2lwZXIuY29udHJvbGxlci5zcGxpbmU7XG4gICAgICB9XG4gICAgfSxcbiAgICByZXNpemU6IGZ1bmN0aW9uIHJlc2l6ZShzd2lwZXIpIHtcbiAgICAgIGlmICghc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbCkgcmV0dXJuO1xuXG4gICAgICBpZiAoc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lKSB7XG4gICAgICAgIHN3aXBlci5jb250cm9sbGVyLnNwbGluZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgZGVsZXRlIHN3aXBlci5jb250cm9sbGVyLnNwbGluZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIG9ic2VydmVyVXBkYXRlOiBmdW5jdGlvbiBvYnNlcnZlclVwZGF0ZShzd2lwZXIpIHtcbiAgICAgIGlmICghc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbCkgcmV0dXJuO1xuXG4gICAgICBpZiAoc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lKSB7XG4gICAgICAgIHN3aXBlci5jb250cm9sbGVyLnNwbGluZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgZGVsZXRlIHN3aXBlci5jb250cm9sbGVyLnNwbGluZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNldFRyYW5zbGF0ZTogZnVuY3Rpb24gc2V0VHJhbnNsYXRlKHN3aXBlciwgdHJhbnNsYXRlLCBieUNvbnRyb2xsZXIpIHtcbiAgICAgIGlmICghc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLmNvbnRyb2xsZXIuc2V0VHJhbnNsYXRlKHRyYW5zbGF0ZSwgYnlDb250cm9sbGVyKTtcbiAgICB9LFxuICAgIHNldFRyYW5zaXRpb246IGZ1bmN0aW9uIHNldFRyYW5zaXRpb24oc3dpcGVyLCBkdXJhdGlvbiwgYnlDb250cm9sbGVyKSB7XG4gICAgICBpZiAoIXN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wpIHJldHVybjtcbiAgICAgIHN3aXBlci5jb250cm9sbGVyLnNldFRyYW5zaXRpb24oZHVyYXRpb24sIGJ5Q29udHJvbGxlcik7XG4gICAgfVxuICB9XG59O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29udHJvbGxlci9jb250cm9sbGVyLmpzIiwiZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuaW1wb3J0ICQgZnJvbSAnLi4vLi4vdXRpbHMvZG9tJztcbmltcG9ydCB7IGJpbmRNb2R1bGVNZXRob2RzLCBjbGFzc2VzVG9TZWxlY3RvciB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcbnZhciBBMTF5ID0ge1xuICBnZXRSYW5kb21OdW1iZXI6IGZ1bmN0aW9uIGdldFJhbmRvbU51bWJlcihzaXplKSB7XG4gICAgaWYgKHNpemUgPT09IHZvaWQgMCkge1xuICAgICAgc2l6ZSA9IDE2O1xuICAgIH1cblxuICAgIHZhciByYW5kb21DaGFyID0gZnVuY3Rpb24gcmFuZG9tQ2hhcigpIHtcbiAgICAgIHJldHVybiBNYXRoLnJvdW5kKDE2ICogTWF0aC5yYW5kb20oKSkudG9TdHJpbmcoMTYpO1xuICAgIH07XG5cbiAgICByZXR1cm4gJ3gnLnJlcGVhdChzaXplKS5yZXBsYWNlKC94L2csIHJhbmRvbUNoYXIpO1xuICB9LFxuICBtYWtlRWxGb2N1c2FibGU6IGZ1bmN0aW9uIG1ha2VFbEZvY3VzYWJsZSgkZWwpIHtcbiAgICAkZWwuYXR0cigndGFiSW5kZXgnLCAnMCcpO1xuICAgIHJldHVybiAkZWw7XG4gIH0sXG4gIG1ha2VFbE5vdEZvY3VzYWJsZTogZnVuY3Rpb24gbWFrZUVsTm90Rm9jdXNhYmxlKCRlbCkge1xuICAgICRlbC5hdHRyKCd0YWJJbmRleCcsICctMScpO1xuICAgIHJldHVybiAkZWw7XG4gIH0sXG4gIGFkZEVsUm9sZTogZnVuY3Rpb24gYWRkRWxSb2xlKCRlbCwgcm9sZSkge1xuICAgICRlbC5hdHRyKCdyb2xlJywgcm9sZSk7XG4gICAgcmV0dXJuICRlbDtcbiAgfSxcbiAgYWRkRWxSb2xlRGVzY3JpcHRpb246IGZ1bmN0aW9uIGFkZEVsUm9sZURlc2NyaXB0aW9uKCRlbCwgZGVzY3JpcHRpb24pIHtcbiAgICAkZWwuYXR0cignYXJpYS1yb2xlZGVzY3JpcHRpb24nLCBkZXNjcmlwdGlvbik7XG4gICAgcmV0dXJuICRlbDtcbiAgfSxcbiAgYWRkRWxDb250cm9sczogZnVuY3Rpb24gYWRkRWxDb250cm9scygkZWwsIGNvbnRyb2xzKSB7XG4gICAgJGVsLmF0dHIoJ2FyaWEtY29udHJvbHMnLCBjb250cm9scyk7XG4gICAgcmV0dXJuICRlbDtcbiAgfSxcbiAgYWRkRWxMYWJlbDogZnVuY3Rpb24gYWRkRWxMYWJlbCgkZWwsIGxhYmVsKSB7XG4gICAgJGVsLmF0dHIoJ2FyaWEtbGFiZWwnLCBsYWJlbCk7XG4gICAgcmV0dXJuICRlbDtcbiAgfSxcbiAgYWRkRWxJZDogZnVuY3Rpb24gYWRkRWxJZCgkZWwsIGlkKSB7XG4gICAgJGVsLmF0dHIoJ2lkJywgaWQpO1xuICAgIHJldHVybiAkZWw7XG4gIH0sXG4gIGFkZEVsTGl2ZTogZnVuY3Rpb24gYWRkRWxMaXZlKCRlbCwgbGl2ZSkge1xuICAgICRlbC5hdHRyKCdhcmlhLWxpdmUnLCBsaXZlKTtcbiAgICByZXR1cm4gJGVsO1xuICB9LFxuICBkaXNhYmxlRWw6IGZ1bmN0aW9uIGRpc2FibGVFbCgkZWwpIHtcbiAgICAkZWwuYXR0cignYXJpYS1kaXNhYmxlZCcsIHRydWUpO1xuICAgIHJldHVybiAkZWw7XG4gIH0sXG4gIGVuYWJsZUVsOiBmdW5jdGlvbiBlbmFibGVFbCgkZWwpIHtcbiAgICAkZWwuYXR0cignYXJpYS1kaXNhYmxlZCcsIGZhbHNlKTtcbiAgICByZXR1cm4gJGVsO1xuICB9LFxuICBvbkVudGVyT3JTcGFjZUtleTogZnVuY3Rpb24gb25FbnRlck9yU3BhY2VLZXkoZSkge1xuICAgIGlmIChlLmtleUNvZGUgIT09IDEzICYmIGUua2V5Q29kZSAhPT0gMzIpIHJldHVybjtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5hMTF5O1xuICAgIHZhciAkdGFyZ2V0RWwgPSAkKGUudGFyZ2V0KTtcblxuICAgIGlmIChzd2lwZXIubmF2aWdhdGlvbiAmJiBzd2lwZXIubmF2aWdhdGlvbi4kbmV4dEVsICYmICR0YXJnZXRFbC5pcyhzd2lwZXIubmF2aWdhdGlvbi4kbmV4dEVsKSkge1xuICAgICAgaWYgKCEoc3dpcGVyLmlzRW5kICYmICFzd2lwZXIucGFyYW1zLmxvb3ApKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZU5leHQoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN3aXBlci5pc0VuZCkge1xuICAgICAgICBzd2lwZXIuYTExeS5ub3RpZnkocGFyYW1zLmxhc3RTbGlkZU1lc3NhZ2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLmExMXkubm90aWZ5KHBhcmFtcy5uZXh0U2xpZGVNZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc3dpcGVyLm5hdmlnYXRpb24gJiYgc3dpcGVyLm5hdmlnYXRpb24uJHByZXZFbCAmJiAkdGFyZ2V0RWwuaXMoc3dpcGVyLm5hdmlnYXRpb24uJHByZXZFbCkpIHtcbiAgICAgIGlmICghKHN3aXBlci5pc0JlZ2lubmluZyAmJiAhc3dpcGVyLnBhcmFtcy5sb29wKSkge1xuICAgICAgICBzd2lwZXIuc2xpZGVQcmV2KCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzd2lwZXIuaXNCZWdpbm5pbmcpIHtcbiAgICAgICAgc3dpcGVyLmExMXkubm90aWZ5KHBhcmFtcy5maXJzdFNsaWRlTWVzc2FnZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIuYTExeS5ub3RpZnkocGFyYW1zLnByZXZTbGlkZU1lc3NhZ2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzd2lwZXIucGFnaW5hdGlvbiAmJiAkdGFyZ2V0RWwuaXMoY2xhc3Nlc1RvU2VsZWN0b3Ioc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmJ1bGxldENsYXNzKSkpIHtcbiAgICAgICR0YXJnZXRFbFswXS5jbGljaygpO1xuICAgIH1cbiAgfSxcbiAgbm90aWZ5OiBmdW5jdGlvbiBub3RpZnkobWVzc2FnZSkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBub3RpZmljYXRpb24gPSBzd2lwZXIuYTExeS5saXZlUmVnaW9uO1xuICAgIGlmIChub3RpZmljYXRpb24ubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgbm90aWZpY2F0aW9uLmh0bWwoJycpO1xuICAgIG5vdGlmaWNhdGlvbi5odG1sKG1lc3NhZ2UpO1xuICB9LFxuICB1cGRhdGVOYXZpZ2F0aW9uOiBmdW5jdGlvbiB1cGRhdGVOYXZpZ2F0aW9uKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3AgfHwgIXN3aXBlci5uYXZpZ2F0aW9uKSByZXR1cm47XG4gICAgdmFyIF9zd2lwZXIkbmF2aWdhdGlvbiA9IHN3aXBlci5uYXZpZ2F0aW9uLFxuICAgICAgICAkbmV4dEVsID0gX3N3aXBlciRuYXZpZ2F0aW9uLiRuZXh0RWwsXG4gICAgICAgICRwcmV2RWwgPSBfc3dpcGVyJG5hdmlnYXRpb24uJHByZXZFbDtcblxuICAgIGlmICgkcHJldkVsICYmICRwcmV2RWwubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKHN3aXBlci5pc0JlZ2lubmluZykge1xuICAgICAgICBzd2lwZXIuYTExeS5kaXNhYmxlRWwoJHByZXZFbCk7XG4gICAgICAgIHN3aXBlci5hMTF5Lm1ha2VFbE5vdEZvY3VzYWJsZSgkcHJldkVsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5hMTF5LmVuYWJsZUVsKCRwcmV2RWwpO1xuICAgICAgICBzd2lwZXIuYTExeS5tYWtlRWxGb2N1c2FibGUoJHByZXZFbCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCRuZXh0RWwgJiYgJG5leHRFbC5sZW5ndGggPiAwKSB7XG4gICAgICBpZiAoc3dpcGVyLmlzRW5kKSB7XG4gICAgICAgIHN3aXBlci5hMTF5LmRpc2FibGVFbCgkbmV4dEVsKTtcbiAgICAgICAgc3dpcGVyLmExMXkubWFrZUVsTm90Rm9jdXNhYmxlKCRuZXh0RWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLmExMXkuZW5hYmxlRWwoJG5leHRFbCk7XG4gICAgICAgIHN3aXBlci5hMTF5Lm1ha2VFbEZvY3VzYWJsZSgkbmV4dEVsKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHVwZGF0ZVBhZ2luYXRpb246IGZ1bmN0aW9uIHVwZGF0ZVBhZ2luYXRpb24oKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuYTExeTtcblxuICAgIGlmIChzd2lwZXIucGFnaW5hdGlvbiAmJiBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uY2xpY2thYmxlICYmIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMgJiYgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cy5sZW5ndGgpIHtcbiAgICAgIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMuZWFjaChmdW5jdGlvbiAoYnVsbGV0RWwpIHtcbiAgICAgICAgdmFyICRidWxsZXRFbCA9ICQoYnVsbGV0RWwpO1xuICAgICAgICBzd2lwZXIuYTExeS5tYWtlRWxGb2N1c2FibGUoJGJ1bGxldEVsKTtcblxuICAgICAgICBpZiAoIXN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5yZW5kZXJCdWxsZXQpIHtcbiAgICAgICAgICBzd2lwZXIuYTExeS5hZGRFbFJvbGUoJGJ1bGxldEVsLCAnYnV0dG9uJyk7XG4gICAgICAgICAgc3dpcGVyLmExMXkuYWRkRWxMYWJlbCgkYnVsbGV0RWwsIHBhcmFtcy5wYWdpbmF0aW9uQnVsbGV0TWVzc2FnZS5yZXBsYWNlKC9cXHtcXHtpbmRleFxcfVxcfS8sICRidWxsZXRFbC5pbmRleCgpICsgMSkpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuYTExeTtcbiAgICBzd2lwZXIuJGVsLmFwcGVuZChzd2lwZXIuYTExeS5saXZlUmVnaW9uKTsgLy8gQ29udGFpbmVyXG5cbiAgICB2YXIgJGNvbnRhaW5lckVsID0gc3dpcGVyLiRlbDtcblxuICAgIGlmIChwYXJhbXMuY29udGFpbmVyUm9sZURlc2NyaXB0aW9uTWVzc2FnZSkge1xuICAgICAgc3dpcGVyLmExMXkuYWRkRWxSb2xlRGVzY3JpcHRpb24oJGNvbnRhaW5lckVsLCBwYXJhbXMuY29udGFpbmVyUm9sZURlc2NyaXB0aW9uTWVzc2FnZSk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy5jb250YWluZXJNZXNzYWdlKSB7XG4gICAgICBzd2lwZXIuYTExeS5hZGRFbExhYmVsKCRjb250YWluZXJFbCwgcGFyYW1zLmNvbnRhaW5lck1lc3NhZ2UpO1xuICAgIH0gLy8gV3JhcHBlclxuXG5cbiAgICB2YXIgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsO1xuICAgIHZhciB3cmFwcGVySWQgPSAkd3JhcHBlckVsLmF0dHIoJ2lkJykgfHwgXCJzd2lwZXItd3JhcHBlci1cIiArIHN3aXBlci5hMTF5LmdldFJhbmRvbU51bWJlcigxNik7XG4gICAgdmFyIGxpdmUgPSBzd2lwZXIucGFyYW1zLmF1dG9wbGF5ICYmIHN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZW5hYmxlZCA/ICdvZmYnIDogJ3BvbGl0ZSc7XG4gICAgc3dpcGVyLmExMXkuYWRkRWxJZCgkd3JhcHBlckVsLCB3cmFwcGVySWQpO1xuICAgIHN3aXBlci5hMTF5LmFkZEVsTGl2ZSgkd3JhcHBlckVsLCBsaXZlKTsgLy8gU2xpZGVcblxuICAgIGlmIChwYXJhbXMuaXRlbVJvbGVEZXNjcmlwdGlvbk1lc3NhZ2UpIHtcbiAgICAgIHN3aXBlci5hMTF5LmFkZEVsUm9sZURlc2NyaXB0aW9uKCQoc3dpcGVyLnNsaWRlcyksIHBhcmFtcy5pdGVtUm9sZURlc2NyaXB0aW9uTWVzc2FnZSk7XG4gICAgfVxuXG4gICAgc3dpcGVyLmExMXkuYWRkRWxSb2xlKCQoc3dpcGVyLnNsaWRlcyksIHBhcmFtcy5zbGlkZVJvbGUpO1xuICAgIHN3aXBlci5zbGlkZXMuZWFjaChmdW5jdGlvbiAoc2xpZGVFbCkge1xuICAgICAgdmFyICRzbGlkZUVsID0gJChzbGlkZUVsKTtcbiAgICAgIHZhciBhcmlhTGFiZWxNZXNzYWdlID0gcGFyYW1zLnNsaWRlTGFiZWxNZXNzYWdlLnJlcGxhY2UoL1xce1xce2luZGV4XFx9XFx9LywgJHNsaWRlRWwuaW5kZXgoKSArIDEpLnJlcGxhY2UoL1xce1xce3NsaWRlc0xlbmd0aFxcfVxcfS8sIHN3aXBlci5zbGlkZXMubGVuZ3RoKTtcbiAgICAgIHN3aXBlci5hMTF5LmFkZEVsTGFiZWwoJHNsaWRlRWwsIGFyaWFMYWJlbE1lc3NhZ2UpO1xuICAgIH0pOyAvLyBOYXZpZ2F0aW9uXG5cbiAgICB2YXIgJG5leHRFbDtcbiAgICB2YXIgJHByZXZFbDtcblxuICAgIGlmIChzd2lwZXIubmF2aWdhdGlvbiAmJiBzd2lwZXIubmF2aWdhdGlvbi4kbmV4dEVsKSB7XG4gICAgICAkbmV4dEVsID0gc3dpcGVyLm5hdmlnYXRpb24uJG5leHRFbDtcbiAgICB9XG5cbiAgICBpZiAoc3dpcGVyLm5hdmlnYXRpb24gJiYgc3dpcGVyLm5hdmlnYXRpb24uJHByZXZFbCkge1xuICAgICAgJHByZXZFbCA9IHN3aXBlci5uYXZpZ2F0aW9uLiRwcmV2RWw7XG4gICAgfVxuXG4gICAgaWYgKCRuZXh0RWwgJiYgJG5leHRFbC5sZW5ndGgpIHtcbiAgICAgIHN3aXBlci5hMTF5Lm1ha2VFbEZvY3VzYWJsZSgkbmV4dEVsKTtcblxuICAgICAgaWYgKCRuZXh0RWxbMF0udGFnTmFtZSAhPT0gJ0JVVFRPTicpIHtcbiAgICAgICAgc3dpcGVyLmExMXkuYWRkRWxSb2xlKCRuZXh0RWwsICdidXR0b24nKTtcbiAgICAgICAgJG5leHRFbC5vbigna2V5ZG93bicsIHN3aXBlci5hMTF5Lm9uRW50ZXJPclNwYWNlS2V5KTtcbiAgICAgIH1cblxuICAgICAgc3dpcGVyLmExMXkuYWRkRWxMYWJlbCgkbmV4dEVsLCBwYXJhbXMubmV4dFNsaWRlTWVzc2FnZSk7XG4gICAgICBzd2lwZXIuYTExeS5hZGRFbENvbnRyb2xzKCRuZXh0RWwsIHdyYXBwZXJJZCk7XG4gICAgfVxuXG4gICAgaWYgKCRwcmV2RWwgJiYgJHByZXZFbC5sZW5ndGgpIHtcbiAgICAgIHN3aXBlci5hMTF5Lm1ha2VFbEZvY3VzYWJsZSgkcHJldkVsKTtcblxuICAgICAgaWYgKCRwcmV2RWxbMF0udGFnTmFtZSAhPT0gJ0JVVFRPTicpIHtcbiAgICAgICAgc3dpcGVyLmExMXkuYWRkRWxSb2xlKCRwcmV2RWwsICdidXR0b24nKTtcbiAgICAgICAgJHByZXZFbC5vbigna2V5ZG93bicsIHN3aXBlci5hMTF5Lm9uRW50ZXJPclNwYWNlS2V5KTtcbiAgICAgIH1cblxuICAgICAgc3dpcGVyLmExMXkuYWRkRWxMYWJlbCgkcHJldkVsLCBwYXJhbXMucHJldlNsaWRlTWVzc2FnZSk7XG4gICAgICBzd2lwZXIuYTExeS5hZGRFbENvbnRyb2xzKCRwcmV2RWwsIHdyYXBwZXJJZCk7XG4gICAgfSAvLyBQYWdpbmF0aW9uXG5cblxuICAgIGlmIChzd2lwZXIucGFnaW5hdGlvbiAmJiBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uY2xpY2thYmxlICYmIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMgJiYgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cy5sZW5ndGgpIHtcbiAgICAgIHN3aXBlci5wYWdpbmF0aW9uLiRlbC5vbigna2V5ZG93bicsIGNsYXNzZXNUb1NlbGVjdG9yKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5idWxsZXRDbGFzcyksIHN3aXBlci5hMTF5Lm9uRW50ZXJPclNwYWNlS2V5KTtcbiAgICB9XG4gIH0sXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKHN3aXBlci5hMTF5LmxpdmVSZWdpb24gJiYgc3dpcGVyLmExMXkubGl2ZVJlZ2lvbi5sZW5ndGggPiAwKSBzd2lwZXIuYTExeS5saXZlUmVnaW9uLnJlbW92ZSgpO1xuICAgIHZhciAkbmV4dEVsO1xuICAgIHZhciAkcHJldkVsO1xuXG4gICAgaWYgKHN3aXBlci5uYXZpZ2F0aW9uICYmIHN3aXBlci5uYXZpZ2F0aW9uLiRuZXh0RWwpIHtcbiAgICAgICRuZXh0RWwgPSBzd2lwZXIubmF2aWdhdGlvbi4kbmV4dEVsO1xuICAgIH1cblxuICAgIGlmIChzd2lwZXIubmF2aWdhdGlvbiAmJiBzd2lwZXIubmF2aWdhdGlvbi4kcHJldkVsKSB7XG4gICAgICAkcHJldkVsID0gc3dpcGVyLm5hdmlnYXRpb24uJHByZXZFbDtcbiAgICB9XG5cbiAgICBpZiAoJG5leHRFbCkge1xuICAgICAgJG5leHRFbC5vZmYoJ2tleWRvd24nLCBzd2lwZXIuYTExeS5vbkVudGVyT3JTcGFjZUtleSk7XG4gICAgfVxuXG4gICAgaWYgKCRwcmV2RWwpIHtcbiAgICAgICRwcmV2RWwub2ZmKCdrZXlkb3duJywgc3dpcGVyLmExMXkub25FbnRlck9yU3BhY2VLZXkpO1xuICAgIH0gLy8gUGFnaW5hdGlvblxuXG5cbiAgICBpZiAoc3dpcGVyLnBhZ2luYXRpb24gJiYgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmNsaWNrYWJsZSAmJiBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzICYmIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMubGVuZ3RoKSB7XG4gICAgICBzd2lwZXIucGFnaW5hdGlvbi4kZWwub2ZmKCdrZXlkb3duJywgY2xhc3Nlc1RvU2VsZWN0b3Ioc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmJ1bGxldENsYXNzKSwgc3dpcGVyLmExMXkub25FbnRlck9yU3BhY2VLZXkpO1xuICAgIH1cbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ2ExMXknLFxuICBwYXJhbXM6IHtcbiAgICBhMTF5OiB7XG4gICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgbm90aWZpY2F0aW9uQ2xhc3M6ICdzd2lwZXItbm90aWZpY2F0aW9uJyxcbiAgICAgIHByZXZTbGlkZU1lc3NhZ2U6ICdQcmV2aW91cyBzbGlkZScsXG4gICAgICBuZXh0U2xpZGVNZXNzYWdlOiAnTmV4dCBzbGlkZScsXG4gICAgICBmaXJzdFNsaWRlTWVzc2FnZTogJ1RoaXMgaXMgdGhlIGZpcnN0IHNsaWRlJyxcbiAgICAgIGxhc3RTbGlkZU1lc3NhZ2U6ICdUaGlzIGlzIHRoZSBsYXN0IHNsaWRlJyxcbiAgICAgIHBhZ2luYXRpb25CdWxsZXRNZXNzYWdlOiAnR28gdG8gc2xpZGUge3tpbmRleH19JyxcbiAgICAgIHNsaWRlTGFiZWxNZXNzYWdlOiAne3tpbmRleH19IC8ge3tzbGlkZXNMZW5ndGh9fScsXG4gICAgICBjb250YWluZXJNZXNzYWdlOiBudWxsLFxuICAgICAgY29udGFpbmVyUm9sZURlc2NyaXB0aW9uTWVzc2FnZTogbnVsbCxcbiAgICAgIGl0ZW1Sb2xlRGVzY3JpcHRpb25NZXNzYWdlOiBudWxsLFxuICAgICAgc2xpZGVSb2xlOiAnZ3JvdXAnXG4gICAgfVxuICB9LFxuICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBiaW5kTW9kdWxlTWV0aG9kcyhzd2lwZXIsIHtcbiAgICAgIGExMXk6IF9leHRlbmRzKHt9LCBBMTF5LCB7XG4gICAgICAgIGxpdmVSZWdpb246ICQoXCI8c3BhbiBjbGFzcz1cXFwiXCIgKyBzd2lwZXIucGFyYW1zLmExMXkubm90aWZpY2F0aW9uQ2xhc3MgKyBcIlxcXCIgYXJpYS1saXZlPVxcXCJhc3NlcnRpdmVcXFwiIGFyaWEtYXRvbWljPVxcXCJ0cnVlXFxcIj48L3NwYW4+XCIpXG4gICAgICB9KVxuICAgIH0pO1xuICB9LFxuICBvbjoge1xuICAgIGFmdGVySW5pdDogZnVuY3Rpb24gYWZ0ZXJJbml0KHN3aXBlcikge1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLmExMXkuZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLmExMXkuaW5pdCgpO1xuICAgICAgc3dpcGVyLmExMXkudXBkYXRlTmF2aWdhdGlvbigpO1xuICAgIH0sXG4gICAgdG9FZGdlOiBmdW5jdGlvbiB0b0VkZ2Uoc3dpcGVyKSB7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMuYTExeS5lbmFibGVkKSByZXR1cm47XG4gICAgICBzd2lwZXIuYTExeS51cGRhdGVOYXZpZ2F0aW9uKCk7XG4gICAgfSxcbiAgICBmcm9tRWRnZTogZnVuY3Rpb24gZnJvbUVkZ2Uoc3dpcGVyKSB7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMuYTExeS5lbmFibGVkKSByZXR1cm47XG4gICAgICBzd2lwZXIuYTExeS51cGRhdGVOYXZpZ2F0aW9uKCk7XG4gICAgfSxcbiAgICBwYWdpbmF0aW9uVXBkYXRlOiBmdW5jdGlvbiBwYWdpbmF0aW9uVXBkYXRlKHN3aXBlcikge1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLmExMXkuZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLmExMXkudXBkYXRlUGFnaW5hdGlvbigpO1xuICAgIH0sXG4gICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveShzd2lwZXIpIHtcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5hMTF5LmVuYWJsZWQpIHJldHVybjtcbiAgICAgIHN3aXBlci5hMTF5LmRlc3Ryb3koKTtcbiAgICB9XG4gIH1cbn07XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9hMTF5L2ExMXkuanMiLCJmdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5pbXBvcnQgeyBnZXRXaW5kb3cgfSBmcm9tICdzc3Itd2luZG93JztcbmltcG9ydCB7IGJpbmRNb2R1bGVNZXRob2RzIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xudmFyIEhpc3RvcnkgPSB7XG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5oaXN0b3J5KSByZXR1cm47XG5cbiAgICBpZiAoIXdpbmRvdy5oaXN0b3J5IHx8ICF3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUpIHtcbiAgICAgIHN3aXBlci5wYXJhbXMuaGlzdG9yeS5lbmFibGVkID0gZmFsc2U7XG4gICAgICBzd2lwZXIucGFyYW1zLmhhc2hOYXZpZ2F0aW9uLmVuYWJsZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBoaXN0b3J5ID0gc3dpcGVyLmhpc3Rvcnk7XG4gICAgaGlzdG9yeS5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgaGlzdG9yeS5wYXRocyA9IEhpc3RvcnkuZ2V0UGF0aFZhbHVlcyhzd2lwZXIucGFyYW1zLnVybCk7XG4gICAgaWYgKCFoaXN0b3J5LnBhdGhzLmtleSAmJiAhaGlzdG9yeS5wYXRocy52YWx1ZSkgcmV0dXJuO1xuICAgIGhpc3Rvcnkuc2Nyb2xsVG9TbGlkZSgwLCBoaXN0b3J5LnBhdGhzLnZhbHVlLCBzd2lwZXIucGFyYW1zLnJ1bkNhbGxiYWNrc09uSW5pdCk7XG5cbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuaGlzdG9yeS5yZXBsYWNlU3RhdGUpIHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIHN3aXBlci5oaXN0b3J5LnNldEhpc3RvcnlQb3BTdGF0ZSk7XG4gICAgfVxuICB9LFxuICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coKTtcblxuICAgIGlmICghc3dpcGVyLnBhcmFtcy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgc3dpcGVyLmhpc3Rvcnkuc2V0SGlzdG9yeVBvcFN0YXRlKTtcbiAgICB9XG4gIH0sXG4gIHNldEhpc3RvcnlQb3BTdGF0ZTogZnVuY3Rpb24gc2V0SGlzdG9yeVBvcFN0YXRlKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHN3aXBlci5oaXN0b3J5LnBhdGhzID0gSGlzdG9yeS5nZXRQYXRoVmFsdWVzKHN3aXBlci5wYXJhbXMudXJsKTtcbiAgICBzd2lwZXIuaGlzdG9yeS5zY3JvbGxUb1NsaWRlKHN3aXBlci5wYXJhbXMuc3BlZWQsIHN3aXBlci5oaXN0b3J5LnBhdGhzLnZhbHVlLCBmYWxzZSk7XG4gIH0sXG4gIGdldFBhdGhWYWx1ZXM6IGZ1bmN0aW9uIGdldFBhdGhWYWx1ZXModXJsT3ZlcnJpZGUpIHtcbiAgICB2YXIgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gICAgdmFyIGxvY2F0aW9uO1xuXG4gICAgaWYgKHVybE92ZXJyaWRlKSB7XG4gICAgICBsb2NhdGlvbiA9IG5ldyBVUkwodXJsT3ZlcnJpZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjtcbiAgICB9XG5cbiAgICB2YXIgcGF0aEFycmF5ID0gbG9jYXRpb24ucGF0aG5hbWUuc2xpY2UoMSkuc3BsaXQoJy8nKS5maWx0ZXIoZnVuY3Rpb24gKHBhcnQpIHtcbiAgICAgIHJldHVybiBwYXJ0ICE9PSAnJztcbiAgICB9KTtcbiAgICB2YXIgdG90YWwgPSBwYXRoQXJyYXkubGVuZ3RoO1xuICAgIHZhciBrZXkgPSBwYXRoQXJyYXlbdG90YWwgLSAyXTtcbiAgICB2YXIgdmFsdWUgPSBwYXRoQXJyYXlbdG90YWwgLSAxXTtcbiAgICByZXR1cm4ge1xuICAgICAga2V5OiBrZXksXG4gICAgICB2YWx1ZTogdmFsdWVcbiAgICB9O1xuICB9LFxuICBzZXRIaXN0b3J5OiBmdW5jdGlvbiBzZXRIaXN0b3J5KGtleSwgaW5kZXgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gICAgaWYgKCFzd2lwZXIuaGlzdG9yeS5pbml0aWFsaXplZCB8fCAhc3dpcGVyLnBhcmFtcy5oaXN0b3J5LmVuYWJsZWQpIHJldHVybjtcbiAgICB2YXIgbG9jYXRpb247XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy51cmwpIHtcbiAgICAgIGxvY2F0aW9uID0gbmV3IFVSTChzd2lwZXIucGFyYW1zLnVybCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uO1xuICAgIH1cblxuICAgIHZhciBzbGlkZSA9IHN3aXBlci5zbGlkZXMuZXEoaW5kZXgpO1xuICAgIHZhciB2YWx1ZSA9IEhpc3Rvcnkuc2x1Z2lmeShzbGlkZS5hdHRyKCdkYXRhLWhpc3RvcnknKSk7XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5oaXN0b3J5LnJvb3QubGVuZ3RoID4gMCkge1xuICAgICAgdmFyIHJvb3QgPSBzd2lwZXIucGFyYW1zLmhpc3Rvcnkucm9vdDtcbiAgICAgIGlmIChyb290W3Jvb3QubGVuZ3RoIC0gMV0gPT09ICcvJykgcm9vdCA9IHJvb3Quc2xpY2UoMCwgcm9vdC5sZW5ndGggLSAxKTtcbiAgICAgIHZhbHVlID0gcm9vdCArIFwiL1wiICsga2V5ICsgXCIvXCIgKyB2YWx1ZTtcbiAgICB9IGVsc2UgaWYgKCFsb2NhdGlvbi5wYXRobmFtZS5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICB2YWx1ZSA9IGtleSArIFwiL1wiICsgdmFsdWU7XG4gICAgfVxuXG4gICAgdmFyIGN1cnJlbnRTdGF0ZSA9IHdpbmRvdy5oaXN0b3J5LnN0YXRlO1xuXG4gICAgaWYgKGN1cnJlbnRTdGF0ZSAmJiBjdXJyZW50U3RhdGUudmFsdWUgPT09IHZhbHVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuaGlzdG9yeS5yZXBsYWNlU3RhdGUpIHtcbiAgICAgIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSh7XG4gICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgfSwgbnVsbCwgdmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoe1xuICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgIH0sIG51bGwsIHZhbHVlKTtcbiAgICB9XG4gIH0sXG4gIHNsdWdpZnk6IGZ1bmN0aW9uIHNsdWdpZnkodGV4dCkge1xuICAgIHJldHVybiB0ZXh0LnRvU3RyaW5nKCkucmVwbGFjZSgvXFxzKy9nLCAnLScpLnJlcGxhY2UoL1teXFx3LV0rL2csICcnKS5yZXBsYWNlKC8tLSsvZywgJy0nKS5yZXBsYWNlKC9eLSsvLCAnJykucmVwbGFjZSgvLSskLywgJycpO1xuICB9LFxuICBzY3JvbGxUb1NsaWRlOiBmdW5jdGlvbiBzY3JvbGxUb1NsaWRlKHNwZWVkLCB2YWx1ZSwgcnVuQ2FsbGJhY2tzKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG5cbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBzd2lwZXIuc2xpZGVzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHZhciBzbGlkZSA9IHN3aXBlci5zbGlkZXMuZXEoaSk7XG4gICAgICAgIHZhciBzbGlkZUhpc3RvcnkgPSBIaXN0b3J5LnNsdWdpZnkoc2xpZGUuYXR0cignZGF0YS1oaXN0b3J5JykpO1xuXG4gICAgICAgIGlmIChzbGlkZUhpc3RvcnkgPT09IHZhbHVlICYmICFzbGlkZS5oYXNDbGFzcyhzd2lwZXIucGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKSB7XG4gICAgICAgICAgdmFyIGluZGV4ID0gc2xpZGUuaW5kZXgoKTtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhpbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oMCwgc3BlZWQsIHJ1bkNhbGxiYWNrcyk7XG4gICAgfVxuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnaGlzdG9yeScsXG4gIHBhcmFtczoge1xuICAgIGhpc3Rvcnk6IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgcm9vdDogJycsXG4gICAgICByZXBsYWNlU3RhdGU6IGZhbHNlLFxuICAgICAga2V5OiAnc2xpZGVzJ1xuICAgIH1cbiAgfSxcbiAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgYmluZE1vZHVsZU1ldGhvZHMoc3dpcGVyLCB7XG4gICAgICBoaXN0b3J5OiBfZXh0ZW5kcyh7fSwgSGlzdG9yeSlcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBpbml0OiBmdW5jdGlvbiBpbml0KHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuaGlzdG9yeS5lbmFibGVkKSB7XG4gICAgICAgIHN3aXBlci5oaXN0b3J5LmluaXQoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koc3dpcGVyKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5oaXN0b3J5LmVuYWJsZWQpIHtcbiAgICAgICAgc3dpcGVyLmhpc3RvcnkuZGVzdHJveSgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgJ3RyYW5zaXRpb25FbmQgX2ZyZWVNb2RlTm9Nb21lbnR1bVJlbGVhc2UnOiBmdW5jdGlvbiB0cmFuc2l0aW9uRW5kX2ZyZWVNb2RlTm9Nb21lbnR1bVJlbGVhc2Uoc3dpcGVyKSB7XG4gICAgICBpZiAoc3dpcGVyLmhpc3RvcnkuaW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgc3dpcGVyLmhpc3Rvcnkuc2V0SGlzdG9yeShzd2lwZXIucGFyYW1zLmhpc3Rvcnkua2V5LCBzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2xpZGVDaGFuZ2U6IGZ1bmN0aW9uIHNsaWRlQ2hhbmdlKHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5oaXN0b3J5LmluaXRpYWxpemVkICYmIHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgICAgICBzd2lwZXIuaGlzdG9yeS5zZXRIaXN0b3J5KHN3aXBlci5wYXJhbXMuaGlzdG9yeS5rZXksIHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvaGlzdG9yeS9oaXN0b3J5LmpzIiwiZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuaW1wb3J0IHsgZ2V0V2luZG93LCBnZXREb2N1bWVudCB9IGZyb20gJ3Nzci13aW5kb3cnO1xuaW1wb3J0ICQgZnJvbSAnLi4vLi4vdXRpbHMvZG9tJztcbmltcG9ydCB7IGJpbmRNb2R1bGVNZXRob2RzIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xudmFyIEhhc2hOYXZpZ2F0aW9uID0ge1xuICBvbkhhc2hDYW5nZTogZnVuY3Rpb24gb25IYXNoQ2FuZ2UoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgICBzd2lwZXIuZW1pdCgnaGFzaENoYW5nZScpO1xuICAgIHZhciBuZXdIYXNoID0gZG9jdW1lbnQubG9jYXRpb24uaGFzaC5yZXBsYWNlKCcjJywgJycpO1xuICAgIHZhciBhY3RpdmVTbGlkZUhhc2ggPSBzd2lwZXIuc2xpZGVzLmVxKHN3aXBlci5hY3RpdmVJbmRleCkuYXR0cignZGF0YS1oYXNoJyk7XG5cbiAgICBpZiAobmV3SGFzaCAhPT0gYWN0aXZlU2xpZGVIYXNoKSB7XG4gICAgICB2YXIgbmV3SW5kZXggPSBzd2lwZXIuJHdyYXBwZXJFbC5jaGlsZHJlbihcIi5cIiArIHN3aXBlci5wYXJhbXMuc2xpZGVDbGFzcyArIFwiW2RhdGEtaGFzaD1cXFwiXCIgKyBuZXdIYXNoICsgXCJcXFwiXVwiKS5pbmRleCgpO1xuICAgICAgaWYgKHR5cGVvZiBuZXdJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybjtcbiAgICAgIHN3aXBlci5zbGlkZVRvKG5ld0luZGV4KTtcbiAgICB9XG4gIH0sXG4gIHNldEhhc2g6IGZ1bmN0aW9uIHNldEhhc2goKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICAgIHZhciBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gICAgaWYgKCFzd2lwZXIuaGFzaE5hdmlnYXRpb24uaW5pdGlhbGl6ZWQgfHwgIXN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24uZW5hYmxlZCkgcmV0dXJuO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24ucmVwbGFjZVN0YXRlICYmIHdpbmRvdy5oaXN0b3J5ICYmIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSkge1xuICAgICAgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKG51bGwsIG51bGwsIFwiI1wiICsgc3dpcGVyLnNsaWRlcy5lcShzd2lwZXIuYWN0aXZlSW5kZXgpLmF0dHIoJ2RhdGEtaGFzaCcpIHx8ICcnKTtcbiAgICAgIHN3aXBlci5lbWl0KCdoYXNoU2V0Jyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBzbGlkZSA9IHN3aXBlci5zbGlkZXMuZXEoc3dpcGVyLmFjdGl2ZUluZGV4KTtcbiAgICAgIHZhciBoYXNoID0gc2xpZGUuYXR0cignZGF0YS1oYXNoJykgfHwgc2xpZGUuYXR0cignZGF0YS1oaXN0b3J5Jyk7XG4gICAgICBkb2N1bWVudC5sb2NhdGlvbi5oYXNoID0gaGFzaCB8fCAnJztcbiAgICAgIHN3aXBlci5lbWl0KCdoYXNoU2V0Jyk7XG4gICAgfVxuICB9LFxuICBpbml0OiBmdW5jdGlvbiBpbml0KCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gICAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5oYXNoTmF2aWdhdGlvbi5lbmFibGVkIHx8IHN3aXBlci5wYXJhbXMuaGlzdG9yeSAmJiBzd2lwZXIucGFyYW1zLmhpc3RvcnkuZW5hYmxlZCkgcmV0dXJuO1xuICAgIHN3aXBlci5oYXNoTmF2aWdhdGlvbi5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgdmFyIGhhc2ggPSBkb2N1bWVudC5sb2NhdGlvbi5oYXNoLnJlcGxhY2UoJyMnLCAnJyk7XG5cbiAgICBpZiAoaGFzaCkge1xuICAgICAgdmFyIHNwZWVkID0gMDtcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IHN3aXBlci5zbGlkZXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIHNsaWRlID0gc3dpcGVyLnNsaWRlcy5lcShpKTtcbiAgICAgICAgdmFyIHNsaWRlSGFzaCA9IHNsaWRlLmF0dHIoJ2RhdGEtaGFzaCcpIHx8IHNsaWRlLmF0dHIoJ2RhdGEtaGlzdG9yeScpO1xuXG4gICAgICAgIGlmIChzbGlkZUhhc2ggPT09IGhhc2ggJiYgIXNsaWRlLmhhc0NsYXNzKHN3aXBlci5wYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykpIHtcbiAgICAgICAgICB2YXIgaW5kZXggPSBzbGlkZS5pbmRleCgpO1xuICAgICAgICAgIHN3aXBlci5zbGlkZVRvKGluZGV4LCBzcGVlZCwgc3dpcGVyLnBhcmFtcy5ydW5DYWxsYmFja3NPbkluaXQsIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24ud2F0Y2hTdGF0ZSkge1xuICAgICAgJCh3aW5kb3cpLm9uKCdoYXNoY2hhbmdlJywgc3dpcGVyLmhhc2hOYXZpZ2F0aW9uLm9uSGFzaENhbmdlKTtcbiAgICB9XG4gIH0sXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24ud2F0Y2hTdGF0ZSkge1xuICAgICAgJCh3aW5kb3cpLm9mZignaGFzaGNoYW5nZScsIHN3aXBlci5oYXNoTmF2aWdhdGlvbi5vbkhhc2hDYW5nZSk7XG4gICAgfVxuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnaGFzaC1uYXZpZ2F0aW9uJyxcbiAgcGFyYW1zOiB7XG4gICAgaGFzaE5hdmlnYXRpb246IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgcmVwbGFjZVN0YXRlOiBmYWxzZSxcbiAgICAgIHdhdGNoU3RhdGU6IGZhbHNlXG4gICAgfVxuICB9LFxuICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBiaW5kTW9kdWxlTWV0aG9kcyhzd2lwZXIsIHtcbiAgICAgIGhhc2hOYXZpZ2F0aW9uOiBfZXh0ZW5kcyh7XG4gICAgICAgIGluaXRpYWxpemVkOiBmYWxzZVxuICAgICAgfSwgSGFzaE5hdmlnYXRpb24pXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgaW5pdDogZnVuY3Rpb24gaW5pdChzd2lwZXIpIHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmhhc2hOYXZpZ2F0aW9uLmVuYWJsZWQpIHtcbiAgICAgICAgc3dpcGVyLmhhc2hOYXZpZ2F0aW9uLmluaXQoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koc3dpcGVyKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5oYXNoTmF2aWdhdGlvbi5lbmFibGVkKSB7XG4gICAgICAgIHN3aXBlci5oYXNoTmF2aWdhdGlvbi5kZXN0cm95KCk7XG4gICAgICB9XG4gICAgfSxcbiAgICAndHJhbnNpdGlvbkVuZCBfZnJlZU1vZGVOb01vbWVudHVtUmVsZWFzZSc6IGZ1bmN0aW9uIHRyYW5zaXRpb25FbmRfZnJlZU1vZGVOb01vbWVudHVtUmVsZWFzZShzd2lwZXIpIHtcbiAgICAgIGlmIChzd2lwZXIuaGFzaE5hdmlnYXRpb24uaW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgc3dpcGVyLmhhc2hOYXZpZ2F0aW9uLnNldEhhc2goKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNsaWRlQ2hhbmdlOiBmdW5jdGlvbiBzbGlkZUNoYW5nZShzd2lwZXIpIHtcbiAgICAgIGlmIChzd2lwZXIuaGFzaE5hdmlnYXRpb24uaW5pdGlhbGl6ZWQgJiYgc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICAgIHN3aXBlci5oYXNoTmF2aWdhdGlvbi5zZXRIYXNoKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvaGFzaC1uYXZpZ2F0aW9uL2hhc2gtbmF2aWdhdGlvbi5qcyIsImZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbi8qIGVzbGludCBuby11bmRlcnNjb3JlLWRhbmdsZTogXCJvZmZcIiAqL1xuaW1wb3J0IHsgZ2V0RG9jdW1lbnQgfSBmcm9tICdzc3Itd2luZG93JztcbmltcG9ydCB7IG5leHRUaWNrLCBiaW5kTW9kdWxlTWV0aG9kcyB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcbnZhciBBdXRvcGxheSA9IHtcbiAgcnVuOiBmdW5jdGlvbiBydW4oKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyICRhY3RpdmVTbGlkZUVsID0gc3dpcGVyLnNsaWRlcy5lcShzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgIHZhciBkZWxheSA9IHN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZGVsYXk7XG5cbiAgICBpZiAoJGFjdGl2ZVNsaWRlRWwuYXR0cignZGF0YS1zd2lwZXItYXV0b3BsYXknKSkge1xuICAgICAgZGVsYXkgPSAkYWN0aXZlU2xpZGVFbC5hdHRyKCdkYXRhLXN3aXBlci1hdXRvcGxheScpIHx8IHN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZGVsYXk7XG4gICAgfVxuXG4gICAgY2xlYXJUaW1lb3V0KHN3aXBlci5hdXRvcGxheS50aW1lb3V0KTtcbiAgICBzd2lwZXIuYXV0b3BsYXkudGltZW91dCA9IG5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBhdXRvcGxheVJlc3VsdDtcblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuYXV0b3BsYXkucmV2ZXJzZURpcmVjdGlvbikge1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICAgICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICAgICAgICBhdXRvcGxheVJlc3VsdCA9IHN3aXBlci5zbGlkZVByZXYoc3dpcGVyLnBhcmFtcy5zcGVlZCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ2F1dG9wbGF5Jyk7XG4gICAgICAgIH0gZWxzZSBpZiAoIXN3aXBlci5pc0JlZ2lubmluZykge1xuICAgICAgICAgIGF1dG9wbGF5UmVzdWx0ID0gc3dpcGVyLnNsaWRlUHJldihzd2lwZXIucGFyYW1zLnNwZWVkLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICBzd2lwZXIuZW1pdCgnYXV0b3BsYXknKTtcbiAgICAgICAgfSBlbHNlIGlmICghc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5zdG9wT25MYXN0U2xpZGUpIHtcbiAgICAgICAgICBhdXRvcGxheVJlc3VsdCA9IHN3aXBlci5zbGlkZVRvKHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gMSwgc3dpcGVyLnBhcmFtcy5zcGVlZCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ2F1dG9wbGF5Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3dpcGVyLmF1dG9wbGF5LnN0b3AoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICAgICAgYXV0b3BsYXlSZXN1bHQgPSBzd2lwZXIuc2xpZGVOZXh0KHN3aXBlci5wYXJhbXMuc3BlZWQsIHRydWUsIHRydWUpO1xuICAgICAgICBzd2lwZXIuZW1pdCgnYXV0b3BsYXknKTtcbiAgICAgIH0gZWxzZSBpZiAoIXN3aXBlci5pc0VuZCkge1xuICAgICAgICBhdXRvcGxheVJlc3VsdCA9IHN3aXBlci5zbGlkZU5leHQoc3dpcGVyLnBhcmFtcy5zcGVlZCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIHN3aXBlci5lbWl0KCdhdXRvcGxheScpO1xuICAgICAgfSBlbHNlIGlmICghc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5zdG9wT25MYXN0U2xpZGUpIHtcbiAgICAgICAgYXV0b3BsYXlSZXN1bHQgPSBzd2lwZXIuc2xpZGVUbygwLCBzd2lwZXIucGFyYW1zLnNwZWVkLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgc3dpcGVyLmVtaXQoJ2F1dG9wbGF5Jyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIuYXV0b3BsYXkuc3RvcCgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5jc3NNb2RlICYmIHN3aXBlci5hdXRvcGxheS5ydW5uaW5nKSBzd2lwZXIuYXV0b3BsYXkucnVuKCk7ZWxzZSBpZiAoYXV0b3BsYXlSZXN1bHQgPT09IGZhbHNlKSB7XG4gICAgICAgIHN3aXBlci5hdXRvcGxheS5ydW4oKTtcbiAgICAgIH1cbiAgICB9LCBkZWxheSk7XG4gIH0sXG4gIHN0YXJ0OiBmdW5jdGlvbiBzdGFydCgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBpZiAodHlwZW9mIHN3aXBlci5hdXRvcGxheS50aW1lb3V0ICE9PSAndW5kZWZpbmVkJykgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChzd2lwZXIuYXV0b3BsYXkucnVubmluZykgcmV0dXJuIGZhbHNlO1xuICAgIHN3aXBlci5hdXRvcGxheS5ydW5uaW5nID0gdHJ1ZTtcbiAgICBzd2lwZXIuZW1pdCgnYXV0b3BsYXlTdGFydCcpO1xuICAgIHN3aXBlci5hdXRvcGxheS5ydW4oKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcbiAgc3RvcDogZnVuY3Rpb24gc3RvcCgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5hdXRvcGxheS5ydW5uaW5nKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHR5cGVvZiBzd2lwZXIuYXV0b3BsYXkudGltZW91dCA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChzd2lwZXIuYXV0b3BsYXkudGltZW91dCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHN3aXBlci5hdXRvcGxheS50aW1lb3V0KTtcbiAgICAgIHN3aXBlci5hdXRvcGxheS50aW1lb3V0ID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHN3aXBlci5hdXRvcGxheS5ydW5uaW5nID0gZmFsc2U7XG4gICAgc3dpcGVyLmVtaXQoJ2F1dG9wbGF5U3RvcCcpO1xuICAgIHJldHVybiB0cnVlO1xuICB9LFxuICBwYXVzZTogZnVuY3Rpb24gcGF1c2Uoc3BlZWQpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5hdXRvcGxheS5ydW5uaW5nKSByZXR1cm47XG4gICAgaWYgKHN3aXBlci5hdXRvcGxheS5wYXVzZWQpIHJldHVybjtcbiAgICBpZiAoc3dpcGVyLmF1dG9wbGF5LnRpbWVvdXQpIGNsZWFyVGltZW91dChzd2lwZXIuYXV0b3BsYXkudGltZW91dCk7XG4gICAgc3dpcGVyLmF1dG9wbGF5LnBhdXNlZCA9IHRydWU7XG5cbiAgICBpZiAoc3BlZWQgPT09IDAgfHwgIXN3aXBlci5wYXJhbXMuYXV0b3BsYXkud2FpdEZvclRyYW5zaXRpb24pIHtcbiAgICAgIHN3aXBlci5hdXRvcGxheS5wYXVzZWQgPSBmYWxzZTtcbiAgICAgIHN3aXBlci5hdXRvcGxheS5ydW4oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgWyd0cmFuc2l0aW9uZW5kJywgJ3dlYmtpdFRyYW5zaXRpb25FbmQnXS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBzd2lwZXIuYXV0b3BsYXkub25UcmFuc2l0aW9uRW5kKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgb25WaXNpYmlsaXR5Q2hhbmdlOiBmdW5jdGlvbiBvblZpc2liaWxpdHlDaGFuZ2UoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcblxuICAgIGlmIChkb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgPT09ICdoaWRkZW4nICYmIHN3aXBlci5hdXRvcGxheS5ydW5uaW5nKSB7XG4gICAgICBzd2lwZXIuYXV0b3BsYXkucGF1c2UoKTtcbiAgICB9XG5cbiAgICBpZiAoZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlID09PSAndmlzaWJsZScgJiYgc3dpcGVyLmF1dG9wbGF5LnBhdXNlZCkge1xuICAgICAgc3dpcGVyLmF1dG9wbGF5LnJ1bigpO1xuICAgICAgc3dpcGVyLmF1dG9wbGF5LnBhdXNlZCA9IGZhbHNlO1xuICAgIH1cbiAgfSxcbiAgb25UcmFuc2l0aW9uRW5kOiBmdW5jdGlvbiBvblRyYW5zaXRpb25FbmQoZSkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQgfHwgIXN3aXBlci4kd3JhcHBlckVsKSByZXR1cm47XG4gICAgaWYgKGUudGFyZ2V0ICE9PSBzd2lwZXIuJHdyYXBwZXJFbFswXSkgcmV0dXJuO1xuICAgIFsndHJhbnNpdGlvbmVuZCcsICd3ZWJraXRUcmFuc2l0aW9uRW5kJ10uZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIHN3aXBlci5hdXRvcGxheS5vblRyYW5zaXRpb25FbmQpO1xuICAgIH0pO1xuICAgIHN3aXBlci5hdXRvcGxheS5wYXVzZWQgPSBmYWxzZTtcblxuICAgIGlmICghc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHtcbiAgICAgIHN3aXBlci5hdXRvcGxheS5zdG9wKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5hdXRvcGxheS5ydW4oKTtcbiAgICB9XG4gIH0sXG4gIG9uTW91c2VFbnRlcjogZnVuY3Rpb24gb25Nb3VzZUVudGVyKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZGlzYWJsZU9uSW50ZXJhY3Rpb24pIHtcbiAgICAgIHN3aXBlci5hdXRvcGxheS5zdG9wKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5hdXRvcGxheS5wYXVzZSgpO1xuICAgIH1cblxuICAgIFsndHJhbnNpdGlvbmVuZCcsICd3ZWJraXRUcmFuc2l0aW9uRW5kJ10uZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIHN3aXBlci5hdXRvcGxheS5vblRyYW5zaXRpb25FbmQpO1xuICAgIH0pO1xuICB9LFxuICBvbk1vdXNlTGVhdmU6IGZ1bmN0aW9uIG9uTW91c2VMZWF2ZSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLmF1dG9wbGF5LmRpc2FibGVPbkludGVyYWN0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc3dpcGVyLmF1dG9wbGF5LnBhdXNlZCA9IGZhbHNlO1xuICAgIHN3aXBlci5hdXRvcGxheS5ydW4oKTtcbiAgfSxcbiAgYXR0YWNoTW91c2VFdmVudHM6IGZ1bmN0aW9uIGF0dGFjaE1vdXNlRXZlbnRzKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuYXV0b3BsYXkucGF1c2VPbk1vdXNlRW50ZXIpIHtcbiAgICAgIHN3aXBlci4kZWwub24oJ21vdXNlZW50ZXInLCBzd2lwZXIuYXV0b3BsYXkub25Nb3VzZUVudGVyKTtcbiAgICAgIHN3aXBlci4kZWwub24oJ21vdXNlbGVhdmUnLCBzd2lwZXIuYXV0b3BsYXkub25Nb3VzZUxlYXZlKTtcbiAgICB9XG4gIH0sXG4gIGRldGFjaE1vdXNlRXZlbnRzOiBmdW5jdGlvbiBkZXRhY2hNb3VzZUV2ZW50cygpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBzd2lwZXIuJGVsLm9mZignbW91c2VlbnRlcicsIHN3aXBlci5hdXRvcGxheS5vbk1vdXNlRW50ZXIpO1xuICAgIHN3aXBlci4kZWwub2ZmKCdtb3VzZWxlYXZlJywgc3dpcGVyLmF1dG9wbGF5Lm9uTW91c2VMZWF2ZSk7XG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdhdXRvcGxheScsXG4gIHBhcmFtczoge1xuICAgIGF1dG9wbGF5OiB7XG4gICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgIGRlbGF5OiAzMDAwLFxuICAgICAgd2FpdEZvclRyYW5zaXRpb246IHRydWUsXG4gICAgICBkaXNhYmxlT25JbnRlcmFjdGlvbjogdHJ1ZSxcbiAgICAgIHN0b3BPbkxhc3RTbGlkZTogZmFsc2UsXG4gICAgICByZXZlcnNlRGlyZWN0aW9uOiBmYWxzZSxcbiAgICAgIHBhdXNlT25Nb3VzZUVudGVyOiBmYWxzZVxuICAgIH1cbiAgfSxcbiAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgYmluZE1vZHVsZU1ldGhvZHMoc3dpcGVyLCB7XG4gICAgICBhdXRvcGxheTogX2V4dGVuZHMoe30sIEF1dG9wbGF5LCB7XG4gICAgICAgIHJ1bm5pbmc6IGZhbHNlLFxuICAgICAgICBwYXVzZWQ6IGZhbHNlXG4gICAgICB9KVxuICAgIH0pO1xuICB9LFxuICBvbjoge1xuICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoc3dpcGVyKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5lbmFibGVkKSB7XG4gICAgICAgIHN3aXBlci5hdXRvcGxheS5zdGFydCgpO1xuICAgICAgICB2YXIgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgc3dpcGVyLmF1dG9wbGF5Lm9uVmlzaWJpbGl0eUNoYW5nZSk7XG4gICAgICAgIHN3aXBlci5hdXRvcGxheS5hdHRhY2hNb3VzZUV2ZW50cygpO1xuICAgICAgfVxuICAgIH0sXG4gICAgYmVmb3JlVHJhbnNpdGlvblN0YXJ0OiBmdW5jdGlvbiBiZWZvcmVUcmFuc2l0aW9uU3RhcnQoc3dpcGVyLCBzcGVlZCwgaW50ZXJuYWwpIHtcbiAgICAgIGlmIChzd2lwZXIuYXV0b3BsYXkucnVubmluZykge1xuICAgICAgICBpZiAoaW50ZXJuYWwgfHwgIXN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZGlzYWJsZU9uSW50ZXJhY3Rpb24pIHtcbiAgICAgICAgICBzd2lwZXIuYXV0b3BsYXkucGF1c2Uoc3BlZWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN3aXBlci5hdXRvcGxheS5zdG9wKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHNsaWRlckZpcnN0TW92ZTogZnVuY3Rpb24gc2xpZGVyRmlyc3RNb3ZlKHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5hdXRvcGxheS5ydW5uaW5nKSB7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmF1dG9wbGF5LmRpc2FibGVPbkludGVyYWN0aW9uKSB7XG4gICAgICAgICAgc3dpcGVyLmF1dG9wbGF5LnN0b3AoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzd2lwZXIuYXV0b3BsYXkucGF1c2UoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgdG91Y2hFbmQ6IGZ1bmN0aW9uIHRvdWNoRW5kKHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuY3NzTW9kZSAmJiBzd2lwZXIuYXV0b3BsYXkucGF1c2VkICYmICFzd2lwZXIucGFyYW1zLmF1dG9wbGF5LmRpc2FibGVPbkludGVyYWN0aW9uKSB7XG4gICAgICAgIHN3aXBlci5hdXRvcGxheS5ydW4oKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koc3dpcGVyKSB7XG4gICAgICBzd2lwZXIuYXV0b3BsYXkuZGV0YWNoTW91c2VFdmVudHMoKTtcblxuICAgICAgaWYgKHN3aXBlci5hdXRvcGxheS5ydW5uaW5nKSB7XG4gICAgICAgIHN3aXBlci5hdXRvcGxheS5zdG9wKCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgc3dpcGVyLmF1dG9wbGF5Lm9uVmlzaWJpbGl0eUNoYW5nZSk7XG4gICAgfVxuICB9XG59O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvYXV0b3BsYXkvYXV0b3BsYXkuanMiLCJmdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5pbXBvcnQgeyBleHRlbmQsIGJpbmRNb2R1bGVNZXRob2RzIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xudmFyIEZhZGUgPSB7XG4gIHNldFRyYW5zbGF0ZTogZnVuY3Rpb24gc2V0VHJhbnNsYXRlKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIHZhciAkc2xpZGVFbCA9IHN3aXBlci5zbGlkZXMuZXEoaSk7XG4gICAgICB2YXIgb2Zmc2V0ID0gJHNsaWRlRWxbMF0uc3dpcGVyU2xpZGVPZmZzZXQ7XG4gICAgICB2YXIgdHggPSAtb2Zmc2V0O1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLnZpcnR1YWxUcmFuc2xhdGUpIHR4IC09IHN3aXBlci50cmFuc2xhdGU7XG4gICAgICB2YXIgdHkgPSAwO1xuXG4gICAgICBpZiAoIXN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgICB0eSA9IHR4O1xuICAgICAgICB0eCA9IDA7XG4gICAgICB9XG5cbiAgICAgIHZhciBzbGlkZU9wYWNpdHkgPSBzd2lwZXIucGFyYW1zLmZhZGVFZmZlY3QuY3Jvc3NGYWRlID8gTWF0aC5tYXgoMSAtIE1hdGguYWJzKCRzbGlkZUVsWzBdLnByb2dyZXNzKSwgMCkgOiAxICsgTWF0aC5taW4oTWF0aC5tYXgoJHNsaWRlRWxbMF0ucHJvZ3Jlc3MsIC0xKSwgMCk7XG4gICAgICAkc2xpZGVFbC5jc3Moe1xuICAgICAgICBvcGFjaXR5OiBzbGlkZU9wYWNpdHlcbiAgICAgIH0pLnRyYW5zZm9ybShcInRyYW5zbGF0ZTNkKFwiICsgdHggKyBcInB4LCBcIiArIHR5ICsgXCJweCwgMHB4KVwiKTtcbiAgICB9XG4gIH0sXG4gIHNldFRyYW5zaXRpb246IGZ1bmN0aW9uIHNldFRyYW5zaXRpb24oZHVyYXRpb24pIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgc2xpZGVzID0gc3dpcGVyLnNsaWRlcyxcbiAgICAgICAgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsO1xuICAgIHNsaWRlcy50cmFuc2l0aW9uKGR1cmF0aW9uKTtcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLnZpcnR1YWxUcmFuc2xhdGUgJiYgZHVyYXRpb24gIT09IDApIHtcbiAgICAgIHZhciBldmVudFRyaWdnZXJlZCA9IGZhbHNlO1xuICAgICAgc2xpZGVzLnRyYW5zaXRpb25FbmQoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoZXZlbnRUcmlnZ2VyZWQpIHJldHVybjtcbiAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgICBldmVudFRyaWdnZXJlZCA9IHRydWU7XG4gICAgICAgIHN3aXBlci5hbmltYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgdmFyIHRyaWdnZXJFdmVudHMgPSBbJ3dlYmtpdFRyYW5zaXRpb25FbmQnLCAndHJhbnNpdGlvbmVuZCddO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHJpZ2dlckV2ZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICR3cmFwcGVyRWwudHJpZ2dlcih0cmlnZ2VyRXZlbnRzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnZWZmZWN0LWZhZGUnLFxuICBwYXJhbXM6IHtcbiAgICBmYWRlRWZmZWN0OiB7XG4gICAgICBjcm9zc0ZhZGU6IGZhbHNlXG4gICAgfVxuICB9LFxuICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBiaW5kTW9kdWxlTWV0aG9kcyhzd2lwZXIsIHtcbiAgICAgIGZhZGVFZmZlY3Q6IF9leHRlbmRzKHt9LCBGYWRlKVxuICAgIH0pO1xuICB9LFxuICBvbjoge1xuICAgIGJlZm9yZUluaXQ6IGZ1bmN0aW9uIGJlZm9yZUluaXQoc3dpcGVyKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdmYWRlJykgcmV0dXJuO1xuICAgICAgc3dpcGVyLmNsYXNzTmFtZXMucHVzaChzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MgKyBcImZhZGVcIik7XG4gICAgICB2YXIgb3ZlcndyaXRlUGFyYW1zID0ge1xuICAgICAgICBzbGlkZXNQZXJWaWV3OiAxLFxuICAgICAgICBzbGlkZXNQZXJDb2x1bW46IDEsXG4gICAgICAgIHNsaWRlc1Blckdyb3VwOiAxLFxuICAgICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiB0cnVlLFxuICAgICAgICBzcGFjZUJldHdlZW46IDAsXG4gICAgICAgIHZpcnR1YWxUcmFuc2xhdGU6IHRydWVcbiAgICAgIH07XG4gICAgICBleHRlbmQoc3dpcGVyLnBhcmFtcywgb3ZlcndyaXRlUGFyYW1zKTtcbiAgICAgIGV4dGVuZChzd2lwZXIub3JpZ2luYWxQYXJhbXMsIG92ZXJ3cml0ZVBhcmFtcyk7XG4gICAgfSxcbiAgICBzZXRUcmFuc2xhdGU6IGZ1bmN0aW9uIHNldFRyYW5zbGF0ZShzd2lwZXIpIHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gJ2ZhZGUnKSByZXR1cm47XG4gICAgICBzd2lwZXIuZmFkZUVmZmVjdC5zZXRUcmFuc2xhdGUoKTtcbiAgICB9LFxuICAgIHNldFRyYW5zaXRpb246IGZ1bmN0aW9uIHNldFRyYW5zaXRpb24oc3dpcGVyLCBkdXJhdGlvbikge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSAnZmFkZScpIHJldHVybjtcbiAgICAgIHN3aXBlci5mYWRlRWZmZWN0LnNldFRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgIH1cbiAgfVxufTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2VmZmVjdC1mYWRlL2VmZmVjdC1mYWRlLmpzIiwiZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuaW1wb3J0ICQgZnJvbSAnLi4vLi4vdXRpbHMvZG9tJztcbmltcG9ydCB7IGV4dGVuZCwgYmluZE1vZHVsZU1ldGhvZHMgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XG52YXIgQ3ViZSA9IHtcbiAgc2V0VHJhbnNsYXRlOiBmdW5jdGlvbiBzZXRUcmFuc2xhdGUoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyICRlbCA9IHN3aXBlci4kZWwsXG4gICAgICAgICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbCxcbiAgICAgICAgc2xpZGVzID0gc3dpcGVyLnNsaWRlcyxcbiAgICAgICAgc3dpcGVyV2lkdGggPSBzd2lwZXIud2lkdGgsXG4gICAgICAgIHN3aXBlckhlaWdodCA9IHN3aXBlci5oZWlnaHQsXG4gICAgICAgIHJ0bCA9IHN3aXBlci5ydGxUcmFuc2xhdGUsXG4gICAgICAgIHN3aXBlclNpemUgPSBzd2lwZXIuc2l6ZSxcbiAgICAgICAgYnJvd3NlciA9IHN3aXBlci5icm93c2VyO1xuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLmN1YmVFZmZlY3Q7XG4gICAgdmFyIGlzSG9yaXpvbnRhbCA9IHN3aXBlci5pc0hvcml6b250YWwoKTtcbiAgICB2YXIgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gICAgdmFyIHdyYXBwZXJSb3RhdGUgPSAwO1xuICAgIHZhciAkY3ViZVNoYWRvd0VsO1xuXG4gICAgaWYgKHBhcmFtcy5zaGFkb3cpIHtcbiAgICAgIGlmIChpc0hvcml6b250YWwpIHtcbiAgICAgICAgJGN1YmVTaGFkb3dFbCA9ICR3cmFwcGVyRWwuZmluZCgnLnN3aXBlci1jdWJlLXNoYWRvdycpO1xuXG4gICAgICAgIGlmICgkY3ViZVNoYWRvd0VsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICRjdWJlU2hhZG93RWwgPSAkKCc8ZGl2IGNsYXNzPVwic3dpcGVyLWN1YmUtc2hhZG93XCI+PC9kaXY+Jyk7XG4gICAgICAgICAgJHdyYXBwZXJFbC5hcHBlbmQoJGN1YmVTaGFkb3dFbCk7XG4gICAgICAgIH1cblxuICAgICAgICAkY3ViZVNoYWRvd0VsLmNzcyh7XG4gICAgICAgICAgaGVpZ2h0OiBzd2lwZXJXaWR0aCArIFwicHhcIlxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRjdWJlU2hhZG93RWwgPSAkZWwuZmluZCgnLnN3aXBlci1jdWJlLXNoYWRvdycpO1xuXG4gICAgICAgIGlmICgkY3ViZVNoYWRvd0VsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICRjdWJlU2hhZG93RWwgPSAkKCc8ZGl2IGNsYXNzPVwic3dpcGVyLWN1YmUtc2hhZG93XCI+PC9kaXY+Jyk7XG4gICAgICAgICAgJGVsLmFwcGVuZCgkY3ViZVNoYWRvd0VsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICB2YXIgJHNsaWRlRWwgPSBzbGlkZXMuZXEoaSk7XG4gICAgICB2YXIgc2xpZGVJbmRleCA9IGk7XG5cbiAgICAgIGlmIChpc1ZpcnR1YWwpIHtcbiAgICAgICAgc2xpZGVJbmRleCA9IHBhcnNlSW50KCRzbGlkZUVsLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JyksIDEwKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHNsaWRlQW5nbGUgPSBzbGlkZUluZGV4ICogOTA7XG4gICAgICB2YXIgcm91bmQgPSBNYXRoLmZsb29yKHNsaWRlQW5nbGUgLyAzNjApO1xuXG4gICAgICBpZiAocnRsKSB7XG4gICAgICAgIHNsaWRlQW5nbGUgPSAtc2xpZGVBbmdsZTtcbiAgICAgICAgcm91bmQgPSBNYXRoLmZsb29yKC1zbGlkZUFuZ2xlIC8gMzYwKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByb2dyZXNzID0gTWF0aC5tYXgoTWF0aC5taW4oJHNsaWRlRWxbMF0ucHJvZ3Jlc3MsIDEpLCAtMSk7XG4gICAgICB2YXIgdHggPSAwO1xuICAgICAgdmFyIHR5ID0gMDtcbiAgICAgIHZhciB0eiA9IDA7XG5cbiAgICAgIGlmIChzbGlkZUluZGV4ICUgNCA9PT0gMCkge1xuICAgICAgICB0eCA9IC1yb3VuZCAqIDQgKiBzd2lwZXJTaXplO1xuICAgICAgICB0eiA9IDA7XG4gICAgICB9IGVsc2UgaWYgKChzbGlkZUluZGV4IC0gMSkgJSA0ID09PSAwKSB7XG4gICAgICAgIHR4ID0gMDtcbiAgICAgICAgdHogPSAtcm91bmQgKiA0ICogc3dpcGVyU2l6ZTtcbiAgICAgIH0gZWxzZSBpZiAoKHNsaWRlSW5kZXggLSAyKSAlIDQgPT09IDApIHtcbiAgICAgICAgdHggPSBzd2lwZXJTaXplICsgcm91bmQgKiA0ICogc3dpcGVyU2l6ZTtcbiAgICAgICAgdHogPSBzd2lwZXJTaXplO1xuICAgICAgfSBlbHNlIGlmICgoc2xpZGVJbmRleCAtIDMpICUgNCA9PT0gMCkge1xuICAgICAgICB0eCA9IC1zd2lwZXJTaXplO1xuICAgICAgICB0eiA9IDMgKiBzd2lwZXJTaXplICsgc3dpcGVyU2l6ZSAqIDQgKiByb3VuZDtcbiAgICAgIH1cblxuICAgICAgaWYgKHJ0bCkge1xuICAgICAgICB0eCA9IC10eDtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc0hvcml6b250YWwpIHtcbiAgICAgICAgdHkgPSB0eDtcbiAgICAgICAgdHggPSAwO1xuICAgICAgfVxuXG4gICAgICB2YXIgdHJhbnNmb3JtID0gXCJyb3RhdGVYKFwiICsgKGlzSG9yaXpvbnRhbCA/IDAgOiAtc2xpZGVBbmdsZSkgKyBcImRlZykgcm90YXRlWShcIiArIChpc0hvcml6b250YWwgPyBzbGlkZUFuZ2xlIDogMCkgKyBcImRlZykgdHJhbnNsYXRlM2QoXCIgKyB0eCArIFwicHgsIFwiICsgdHkgKyBcInB4LCBcIiArIHR6ICsgXCJweClcIjtcblxuICAgICAgaWYgKHByb2dyZXNzIDw9IDEgJiYgcHJvZ3Jlc3MgPiAtMSkge1xuICAgICAgICB3cmFwcGVyUm90YXRlID0gc2xpZGVJbmRleCAqIDkwICsgcHJvZ3Jlc3MgKiA5MDtcbiAgICAgICAgaWYgKHJ0bCkgd3JhcHBlclJvdGF0ZSA9IC1zbGlkZUluZGV4ICogOTAgLSBwcm9ncmVzcyAqIDkwO1xuICAgICAgfVxuXG4gICAgICAkc2xpZGVFbC50cmFuc2Zvcm0odHJhbnNmb3JtKTtcblxuICAgICAgaWYgKHBhcmFtcy5zbGlkZVNoYWRvd3MpIHtcbiAgICAgICAgLy8gU2V0IHNoYWRvd3NcbiAgICAgICAgdmFyIHNoYWRvd0JlZm9yZSA9IGlzSG9yaXpvbnRhbCA/ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnQnKSA6ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCcpO1xuICAgICAgICB2YXIgc2hhZG93QWZ0ZXIgPSBpc0hvcml6b250YWwgPyAkc2xpZGVFbC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1yaWdodCcpIDogJHNsaWRlRWwuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctYm90dG9tJyk7XG5cbiAgICAgICAgaWYgKHNoYWRvd0JlZm9yZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBzaGFkb3dCZWZvcmUgPSAkKFwiPGRpdiBjbGFzcz1cXFwic3dpcGVyLXNsaWRlLXNoYWRvdy1cIiArIChpc0hvcml6b250YWwgPyAnbGVmdCcgOiAndG9wJykgKyBcIlxcXCI+PC9kaXY+XCIpO1xuICAgICAgICAgICRzbGlkZUVsLmFwcGVuZChzaGFkb3dCZWZvcmUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNoYWRvd0FmdGVyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHNoYWRvd0FmdGVyID0gJChcIjxkaXYgY2xhc3M9XFxcInN3aXBlci1zbGlkZS1zaGFkb3ctXCIgKyAoaXNIb3Jpem9udGFsID8gJ3JpZ2h0JyA6ICdib3R0b20nKSArIFwiXFxcIj48L2Rpdj5cIik7XG4gICAgICAgICAgJHNsaWRlRWwuYXBwZW5kKHNoYWRvd0FmdGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzaGFkb3dCZWZvcmUubGVuZ3RoKSBzaGFkb3dCZWZvcmVbMF0uc3R5bGUub3BhY2l0eSA9IE1hdGgubWF4KC1wcm9ncmVzcywgMCk7XG4gICAgICAgIGlmIChzaGFkb3dBZnRlci5sZW5ndGgpIHNoYWRvd0FmdGVyWzBdLnN0eWxlLm9wYWNpdHkgPSBNYXRoLm1heChwcm9ncmVzcywgMCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgJHdyYXBwZXJFbC5jc3Moe1xuICAgICAgJy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbic6IFwiNTAlIDUwJSAtXCIgKyBzd2lwZXJTaXplIC8gMiArIFwicHhcIixcbiAgICAgICctbW96LXRyYW5zZm9ybS1vcmlnaW4nOiBcIjUwJSA1MCUgLVwiICsgc3dpcGVyU2l6ZSAvIDIgKyBcInB4XCIsXG4gICAgICAnLW1zLXRyYW5zZm9ybS1vcmlnaW4nOiBcIjUwJSA1MCUgLVwiICsgc3dpcGVyU2l6ZSAvIDIgKyBcInB4XCIsXG4gICAgICAndHJhbnNmb3JtLW9yaWdpbic6IFwiNTAlIDUwJSAtXCIgKyBzd2lwZXJTaXplIC8gMiArIFwicHhcIlxuICAgIH0pO1xuXG4gICAgaWYgKHBhcmFtcy5zaGFkb3cpIHtcbiAgICAgIGlmIChpc0hvcml6b250YWwpIHtcbiAgICAgICAgJGN1YmVTaGFkb3dFbC50cmFuc2Zvcm0oXCJ0cmFuc2xhdGUzZCgwcHgsIFwiICsgKHN3aXBlcldpZHRoIC8gMiArIHBhcmFtcy5zaGFkb3dPZmZzZXQpICsgXCJweCwgXCIgKyAtc3dpcGVyV2lkdGggLyAyICsgXCJweCkgcm90YXRlWCg5MGRlZykgcm90YXRlWigwZGVnKSBzY2FsZShcIiArIHBhcmFtcy5zaGFkb3dTY2FsZSArIFwiKVwiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBzaGFkb3dBbmdsZSA9IE1hdGguYWJzKHdyYXBwZXJSb3RhdGUpIC0gTWF0aC5mbG9vcihNYXRoLmFicyh3cmFwcGVyUm90YXRlKSAvIDkwKSAqIDkwO1xuICAgICAgICB2YXIgbXVsdGlwbGllciA9IDEuNSAtIChNYXRoLnNpbihzaGFkb3dBbmdsZSAqIDIgKiBNYXRoLlBJIC8gMzYwKSAvIDIgKyBNYXRoLmNvcyhzaGFkb3dBbmdsZSAqIDIgKiBNYXRoLlBJIC8gMzYwKSAvIDIpO1xuICAgICAgICB2YXIgc2NhbGUxID0gcGFyYW1zLnNoYWRvd1NjYWxlO1xuICAgICAgICB2YXIgc2NhbGUyID0gcGFyYW1zLnNoYWRvd1NjYWxlIC8gbXVsdGlwbGllcjtcbiAgICAgICAgdmFyIG9mZnNldCA9IHBhcmFtcy5zaGFkb3dPZmZzZXQ7XG4gICAgICAgICRjdWJlU2hhZG93RWwudHJhbnNmb3JtKFwic2NhbGUzZChcIiArIHNjYWxlMSArIFwiLCAxLCBcIiArIHNjYWxlMiArIFwiKSB0cmFuc2xhdGUzZCgwcHgsIFwiICsgKHN3aXBlckhlaWdodCAvIDIgKyBvZmZzZXQpICsgXCJweCwgXCIgKyAtc3dpcGVySGVpZ2h0IC8gMiAvIHNjYWxlMiArIFwicHgpIHJvdGF0ZVgoLTkwZGVnKVwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgekZhY3RvciA9IGJyb3dzZXIuaXNTYWZhcmkgfHwgYnJvd3Nlci5pc1dlYlZpZXcgPyAtc3dpcGVyU2l6ZSAvIDIgOiAwO1xuICAgICR3cmFwcGVyRWwudHJhbnNmb3JtKFwidHJhbnNsYXRlM2QoMHB4LDAsXCIgKyB6RmFjdG9yICsgXCJweCkgcm90YXRlWChcIiArIChzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAwIDogd3JhcHBlclJvdGF0ZSkgKyBcImRlZykgcm90YXRlWShcIiArIChzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAtd3JhcHBlclJvdGF0ZSA6IDApICsgXCJkZWcpXCIpO1xuICB9LFxuICBzZXRUcmFuc2l0aW9uOiBmdW5jdGlvbiBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyICRlbCA9IHN3aXBlci4kZWwsXG4gICAgICAgIHNsaWRlcyA9IHN3aXBlci5zbGlkZXM7XG4gICAgc2xpZGVzLnRyYW5zaXRpb24oZHVyYXRpb24pLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCwgLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHQsIC5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbSwgLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdCcpLnRyYW5zaXRpb24oZHVyYXRpb24pO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuY3ViZUVmZmVjdC5zaGFkb3cgJiYgIXN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgJGVsLmZpbmQoJy5zd2lwZXItY3ViZS1zaGFkb3cnKS50cmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgICB9XG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdlZmZlY3QtY3ViZScsXG4gIHBhcmFtczoge1xuICAgIGN1YmVFZmZlY3Q6IHtcbiAgICAgIHNsaWRlU2hhZG93czogdHJ1ZSxcbiAgICAgIHNoYWRvdzogdHJ1ZSxcbiAgICAgIHNoYWRvd09mZnNldDogMjAsXG4gICAgICBzaGFkb3dTY2FsZTogMC45NFxuICAgIH1cbiAgfSxcbiAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgYmluZE1vZHVsZU1ldGhvZHMoc3dpcGVyLCB7XG4gICAgICBjdWJlRWZmZWN0OiBfZXh0ZW5kcyh7fSwgQ3ViZSlcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBiZWZvcmVJbml0OiBmdW5jdGlvbiBiZWZvcmVJbml0KHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSAnY3ViZScpIHJldHVybjtcbiAgICAgIHN3aXBlci5jbGFzc05hbWVzLnB1c2goc3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzICsgXCJjdWJlXCIpO1xuICAgICAgc3dpcGVyLmNsYXNzTmFtZXMucHVzaChzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MgKyBcIjNkXCIpO1xuICAgICAgdmFyIG92ZXJ3cml0ZVBhcmFtcyA9IHtcbiAgICAgICAgc2xpZGVzUGVyVmlldzogMSxcbiAgICAgICAgc2xpZGVzUGVyQ29sdW1uOiAxLFxuICAgICAgICBzbGlkZXNQZXJHcm91cDogMSxcbiAgICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogdHJ1ZSxcbiAgICAgICAgcmVzaXN0YW5jZVJhdGlvOiAwLFxuICAgICAgICBzcGFjZUJldHdlZW46IDAsXG4gICAgICAgIGNlbnRlcmVkU2xpZGVzOiBmYWxzZSxcbiAgICAgICAgdmlydHVhbFRyYW5zbGF0ZTogdHJ1ZVxuICAgICAgfTtcbiAgICAgIGV4dGVuZChzd2lwZXIucGFyYW1zLCBvdmVyd3JpdGVQYXJhbXMpO1xuICAgICAgZXh0ZW5kKHN3aXBlci5vcmlnaW5hbFBhcmFtcywgb3ZlcndyaXRlUGFyYW1zKTtcbiAgICB9LFxuICAgIHNldFRyYW5zbGF0ZTogZnVuY3Rpb24gc2V0VHJhbnNsYXRlKHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSAnY3ViZScpIHJldHVybjtcbiAgICAgIHN3aXBlci5jdWJlRWZmZWN0LnNldFRyYW5zbGF0ZSgpO1xuICAgIH0sXG4gICAgc2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihzd2lwZXIsIGR1cmF0aW9uKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdjdWJlJykgcmV0dXJuO1xuICAgICAgc3dpcGVyLmN1YmVFZmZlY3Quc2V0VHJhbnNpdGlvbihkdXJhdGlvbik7XG4gICAgfVxuICB9XG59O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvZWZmZWN0LWN1YmUvZWZmZWN0LWN1YmUuanMiLCJmdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5pbXBvcnQgJCBmcm9tICcuLi8uLi91dGlscy9kb20nO1xuaW1wb3J0IHsgZXh0ZW5kLCBiaW5kTW9kdWxlTWV0aG9kcyB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcbnZhciBGbGlwID0ge1xuICBzZXRUcmFuc2xhdGU6IGZ1bmN0aW9uIHNldFRyYW5zbGF0ZSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgc2xpZGVzID0gc3dpcGVyLnNsaWRlcyxcbiAgICAgICAgcnRsID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICB2YXIgJHNsaWRlRWwgPSBzbGlkZXMuZXEoaSk7XG4gICAgICB2YXIgcHJvZ3Jlc3MgPSAkc2xpZGVFbFswXS5wcm9ncmVzcztcblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZmxpcEVmZmVjdC5saW1pdFJvdGF0aW9uKSB7XG4gICAgICAgIHByb2dyZXNzID0gTWF0aC5tYXgoTWF0aC5taW4oJHNsaWRlRWxbMF0ucHJvZ3Jlc3MsIDEpLCAtMSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBvZmZzZXQgPSAkc2xpZGVFbFswXS5zd2lwZXJTbGlkZU9mZnNldDtcbiAgICAgIHZhciByb3RhdGUgPSAtMTgwICogcHJvZ3Jlc3M7XG4gICAgICB2YXIgcm90YXRlWSA9IHJvdGF0ZTtcbiAgICAgIHZhciByb3RhdGVYID0gMDtcbiAgICAgIHZhciB0eCA9IC1vZmZzZXQ7XG4gICAgICB2YXIgdHkgPSAwO1xuXG4gICAgICBpZiAoIXN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgICB0eSA9IHR4O1xuICAgICAgICB0eCA9IDA7XG4gICAgICAgIHJvdGF0ZVggPSAtcm90YXRlWTtcbiAgICAgICAgcm90YXRlWSA9IDA7XG4gICAgICB9IGVsc2UgaWYgKHJ0bCkge1xuICAgICAgICByb3RhdGVZID0gLXJvdGF0ZVk7XG4gICAgICB9XG5cbiAgICAgICRzbGlkZUVsWzBdLnN0eWxlLnpJbmRleCA9IC1NYXRoLmFicyhNYXRoLnJvdW5kKHByb2dyZXNzKSkgKyBzbGlkZXMubGVuZ3RoO1xuXG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5mbGlwRWZmZWN0LnNsaWRlU2hhZG93cykge1xuICAgICAgICAvLyBTZXQgc2hhZG93c1xuICAgICAgICB2YXIgc2hhZG93QmVmb3JlID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJHNsaWRlRWwuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdCcpIDogJHNsaWRlRWwuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctdG9wJyk7XG4gICAgICAgIHZhciBzaGFkb3dBZnRlciA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0JykgOiAkc2xpZGVFbC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b20nKTtcblxuICAgICAgICBpZiAoc2hhZG93QmVmb3JlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHNoYWRvd0JlZm9yZSA9ICQoXCI8ZGl2IGNsYXNzPVxcXCJzd2lwZXItc2xpZGUtc2hhZG93LVwiICsgKHN3aXBlci5pc0hvcml6b250YWwoKSA/ICdsZWZ0JyA6ICd0b3AnKSArIFwiXFxcIj48L2Rpdj5cIik7XG4gICAgICAgICAgJHNsaWRlRWwuYXBwZW5kKHNoYWRvd0JlZm9yZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2hhZG93QWZ0ZXIubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgc2hhZG93QWZ0ZXIgPSAkKFwiPGRpdiBjbGFzcz1cXFwic3dpcGVyLXNsaWRlLXNoYWRvdy1cIiArIChzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAncmlnaHQnIDogJ2JvdHRvbScpICsgXCJcXFwiPjwvZGl2PlwiKTtcbiAgICAgICAgICAkc2xpZGVFbC5hcHBlbmQoc2hhZG93QWZ0ZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNoYWRvd0JlZm9yZS5sZW5ndGgpIHNoYWRvd0JlZm9yZVswXS5zdHlsZS5vcGFjaXR5ID0gTWF0aC5tYXgoLXByb2dyZXNzLCAwKTtcbiAgICAgICAgaWYgKHNoYWRvd0FmdGVyLmxlbmd0aCkgc2hhZG93QWZ0ZXJbMF0uc3R5bGUub3BhY2l0eSA9IE1hdGgubWF4KHByb2dyZXNzLCAwKTtcbiAgICAgIH1cblxuICAgICAgJHNsaWRlRWwudHJhbnNmb3JtKFwidHJhbnNsYXRlM2QoXCIgKyB0eCArIFwicHgsIFwiICsgdHkgKyBcInB4LCAwcHgpIHJvdGF0ZVgoXCIgKyByb3RhdGVYICsgXCJkZWcpIHJvdGF0ZVkoXCIgKyByb3RhdGVZICsgXCJkZWcpXCIpO1xuICAgIH1cbiAgfSxcbiAgc2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihkdXJhdGlvbikge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzLFxuICAgICAgICBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleCxcbiAgICAgICAgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsO1xuICAgIHNsaWRlcy50cmFuc2l0aW9uKGR1cmF0aW9uKS5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy10b3AsIC5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0LCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b20sIC5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnQnKS50cmFuc2l0aW9uKGR1cmF0aW9uKTtcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLnZpcnR1YWxUcmFuc2xhdGUgJiYgZHVyYXRpb24gIT09IDApIHtcbiAgICAgIHZhciBldmVudFRyaWdnZXJlZCA9IGZhbHNlOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcblxuICAgICAgc2xpZGVzLmVxKGFjdGl2ZUluZGV4KS50cmFuc2l0aW9uRW5kKGZ1bmN0aW9uIG9uVHJhbnNpdGlvbkVuZCgpIHtcbiAgICAgICAgaWYgKGV2ZW50VHJpZ2dlcmVkKSByZXR1cm47XG4gICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjsgLy8gaWYgKCEkKHRoaXMpLmhhc0NsYXNzKHN3aXBlci5wYXJhbXMuc2xpZGVBY3RpdmVDbGFzcykpIHJldHVybjtcblxuICAgICAgICBldmVudFRyaWdnZXJlZCA9IHRydWU7XG4gICAgICAgIHN3aXBlci5hbmltYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgdmFyIHRyaWdnZXJFdmVudHMgPSBbJ3dlYmtpdFRyYW5zaXRpb25FbmQnLCAndHJhbnNpdGlvbmVuZCddO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHJpZ2dlckV2ZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICR3cmFwcGVyRWwudHJpZ2dlcih0cmlnZ2VyRXZlbnRzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnZWZmZWN0LWZsaXAnLFxuICBwYXJhbXM6IHtcbiAgICBmbGlwRWZmZWN0OiB7XG4gICAgICBzbGlkZVNoYWRvd3M6IHRydWUsXG4gICAgICBsaW1pdFJvdGF0aW9uOiB0cnVlXG4gICAgfVxuICB9LFxuICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBiaW5kTW9kdWxlTWV0aG9kcyhzd2lwZXIsIHtcbiAgICAgIGZsaXBFZmZlY3Q6IF9leHRlbmRzKHt9LCBGbGlwKVxuICAgIH0pO1xuICB9LFxuICBvbjoge1xuICAgIGJlZm9yZUluaXQ6IGZ1bmN0aW9uIGJlZm9yZUluaXQoc3dpcGVyKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdmbGlwJykgcmV0dXJuO1xuICAgICAgc3dpcGVyLmNsYXNzTmFtZXMucHVzaChzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MgKyBcImZsaXBcIik7XG4gICAgICBzd2lwZXIuY2xhc3NOYW1lcy5wdXNoKHN3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcyArIFwiM2RcIik7XG4gICAgICB2YXIgb3ZlcndyaXRlUGFyYW1zID0ge1xuICAgICAgICBzbGlkZXNQZXJWaWV3OiAxLFxuICAgICAgICBzbGlkZXNQZXJDb2x1bW46IDEsXG4gICAgICAgIHNsaWRlc1Blckdyb3VwOiAxLFxuICAgICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiB0cnVlLFxuICAgICAgICBzcGFjZUJldHdlZW46IDAsXG4gICAgICAgIHZpcnR1YWxUcmFuc2xhdGU6IHRydWVcbiAgICAgIH07XG4gICAgICBleHRlbmQoc3dpcGVyLnBhcmFtcywgb3ZlcndyaXRlUGFyYW1zKTtcbiAgICAgIGV4dGVuZChzd2lwZXIub3JpZ2luYWxQYXJhbXMsIG92ZXJ3cml0ZVBhcmFtcyk7XG4gICAgfSxcbiAgICBzZXRUcmFuc2xhdGU6IGZ1bmN0aW9uIHNldFRyYW5zbGF0ZShzd2lwZXIpIHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gJ2ZsaXAnKSByZXR1cm47XG4gICAgICBzd2lwZXIuZmxpcEVmZmVjdC5zZXRUcmFuc2xhdGUoKTtcbiAgICB9LFxuICAgIHNldFRyYW5zaXRpb246IGZ1bmN0aW9uIHNldFRyYW5zaXRpb24oc3dpcGVyLCBkdXJhdGlvbikge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSAnZmxpcCcpIHJldHVybjtcbiAgICAgIHN3aXBlci5mbGlwRWZmZWN0LnNldFRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgIH1cbiAgfVxufTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2VmZmVjdC1mbGlwL2VmZmVjdC1mbGlwLmpzIiwiZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuaW1wb3J0ICQgZnJvbSAnLi4vLi4vdXRpbHMvZG9tJztcbmltcG9ydCB7IGJpbmRNb2R1bGVNZXRob2RzIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xudmFyIENvdmVyZmxvdyA9IHtcbiAgc2V0VHJhbnNsYXRlOiBmdW5jdGlvbiBzZXRUcmFuc2xhdGUoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHN3aXBlcldpZHRoID0gc3dpcGVyLndpZHRoLFxuICAgICAgICBzd2lwZXJIZWlnaHQgPSBzd2lwZXIuaGVpZ2h0LFxuICAgICAgICBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzLFxuICAgICAgICBzbGlkZXNTaXplc0dyaWQgPSBzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkO1xuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLmNvdmVyZmxvd0VmZmVjdDtcbiAgICB2YXIgaXNIb3Jpem9udGFsID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpO1xuICAgIHZhciB0cmFuc2Zvcm0gPSBzd2lwZXIudHJhbnNsYXRlO1xuICAgIHZhciBjZW50ZXIgPSBpc0hvcml6b250YWwgPyAtdHJhbnNmb3JtICsgc3dpcGVyV2lkdGggLyAyIDogLXRyYW5zZm9ybSArIHN3aXBlckhlaWdodCAvIDI7XG4gICAgdmFyIHJvdGF0ZSA9IGlzSG9yaXpvbnRhbCA/IHBhcmFtcy5yb3RhdGUgOiAtcGFyYW1zLnJvdGF0ZTtcbiAgICB2YXIgdHJhbnNsYXRlID0gcGFyYW1zLmRlcHRoOyAvLyBFYWNoIHNsaWRlIG9mZnNldCBmcm9tIGNlbnRlclxuXG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IHNsaWRlcy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgICAgdmFyICRzbGlkZUVsID0gc2xpZGVzLmVxKGkpO1xuICAgICAgdmFyIHNsaWRlU2l6ZSA9IHNsaWRlc1NpemVzR3JpZFtpXTtcbiAgICAgIHZhciBzbGlkZU9mZnNldCA9ICRzbGlkZUVsWzBdLnN3aXBlclNsaWRlT2Zmc2V0O1xuICAgICAgdmFyIG9mZnNldE11bHRpcGxpZXIgPSAoY2VudGVyIC0gc2xpZGVPZmZzZXQgLSBzbGlkZVNpemUgLyAyKSAvIHNsaWRlU2l6ZSAqIHBhcmFtcy5tb2RpZmllcjtcbiAgICAgIHZhciByb3RhdGVZID0gaXNIb3Jpem9udGFsID8gcm90YXRlICogb2Zmc2V0TXVsdGlwbGllciA6IDA7XG4gICAgICB2YXIgcm90YXRlWCA9IGlzSG9yaXpvbnRhbCA/IDAgOiByb3RhdGUgKiBvZmZzZXRNdWx0aXBsaWVyOyAvLyB2YXIgcm90YXRlWiA9IDBcblxuICAgICAgdmFyIHRyYW5zbGF0ZVogPSAtdHJhbnNsYXRlICogTWF0aC5hYnMob2Zmc2V0TXVsdGlwbGllcik7XG4gICAgICB2YXIgc3RyZXRjaCA9IHBhcmFtcy5zdHJldGNoOyAvLyBBbGxvdyBwZXJjZW50YWdlIHRvIG1ha2UgYSByZWxhdGl2ZSBzdHJldGNoIGZvciByZXNwb25zaXZlIHNsaWRlcnNcblxuICAgICAgaWYgKHR5cGVvZiBzdHJldGNoID09PSAnc3RyaW5nJyAmJiBzdHJldGNoLmluZGV4T2YoJyUnKSAhPT0gLTEpIHtcbiAgICAgICAgc3RyZXRjaCA9IHBhcnNlRmxvYXQocGFyYW1zLnN0cmV0Y2gpIC8gMTAwICogc2xpZGVTaXplO1xuICAgICAgfVxuXG4gICAgICB2YXIgdHJhbnNsYXRlWSA9IGlzSG9yaXpvbnRhbCA/IDAgOiBzdHJldGNoICogb2Zmc2V0TXVsdGlwbGllcjtcbiAgICAgIHZhciB0cmFuc2xhdGVYID0gaXNIb3Jpem9udGFsID8gc3RyZXRjaCAqIG9mZnNldE11bHRpcGxpZXIgOiAwO1xuICAgICAgdmFyIHNjYWxlID0gMSAtICgxIC0gcGFyYW1zLnNjYWxlKSAqIE1hdGguYWJzKG9mZnNldE11bHRpcGxpZXIpOyAvLyBGaXggZm9yIHVsdHJhIHNtYWxsIHZhbHVlc1xuXG4gICAgICBpZiAoTWF0aC5hYnModHJhbnNsYXRlWCkgPCAwLjAwMSkgdHJhbnNsYXRlWCA9IDA7XG4gICAgICBpZiAoTWF0aC5hYnModHJhbnNsYXRlWSkgPCAwLjAwMSkgdHJhbnNsYXRlWSA9IDA7XG4gICAgICBpZiAoTWF0aC5hYnModHJhbnNsYXRlWikgPCAwLjAwMSkgdHJhbnNsYXRlWiA9IDA7XG4gICAgICBpZiAoTWF0aC5hYnMocm90YXRlWSkgPCAwLjAwMSkgcm90YXRlWSA9IDA7XG4gICAgICBpZiAoTWF0aC5hYnMocm90YXRlWCkgPCAwLjAwMSkgcm90YXRlWCA9IDA7XG4gICAgICBpZiAoTWF0aC5hYnMoc2NhbGUpIDwgMC4wMDEpIHNjYWxlID0gMDtcbiAgICAgIHZhciBzbGlkZVRyYW5zZm9ybSA9IFwidHJhbnNsYXRlM2QoXCIgKyB0cmFuc2xhdGVYICsgXCJweCxcIiArIHRyYW5zbGF0ZVkgKyBcInB4LFwiICsgdHJhbnNsYXRlWiArIFwicHgpICByb3RhdGVYKFwiICsgcm90YXRlWCArIFwiZGVnKSByb3RhdGVZKFwiICsgcm90YXRlWSArIFwiZGVnKSBzY2FsZShcIiArIHNjYWxlICsgXCIpXCI7XG4gICAgICAkc2xpZGVFbC50cmFuc2Zvcm0oc2xpZGVUcmFuc2Zvcm0pO1xuICAgICAgJHNsaWRlRWxbMF0uc3R5bGUuekluZGV4ID0gLU1hdGguYWJzKE1hdGgucm91bmQob2Zmc2V0TXVsdGlwbGllcikpICsgMTtcblxuICAgICAgaWYgKHBhcmFtcy5zbGlkZVNoYWRvd3MpIHtcbiAgICAgICAgLy8gU2V0IHNoYWRvd3NcbiAgICAgICAgdmFyICRzaGFkb3dCZWZvcmVFbCA9IGlzSG9yaXpvbnRhbCA/ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnQnKSA6ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCcpO1xuICAgICAgICB2YXIgJHNoYWRvd0FmdGVyRWwgPSBpc0hvcml6b250YWwgPyAkc2xpZGVFbC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1yaWdodCcpIDogJHNsaWRlRWwuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctYm90dG9tJyk7XG5cbiAgICAgICAgaWYgKCRzaGFkb3dCZWZvcmVFbC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAkc2hhZG93QmVmb3JlRWwgPSAkKFwiPGRpdiBjbGFzcz1cXFwic3dpcGVyLXNsaWRlLXNoYWRvdy1cIiArIChpc0hvcml6b250YWwgPyAnbGVmdCcgOiAndG9wJykgKyBcIlxcXCI+PC9kaXY+XCIpO1xuICAgICAgICAgICRzbGlkZUVsLmFwcGVuZCgkc2hhZG93QmVmb3JlRWwpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCRzaGFkb3dBZnRlckVsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICRzaGFkb3dBZnRlckVsID0gJChcIjxkaXYgY2xhc3M9XFxcInN3aXBlci1zbGlkZS1zaGFkb3ctXCIgKyAoaXNIb3Jpem9udGFsID8gJ3JpZ2h0JyA6ICdib3R0b20nKSArIFwiXFxcIj48L2Rpdj5cIik7XG4gICAgICAgICAgJHNsaWRlRWwuYXBwZW5kKCRzaGFkb3dBZnRlckVsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgkc2hhZG93QmVmb3JlRWwubGVuZ3RoKSAkc2hhZG93QmVmb3JlRWxbMF0uc3R5bGUub3BhY2l0eSA9IG9mZnNldE11bHRpcGxpZXIgPiAwID8gb2Zmc2V0TXVsdGlwbGllciA6IDA7XG4gICAgICAgIGlmICgkc2hhZG93QWZ0ZXJFbC5sZW5ndGgpICRzaGFkb3dBZnRlckVsWzBdLnN0eWxlLm9wYWNpdHkgPSAtb2Zmc2V0TXVsdGlwbGllciA+IDAgPyAtb2Zmc2V0TXVsdGlwbGllciA6IDA7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBzZXRUcmFuc2l0aW9uOiBmdW5jdGlvbiBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgc3dpcGVyLnNsaWRlcy50cmFuc2l0aW9uKGR1cmF0aW9uKS5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy10b3AsIC5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0LCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b20sIC5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnQnKS50cmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ2VmZmVjdC1jb3ZlcmZsb3cnLFxuICBwYXJhbXM6IHtcbiAgICBjb3ZlcmZsb3dFZmZlY3Q6IHtcbiAgICAgIHJvdGF0ZTogNTAsXG4gICAgICBzdHJldGNoOiAwLFxuICAgICAgZGVwdGg6IDEwMCxcbiAgICAgIHNjYWxlOiAxLFxuICAgICAgbW9kaWZpZXI6IDEsXG4gICAgICBzbGlkZVNoYWRvd3M6IHRydWVcbiAgICB9XG4gIH0sXG4gIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIGJpbmRNb2R1bGVNZXRob2RzKHN3aXBlciwge1xuICAgICAgY292ZXJmbG93RWZmZWN0OiBfZXh0ZW5kcyh7fSwgQ292ZXJmbG93KVxuICAgIH0pO1xuICB9LFxuICBvbjoge1xuICAgIGJlZm9yZUluaXQ6IGZ1bmN0aW9uIGJlZm9yZUluaXQoc3dpcGVyKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdjb3ZlcmZsb3cnKSByZXR1cm47XG4gICAgICBzd2lwZXIuY2xhc3NOYW1lcy5wdXNoKHN3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcyArIFwiY292ZXJmbG93XCIpO1xuICAgICAgc3dpcGVyLmNsYXNzTmFtZXMucHVzaChzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MgKyBcIjNkXCIpO1xuICAgICAgc3dpcGVyLnBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzID0gdHJ1ZTtcbiAgICAgIHN3aXBlci5vcmlnaW5hbFBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzID0gdHJ1ZTtcbiAgICB9LFxuICAgIHNldFRyYW5zbGF0ZTogZnVuY3Rpb24gc2V0VHJhbnNsYXRlKHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSAnY292ZXJmbG93JykgcmV0dXJuO1xuICAgICAgc3dpcGVyLmNvdmVyZmxvd0VmZmVjdC5zZXRUcmFuc2xhdGUoKTtcbiAgICB9LFxuICAgIHNldFRyYW5zaXRpb246IGZ1bmN0aW9uIHNldFRyYW5zaXRpb24oc3dpcGVyLCBkdXJhdGlvbikge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSAnY292ZXJmbG93JykgcmV0dXJuO1xuICAgICAgc3dpcGVyLmNvdmVyZmxvd0VmZmVjdC5zZXRUcmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgICB9XG4gIH1cbn07XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9lZmZlY3QtY292ZXJmbG93L2VmZmVjdC1jb3ZlcmZsb3cuanMiLCJmdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5pbXBvcnQgeyBleHRlbmQsIGlzT2JqZWN0LCBiaW5kTW9kdWxlTWV0aG9kcyB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcbmltcG9ydCAkIGZyb20gJy4uLy4uL3V0aWxzL2RvbSc7XG52YXIgVGh1bWJzID0ge1xuICBpbml0OiBmdW5jdGlvbiBpbml0KCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciB0aHVtYnNQYXJhbXMgPSBzd2lwZXIucGFyYW1zLnRodW1icztcbiAgICBpZiAoc3dpcGVyLnRodW1icy5pbml0aWFsaXplZCkgcmV0dXJuIGZhbHNlO1xuICAgIHN3aXBlci50aHVtYnMuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgIHZhciBTd2lwZXJDbGFzcyA9IHN3aXBlci5jb25zdHJ1Y3RvcjtcblxuICAgIGlmICh0aHVtYnNQYXJhbXMuc3dpcGVyIGluc3RhbmNlb2YgU3dpcGVyQ2xhc3MpIHtcbiAgICAgIHN3aXBlci50aHVtYnMuc3dpcGVyID0gdGh1bWJzUGFyYW1zLnN3aXBlcjtcbiAgICAgIGV4dGVuZChzd2lwZXIudGh1bWJzLnN3aXBlci5vcmlnaW5hbFBhcmFtcywge1xuICAgICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiB0cnVlLFxuICAgICAgICBzbGlkZVRvQ2xpY2tlZFNsaWRlOiBmYWxzZVxuICAgICAgfSk7XG4gICAgICBleHRlbmQoc3dpcGVyLnRodW1icy5zd2lwZXIucGFyYW1zLCB7XG4gICAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IHRydWUsXG4gICAgICAgIHNsaWRlVG9DbGlja2VkU2xpZGU6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KHRodW1ic1BhcmFtcy5zd2lwZXIpKSB7XG4gICAgICBzd2lwZXIudGh1bWJzLnN3aXBlciA9IG5ldyBTd2lwZXJDbGFzcyhleHRlbmQoe30sIHRodW1ic1BhcmFtcy5zd2lwZXIsIHtcbiAgICAgICAgd2F0Y2hTbGlkZXNWaXNpYmlsaXR5OiB0cnVlLFxuICAgICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiB0cnVlLFxuICAgICAgICBzbGlkZVRvQ2xpY2tlZFNsaWRlOiBmYWxzZVxuICAgICAgfSkpO1xuICAgICAgc3dpcGVyLnRodW1icy5zd2lwZXJDcmVhdGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBzd2lwZXIudGh1bWJzLnN3aXBlci4kZWwuYWRkQ2xhc3Moc3dpcGVyLnBhcmFtcy50aHVtYnMudGh1bWJzQ29udGFpbmVyQ2xhc3MpO1xuICAgIHN3aXBlci50aHVtYnMuc3dpcGVyLm9uKCd0YXAnLCBzd2lwZXIudGh1bWJzLm9uVGh1bWJDbGljayk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gIG9uVGh1bWJDbGljazogZnVuY3Rpb24gb25UaHVtYkNsaWNrKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciB0aHVtYnNTd2lwZXIgPSBzd2lwZXIudGh1bWJzLnN3aXBlcjtcbiAgICBpZiAoIXRodW1ic1N3aXBlcikgcmV0dXJuO1xuICAgIHZhciBjbGlja2VkSW5kZXggPSB0aHVtYnNTd2lwZXIuY2xpY2tlZEluZGV4O1xuICAgIHZhciBjbGlja2VkU2xpZGUgPSB0aHVtYnNTd2lwZXIuY2xpY2tlZFNsaWRlO1xuICAgIGlmIChjbGlja2VkU2xpZGUgJiYgJChjbGlja2VkU2xpZGUpLmhhc0NsYXNzKHN3aXBlci5wYXJhbXMudGh1bWJzLnNsaWRlVGh1bWJBY3RpdmVDbGFzcykpIHJldHVybjtcbiAgICBpZiAodHlwZW9mIGNsaWNrZWRJbmRleCA9PT0gJ3VuZGVmaW5lZCcgfHwgY2xpY2tlZEluZGV4ID09PSBudWxsKSByZXR1cm47XG4gICAgdmFyIHNsaWRlVG9JbmRleDtcblxuICAgIGlmICh0aHVtYnNTd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgIHNsaWRlVG9JbmRleCA9IHBhcnNlSW50KCQodGh1bWJzU3dpcGVyLmNsaWNrZWRTbGlkZSkuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSwgMTApO1xuICAgIH0gZWxzZSB7XG4gICAgICBzbGlkZVRvSW5kZXggPSBjbGlja2VkSW5kZXg7XG4gICAgfVxuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgdmFyIGN1cnJlbnRJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcblxuICAgICAgaWYgKHN3aXBlci5zbGlkZXMuZXEoY3VycmVudEluZGV4KS5oYXNDbGFzcyhzd2lwZXIucGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKSB7XG4gICAgICAgIHN3aXBlci5sb29wRml4KCk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuXG4gICAgICAgIHN3aXBlci5fY2xpZW50TGVmdCA9IHN3aXBlci4kd3JhcHBlckVsWzBdLmNsaWVudExlZnQ7XG4gICAgICAgIGN1cnJlbnRJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcbiAgICAgIH1cblxuICAgICAgdmFyIHByZXZJbmRleCA9IHN3aXBlci5zbGlkZXMuZXEoY3VycmVudEluZGV4KS5wcmV2QWxsKFwiW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVxcXCJcIiArIHNsaWRlVG9JbmRleCArIFwiXFxcIl1cIikuZXEoMCkuaW5kZXgoKTtcbiAgICAgIHZhciBuZXh0SW5kZXggPSBzd2lwZXIuc2xpZGVzLmVxKGN1cnJlbnRJbmRleCkubmV4dEFsbChcIltkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyBzbGlkZVRvSW5kZXggKyBcIlxcXCJdXCIpLmVxKDApLmluZGV4KCk7XG4gICAgICBpZiAodHlwZW9mIHByZXZJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHNsaWRlVG9JbmRleCA9IG5leHRJbmRleDtlbHNlIGlmICh0eXBlb2YgbmV4dEluZGV4ID09PSAndW5kZWZpbmVkJykgc2xpZGVUb0luZGV4ID0gcHJldkluZGV4O2Vsc2UgaWYgKG5leHRJbmRleCAtIGN1cnJlbnRJbmRleCA8IGN1cnJlbnRJbmRleCAtIHByZXZJbmRleCkgc2xpZGVUb0luZGV4ID0gbmV4dEluZGV4O2Vsc2Ugc2xpZGVUb0luZGV4ID0gcHJldkluZGV4O1xuICAgIH1cblxuICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gIH0sXG4gIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKGluaXRpYWwpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgdGh1bWJzU3dpcGVyID0gc3dpcGVyLnRodW1icy5zd2lwZXI7XG4gICAgaWYgKCF0aHVtYnNTd2lwZXIpIHJldHVybjtcbiAgICB2YXIgc2xpZGVzUGVyVmlldyA9IHRodW1ic1N3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nID8gdGh1bWJzU3dpcGVyLnNsaWRlc1BlclZpZXdEeW5hbWljKCkgOiB0aHVtYnNTd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXc7XG4gICAgdmFyIGF1dG9TY3JvbGxPZmZzZXQgPSBzd2lwZXIucGFyYW1zLnRodW1icy5hdXRvU2Nyb2xsT2Zmc2V0O1xuICAgIHZhciB1c2VPZmZzZXQgPSBhdXRvU2Nyb2xsT2Zmc2V0ICYmICF0aHVtYnNTd2lwZXIucGFyYW1zLmxvb3A7XG5cbiAgICBpZiAoc3dpcGVyLnJlYWxJbmRleCAhPT0gdGh1bWJzU3dpcGVyLnJlYWxJbmRleCB8fCB1c2VPZmZzZXQpIHtcbiAgICAgIHZhciBjdXJyZW50VGh1bWJzSW5kZXggPSB0aHVtYnNTd2lwZXIuYWN0aXZlSW5kZXg7XG4gICAgICB2YXIgbmV3VGh1bWJzSW5kZXg7XG4gICAgICB2YXIgZGlyZWN0aW9uO1xuXG4gICAgICBpZiAodGh1bWJzU3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICAgIGlmICh0aHVtYnNTd2lwZXIuc2xpZGVzLmVxKGN1cnJlbnRUaHVtYnNJbmRleCkuaGFzQ2xhc3ModGh1bWJzU3dpcGVyLnBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSkge1xuICAgICAgICAgIHRodW1ic1N3aXBlci5sb29wRml4KCk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuXG4gICAgICAgICAgdGh1bWJzU3dpcGVyLl9jbGllbnRMZWZ0ID0gdGh1bWJzU3dpcGVyLiR3cmFwcGVyRWxbMF0uY2xpZW50TGVmdDtcbiAgICAgICAgICBjdXJyZW50VGh1bWJzSW5kZXggPSB0aHVtYnNTd2lwZXIuYWN0aXZlSW5kZXg7XG4gICAgICAgIH0gLy8gRmluZCBhY3R1YWwgdGh1bWJzIGluZGV4IHRvIHNsaWRlIHRvXG5cblxuICAgICAgICB2YXIgcHJldlRodW1ic0luZGV4ID0gdGh1bWJzU3dpcGVyLnNsaWRlcy5lcShjdXJyZW50VGh1bWJzSW5kZXgpLnByZXZBbGwoXCJbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIlwiICsgc3dpcGVyLnJlYWxJbmRleCArIFwiXFxcIl1cIikuZXEoMCkuaW5kZXgoKTtcbiAgICAgICAgdmFyIG5leHRUaHVtYnNJbmRleCA9IHRodW1ic1N3aXBlci5zbGlkZXMuZXEoY3VycmVudFRodW1ic0luZGV4KS5uZXh0QWxsKFwiW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVxcXCJcIiArIHN3aXBlci5yZWFsSW5kZXggKyBcIlxcXCJdXCIpLmVxKDApLmluZGV4KCk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBwcmV2VGh1bWJzSW5kZXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgbmV3VGh1bWJzSW5kZXggPSBuZXh0VGh1bWJzSW5kZXg7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG5leHRUaHVtYnNJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBuZXdUaHVtYnNJbmRleCA9IHByZXZUaHVtYnNJbmRleDtcbiAgICAgICAgfSBlbHNlIGlmIChuZXh0VGh1bWJzSW5kZXggLSBjdXJyZW50VGh1bWJzSW5kZXggPT09IGN1cnJlbnRUaHVtYnNJbmRleCAtIHByZXZUaHVtYnNJbmRleCkge1xuICAgICAgICAgIG5ld1RodW1ic0luZGV4ID0gdGh1bWJzU3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCA+IDEgPyBuZXh0VGh1bWJzSW5kZXggOiBjdXJyZW50VGh1bWJzSW5kZXg7XG4gICAgICAgIH0gZWxzZSBpZiAobmV4dFRodW1ic0luZGV4IC0gY3VycmVudFRodW1ic0luZGV4IDwgY3VycmVudFRodW1ic0luZGV4IC0gcHJldlRodW1ic0luZGV4KSB7XG4gICAgICAgICAgbmV3VGh1bWJzSW5kZXggPSBuZXh0VGh1bWJzSW5kZXg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3VGh1bWJzSW5kZXggPSBwcmV2VGh1bWJzSW5kZXg7XG4gICAgICAgIH1cblxuICAgICAgICBkaXJlY3Rpb24gPSBzd2lwZXIuYWN0aXZlSW5kZXggPiBzd2lwZXIucHJldmlvdXNJbmRleCA/ICduZXh0JyA6ICdwcmV2JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld1RodW1ic0luZGV4ID0gc3dpcGVyLnJlYWxJbmRleDtcbiAgICAgICAgZGlyZWN0aW9uID0gbmV3VGh1bWJzSW5kZXggPiBzd2lwZXIucHJldmlvdXNJbmRleCA/ICduZXh0JyA6ICdwcmV2JztcbiAgICAgIH1cblxuICAgICAgaWYgKHVzZU9mZnNldCkge1xuICAgICAgICBuZXdUaHVtYnNJbmRleCArPSBkaXJlY3Rpb24gPT09ICduZXh0JyA/IGF1dG9TY3JvbGxPZmZzZXQgOiAtMSAqIGF1dG9TY3JvbGxPZmZzZXQ7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aHVtYnNTd2lwZXIudmlzaWJsZVNsaWRlc0luZGV4ZXMgJiYgdGh1bWJzU3dpcGVyLnZpc2libGVTbGlkZXNJbmRleGVzLmluZGV4T2YobmV3VGh1bWJzSW5kZXgpIDwgMCkge1xuICAgICAgICBpZiAodGh1bWJzU3dpcGVyLnBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgICAgIGlmIChuZXdUaHVtYnNJbmRleCA+IGN1cnJlbnRUaHVtYnNJbmRleCkge1xuICAgICAgICAgICAgbmV3VGh1bWJzSW5kZXggPSBuZXdUaHVtYnNJbmRleCAtIE1hdGguZmxvb3Ioc2xpZGVzUGVyVmlldyAvIDIpICsgMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV3VGh1bWJzSW5kZXggPSBuZXdUaHVtYnNJbmRleCArIE1hdGguZmxvb3Ioc2xpZGVzUGVyVmlldyAvIDIpIC0gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAobmV3VGh1bWJzSW5kZXggPiBjdXJyZW50VGh1bWJzSW5kZXggJiYgdGh1bWJzU3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMSkgey8vIG5ld1RodW1ic0luZGV4ID0gbmV3VGh1bWJzSW5kZXggLSBzbGlkZXNQZXJWaWV3ICsgMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRodW1ic1N3aXBlci5zbGlkZVRvKG5ld1RodW1ic0luZGV4LCBpbml0aWFsID8gMCA6IHVuZGVmaW5lZCk7XG4gICAgICB9XG4gICAgfSAvLyBBY3RpdmF0ZSB0aHVtYnNcblxuXG4gICAgdmFyIHRodW1ic1RvQWN0aXZhdGUgPSAxO1xuICAgIHZhciB0aHVtYkFjdGl2ZUNsYXNzID0gc3dpcGVyLnBhcmFtcy50aHVtYnMuc2xpZGVUaHVtYkFjdGl2ZUNsYXNzO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyA+IDEgJiYgIXN3aXBlci5wYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIHRodW1ic1RvQWN0aXZhdGUgPSBzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXc7XG4gICAgfVxuXG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLnRodW1icy5tdWx0aXBsZUFjdGl2ZVRodW1icykge1xuICAgICAgdGh1bWJzVG9BY3RpdmF0ZSA9IDE7XG4gICAgfVxuXG4gICAgdGh1bWJzVG9BY3RpdmF0ZSA9IE1hdGguZmxvb3IodGh1bWJzVG9BY3RpdmF0ZSk7XG4gICAgdGh1bWJzU3dpcGVyLnNsaWRlcy5yZW1vdmVDbGFzcyh0aHVtYkFjdGl2ZUNsYXNzKTtcblxuICAgIGlmICh0aHVtYnNTd2lwZXIucGFyYW1zLmxvb3AgfHwgdGh1bWJzU3dpcGVyLnBhcmFtcy52aXJ0dWFsICYmIHRodW1ic1N3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRodW1ic1RvQWN0aXZhdGU7IGkgKz0gMSkge1xuICAgICAgICB0aHVtYnNTd2lwZXIuJHdyYXBwZXJFbC5jaGlsZHJlbihcIltkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyAoc3dpcGVyLnJlYWxJbmRleCArIGkpICsgXCJcXFwiXVwiKS5hZGRDbGFzcyh0aHVtYkFjdGl2ZUNsYXNzKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IHRodW1ic1RvQWN0aXZhdGU7IF9pICs9IDEpIHtcbiAgICAgICAgdGh1bWJzU3dpcGVyLnNsaWRlcy5lcShzd2lwZXIucmVhbEluZGV4ICsgX2kpLmFkZENsYXNzKHRodW1iQWN0aXZlQ2xhc3MpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ3RodW1icycsXG4gIHBhcmFtczoge1xuICAgIHRodW1iczoge1xuICAgICAgc3dpcGVyOiBudWxsLFxuICAgICAgbXVsdGlwbGVBY3RpdmVUaHVtYnM6IHRydWUsXG4gICAgICBhdXRvU2Nyb2xsT2Zmc2V0OiAwLFxuICAgICAgc2xpZGVUaHVtYkFjdGl2ZUNsYXNzOiAnc3dpcGVyLXNsaWRlLXRodW1iLWFjdGl2ZScsXG4gICAgICB0aHVtYnNDb250YWluZXJDbGFzczogJ3N3aXBlci1jb250YWluZXItdGh1bWJzJ1xuICAgIH1cbiAgfSxcbiAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgYmluZE1vZHVsZU1ldGhvZHMoc3dpcGVyLCB7XG4gICAgICB0aHVtYnM6IF9leHRlbmRzKHtcbiAgICAgICAgc3dpcGVyOiBudWxsLFxuICAgICAgICBpbml0aWFsaXplZDogZmFsc2VcbiAgICAgIH0sIFRodW1icylcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBiZWZvcmVJbml0OiBmdW5jdGlvbiBiZWZvcmVJbml0KHN3aXBlcikge1xuICAgICAgdmFyIHRodW1icyA9IHN3aXBlci5wYXJhbXMudGh1bWJzO1xuICAgICAgaWYgKCF0aHVtYnMgfHwgIXRodW1icy5zd2lwZXIpIHJldHVybjtcbiAgICAgIHN3aXBlci50aHVtYnMuaW5pdCgpO1xuICAgICAgc3dpcGVyLnRodW1icy51cGRhdGUodHJ1ZSk7XG4gICAgfSxcbiAgICBzbGlkZUNoYW5nZTogZnVuY3Rpb24gc2xpZGVDaGFuZ2Uoc3dpcGVyKSB7XG4gICAgICBpZiAoIXN3aXBlci50aHVtYnMuc3dpcGVyKSByZXR1cm47XG4gICAgICBzd2lwZXIudGh1bWJzLnVwZGF0ZSgpO1xuICAgIH0sXG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoc3dpcGVyKSB7XG4gICAgICBpZiAoIXN3aXBlci50aHVtYnMuc3dpcGVyKSByZXR1cm47XG4gICAgICBzd2lwZXIudGh1bWJzLnVwZGF0ZSgpO1xuICAgIH0sXG4gICAgcmVzaXplOiBmdW5jdGlvbiByZXNpemUoc3dpcGVyKSB7XG4gICAgICBpZiAoIXN3aXBlci50aHVtYnMuc3dpcGVyKSByZXR1cm47XG4gICAgICBzd2lwZXIudGh1bWJzLnVwZGF0ZSgpO1xuICAgIH0sXG4gICAgb2JzZXJ2ZXJVcGRhdGU6IGZ1bmN0aW9uIG9ic2VydmVyVXBkYXRlKHN3aXBlcikge1xuICAgICAgaWYgKCFzd2lwZXIudGh1bWJzLnN3aXBlcikgcmV0dXJuO1xuICAgICAgc3dpcGVyLnRodW1icy51cGRhdGUoKTtcbiAgICB9LFxuICAgIHNldFRyYW5zaXRpb246IGZ1bmN0aW9uIHNldFRyYW5zaXRpb24oc3dpcGVyLCBkdXJhdGlvbikge1xuICAgICAgdmFyIHRodW1ic1N3aXBlciA9IHN3aXBlci50aHVtYnMuc3dpcGVyO1xuICAgICAgaWYgKCF0aHVtYnNTd2lwZXIpIHJldHVybjtcbiAgICAgIHRodW1ic1N3aXBlci5zZXRUcmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgICB9LFxuICAgIGJlZm9yZURlc3Ryb3k6IGZ1bmN0aW9uIGJlZm9yZURlc3Ryb3koc3dpcGVyKSB7XG4gICAgICB2YXIgdGh1bWJzU3dpcGVyID0gc3dpcGVyLnRodW1icy5zd2lwZXI7XG4gICAgICBpZiAoIXRodW1ic1N3aXBlcikgcmV0dXJuO1xuXG4gICAgICBpZiAoc3dpcGVyLnRodW1icy5zd2lwZXJDcmVhdGVkICYmIHRodW1ic1N3aXBlcikge1xuICAgICAgICB0aHVtYnNTd2lwZXIuZGVzdHJveSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL3RodW1icy90aHVtYnMuanMiLCIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2NvbW1vbi5ibG9ja3MvbW9kYWwvbW9kYWwubGVzc1xuLy8gbW9kdWxlIGlkID0gMTMyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvY29tbW9uLmJsb2Nrcy9wYWdlLXNlY3Rpb24vcGFnZS1zZWN0aW9uLmxlc3Ncbi8vIG1vZHVsZSBpZCA9IDEzM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQgbm9VaVNsaWRlciBmcm9tICdub3Vpc2xpZGVyJztcbmltcG9ydCAnbm91aXNsaWRlci9kaXN0L25vdWlzbGlkZXIuY3NzJztcbmltcG9ydCB3TnVtYiBmcm9tICd3bnVtYic7XG5cbmNvbnN0IENPU1RfT0ZfR09MRCA9IHtcbiAgMzc1OiAxNTgwLFxuICA1MDA6IDIxMDAsXG4gIDU4MzogMjU5MCxcbiAgNTg1OiAyNTkwLFxuICA3NTA6IDMxNTAsXG4gIDkwMDogMzc4MCxcbiAgOTU4OiA0MDIwLFxuICA5OTk6IDQyMDAsXG59O1xuXG5jb25zdCBwcmljZUFtb3VudE9uSGFuZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcmljZV9fYW1vdW50LW9uLWhhbmQnKTtcbmNvbnN0IHByaWNlU2FtcGxlc0xpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJpY2VfX3NhbXBsZXMtbGlzdCcpO1xuY29uc3QgcHJpY2VJbnB1dHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucHJpY2VfX2lucHV0Jyk7XG5jb25zdCBwcmljZVJhbmdlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ByaWNlLXJhbmdlJyk7XG5cbmxldCBnb2xkQW1vdW50ID0gbnVsbDtcbmxldCByYXRlID0gbnVsbDtcbmxldCBhbW91bnRPbkhhbmQgPSBudWxsO1xuXG5jb25zdCBtb25leUZvcm1hdCA9IHdOdW1iKHtcbiAgdGhvdXNhbmQ6ICcgJyxcbiAgc3VmZml4OiAnIOKCvScsXG4gIGRlY2ltYWxzOiAwLFxufSk7XG5cbmZ1bmN0aW9uIHJlbmRlckFtb3VudCgpIHtcbiAgYW1vdW50T25IYW5kID0gcmF0ZSAqIGdvbGRBbW91bnQ7XG4gIHByaWNlQW1vdW50T25IYW5kLnRleHRDb250ZW50ID0gbW9uZXlGb3JtYXQudG8oYW1vdW50T25IYW5kKTtcbn1cblxucHJpY2VJbnB1dHMuZm9yRWFjaCgoaW5wdXQpID0+IHtcbiAgaWYgKGlucHV0LmNoZWNrZWQpIHtcbiAgICByYXRlID0gQ09TVF9PRl9HT0xEW2lucHV0LmRhdGFzZXQudmFsdWVdO1xuICB9XG59KTtcblxuaWYgKHByaWNlU2FtcGxlc0xpc3QpIHtcbiAgcHJpY2VTYW1wbGVzTGlzdC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudCkgPT4ge1xuICAgIGlmIChldmVudC50YXJnZXQubm9kZU5hbWUgPT09ICdJTlBVVCcpIHtcbiAgICAgIHJhdGUgPSBDT1NUX09GX0dPTERbZXZlbnQudGFyZ2V0LmRhdGFzZXQudmFsdWVdO1xuICAgICAgcmVuZGVyQW1vdW50KCk7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gb25VcGRhdGUodW5lbmNvZGVkKSB7XG4gIGNvbnN0IGRpZmYgPSBNYXRoLnJvdW5kKE51bWJlcih1bmVuY29kZWQpLnRvRml4ZWQoMSkpIC0gTnVtYmVyKHVuZW5jb2RlZCkudG9GaXhlZCgxKTtcbiAgY29uc3QgdG9vbHRpcHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubm9VaS10b29sdGlwJyk7XG5cbiAgaWYgKGRpZmYgPT09IDApIHtcbiAgICB0b29sdGlwcy50ZXh0Q29udGVudCA9IGAke01hdGgucm91bmQoTnVtYmVyKHVuZW5jb2RlZCkudG9GaXhlZCgxKSl9YDtcbiAgfVxuXG4gIGdvbGRBbW91bnQgPSBOdW1iZXIodW5lbmNvZGVkKS50b0ZpeGVkKDEpO1xuICBhbW91bnRPbkhhbmQgPSByYXRlICogZ29sZEFtb3VudDtcblxuICByZW5kZXJBbW91bnQoKTtcbn1cblxuaWYgKHByaWNlUmFuZ2UpIHtcbiAgbm9VaVNsaWRlci5jcmVhdGUocHJpY2VSYW5nZSwge1xuICAgIHN0YXJ0OiAzOCxcbiAgICBzdGVwOiAwLjUsXG4gICAgY29ubmVjdDogW3RydWUsIGZhbHNlXSxcbiAgICByYW5nZToge1xuICAgICAgbWluOiAxLFxuICAgICAgbWF4OiA5OS45LFxuICAgIH0sXG4gICAgdG9vbHRpcHM6IFtcbiAgICAgIHdOdW1iKHtcbiAgICAgICAgbWFyazogJywnLFxuICAgICAgICBkZWNpbWFsczogMSxcbiAgICAgIH0pLFxuICAgIF0sXG4gIH0pO1xuXG4gIHByaWNlUmFuZ2Uubm9VaVNsaWRlci5vbigndXBkYXRlJywgb25VcGRhdGUpO1xufVxuXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29tbW9uLmJsb2Nrcy9wcmljZS9wcmljZS5qcyIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gZmFjdG9yeShleHBvcnRzKSA6XG4gICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnZXhwb3J0cyddLCBmYWN0b3J5KSA6XG4gICAgKGdsb2JhbCA9IHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbFRoaXMgOiBnbG9iYWwgfHwgc2VsZiwgZmFjdG9yeShnbG9iYWwubm9VaVNsaWRlciA9IHt9KSk7XG59KHRoaXMsIChmdW5jdGlvbiAoZXhwb3J0cykgeyAndXNlIHN0cmljdCc7XG5cbiAgICBleHBvcnRzLlBpcHNNb2RlID0gdm9pZCAwO1xuICAgIChmdW5jdGlvbiAoUGlwc01vZGUpIHtcbiAgICAgICAgUGlwc01vZGVbXCJSYW5nZVwiXSA9IFwicmFuZ2VcIjtcbiAgICAgICAgUGlwc01vZGVbXCJTdGVwc1wiXSA9IFwic3RlcHNcIjtcbiAgICAgICAgUGlwc01vZGVbXCJQb3NpdGlvbnNcIl0gPSBcInBvc2l0aW9uc1wiO1xuICAgICAgICBQaXBzTW9kZVtcIkNvdW50XCJdID0gXCJjb3VudFwiO1xuICAgICAgICBQaXBzTW9kZVtcIlZhbHVlc1wiXSA9IFwidmFsdWVzXCI7XG4gICAgfSkoZXhwb3J0cy5QaXBzTW9kZSB8fCAoZXhwb3J0cy5QaXBzTW9kZSA9IHt9KSk7XG4gICAgZXhwb3J0cy5QaXBzVHlwZSA9IHZvaWQgMDtcbiAgICAoZnVuY3Rpb24gKFBpcHNUeXBlKSB7XG4gICAgICAgIFBpcHNUeXBlW1BpcHNUeXBlW1wiTm9uZVwiXSA9IC0xXSA9IFwiTm9uZVwiO1xuICAgICAgICBQaXBzVHlwZVtQaXBzVHlwZVtcIk5vVmFsdWVcIl0gPSAwXSA9IFwiTm9WYWx1ZVwiO1xuICAgICAgICBQaXBzVHlwZVtQaXBzVHlwZVtcIkxhcmdlVmFsdWVcIl0gPSAxXSA9IFwiTGFyZ2VWYWx1ZVwiO1xuICAgICAgICBQaXBzVHlwZVtQaXBzVHlwZVtcIlNtYWxsVmFsdWVcIl0gPSAyXSA9IFwiU21hbGxWYWx1ZVwiO1xuICAgIH0pKGV4cG9ydHMuUGlwc1R5cGUgfHwgKGV4cG9ydHMuUGlwc1R5cGUgPSB7fSkpO1xuICAgIC8vcmVnaW9uIEhlbHBlciBNZXRob2RzXG4gICAgZnVuY3Rpb24gaXNWYWxpZEZvcm1hdHRlcihlbnRyeSkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIGVudHJ5ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBlbnRyeS50byA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBlbnRyeS5mcm9tID09PSBcImZ1bmN0aW9uXCI7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlbW92ZUVsZW1lbnQoZWwpIHtcbiAgICAgICAgZWwucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZChlbCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGlzU2V0KHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICAvLyBCaW5kYWJsZSB2ZXJzaW9uXG4gICAgZnVuY3Rpb24gcHJldmVudERlZmF1bHQoZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICAgIC8vIFJlbW92ZXMgZHVwbGljYXRlcyBmcm9tIGFuIGFycmF5LlxuICAgIGZ1bmN0aW9uIHVuaXF1ZShhcnJheSkge1xuICAgICAgICByZXR1cm4gYXJyYXkuZmlsdGVyKGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgICByZXR1cm4gIXRoaXNbYV0gPyAodGhpc1thXSA9IHRydWUpIDogZmFsc2U7XG4gICAgICAgIH0sIHt9KTtcbiAgICB9XG4gICAgLy8gUm91bmQgYSB2YWx1ZSB0byB0aGUgY2xvc2VzdCAndG8nLlxuICAgIGZ1bmN0aW9uIGNsb3Nlc3QodmFsdWUsIHRvKSB7XG4gICAgICAgIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlIC8gdG8pICogdG87XG4gICAgfVxuICAgIC8vIEN1cnJlbnQgcG9zaXRpb24gb2YgYW4gZWxlbWVudCByZWxhdGl2ZSB0byB0aGUgZG9jdW1lbnQuXG4gICAgZnVuY3Rpb24gb2Zmc2V0KGVsZW0sIG9yaWVudGF0aW9uKSB7XG4gICAgICAgIHZhciByZWN0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgdmFyIGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudDtcbiAgICAgICAgdmFyIGRvY0VsZW0gPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgICB2YXIgcGFnZU9mZnNldCA9IGdldFBhZ2VPZmZzZXQoZG9jKTtcbiAgICAgICAgLy8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGNvbnRhaW5zIGxlZnQgc2Nyb2xsIGluIENocm9tZSBvbiBBbmRyb2lkLlxuICAgICAgICAvLyBJIGhhdmVuJ3QgZm91bmQgYSBmZWF0dXJlIGRldGVjdGlvbiB0aGF0IHByb3ZlcyB0aGlzLiBXb3JzdCBjYXNlXG4gICAgICAgIC8vIHNjZW5hcmlvIG9uIG1pcy1tYXRjaDogdGhlICd0YXAnIGZlYXR1cmUgb24gaG9yaXpvbnRhbCBzbGlkZXJzIGJyZWFrcy5cbiAgICAgICAgaWYgKC93ZWJraXQuKkNocm9tZS4qTW9iaWxlL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSkge1xuICAgICAgICAgICAgcGFnZU9mZnNldC54ID0gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3JpZW50YXRpb24gPyByZWN0LnRvcCArIHBhZ2VPZmZzZXQueSAtIGRvY0VsZW0uY2xpZW50VG9wIDogcmVjdC5sZWZ0ICsgcGFnZU9mZnNldC54IC0gZG9jRWxlbS5jbGllbnRMZWZ0O1xuICAgIH1cbiAgICAvLyBDaGVja3Mgd2hldGhlciBhIHZhbHVlIGlzIG51bWVyaWNhbC5cbiAgICBmdW5jdGlvbiBpc051bWVyaWMoYSkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIGEgPT09IFwibnVtYmVyXCIgJiYgIWlzTmFOKGEpICYmIGlzRmluaXRlKGEpO1xuICAgIH1cbiAgICAvLyBTZXRzIGEgY2xhc3MgYW5kIHJlbW92ZXMgaXQgYWZ0ZXIgW2R1cmF0aW9uXSBtcy5cbiAgICBmdW5jdGlvbiBhZGRDbGFzc0ZvcihlbGVtZW50LCBjbGFzc05hbWUsIGR1cmF0aW9uKSB7XG4gICAgICAgIGlmIChkdXJhdGlvbiA+IDApIHtcbiAgICAgICAgICAgIGFkZENsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSk7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpO1xuICAgICAgICAgICAgfSwgZHVyYXRpb24pO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIExpbWl0cyBhIHZhbHVlIHRvIDAgLSAxMDBcbiAgICBmdW5jdGlvbiBsaW1pdChhKSB7XG4gICAgICAgIHJldHVybiBNYXRoLm1heChNYXRoLm1pbihhLCAxMDApLCAwKTtcbiAgICB9XG4gICAgLy8gV3JhcHMgYSB2YXJpYWJsZSBhcyBhbiBhcnJheSwgaWYgaXQgaXNuJ3Qgb25lIHlldC5cbiAgICAvLyBOb3RlIHRoYXQgYW4gaW5wdXQgYXJyYXkgaXMgcmV0dXJuZWQgYnkgcmVmZXJlbmNlIVxuICAgIGZ1bmN0aW9uIGFzQXJyYXkoYSkge1xuICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShhKSA/IGEgOiBbYV07XG4gICAgfVxuICAgIC8vIENvdW50cyBkZWNpbWFsc1xuICAgIGZ1bmN0aW9uIGNvdW50RGVjaW1hbHMobnVtU3RyKSB7XG4gICAgICAgIG51bVN0ciA9IFN0cmluZyhudW1TdHIpO1xuICAgICAgICB2YXIgcGllY2VzID0gbnVtU3RyLnNwbGl0KFwiLlwiKTtcbiAgICAgICAgcmV0dXJuIHBpZWNlcy5sZW5ndGggPiAxID8gcGllY2VzWzFdLmxlbmd0aCA6IDA7XG4gICAgfVxuICAgIC8vIGh0dHA6Ly95b3VtaWdodG5vdG5lZWRqcXVlcnkuY29tLyNhZGRfY2xhc3NcbiAgICBmdW5jdGlvbiBhZGRDbGFzcyhlbCwgY2xhc3NOYW1lKSB7XG4gICAgICAgIGlmIChlbC5jbGFzc0xpc3QgJiYgIS9cXHMvLnRlc3QoY2xhc3NOYW1lKSkge1xuICAgICAgICAgICAgZWwuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZWwuY2xhc3NOYW1lICs9IFwiIFwiICsgY2xhc3NOYW1lO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIGh0dHA6Ly95b3VtaWdodG5vdG5lZWRqcXVlcnkuY29tLyNyZW1vdmVfY2xhc3NcbiAgICBmdW5jdGlvbiByZW1vdmVDbGFzcyhlbCwgY2xhc3NOYW1lKSB7XG4gICAgICAgIGlmIChlbC5jbGFzc0xpc3QgJiYgIS9cXHMvLnRlc3QoY2xhc3NOYW1lKSkge1xuICAgICAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZWwuY2xhc3NOYW1lID0gZWwuY2xhc3NOYW1lLnJlcGxhY2UobmV3IFJlZ0V4cChcIihefFxcXFxiKVwiICsgY2xhc3NOYW1lLnNwbGl0KFwiIFwiKS5qb2luKFwifFwiKSArIFwiKFxcXFxifCQpXCIsIFwiZ2lcIiksIFwiIFwiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBodHRwczovL3BsYWluanMuY29tL2phdmFzY3JpcHQvYXR0cmlidXRlcy9hZGRpbmctcmVtb3ZpbmctYW5kLXRlc3RpbmctZm9yLWNsYXNzZXMtOS9cbiAgICBmdW5jdGlvbiBoYXNDbGFzcyhlbCwgY2xhc3NOYW1lKSB7XG4gICAgICAgIHJldHVybiBlbC5jbGFzc0xpc3QgPyBlbC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKSA6IG5ldyBSZWdFeHAoXCJcXFxcYlwiICsgY2xhc3NOYW1lICsgXCJcXFxcYlwiKS50ZXN0KGVsLmNsYXNzTmFtZSk7XG4gICAgfVxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9XaW5kb3cvc2Nyb2xsWSNOb3Rlc1xuICAgIGZ1bmN0aW9uIGdldFBhZ2VPZmZzZXQoZG9jKSB7XG4gICAgICAgIHZhciBzdXBwb3J0UGFnZU9mZnNldCA9IHdpbmRvdy5wYWdlWE9mZnNldCAhPT0gdW5kZWZpbmVkO1xuICAgICAgICB2YXIgaXNDU1MxQ29tcGF0ID0gKGRvYy5jb21wYXRNb2RlIHx8IFwiXCIpID09PSBcIkNTUzFDb21wYXRcIjtcbiAgICAgICAgdmFyIHggPSBzdXBwb3J0UGFnZU9mZnNldFxuICAgICAgICAgICAgPyB3aW5kb3cucGFnZVhPZmZzZXRcbiAgICAgICAgICAgIDogaXNDU1MxQ29tcGF0XG4gICAgICAgICAgICAgICAgPyBkb2MuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnRcbiAgICAgICAgICAgICAgICA6IGRvYy5ib2R5LnNjcm9sbExlZnQ7XG4gICAgICAgIHZhciB5ID0gc3VwcG9ydFBhZ2VPZmZzZXRcbiAgICAgICAgICAgID8gd2luZG93LnBhZ2VZT2Zmc2V0XG4gICAgICAgICAgICA6IGlzQ1NTMUNvbXBhdFxuICAgICAgICAgICAgICAgID8gZG9jLmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3BcbiAgICAgICAgICAgICAgICA6IGRvYy5ib2R5LnNjcm9sbFRvcDtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHg6IHgsXG4gICAgICAgICAgICB5OiB5XG4gICAgICAgIH07XG4gICAgfVxuICAgIC8vIHdlIHByb3ZpZGUgYSBmdW5jdGlvbiB0byBjb21wdXRlIGNvbnN0YW50cyBpbnN0ZWFkXG4gICAgLy8gb2YgYWNjZXNzaW5nIHdpbmRvdy4qIGFzIHNvb24gYXMgdGhlIG1vZHVsZSBuZWVkcyBpdFxuICAgIC8vIHNvIHRoYXQgd2UgZG8gbm90IGNvbXB1dGUgYW55dGhpbmcgaWYgbm90IG5lZWRlZFxuICAgIGZ1bmN0aW9uIGdldEFjdGlvbnMoKSB7XG4gICAgICAgIC8vIERldGVybWluZSB0aGUgZXZlbnRzIHRvIGJpbmQuIElFMTEgaW1wbGVtZW50cyBwb2ludGVyRXZlbnRzIHdpdGhvdXRcbiAgICAgICAgLy8gYSBwcmVmaXgsIHdoaWNoIGJyZWFrcyBjb21wYXRpYmlsaXR5IHdpdGggdGhlIElFMTAgaW1wbGVtZW50YXRpb24uXG4gICAgICAgIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnBvaW50ZXJFbmFibGVkXG4gICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICBzdGFydDogXCJwb2ludGVyZG93blwiLFxuICAgICAgICAgICAgICAgIG1vdmU6IFwicG9pbnRlcm1vdmVcIixcbiAgICAgICAgICAgICAgICBlbmQ6IFwicG9pbnRlcnVwXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDogd2luZG93Lm5hdmlnYXRvci5tc1BvaW50ZXJFbmFibGVkXG4gICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBcIk1TUG9pbnRlckRvd25cIixcbiAgICAgICAgICAgICAgICAgICAgbW92ZTogXCJNU1BvaW50ZXJNb3ZlXCIsXG4gICAgICAgICAgICAgICAgICAgIGVuZDogXCJNU1BvaW50ZXJVcFwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIDoge1xuICAgICAgICAgICAgICAgICAgICBzdGFydDogXCJtb3VzZWRvd24gdG91Y2hzdGFydFwiLFxuICAgICAgICAgICAgICAgICAgICBtb3ZlOiBcIm1vdXNlbW92ZSB0b3VjaG1vdmVcIixcbiAgICAgICAgICAgICAgICAgICAgZW5kOiBcIm1vdXNldXAgdG91Y2hlbmRcIlxuICAgICAgICAgICAgICAgIH07XG4gICAgfVxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9XSUNHL0V2ZW50TGlzdGVuZXJPcHRpb25zL2Jsb2IvZ2gtcGFnZXMvZXhwbGFpbmVyLm1kXG4gICAgLy8gSXNzdWUgIzc4NVxuICAgIGZ1bmN0aW9uIGdldFN1cHBvcnRzUGFzc2l2ZSgpIHtcbiAgICAgICAgdmFyIHN1cHBvcnRzUGFzc2l2ZSA9IGZhbHNlO1xuICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIG9wdHMgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sIFwicGFzc2l2ZVwiLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1cHBvcnRzUGFzc2l2ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRlc3RcIiwgbnVsbCwgb3B0cyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHsgfVxuICAgICAgICAvKiBlc2xpbnQtZW5hYmxlICovXG4gICAgICAgIHJldHVybiBzdXBwb3J0c1Bhc3NpdmU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldFN1cHBvcnRzVG91Y2hBY3Rpb25Ob25lKCkge1xuICAgICAgICByZXR1cm4gd2luZG93LkNTUyAmJiBDU1Muc3VwcG9ydHMgJiYgQ1NTLnN1cHBvcnRzKFwidG91Y2gtYWN0aW9uXCIsIFwibm9uZVwiKTtcbiAgICB9XG4gICAgLy9lbmRyZWdpb25cbiAgICAvL3JlZ2lvbiBSYW5nZSBDYWxjdWxhdGlvblxuICAgIC8vIERldGVybWluZSB0aGUgc2l6ZSBvZiBhIHN1Yi1yYW5nZSBpbiByZWxhdGlvbiB0byBhIGZ1bGwgcmFuZ2UuXG4gICAgZnVuY3Rpb24gc3ViUmFuZ2VSYXRpbyhwYSwgcGIpIHtcbiAgICAgICAgcmV0dXJuIDEwMCAvIChwYiAtIHBhKTtcbiAgICB9XG4gICAgLy8gKHBlcmNlbnRhZ2UpIEhvdyBtYW55IHBlcmNlbnQgaXMgdGhpcyB2YWx1ZSBvZiB0aGlzIHJhbmdlP1xuICAgIGZ1bmN0aW9uIGZyb21QZXJjZW50YWdlKHJhbmdlLCB2YWx1ZSwgc3RhcnRSYW5nZSkge1xuICAgICAgICByZXR1cm4gKHZhbHVlICogMTAwKSAvIChyYW5nZVtzdGFydFJhbmdlICsgMV0gLSByYW5nZVtzdGFydFJhbmdlXSk7XG4gICAgfVxuICAgIC8vIChwZXJjZW50YWdlKSBXaGVyZSBpcyB0aGlzIHZhbHVlIG9uIHRoaXMgcmFuZ2U/XG4gICAgZnVuY3Rpb24gdG9QZXJjZW50YWdlKHJhbmdlLCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZnJvbVBlcmNlbnRhZ2UocmFuZ2UsIHJhbmdlWzBdIDwgMCA/IHZhbHVlICsgTWF0aC5hYnMocmFuZ2VbMF0pIDogdmFsdWUgLSByYW5nZVswXSwgMCk7XG4gICAgfVxuICAgIC8vICh2YWx1ZSkgSG93IG11Y2ggaXMgdGhpcyBwZXJjZW50YWdlIG9uIHRoaXMgcmFuZ2U/XG4gICAgZnVuY3Rpb24gaXNQZXJjZW50YWdlKHJhbmdlLCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gKHZhbHVlICogKHJhbmdlWzFdIC0gcmFuZ2VbMF0pKSAvIDEwMCArIHJhbmdlWzBdO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRKKHZhbHVlLCBhcnIpIHtcbiAgICAgICAgdmFyIGogPSAxO1xuICAgICAgICB3aGlsZSAodmFsdWUgPj0gYXJyW2pdKSB7XG4gICAgICAgICAgICBqICs9IDE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGo7XG4gICAgfVxuICAgIC8vIChwZXJjZW50YWdlKSBJbnB1dCBhIHZhbHVlLCBmaW5kIHdoZXJlLCBvbiBhIHNjYWxlIG9mIDAtMTAwLCBpdCBhcHBsaWVzLlxuICAgIGZ1bmN0aW9uIHRvU3RlcHBpbmcoeFZhbCwgeFBjdCwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlID49IHhWYWwuc2xpY2UoLTEpWzBdKSB7XG4gICAgICAgICAgICByZXR1cm4gMTAwO1xuICAgICAgICB9XG4gICAgICAgIHZhciBqID0gZ2V0Sih2YWx1ZSwgeFZhbCk7XG4gICAgICAgIHZhciB2YSA9IHhWYWxbaiAtIDFdO1xuICAgICAgICB2YXIgdmIgPSB4VmFsW2pdO1xuICAgICAgICB2YXIgcGEgPSB4UGN0W2ogLSAxXTtcbiAgICAgICAgdmFyIHBiID0geFBjdFtqXTtcbiAgICAgICAgcmV0dXJuIHBhICsgdG9QZXJjZW50YWdlKFt2YSwgdmJdLCB2YWx1ZSkgLyBzdWJSYW5nZVJhdGlvKHBhLCBwYik7XG4gICAgfVxuICAgIC8vICh2YWx1ZSkgSW5wdXQgYSBwZXJjZW50YWdlLCBmaW5kIHdoZXJlIGl0IGlzIG9uIHRoZSBzcGVjaWZpZWQgcmFuZ2UuXG4gICAgZnVuY3Rpb24gZnJvbVN0ZXBwaW5nKHhWYWwsIHhQY3QsIHZhbHVlKSB7XG4gICAgICAgIC8vIFRoZXJlIGlzIG5vIHJhbmdlIGdyb3VwIHRoYXQgZml0cyAxMDBcbiAgICAgICAgaWYgKHZhbHVlID49IDEwMCkge1xuICAgICAgICAgICAgcmV0dXJuIHhWYWwuc2xpY2UoLTEpWzBdO1xuICAgICAgICB9XG4gICAgICAgIHZhciBqID0gZ2V0Sih2YWx1ZSwgeFBjdCk7XG4gICAgICAgIHZhciB2YSA9IHhWYWxbaiAtIDFdO1xuICAgICAgICB2YXIgdmIgPSB4VmFsW2pdO1xuICAgICAgICB2YXIgcGEgPSB4UGN0W2ogLSAxXTtcbiAgICAgICAgdmFyIHBiID0geFBjdFtqXTtcbiAgICAgICAgcmV0dXJuIGlzUGVyY2VudGFnZShbdmEsIHZiXSwgKHZhbHVlIC0gcGEpICogc3ViUmFuZ2VSYXRpbyhwYSwgcGIpKTtcbiAgICB9XG4gICAgLy8gKHBlcmNlbnRhZ2UpIEdldCB0aGUgc3RlcCB0aGF0IGFwcGxpZXMgYXQgYSBjZXJ0YWluIHZhbHVlLlxuICAgIGZ1bmN0aW9uIGdldFN0ZXAoeFBjdCwgeFN0ZXBzLCBzbmFwLCB2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgPT09IDEwMCkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBqID0gZ2V0Sih2YWx1ZSwgeFBjdCk7XG4gICAgICAgIHZhciBhID0geFBjdFtqIC0gMV07XG4gICAgICAgIHZhciBiID0geFBjdFtqXTtcbiAgICAgICAgLy8gSWYgJ3NuYXAnIGlzIHNldCwgc3RlcHMgYXJlIHVzZWQgYXMgZml4ZWQgcG9pbnRzIG9uIHRoZSBzbGlkZXIuXG4gICAgICAgIGlmIChzbmFwKSB7XG4gICAgICAgICAgICAvLyBGaW5kIHRoZSBjbG9zZXN0IHBvc2l0aW9uLCBhIG9yIGIuXG4gICAgICAgICAgICBpZiAodmFsdWUgLSBhID4gKGIgLSBhKSAvIDIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICB9XG4gICAgICAgIGlmICgheFN0ZXBzW2ogLSAxXSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB4UGN0W2ogLSAxXSArIGNsb3Nlc3QodmFsdWUgLSB4UGN0W2ogLSAxXSwgeFN0ZXBzW2ogLSAxXSk7XG4gICAgfVxuICAgIC8vZW5kcmVnaW9uXG4gICAgLy9yZWdpb24gU3BlY3RydW1cbiAgICB2YXIgU3BlY3RydW0gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIFNwZWN0cnVtKGVudHJ5LCBzbmFwLCBzaW5nbGVTdGVwKSB7XG4gICAgICAgICAgICB0aGlzLnhQY3QgPSBbXTtcbiAgICAgICAgICAgIHRoaXMueFZhbCA9IFtdO1xuICAgICAgICAgICAgdGhpcy54U3RlcHMgPSBbXTtcbiAgICAgICAgICAgIHRoaXMueE51bVN0ZXBzID0gW107XG4gICAgICAgICAgICB0aGlzLnhIaWdoZXN0Q29tcGxldGVTdGVwID0gW107XG4gICAgICAgICAgICB0aGlzLnhTdGVwcyA9IFtzaW5nbGVTdGVwIHx8IGZhbHNlXTtcbiAgICAgICAgICAgIHRoaXMueE51bVN0ZXBzID0gW2ZhbHNlXTtcbiAgICAgICAgICAgIHRoaXMuc25hcCA9IHNuYXA7XG4gICAgICAgICAgICB2YXIgaW5kZXg7XG4gICAgICAgICAgICB2YXIgb3JkZXJlZCA9IFtdO1xuICAgICAgICAgICAgLy8gTWFwIHRoZSBvYmplY3Qga2V5cyB0byBhbiBhcnJheS5cbiAgICAgICAgICAgIE9iamVjdC5rZXlzKGVudHJ5KS5mb3JFYWNoKGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICAgICAgICAgIG9yZGVyZWQucHVzaChbYXNBcnJheShlbnRyeVtpbmRleF0pLCBpbmRleF0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBTb3J0IGFsbCBlbnRyaWVzIGJ5IHZhbHVlIChudW1lcmljIHNvcnQpLlxuICAgICAgICAgICAgb3JkZXJlZC5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFbMF1bMF0gLSBiWzBdWzBdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBDb252ZXJ0IGFsbCBlbnRyaWVzIHRvIHN1YnJhbmdlcy5cbiAgICAgICAgICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IG9yZGVyZWQubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVFbnRyeVBvaW50KG9yZGVyZWRbaW5kZXhdWzFdLCBvcmRlcmVkW2luZGV4XVswXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBTdG9yZSB0aGUgYWN0dWFsIHN0ZXAgdmFsdWVzLlxuICAgICAgICAgICAgLy8geFN0ZXBzIGlzIHNvcnRlZCBpbiB0aGUgc2FtZSBvcmRlciBhcyB4UGN0IGFuZCB4VmFsLlxuICAgICAgICAgICAgdGhpcy54TnVtU3RlcHMgPSB0aGlzLnhTdGVwcy5zbGljZSgwKTtcbiAgICAgICAgICAgIC8vIENvbnZlcnQgYWxsIG51bWVyaWMgc3RlcHMgdG8gdGhlIHBlcmNlbnRhZ2Ugb2YgdGhlIHN1YnJhbmdlIHRoZXkgcmVwcmVzZW50LlxuICAgICAgICAgICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgdGhpcy54TnVtU3RlcHMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVTdGVwUG9pbnQoaW5kZXgsIHRoaXMueE51bVN0ZXBzW2luZGV4XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgU3BlY3RydW0ucHJvdG90eXBlLmdldERpc3RhbmNlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgaW5kZXg7XG4gICAgICAgICAgICB2YXIgZGlzdGFuY2VzID0gW107XG4gICAgICAgICAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLnhOdW1TdGVwcy5sZW5ndGggLSAxOyBpbmRleCsrKSB7XG4gICAgICAgICAgICAgICAgLy8gbGFzdCBcInJhbmdlXCIgY2FuJ3QgY29udGFpbiBzdGVwIHNpemUgYXMgaXQgaXMgcHVyZWx5IGFuIGVuZHBvaW50LlxuICAgICAgICAgICAgICAgIHZhciBzdGVwID0gdGhpcy54TnVtU3RlcHNbaW5kZXhdO1xuICAgICAgICAgICAgICAgIGlmIChzdGVwICYmICh2YWx1ZSAvIHN0ZXApICUgMSAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyOiAnbGltaXQnLCAnbWFyZ2luJyBhbmQgJ3BhZGRpbmcnIG9mIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueFBjdFtpbmRleF0gK1xuICAgICAgICAgICAgICAgICAgICAgICAgXCIlIHJhbmdlIG11c3QgYmUgZGl2aXNpYmxlIGJ5IHN0ZXAuXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBDYWxjdWxhdGUgcGVyY2VudHVhbCBkaXN0YW5jZSBpbiBjdXJyZW50IHJhbmdlIG9mIGxpbWl0LCBtYXJnaW4gb3IgcGFkZGluZ1xuICAgICAgICAgICAgICAgIGRpc3RhbmNlc1tpbmRleF0gPSBmcm9tUGVyY2VudGFnZSh0aGlzLnhWYWwsIHZhbHVlLCBpbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZGlzdGFuY2VzO1xuICAgICAgICB9O1xuICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIHBlcmNlbnR1YWwgZGlzdGFuY2Ugb3ZlciB0aGUgd2hvbGUgc2NhbGUgb2YgcmFuZ2VzLlxuICAgICAgICAvLyBkaXJlY3Rpb246IDAgPSBiYWNrd2FyZHMgLyAxID0gZm9yd2FyZHNcbiAgICAgICAgU3BlY3RydW0ucHJvdG90eXBlLmdldEFic29sdXRlRGlzdGFuY2UgPSBmdW5jdGlvbiAodmFsdWUsIGRpc3RhbmNlcywgZGlyZWN0aW9uKSB7XG4gICAgICAgICAgICB2YXIgeFBjdF9pbmRleCA9IDA7XG4gICAgICAgICAgICAvLyBDYWxjdWxhdGUgcmFuZ2Ugd2hlcmUgdG8gc3RhcnQgY2FsY3VsYXRpb25cbiAgICAgICAgICAgIGlmICh2YWx1ZSA8IHRoaXMueFBjdFt0aGlzLnhQY3QubGVuZ3RoIC0gMV0pIHtcbiAgICAgICAgICAgICAgICB3aGlsZSAodmFsdWUgPiB0aGlzLnhQY3RbeFBjdF9pbmRleCArIDFdKSB7XG4gICAgICAgICAgICAgICAgICAgIHhQY3RfaW5kZXgrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh2YWx1ZSA9PT0gdGhpcy54UGN0W3RoaXMueFBjdC5sZW5ndGggLSAxXSkge1xuICAgICAgICAgICAgICAgIHhQY3RfaW5kZXggPSB0aGlzLnhQY3QubGVuZ3RoIC0gMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIElmIGxvb2tpbmcgYmFja3dhcmRzIGFuZCB0aGUgdmFsdWUgaXMgZXhhY3RseSBhdCBhIHJhbmdlIHNlcGFyYXRvciB0aGVuIGxvb2sgb25lIHJhbmdlIGZ1cnRoZXJcbiAgICAgICAgICAgIGlmICghZGlyZWN0aW9uICYmIHZhbHVlID09PSB0aGlzLnhQY3RbeFBjdF9pbmRleCArIDFdKSB7XG4gICAgICAgICAgICAgICAgeFBjdF9pbmRleCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRpc3RhbmNlcyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGRpc3RhbmNlcyA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHN0YXJ0X2ZhY3RvcjtcbiAgICAgICAgICAgIHZhciByZXN0X2ZhY3RvciA9IDE7XG4gICAgICAgICAgICB2YXIgcmVzdF9yZWxfZGlzdGFuY2UgPSBkaXN0YW5jZXNbeFBjdF9pbmRleF07XG4gICAgICAgICAgICB2YXIgcmFuZ2VfcGN0ID0gMDtcbiAgICAgICAgICAgIHZhciByZWxfcmFuZ2VfZGlzdGFuY2UgPSAwO1xuICAgICAgICAgICAgdmFyIGFic19kaXN0YW5jZV9jb3VudGVyID0gMDtcbiAgICAgICAgICAgIHZhciByYW5nZV9jb3VudGVyID0gMDtcbiAgICAgICAgICAgIC8vIENhbGN1bGF0ZSB3aGF0IHBhcnQgb2YgdGhlIHN0YXJ0IHJhbmdlIHRoZSB2YWx1ZSBpc1xuICAgICAgICAgICAgaWYgKGRpcmVjdGlvbikge1xuICAgICAgICAgICAgICAgIHN0YXJ0X2ZhY3RvciA9ICh2YWx1ZSAtIHRoaXMueFBjdFt4UGN0X2luZGV4XSkgLyAodGhpcy54UGN0W3hQY3RfaW5kZXggKyAxXSAtIHRoaXMueFBjdFt4UGN0X2luZGV4XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdGFydF9mYWN0b3IgPSAodGhpcy54UGN0W3hQY3RfaW5kZXggKyAxXSAtIHZhbHVlKSAvICh0aGlzLnhQY3RbeFBjdF9pbmRleCArIDFdIC0gdGhpcy54UGN0W3hQY3RfaW5kZXhdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIERvIHVudGlsIHRoZSBjb21wbGV0ZSBkaXN0YW5jZSBhY3Jvc3MgcmFuZ2VzIGlzIGNhbGN1bGF0ZWRcbiAgICAgICAgICAgIHdoaWxlIChyZXN0X3JlbF9kaXN0YW5jZSA+IDApIHtcbiAgICAgICAgICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIHBlcmNlbnRhZ2Ugb2YgdG90YWwgcmFuZ2VcbiAgICAgICAgICAgICAgICByYW5nZV9wY3QgPSB0aGlzLnhQY3RbeFBjdF9pbmRleCArIDEgKyByYW5nZV9jb3VudGVyXSAtIHRoaXMueFBjdFt4UGN0X2luZGV4ICsgcmFuZ2VfY291bnRlcl07XG4gICAgICAgICAgICAgICAgLy8gRGV0ZWN0IGlmIHRoZSBtYXJnaW4sIHBhZGRpbmcgb3IgbGltaXQgaXMgbGFyZ2VyIHRoZW4gdGhlIGN1cnJlbnQgcmFuZ2UgYW5kIGNhbGN1bGF0ZVxuICAgICAgICAgICAgICAgIGlmIChkaXN0YW5jZXNbeFBjdF9pbmRleCArIHJhbmdlX2NvdW50ZXJdICogcmVzdF9mYWN0b3IgKyAxMDAgLSBzdGFydF9mYWN0b3IgKiAxMDAgPiAxMDApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgbGFyZ2VyIHRoZW4gdGFrZSB0aGUgcGVyY2VudHVhbCBkaXN0YW5jZSBvZiB0aGUgd2hvbGUgcmFuZ2VcbiAgICAgICAgICAgICAgICAgICAgcmVsX3JhbmdlX2Rpc3RhbmNlID0gcmFuZ2VfcGN0ICogc3RhcnRfZmFjdG9yO1xuICAgICAgICAgICAgICAgICAgICAvLyBSZXN0IGZhY3RvciBvZiByZWxhdGl2ZSBwZXJjZW50dWFsIGRpc3RhbmNlIHN0aWxsIHRvIGJlIGNhbGN1bGF0ZWRcbiAgICAgICAgICAgICAgICAgICAgcmVzdF9mYWN0b3IgPSAocmVzdF9yZWxfZGlzdGFuY2UgLSAxMDAgKiBzdGFydF9mYWN0b3IpIC8gZGlzdGFuY2VzW3hQY3RfaW5kZXggKyByYW5nZV9jb3VudGVyXTtcbiAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHN0YXJ0IGZhY3RvciB0byAxIGFzIGZvciBuZXh0IHJhbmdlIGl0IGRvZXMgbm90IGFwcGx5LlxuICAgICAgICAgICAgICAgICAgICBzdGFydF9mYWN0b3IgPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgc21hbGxlciBvciBlcXVhbCB0aGVuIHRha2UgdGhlIHBlcmNlbnR1YWwgZGlzdGFuY2Ugb2YgdGhlIGNhbGN1bGF0ZSBwZXJjZW50dWFsIHBhcnQgb2YgdGhhdCByYW5nZVxuICAgICAgICAgICAgICAgICAgICByZWxfcmFuZ2VfZGlzdGFuY2UgPSAoKGRpc3RhbmNlc1t4UGN0X2luZGV4ICsgcmFuZ2VfY291bnRlcl0gKiByYW5nZV9wY3QpIC8gMTAwKSAqIHJlc3RfZmFjdG9yO1xuICAgICAgICAgICAgICAgICAgICAvLyBObyByZXN0IGxlZnQgYXMgdGhlIHJlc3QgZml0cyBpbiBjdXJyZW50IHJhbmdlXG4gICAgICAgICAgICAgICAgICAgIHJlc3RfZmFjdG9yID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGRpcmVjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBhYnNfZGlzdGFuY2VfY291bnRlciA9IGFic19kaXN0YW5jZV9jb3VudGVyIC0gcmVsX3JhbmdlX2Rpc3RhbmNlO1xuICAgICAgICAgICAgICAgICAgICAvLyBMaW1pdCByYW5nZSB0byBmaXJzdCByYW5nZSB3aGVuIGRpc3RhbmNlIGJlY29tZXMgb3V0c2lkZSBvZiBtaW5pbXVtIHJhbmdlXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnhQY3QubGVuZ3RoICsgcmFuZ2VfY291bnRlciA+PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByYW5nZV9jb3VudGVyLS07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGFic19kaXN0YW5jZV9jb3VudGVyID0gYWJzX2Rpc3RhbmNlX2NvdW50ZXIgKyByZWxfcmFuZ2VfZGlzdGFuY2U7XG4gICAgICAgICAgICAgICAgICAgIC8vIExpbWl0IHJhbmdlIHRvIGxhc3QgcmFuZ2Ugd2hlbiBkaXN0YW5jZSBiZWNvbWVzIG91dHNpZGUgb2YgbWF4aW11bSByYW5nZVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy54UGN0Lmxlbmd0aCAtIHJhbmdlX2NvdW50ZXIgPj0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2VfY291bnRlcisrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFJlc3Qgb2YgcmVsYXRpdmUgcGVyY2VudHVhbCBkaXN0YW5jZSBzdGlsbCB0byBiZSBjYWxjdWxhdGVkXG4gICAgICAgICAgICAgICAgcmVzdF9yZWxfZGlzdGFuY2UgPSBkaXN0YW5jZXNbeFBjdF9pbmRleCArIHJhbmdlX2NvdW50ZXJdICogcmVzdF9mYWN0b3I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUgKyBhYnNfZGlzdGFuY2VfY291bnRlcjtcbiAgICAgICAgfTtcbiAgICAgICAgU3BlY3RydW0ucHJvdG90eXBlLnRvU3RlcHBpbmcgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHZhbHVlID0gdG9TdGVwcGluZyh0aGlzLnhWYWwsIHRoaXMueFBjdCwgdmFsdWUpO1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9O1xuICAgICAgICBTcGVjdHJ1bS5wcm90b3R5cGUuZnJvbVN0ZXBwaW5nID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJvbVN0ZXBwaW5nKHRoaXMueFZhbCwgdGhpcy54UGN0LCB2YWx1ZSk7XG4gICAgICAgIH07XG4gICAgICAgIFNwZWN0cnVtLnByb3RvdHlwZS5nZXRTdGVwID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGdldFN0ZXAodGhpcy54UGN0LCB0aGlzLnhTdGVwcywgdGhpcy5zbmFwLCB2YWx1ZSk7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH07XG4gICAgICAgIFNwZWN0cnVtLnByb3RvdHlwZS5nZXREZWZhdWx0U3RlcCA9IGZ1bmN0aW9uICh2YWx1ZSwgaXNEb3duLCBzaXplKSB7XG4gICAgICAgICAgICB2YXIgaiA9IGdldEoodmFsdWUsIHRoaXMueFBjdCk7XG4gICAgICAgICAgICAvLyBXaGVuIGF0IHRoZSB0b3Agb3Igc3RlcHBpbmcgZG93biwgbG9vayBhdCB0aGUgcHJldmlvdXMgc3ViLXJhbmdlXG4gICAgICAgICAgICBpZiAodmFsdWUgPT09IDEwMCB8fCAoaXNEb3duICYmIHZhbHVlID09PSB0aGlzLnhQY3RbaiAtIDFdKSkge1xuICAgICAgICAgICAgICAgIGogPSBNYXRoLm1heChqIC0gMSwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gKHRoaXMueFZhbFtqXSAtIHRoaXMueFZhbFtqIC0gMV0pIC8gc2l6ZTtcbiAgICAgICAgfTtcbiAgICAgICAgU3BlY3RydW0ucHJvdG90eXBlLmdldE5lYXJieVN0ZXBzID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgaiA9IGdldEoodmFsdWUsIHRoaXMueFBjdCk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHN0ZXBCZWZvcmU6IHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRWYWx1ZTogdGhpcy54VmFsW2ogLSAyXSxcbiAgICAgICAgICAgICAgICAgICAgc3RlcDogdGhpcy54TnVtU3RlcHNbaiAtIDJdLFxuICAgICAgICAgICAgICAgICAgICBoaWdoZXN0U3RlcDogdGhpcy54SGlnaGVzdENvbXBsZXRlU3RlcFtqIC0gMl1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHRoaXNTdGVwOiB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0VmFsdWU6IHRoaXMueFZhbFtqIC0gMV0sXG4gICAgICAgICAgICAgICAgICAgIHN0ZXA6IHRoaXMueE51bVN0ZXBzW2ogLSAxXSxcbiAgICAgICAgICAgICAgICAgICAgaGlnaGVzdFN0ZXA6IHRoaXMueEhpZ2hlc3RDb21wbGV0ZVN0ZXBbaiAtIDFdXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzdGVwQWZ0ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRWYWx1ZTogdGhpcy54VmFsW2pdLFxuICAgICAgICAgICAgICAgICAgICBzdGVwOiB0aGlzLnhOdW1TdGVwc1tqXSxcbiAgICAgICAgICAgICAgICAgICAgaGlnaGVzdFN0ZXA6IHRoaXMueEhpZ2hlc3RDb21wbGV0ZVN0ZXBbal1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICBTcGVjdHJ1bS5wcm90b3R5cGUuY291bnRTdGVwRGVjaW1hbHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc3RlcERlY2ltYWxzID0gdGhpcy54TnVtU3RlcHMubWFwKGNvdW50RGVjaW1hbHMpO1xuICAgICAgICAgICAgcmV0dXJuIE1hdGgubWF4LmFwcGx5KG51bGwsIHN0ZXBEZWNpbWFscyk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIE91dHNpZGUgdGVzdGluZ1xuICAgICAgICBTcGVjdHJ1bS5wcm90b3R5cGUuY29udmVydCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U3RlcCh0aGlzLnRvU3RlcHBpbmcodmFsdWUpKTtcbiAgICAgICAgfTtcbiAgICAgICAgU3BlY3RydW0ucHJvdG90eXBlLmhhbmRsZUVudHJ5UG9pbnQgPSBmdW5jdGlvbiAoaW5kZXgsIHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgcGVyY2VudGFnZTtcbiAgICAgICAgICAgIC8vIENvdmVydCBtaW4vbWF4IHN5bnRheCB0byAwIGFuZCAxMDAuXG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IFwibWluXCIpIHtcbiAgICAgICAgICAgICAgICBwZXJjZW50YWdlID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGluZGV4ID09PSBcIm1heFwiKSB7XG4gICAgICAgICAgICAgICAgcGVyY2VudGFnZSA9IDEwMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlcmNlbnRhZ2UgPSBwYXJzZUZsb2F0KGluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIENoZWNrIGZvciBjb3JyZWN0IGlucHV0LlxuICAgICAgICAgICAgaWYgKCFpc051bWVyaWMocGVyY2VudGFnZSkgfHwgIWlzTnVtZXJpYyh2YWx1ZVswXSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyOiAncmFuZ2UnIHZhbHVlIGlzbid0IG51bWVyaWMuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gU3RvcmUgdmFsdWVzLlxuICAgICAgICAgICAgdGhpcy54UGN0LnB1c2gocGVyY2VudGFnZSk7XG4gICAgICAgICAgICB0aGlzLnhWYWwucHVzaCh2YWx1ZVswXSk7XG4gICAgICAgICAgICB2YXIgdmFsdWUxID0gTnVtYmVyKHZhbHVlWzFdKTtcbiAgICAgICAgICAgIC8vIE5hTiB3aWxsIGV2YWx1YXRlIHRvIGZhbHNlIHRvbywgYnV0IHRvIGtlZXBcbiAgICAgICAgICAgIC8vIGxvZ2dpbmcgY2xlYXIsIHNldCBzdGVwIGV4cGxpY2l0bHkuIE1ha2Ugc3VyZVxuICAgICAgICAgICAgLy8gbm90IHRvIG92ZXJyaWRlIHRoZSAnc3RlcCcgc2V0dGluZyB3aXRoIGZhbHNlLlxuICAgICAgICAgICAgaWYgKCFwZXJjZW50YWdlKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpc05hTih2YWx1ZTEpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMueFN0ZXBzWzBdID0gdmFsdWUxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMueFN0ZXBzLnB1c2goaXNOYU4odmFsdWUxKSA/IGZhbHNlIDogdmFsdWUxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMueEhpZ2hlc3RDb21wbGV0ZVN0ZXAucHVzaCgwKTtcbiAgICAgICAgfTtcbiAgICAgICAgU3BlY3RydW0ucHJvdG90eXBlLmhhbmRsZVN0ZXBQb2ludCA9IGZ1bmN0aW9uIChpLCBuKSB7XG4gICAgICAgICAgICAvLyBJZ25vcmUgJ2ZhbHNlJyBzdGVwcGluZy5cbiAgICAgICAgICAgIGlmICghbikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFN0ZXAgb3ZlciB6ZXJvLWxlbmd0aCByYW5nZXMgKCM5NDgpO1xuICAgICAgICAgICAgaWYgKHRoaXMueFZhbFtpXSA9PT0gdGhpcy54VmFsW2kgKyAxXSkge1xuICAgICAgICAgICAgICAgIHRoaXMueFN0ZXBzW2ldID0gdGhpcy54SGlnaGVzdENvbXBsZXRlU3RlcFtpXSA9IHRoaXMueFZhbFtpXTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBGYWN0b3IgdG8gcmFuZ2UgcmF0aW9cbiAgICAgICAgICAgIHRoaXMueFN0ZXBzW2ldID1cbiAgICAgICAgICAgICAgICBmcm9tUGVyY2VudGFnZShbdGhpcy54VmFsW2ldLCB0aGlzLnhWYWxbaSArIDFdXSwgbiwgMCkgLyBzdWJSYW5nZVJhdGlvKHRoaXMueFBjdFtpXSwgdGhpcy54UGN0W2kgKyAxXSk7XG4gICAgICAgICAgICB2YXIgdG90YWxTdGVwcyA9ICh0aGlzLnhWYWxbaSArIDFdIC0gdGhpcy54VmFsW2ldKSAvIHRoaXMueE51bVN0ZXBzW2ldO1xuICAgICAgICAgICAgdmFyIGhpZ2hlc3RTdGVwID0gTWF0aC5jZWlsKE51bWJlcih0b3RhbFN0ZXBzLnRvRml4ZWQoMykpIC0gMSk7XG4gICAgICAgICAgICB2YXIgc3RlcCA9IHRoaXMueFZhbFtpXSArIHRoaXMueE51bVN0ZXBzW2ldICogaGlnaGVzdFN0ZXA7XG4gICAgICAgICAgICB0aGlzLnhIaWdoZXN0Q29tcGxldGVTdGVwW2ldID0gc3RlcDtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIFNwZWN0cnVtO1xuICAgIH0oKSk7XG4gICAgLy9lbmRyZWdpb25cbiAgICAvL3JlZ2lvbiBPcHRpb25zXG4gICAgLypcdEV2ZXJ5IGlucHV0IG9wdGlvbiBpcyB0ZXN0ZWQgYW5kIHBhcnNlZC4gVGhpcyB3aWxsIHByZXZlbnRcbiAgICAgICAgZW5kbGVzcyB2YWxpZGF0aW9uIGluIGludGVybmFsIG1ldGhvZHMuIFRoZXNlIHRlc3RzIGFyZVxuICAgICAgICBzdHJ1Y3R1cmVkIHdpdGggYW4gaXRlbSBmb3IgZXZlcnkgb3B0aW9uIGF2YWlsYWJsZS4gQW5cbiAgICAgICAgb3B0aW9uIGNhbiBiZSBtYXJrZWQgYXMgcmVxdWlyZWQgYnkgc2V0dGluZyB0aGUgJ3InIGZsYWcuXG4gICAgICAgIFRoZSB0ZXN0aW5nIGZ1bmN0aW9uIGlzIHByb3ZpZGVkIHdpdGggdGhyZWUgYXJndW1lbnRzOlxuICAgICAgICAgICAgLSBUaGUgcHJvdmlkZWQgdmFsdWUgZm9yIHRoZSBvcHRpb247XG4gICAgICAgICAgICAtIEEgcmVmZXJlbmNlIHRvIHRoZSBvcHRpb25zIG9iamVjdDtcbiAgICAgICAgICAgIC0gVGhlIG5hbWUgZm9yIHRoZSBvcHRpb247XG5cbiAgICAgICAgVGhlIHRlc3RpbmcgZnVuY3Rpb24gcmV0dXJucyBmYWxzZSB3aGVuIGFuIGVycm9yIGlzIGRldGVjdGVkLFxuICAgICAgICBvciB0cnVlIHdoZW4gZXZlcnl0aGluZyBpcyBPSy4gSXQgY2FuIGFsc28gbW9kaWZ5IHRoZSBvcHRpb25cbiAgICAgICAgb2JqZWN0LCB0byBtYWtlIHN1cmUgYWxsIHZhbHVlcyBjYW4gYmUgY29ycmVjdGx5IGxvb3BlZCBlbHNld2hlcmUuICovXG4gICAgLy9yZWdpb24gRGVmYXVsdHNcbiAgICB2YXIgZGVmYXVsdEZvcm1hdHRlciA9IHtcbiAgICAgICAgdG86IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyBcIlwiIDogdmFsdWUudG9GaXhlZCgyKTtcbiAgICAgICAgfSxcbiAgICAgICAgZnJvbTogTnVtYmVyXG4gICAgfTtcbiAgICB2YXIgY3NzQ2xhc3NlcyA9IHtcbiAgICAgICAgdGFyZ2V0OiBcInRhcmdldFwiLFxuICAgICAgICBiYXNlOiBcImJhc2VcIixcbiAgICAgICAgb3JpZ2luOiBcIm9yaWdpblwiLFxuICAgICAgICBoYW5kbGU6IFwiaGFuZGxlXCIsXG4gICAgICAgIGhhbmRsZUxvd2VyOiBcImhhbmRsZS1sb3dlclwiLFxuICAgICAgICBoYW5kbGVVcHBlcjogXCJoYW5kbGUtdXBwZXJcIixcbiAgICAgICAgdG91Y2hBcmVhOiBcInRvdWNoLWFyZWFcIixcbiAgICAgICAgaG9yaXpvbnRhbDogXCJob3Jpem9udGFsXCIsXG4gICAgICAgIHZlcnRpY2FsOiBcInZlcnRpY2FsXCIsXG4gICAgICAgIGJhY2tncm91bmQ6IFwiYmFja2dyb3VuZFwiLFxuICAgICAgICBjb25uZWN0OiBcImNvbm5lY3RcIixcbiAgICAgICAgY29ubmVjdHM6IFwiY29ubmVjdHNcIixcbiAgICAgICAgbHRyOiBcImx0clwiLFxuICAgICAgICBydGw6IFwicnRsXCIsXG4gICAgICAgIHRleHREaXJlY3Rpb25MdHI6IFwidHh0LWRpci1sdHJcIixcbiAgICAgICAgdGV4dERpcmVjdGlvblJ0bDogXCJ0eHQtZGlyLXJ0bFwiLFxuICAgICAgICBkcmFnZ2FibGU6IFwiZHJhZ2dhYmxlXCIsXG4gICAgICAgIGRyYWc6IFwic3RhdGUtZHJhZ1wiLFxuICAgICAgICB0YXA6IFwic3RhdGUtdGFwXCIsXG4gICAgICAgIGFjdGl2ZTogXCJhY3RpdmVcIixcbiAgICAgICAgdG9vbHRpcDogXCJ0b29sdGlwXCIsXG4gICAgICAgIHBpcHM6IFwicGlwc1wiLFxuICAgICAgICBwaXBzSG9yaXpvbnRhbDogXCJwaXBzLWhvcml6b250YWxcIixcbiAgICAgICAgcGlwc1ZlcnRpY2FsOiBcInBpcHMtdmVydGljYWxcIixcbiAgICAgICAgbWFya2VyOiBcIm1hcmtlclwiLFxuICAgICAgICBtYXJrZXJIb3Jpem9udGFsOiBcIm1hcmtlci1ob3Jpem9udGFsXCIsXG4gICAgICAgIG1hcmtlclZlcnRpY2FsOiBcIm1hcmtlci12ZXJ0aWNhbFwiLFxuICAgICAgICBtYXJrZXJOb3JtYWw6IFwibWFya2VyLW5vcm1hbFwiLFxuICAgICAgICBtYXJrZXJMYXJnZTogXCJtYXJrZXItbGFyZ2VcIixcbiAgICAgICAgbWFya2VyU3ViOiBcIm1hcmtlci1zdWJcIixcbiAgICAgICAgdmFsdWU6IFwidmFsdWVcIixcbiAgICAgICAgdmFsdWVIb3Jpem9udGFsOiBcInZhbHVlLWhvcml6b250YWxcIixcbiAgICAgICAgdmFsdWVWZXJ0aWNhbDogXCJ2YWx1ZS12ZXJ0aWNhbFwiLFxuICAgICAgICB2YWx1ZU5vcm1hbDogXCJ2YWx1ZS1ub3JtYWxcIixcbiAgICAgICAgdmFsdWVMYXJnZTogXCJ2YWx1ZS1sYXJnZVwiLFxuICAgICAgICB2YWx1ZVN1YjogXCJ2YWx1ZS1zdWJcIlxuICAgIH07XG4gICAgLy8gTmFtZXNwYWNlcyBvZiBpbnRlcm5hbCBldmVudCBsaXN0ZW5lcnNcbiAgICB2YXIgSU5URVJOQUxfRVZFTlRfTlMgPSB7XG4gICAgICAgIHRvb2x0aXBzOiBcIi5fX3Rvb2x0aXBzXCIsXG4gICAgICAgIGFyaWE6IFwiLl9fYXJpYVwiXG4gICAgfTtcbiAgICAvL2VuZHJlZ2lvblxuICAgIGZ1bmN0aW9uIHZhbGlkYXRlRm9ybWF0KGVudHJ5KSB7XG4gICAgICAgIC8vIEFueSBvYmplY3Qgd2l0aCBhIHRvIGFuZCBmcm9tIG1ldGhvZCBpcyBzdXBwb3J0ZWQuXG4gICAgICAgIGlmIChpc1ZhbGlkRm9ybWF0dGVyKGVudHJ5KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlcjogJ2Zvcm1hdCcgcmVxdWlyZXMgJ3RvJyBhbmQgJ2Zyb20nIG1ldGhvZHMuXCIpO1xuICAgIH1cbiAgICBmdW5jdGlvbiB0ZXN0U3RlcChwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIGlmICghaXNOdW1lcmljKGVudHJ5KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlcjogJ3N0ZXAnIGlzIG5vdCBudW1lcmljLlwiKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBUaGUgc3RlcCBvcHRpb24gY2FuIHN0aWxsIGJlIHVzZWQgdG8gc2V0IHN0ZXBwaW5nXG4gICAgICAgIC8vIGZvciBsaW5lYXIgc2xpZGVycy4gT3ZlcndyaXR0ZW4gaWYgc2V0IGluICdyYW5nZScuXG4gICAgICAgIHBhcnNlZC5zaW5nbGVTdGVwID0gZW50cnk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRlc3RLZXlib2FyZFBhZ2VNdWx0aXBsaWVyKHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgaWYgKCFpc051bWVyaWMoZW50cnkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyOiAna2V5Ym9hcmRQYWdlTXVsdGlwbGllcicgaXMgbm90IG51bWVyaWMuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnNlZC5rZXlib2FyZFBhZ2VNdWx0aXBsaWVyID0gZW50cnk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRlc3RLZXlib2FyZERlZmF1bHRTdGVwKHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgaWYgKCFpc051bWVyaWMoZW50cnkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyOiAna2V5Ym9hcmREZWZhdWx0U3RlcCcgaXMgbm90IG51bWVyaWMuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnNlZC5rZXlib2FyZERlZmF1bHRTdGVwID0gZW50cnk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRlc3RSYW5nZShwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIC8vIEZpbHRlciBpbmNvcnJlY3QgaW5wdXQuXG4gICAgICAgIGlmICh0eXBlb2YgZW50cnkgIT09IFwib2JqZWN0XCIgfHwgQXJyYXkuaXNBcnJheShlbnRyeSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXI6ICdyYW5nZScgaXMgbm90IGFuIG9iamVjdC5cIik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ2F0Y2ggbWlzc2luZyBzdGFydCBvciBlbmQuXG4gICAgICAgIGlmIChlbnRyeS5taW4gPT09IHVuZGVmaW5lZCB8fCBlbnRyeS5tYXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlcjogTWlzc2luZyAnbWluJyBvciAnbWF4JyBpbiAncmFuZ2UnLlwiKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBDYXRjaCBlcXVhbCBzdGFydCBvciBlbmQuXG4gICAgICAgIGlmIChlbnRyeS5taW4gPT09IGVudHJ5Lm1heCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlcjogJ3JhbmdlJyAnbWluJyBhbmQgJ21heCcgY2Fubm90IGJlIGVxdWFsLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBwYXJzZWQuc3BlY3RydW0gPSBuZXcgU3BlY3RydW0oZW50cnksIHBhcnNlZC5zbmFwIHx8IGZhbHNlLCBwYXJzZWQuc2luZ2xlU3RlcCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRlc3RTdGFydChwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIGVudHJ5ID0gYXNBcnJheShlbnRyeSk7XG4gICAgICAgIC8vIFZhbGlkYXRlIGlucHV0LiBWYWx1ZXMgYXJlbid0IHRlc3RlZCwgYXMgdGhlIHB1YmxpYyAudmFsIG1ldGhvZFxuICAgICAgICAvLyB3aWxsIGFsd2F5cyBwcm92aWRlIGEgdmFsaWQgbG9jYXRpb24uXG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShlbnRyeSkgfHwgIWVudHJ5Lmxlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlcjogJ3N0YXJ0JyBvcHRpb24gaXMgaW5jb3JyZWN0LlwiKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTdG9yZSB0aGUgbnVtYmVyIG9mIGhhbmRsZXMuXG4gICAgICAgIHBhcnNlZC5oYW5kbGVzID0gZW50cnkubGVuZ3RoO1xuICAgICAgICAvLyBXaGVuIHRoZSBzbGlkZXIgaXMgaW5pdGlhbGl6ZWQsIHRoZSAudmFsIG1ldGhvZCB3aWxsXG4gICAgICAgIC8vIGJlIGNhbGxlZCB3aXRoIHRoZSBzdGFydCBvcHRpb25zLlxuICAgICAgICBwYXJzZWQuc3RhcnQgPSBlbnRyeTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdGVzdFNuYXAocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICBpZiAodHlwZW9mIGVudHJ5ICE9PSBcImJvb2xlYW5cIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlcjogJ3NuYXAnIG9wdGlvbiBtdXN0IGJlIGEgYm9vbGVhbi5cIik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRW5mb3JjZSAxMDAlIHN0ZXBwaW5nIHdpdGhpbiBzdWJyYW5nZXMuXG4gICAgICAgIHBhcnNlZC5zbmFwID0gZW50cnk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRlc3RBbmltYXRlKHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBlbnRyeSAhPT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXI6ICdhbmltYXRlJyBvcHRpb24gbXVzdCBiZSBhIGJvb2xlYW4uXCIpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEVuZm9yY2UgMTAwJSBzdGVwcGluZyB3aXRoaW4gc3VicmFuZ2VzLlxuICAgICAgICBwYXJzZWQuYW5pbWF0ZSA9IGVudHJ5O1xuICAgIH1cbiAgICBmdW5jdGlvbiB0ZXN0QW5pbWF0aW9uRHVyYXRpb24ocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICBpZiAodHlwZW9mIGVudHJ5ICE9PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyOiAnYW5pbWF0aW9uRHVyYXRpb24nIG9wdGlvbiBtdXN0IGJlIGEgbnVtYmVyLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBwYXJzZWQuYW5pbWF0aW9uRHVyYXRpb24gPSBlbnRyeTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdGVzdENvbm5lY3QocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICB2YXIgY29ubmVjdCA9IFtmYWxzZV07XG4gICAgICAgIHZhciBpO1xuICAgICAgICAvLyBNYXAgbGVnYWN5IG9wdGlvbnNcbiAgICAgICAgaWYgKGVudHJ5ID09PSBcImxvd2VyXCIpIHtcbiAgICAgICAgICAgIGVudHJ5ID0gW3RydWUsIGZhbHNlXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChlbnRyeSA9PT0gXCJ1cHBlclwiKSB7XG4gICAgICAgICAgICBlbnRyeSA9IFtmYWxzZSwgdHJ1ZV07XG4gICAgICAgIH1cbiAgICAgICAgLy8gSGFuZGxlIGJvb2xlYW4gb3B0aW9uc1xuICAgICAgICBpZiAoZW50cnkgPT09IHRydWUgfHwgZW50cnkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBmb3IgKGkgPSAxOyBpIDwgcGFyc2VkLmhhbmRsZXM7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbm5lY3QucHVzaChlbnRyeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25uZWN0LnB1c2goZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlamVjdCBpbnZhbGlkIGlucHV0XG4gICAgICAgIGVsc2UgaWYgKCFBcnJheS5pc0FycmF5KGVudHJ5KSB8fCAhZW50cnkubGVuZ3RoIHx8IGVudHJ5Lmxlbmd0aCAhPT0gcGFyc2VkLmhhbmRsZXMgKyAxKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyOiAnY29ubmVjdCcgb3B0aW9uIGRvZXNuJ3QgbWF0Y2ggaGFuZGxlIGNvdW50LlwiKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbm5lY3QgPSBlbnRyeTtcbiAgICAgICAgfVxuICAgICAgICBwYXJzZWQuY29ubmVjdCA9IGNvbm5lY3Q7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRlc3RPcmllbnRhdGlvbihwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIC8vIFNldCBvcmllbnRhdGlvbiB0byBhbiBhIG51bWVyaWNhbCB2YWx1ZSBmb3IgZWFzeVxuICAgICAgICAvLyBhcnJheSBzZWxlY3Rpb24uXG4gICAgICAgIHN3aXRjaCAoZW50cnkpIHtcbiAgICAgICAgICAgIGNhc2UgXCJob3Jpem9udGFsXCI6XG4gICAgICAgICAgICAgICAgcGFyc2VkLm9ydCA9IDA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwidmVydGljYWxcIjpcbiAgICAgICAgICAgICAgICBwYXJzZWQub3J0ID0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlcjogJ29yaWVudGF0aW9uJyBvcHRpb24gaXMgaW52YWxpZC5cIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gdGVzdE1hcmdpbihwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIGlmICghaXNOdW1lcmljKGVudHJ5KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlcjogJ21hcmdpbicgb3B0aW9uIG11c3QgYmUgbnVtZXJpYy5cIik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSXNzdWUgIzU4MlxuICAgICAgICBpZiAoZW50cnkgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBwYXJzZWQubWFyZ2luID0gcGFyc2VkLnNwZWN0cnVtLmdldERpc3RhbmNlKGVudHJ5KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdGVzdExpbWl0KHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgaWYgKCFpc051bWVyaWMoZW50cnkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyOiAnbGltaXQnIG9wdGlvbiBtdXN0IGJlIG51bWVyaWMuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnNlZC5saW1pdCA9IHBhcnNlZC5zcGVjdHJ1bS5nZXREaXN0YW5jZShlbnRyeSk7XG4gICAgICAgIGlmICghcGFyc2VkLmxpbWl0IHx8IHBhcnNlZC5oYW5kbGVzIDwgMikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlcjogJ2xpbWl0JyBvcHRpb24gaXMgb25seSBzdXBwb3J0ZWQgb24gbGluZWFyIHNsaWRlcnMgd2l0aCAyIG9yIG1vcmUgaGFuZGxlcy5cIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gdGVzdFBhZGRpbmcocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICB2YXIgaW5kZXg7XG4gICAgICAgIGlmICghaXNOdW1lcmljKGVudHJ5KSAmJiAhQXJyYXkuaXNBcnJheShlbnRyeSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXI6ICdwYWRkaW5nJyBvcHRpb24gbXVzdCBiZSBudW1lcmljIG9yIGFycmF5IG9mIGV4YWN0bHkgMiBudW1iZXJzLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShlbnRyeSkgJiYgIShlbnRyeS5sZW5ndGggPT09IDIgfHwgaXNOdW1lcmljKGVudHJ5WzBdKSB8fCBpc051bWVyaWMoZW50cnlbMV0pKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlcjogJ3BhZGRpbmcnIG9wdGlvbiBtdXN0IGJlIG51bWVyaWMgb3IgYXJyYXkgb2YgZXhhY3RseSAyIG51bWJlcnMuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbnRyeSA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShlbnRyeSkpIHtcbiAgICAgICAgICAgIGVudHJ5ID0gW2VudHJ5LCBlbnRyeV07XG4gICAgICAgIH1cbiAgICAgICAgLy8gJ2dldERpc3RhbmNlJyByZXR1cm5zIGZhbHNlIGZvciBpbnZhbGlkIHZhbHVlcy5cbiAgICAgICAgcGFyc2VkLnBhZGRpbmcgPSBbcGFyc2VkLnNwZWN0cnVtLmdldERpc3RhbmNlKGVudHJ5WzBdKSwgcGFyc2VkLnNwZWN0cnVtLmdldERpc3RhbmNlKGVudHJ5WzFdKV07XG4gICAgICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHBhcnNlZC5zcGVjdHJ1bS54TnVtU3RlcHMubGVuZ3RoIC0gMTsgaW5kZXgrKykge1xuICAgICAgICAgICAgLy8gbGFzdCBcInJhbmdlXCIgY2FuJ3QgY29udGFpbiBzdGVwIHNpemUgYXMgaXQgaXMgcHVyZWx5IGFuIGVuZHBvaW50LlxuICAgICAgICAgICAgaWYgKHBhcnNlZC5wYWRkaW5nWzBdW2luZGV4XSA8IDAgfHwgcGFyc2VkLnBhZGRpbmdbMV1baW5kZXhdIDwgMCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXI6ICdwYWRkaW5nJyBvcHRpb24gbXVzdCBiZSBhIHBvc2l0aXZlIG51bWJlcihzKS5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRvdGFsUGFkZGluZyA9IGVudHJ5WzBdICsgZW50cnlbMV07XG4gICAgICAgIHZhciBmaXJzdFZhbHVlID0gcGFyc2VkLnNwZWN0cnVtLnhWYWxbMF07XG4gICAgICAgIHZhciBsYXN0VmFsdWUgPSBwYXJzZWQuc3BlY3RydW0ueFZhbFtwYXJzZWQuc3BlY3RydW0ueFZhbC5sZW5ndGggLSAxXTtcbiAgICAgICAgaWYgKHRvdGFsUGFkZGluZyAvIChsYXN0VmFsdWUgLSBmaXJzdFZhbHVlKSA+IDEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXI6ICdwYWRkaW5nJyBvcHRpb24gbXVzdCBub3QgZXhjZWVkIDEwMCUgb2YgdGhlIHJhbmdlLlwiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiB0ZXN0RGlyZWN0aW9uKHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgLy8gU2V0IGRpcmVjdGlvbiBhcyBhIG51bWVyaWNhbCB2YWx1ZSBmb3IgZWFzeSBwYXJzaW5nLlxuICAgICAgICAvLyBJbnZlcnQgY29ubmVjdGlvbiBmb3IgUlRMIHNsaWRlcnMsIHNvIHRoYXQgdGhlIHByb3BlclxuICAgICAgICAvLyBoYW5kbGVzIGdldCB0aGUgY29ubmVjdC9iYWNrZ3JvdW5kIGNsYXNzZXMuXG4gICAgICAgIHN3aXRjaCAoZW50cnkpIHtcbiAgICAgICAgICAgIGNhc2UgXCJsdHJcIjpcbiAgICAgICAgICAgICAgICBwYXJzZWQuZGlyID0gMDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJydGxcIjpcbiAgICAgICAgICAgICAgICBwYXJzZWQuZGlyID0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlcjogJ2RpcmVjdGlvbicgb3B0aW9uIHdhcyBub3QgcmVjb2duaXplZC5cIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gdGVzdEJlaGF2aW91cihwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIC8vIE1ha2Ugc3VyZSB0aGUgaW5wdXQgaXMgYSBzdHJpbmcuXG4gICAgICAgIGlmICh0eXBlb2YgZW50cnkgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXI6ICdiZWhhdmlvdXInIG11c3QgYmUgYSBzdHJpbmcgY29udGFpbmluZyBvcHRpb25zLlwiKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBDaGVjayBpZiB0aGUgc3RyaW5nIGNvbnRhaW5zIGFueSBrZXl3b3Jkcy5cbiAgICAgICAgLy8gTm9uZSBhcmUgcmVxdWlyZWQuXG4gICAgICAgIHZhciB0YXAgPSBlbnRyeS5pbmRleE9mKFwidGFwXCIpID49IDA7XG4gICAgICAgIHZhciBkcmFnID0gZW50cnkuaW5kZXhPZihcImRyYWdcIikgPj0gMDtcbiAgICAgICAgdmFyIGZpeGVkID0gZW50cnkuaW5kZXhPZihcImZpeGVkXCIpID49IDA7XG4gICAgICAgIHZhciBzbmFwID0gZW50cnkuaW5kZXhPZihcInNuYXBcIikgPj0gMDtcbiAgICAgICAgdmFyIGhvdmVyID0gZW50cnkuaW5kZXhPZihcImhvdmVyXCIpID49IDA7XG4gICAgICAgIHZhciB1bmNvbnN0cmFpbmVkID0gZW50cnkuaW5kZXhPZihcInVuY29uc3RyYWluZWRcIikgPj0gMDtcbiAgICAgICAgaWYgKGZpeGVkKSB7XG4gICAgICAgICAgICBpZiAocGFyc2VkLmhhbmRsZXMgIT09IDIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyOiAnZml4ZWQnIGJlaGF2aW91ciBtdXN0IGJlIHVzZWQgd2l0aCAyIGhhbmRsZXNcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBVc2UgbWFyZ2luIHRvIGVuZm9yY2UgZml4ZWQgc3RhdGVcbiAgICAgICAgICAgIHRlc3RNYXJnaW4ocGFyc2VkLCBwYXJzZWQuc3RhcnRbMV0gLSBwYXJzZWQuc3RhcnRbMF0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh1bmNvbnN0cmFpbmVkICYmIChwYXJzZWQubWFyZ2luIHx8IHBhcnNlZC5saW1pdCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXI6ICd1bmNvbnN0cmFpbmVkJyBiZWhhdmlvdXIgY2Fubm90IGJlIHVzZWQgd2l0aCBtYXJnaW4gb3IgbGltaXRcIik7XG4gICAgICAgIH1cbiAgICAgICAgcGFyc2VkLmV2ZW50cyA9IHtcbiAgICAgICAgICAgIHRhcDogdGFwIHx8IHNuYXAsXG4gICAgICAgICAgICBkcmFnOiBkcmFnLFxuICAgICAgICAgICAgZml4ZWQ6IGZpeGVkLFxuICAgICAgICAgICAgc25hcDogc25hcCxcbiAgICAgICAgICAgIGhvdmVyOiBob3ZlcixcbiAgICAgICAgICAgIHVuY29uc3RyYWluZWQ6IHVuY29uc3RyYWluZWRcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdGVzdFRvb2x0aXBzKHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgaWYgKGVudHJ5ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbnRyeSA9PT0gdHJ1ZSB8fCBpc1ZhbGlkRm9ybWF0dGVyKGVudHJ5KSkge1xuICAgICAgICAgICAgcGFyc2VkLnRvb2x0aXBzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcnNlZC5oYW5kbGVzOyBpKyspIHtcbiAgICAgICAgICAgICAgICBwYXJzZWQudG9vbHRpcHMucHVzaChlbnRyeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBlbnRyeSA9IGFzQXJyYXkoZW50cnkpO1xuICAgICAgICAgICAgaWYgKGVudHJ5Lmxlbmd0aCAhPT0gcGFyc2VkLmhhbmRsZXMpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyOiBtdXN0IHBhc3MgYSBmb3JtYXR0ZXIgZm9yIGFsbCBoYW5kbGVzLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVudHJ5LmZvckVhY2goZnVuY3Rpb24gKGZvcm1hdHRlcikge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZm9ybWF0dGVyICE9PSBcImJvb2xlYW5cIiAmJlxuICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGZvcm1hdHRlciAhPT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZm9ybWF0dGVyLnRvICE9PSBcImZ1bmN0aW9uXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXI6ICd0b29sdGlwcycgbXVzdCBiZSBwYXNzZWQgYSBmb3JtYXR0ZXIgb3IgJ2ZhbHNlJy5cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBwYXJzZWQudG9vbHRpcHMgPSBlbnRyeTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiB0ZXN0QXJpYUZvcm1hdChwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIHZhbGlkYXRlRm9ybWF0KGVudHJ5KTtcbiAgICAgICAgcGFyc2VkLmFyaWFGb3JtYXQgPSBlbnRyeTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdGVzdEZvcm1hdChwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIHZhbGlkYXRlRm9ybWF0KGVudHJ5KTtcbiAgICAgICAgcGFyc2VkLmZvcm1hdCA9IGVudHJ5O1xuICAgIH1cbiAgICBmdW5jdGlvbiB0ZXN0S2V5Ym9hcmRTdXBwb3J0KHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBlbnRyeSAhPT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXI6ICdrZXlib2FyZFN1cHBvcnQnIG9wdGlvbiBtdXN0IGJlIGEgYm9vbGVhbi5cIik7XG4gICAgICAgIH1cbiAgICAgICAgcGFyc2VkLmtleWJvYXJkU3VwcG9ydCA9IGVudHJ5O1xuICAgIH1cbiAgICBmdW5jdGlvbiB0ZXN0RG9jdW1lbnRFbGVtZW50KHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgLy8gVGhpcyBpcyBhbiBhZHZhbmNlZCBvcHRpb24uIFBhc3NlZCB2YWx1ZXMgYXJlIHVzZWQgd2l0aG91dCB2YWxpZGF0aW9uLlxuICAgICAgICBwYXJzZWQuZG9jdW1lbnRFbGVtZW50ID0gZW50cnk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRlc3RDc3NQcmVmaXgocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICBpZiAodHlwZW9mIGVudHJ5ICE9PSBcInN0cmluZ1wiICYmIGVudHJ5ICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlcjogJ2Nzc1ByZWZpeCcgbXVzdCBiZSBhIHN0cmluZyBvciBgZmFsc2VgLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBwYXJzZWQuY3NzUHJlZml4ID0gZW50cnk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRlc3RDc3NDbGFzc2VzKHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBlbnRyeSAhPT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlcjogJ2Nzc0NsYXNzZXMnIG11c3QgYmUgYW4gb2JqZWN0LlwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHBhcnNlZC5jc3NQcmVmaXggPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHBhcnNlZC5jc3NDbGFzc2VzID0ge307XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhlbnRyeSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgcGFyc2VkLmNzc0NsYXNzZXNba2V5XSA9IHBhcnNlZC5jc3NQcmVmaXggKyBlbnRyeVtrZXldO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwYXJzZWQuY3NzQ2xhc3NlcyA9IGVudHJ5O1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIFRlc3QgYWxsIGRldmVsb3BlciBzZXR0aW5ncyBhbmQgcGFyc2UgdG8gYXNzdW1wdGlvbi1zYWZlIHZhbHVlcy5cbiAgICBmdW5jdGlvbiB0ZXN0T3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICAgIC8vIFRvIHByb3ZlIGEgZml4IGZvciAjNTM3LCBmcmVlemUgb3B0aW9ucyBoZXJlLlxuICAgICAgICAvLyBJZiB0aGUgb2JqZWN0IGlzIG1vZGlmaWVkLCBhbiBlcnJvciB3aWxsIGJlIHRocm93bi5cbiAgICAgICAgLy8gT2JqZWN0LmZyZWV6ZShvcHRpb25zKTtcbiAgICAgICAgdmFyIHBhcnNlZCA9IHtcbiAgICAgICAgICAgIG1hcmdpbjogbnVsbCxcbiAgICAgICAgICAgIGxpbWl0OiBudWxsLFxuICAgICAgICAgICAgcGFkZGluZzogbnVsbCxcbiAgICAgICAgICAgIGFuaW1hdGU6IHRydWUsXG4gICAgICAgICAgICBhbmltYXRpb25EdXJhdGlvbjogMzAwLFxuICAgICAgICAgICAgYXJpYUZvcm1hdDogZGVmYXVsdEZvcm1hdHRlcixcbiAgICAgICAgICAgIGZvcm1hdDogZGVmYXVsdEZvcm1hdHRlclxuICAgICAgICB9O1xuICAgICAgICAvLyBUZXN0cyBhcmUgZXhlY3V0ZWQgaW4gdGhlIG9yZGVyIHRoZXkgYXJlIHByZXNlbnRlZCBoZXJlLlxuICAgICAgICB2YXIgdGVzdHMgPSB7XG4gICAgICAgICAgICBzdGVwOiB7IHI6IGZhbHNlLCB0OiB0ZXN0U3RlcCB9LFxuICAgICAgICAgICAga2V5Ym9hcmRQYWdlTXVsdGlwbGllcjogeyByOiBmYWxzZSwgdDogdGVzdEtleWJvYXJkUGFnZU11bHRpcGxpZXIgfSxcbiAgICAgICAgICAgIGtleWJvYXJkRGVmYXVsdFN0ZXA6IHsgcjogZmFsc2UsIHQ6IHRlc3RLZXlib2FyZERlZmF1bHRTdGVwIH0sXG4gICAgICAgICAgICBzdGFydDogeyByOiB0cnVlLCB0OiB0ZXN0U3RhcnQgfSxcbiAgICAgICAgICAgIGNvbm5lY3Q6IHsgcjogdHJ1ZSwgdDogdGVzdENvbm5lY3QgfSxcbiAgICAgICAgICAgIGRpcmVjdGlvbjogeyByOiB0cnVlLCB0OiB0ZXN0RGlyZWN0aW9uIH0sXG4gICAgICAgICAgICBzbmFwOiB7IHI6IGZhbHNlLCB0OiB0ZXN0U25hcCB9LFxuICAgICAgICAgICAgYW5pbWF0ZTogeyByOiBmYWxzZSwgdDogdGVzdEFuaW1hdGUgfSxcbiAgICAgICAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiB7IHI6IGZhbHNlLCB0OiB0ZXN0QW5pbWF0aW9uRHVyYXRpb24gfSxcbiAgICAgICAgICAgIHJhbmdlOiB7IHI6IHRydWUsIHQ6IHRlc3RSYW5nZSB9LFxuICAgICAgICAgICAgb3JpZW50YXRpb246IHsgcjogZmFsc2UsIHQ6IHRlc3RPcmllbnRhdGlvbiB9LFxuICAgICAgICAgICAgbWFyZ2luOiB7IHI6IGZhbHNlLCB0OiB0ZXN0TWFyZ2luIH0sXG4gICAgICAgICAgICBsaW1pdDogeyByOiBmYWxzZSwgdDogdGVzdExpbWl0IH0sXG4gICAgICAgICAgICBwYWRkaW5nOiB7IHI6IGZhbHNlLCB0OiB0ZXN0UGFkZGluZyB9LFxuICAgICAgICAgICAgYmVoYXZpb3VyOiB7IHI6IHRydWUsIHQ6IHRlc3RCZWhhdmlvdXIgfSxcbiAgICAgICAgICAgIGFyaWFGb3JtYXQ6IHsgcjogZmFsc2UsIHQ6IHRlc3RBcmlhRm9ybWF0IH0sXG4gICAgICAgICAgICBmb3JtYXQ6IHsgcjogZmFsc2UsIHQ6IHRlc3RGb3JtYXQgfSxcbiAgICAgICAgICAgIHRvb2x0aXBzOiB7IHI6IGZhbHNlLCB0OiB0ZXN0VG9vbHRpcHMgfSxcbiAgICAgICAgICAgIGtleWJvYXJkU3VwcG9ydDogeyByOiB0cnVlLCB0OiB0ZXN0S2V5Ym9hcmRTdXBwb3J0IH0sXG4gICAgICAgICAgICBkb2N1bWVudEVsZW1lbnQ6IHsgcjogZmFsc2UsIHQ6IHRlc3REb2N1bWVudEVsZW1lbnQgfSxcbiAgICAgICAgICAgIGNzc1ByZWZpeDogeyByOiB0cnVlLCB0OiB0ZXN0Q3NzUHJlZml4IH0sXG4gICAgICAgICAgICBjc3NDbGFzc2VzOiB7IHI6IHRydWUsIHQ6IHRlc3RDc3NDbGFzc2VzIH1cbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGRlZmF1bHRzID0ge1xuICAgICAgICAgICAgY29ubmVjdDogZmFsc2UsXG4gICAgICAgICAgICBkaXJlY3Rpb246IFwibHRyXCIsXG4gICAgICAgICAgICBiZWhhdmlvdXI6IFwidGFwXCIsXG4gICAgICAgICAgICBvcmllbnRhdGlvbjogXCJob3Jpem9udGFsXCIsXG4gICAgICAgICAgICBrZXlib2FyZFN1cHBvcnQ6IHRydWUsXG4gICAgICAgICAgICBjc3NQcmVmaXg6IFwibm9VaS1cIixcbiAgICAgICAgICAgIGNzc0NsYXNzZXM6IGNzc0NsYXNzZXMsXG4gICAgICAgICAgICBrZXlib2FyZFBhZ2VNdWx0aXBsaWVyOiA1LFxuICAgICAgICAgICAga2V5Ym9hcmREZWZhdWx0U3RlcDogMTBcbiAgICAgICAgfTtcbiAgICAgICAgLy8gQXJpYUZvcm1hdCBkZWZhdWx0cyB0byByZWd1bGFyIGZvcm1hdCwgaWYgYW55LlxuICAgICAgICBpZiAob3B0aW9ucy5mb3JtYXQgJiYgIW9wdGlvbnMuYXJpYUZvcm1hdCkge1xuICAgICAgICAgICAgb3B0aW9ucy5hcmlhRm9ybWF0ID0gb3B0aW9ucy5mb3JtYXQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUnVuIGFsbCBvcHRpb25zIHRocm91Z2ggYSB0ZXN0aW5nIG1lY2hhbmlzbSB0byBlbnN1cmUgY29ycmVjdFxuICAgICAgICAvLyBpbnB1dC4gSXQgc2hvdWxkIGJlIG5vdGVkIHRoYXQgb3B0aW9ucyBtaWdodCBnZXQgbW9kaWZpZWQgdG9cbiAgICAgICAgLy8gYmUgaGFuZGxlZCBwcm9wZXJseS4gRS5nLiB3cmFwcGluZyBpbnRlZ2VycyBpbiBhcnJheXMuXG4gICAgICAgIE9iamVjdC5rZXlzKHRlc3RzKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICAvLyBJZiB0aGUgb3B0aW9uIGlzbid0IHNldCwgYnV0IGl0IGlzIHJlcXVpcmVkLCB0aHJvdyBhbiBlcnJvci5cbiAgICAgICAgICAgIGlmICghaXNTZXQob3B0aW9uc1tuYW1lXSkgJiYgZGVmYXVsdHNbbmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGlmICh0ZXN0c1tuYW1lXS5yKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXI6ICdcIiArIG5hbWUgKyBcIicgaXMgcmVxdWlyZWQuXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0ZXN0c1tuYW1lXS50KHBhcnNlZCwgIWlzU2V0KG9wdGlvbnNbbmFtZV0pID8gZGVmYXVsdHNbbmFtZV0gOiBvcHRpb25zW25hbWVdKTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIEZvcndhcmQgcGlwcyBvcHRpb25zXG4gICAgICAgIHBhcnNlZC5waXBzID0gb3B0aW9ucy5waXBzO1xuICAgICAgICAvLyBBbGwgcmVjZW50IGJyb3dzZXJzIGFjY2VwdCB1bnByZWZpeGVkIHRyYW5zZm9ybS5cbiAgICAgICAgLy8gV2UgbmVlZCAtbXMtIGZvciBJRTkgYW5kIC13ZWJraXQtIGZvciBvbGRlciBBbmRyb2lkO1xuICAgICAgICAvLyBBc3N1bWUgdXNlIG9mIC13ZWJraXQtIGlmIHVucHJlZml4ZWQgYW5kIC1tcy0gYXJlIG5vdCBzdXBwb3J0ZWQuXG4gICAgICAgIC8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI2ZlYXQ9dHJhbnNmb3JtczJkXG4gICAgICAgIHZhciBkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgdmFyIG1zUHJlZml4ID0gZC5zdHlsZS5tc1RyYW5zZm9ybSAhPT0gdW5kZWZpbmVkO1xuICAgICAgICB2YXIgbm9QcmVmaXggPSBkLnN0eWxlLnRyYW5zZm9ybSAhPT0gdW5kZWZpbmVkO1xuICAgICAgICBwYXJzZWQudHJhbnNmb3JtUnVsZSA9IG5vUHJlZml4ID8gXCJ0cmFuc2Zvcm1cIiA6IG1zUHJlZml4ID8gXCJtc1RyYW5zZm9ybVwiIDogXCJ3ZWJraXRUcmFuc2Zvcm1cIjtcbiAgICAgICAgLy8gUGlwcyBkb24ndCBtb3ZlLCBzbyB3ZSBjYW4gcGxhY2UgdGhlbSB1c2luZyBsZWZ0L3RvcC5cbiAgICAgICAgdmFyIHN0eWxlcyA9IFtbXCJsZWZ0XCIsIFwidG9wXCJdLCBbXCJyaWdodFwiLCBcImJvdHRvbVwiXV07XG4gICAgICAgIHBhcnNlZC5zdHlsZSA9IHN0eWxlc1twYXJzZWQuZGlyXVtwYXJzZWQub3J0XTtcbiAgICAgICAgcmV0dXJuIHBhcnNlZDtcbiAgICB9XG4gICAgLy9lbmRyZWdpb25cbiAgICBmdW5jdGlvbiBzY29wZSh0YXJnZXQsIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucykge1xuICAgICAgICB2YXIgYWN0aW9ucyA9IGdldEFjdGlvbnMoKTtcbiAgICAgICAgdmFyIHN1cHBvcnRzVG91Y2hBY3Rpb25Ob25lID0gZ2V0U3VwcG9ydHNUb3VjaEFjdGlvbk5vbmUoKTtcbiAgICAgICAgdmFyIHN1cHBvcnRzUGFzc2l2ZSA9IHN1cHBvcnRzVG91Y2hBY3Rpb25Ob25lICYmIGdldFN1cHBvcnRzUGFzc2l2ZSgpO1xuICAgICAgICAvLyBBbGwgdmFyaWFibGVzIGxvY2FsIHRvICdzY29wZScgYXJlIHByZWZpeGVkIHdpdGggJ3Njb3BlXydcbiAgICAgICAgLy8gU2xpZGVyIERPTSBOb2Rlc1xuICAgICAgICB2YXIgc2NvcGVfVGFyZ2V0ID0gdGFyZ2V0O1xuICAgICAgICB2YXIgc2NvcGVfQmFzZTtcbiAgICAgICAgdmFyIHNjb3BlX0hhbmRsZXM7XG4gICAgICAgIHZhciBzY29wZV9Db25uZWN0cztcbiAgICAgICAgdmFyIHNjb3BlX1BpcHM7XG4gICAgICAgIHZhciBzY29wZV9Ub29sdGlwcztcbiAgICAgICAgLy8gU2xpZGVyIHN0YXRlIHZhbHVlc1xuICAgICAgICB2YXIgc2NvcGVfU3BlY3RydW0gPSBvcHRpb25zLnNwZWN0cnVtO1xuICAgICAgICB2YXIgc2NvcGVfVmFsdWVzID0gW107XG4gICAgICAgIHZhciBzY29wZV9Mb2NhdGlvbnMgPSBbXTtcbiAgICAgICAgdmFyIHNjb3BlX0hhbmRsZU51bWJlcnMgPSBbXTtcbiAgICAgICAgdmFyIHNjb3BlX0FjdGl2ZUhhbmRsZXNDb3VudCA9IDA7XG4gICAgICAgIHZhciBzY29wZV9FdmVudHMgPSB7fTtcbiAgICAgICAgLy8gRG9jdW1lbnQgTm9kZXNcbiAgICAgICAgdmFyIHNjb3BlX0RvY3VtZW50ID0gdGFyZ2V0Lm93bmVyRG9jdW1lbnQ7XG4gICAgICAgIHZhciBzY29wZV9Eb2N1bWVudEVsZW1lbnQgPSBvcHRpb25zLmRvY3VtZW50RWxlbWVudCB8fCBzY29wZV9Eb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICAgIHZhciBzY29wZV9Cb2R5ID0gc2NvcGVfRG9jdW1lbnQuYm9keTtcbiAgICAgICAgLy8gRm9yIGhvcml6b250YWwgc2xpZGVycyBpbiBzdGFuZGFyZCBsdHIgZG9jdW1lbnRzLFxuICAgICAgICAvLyBtYWtlIC5ub1VpLW9yaWdpbiBvdmVyZmxvdyB0byB0aGUgbGVmdCBzbyB0aGUgZG9jdW1lbnQgZG9lc24ndCBzY3JvbGwuXG4gICAgICAgIHZhciBzY29wZV9EaXJPZmZzZXQgPSBzY29wZV9Eb2N1bWVudC5kaXIgPT09IFwicnRsXCIgfHwgb3B0aW9ucy5vcnQgPT09IDEgPyAwIDogMTAwO1xuICAgICAgICAvLyBDcmVhdGVzIGEgbm9kZSwgYWRkcyBpdCB0byB0YXJnZXQsIHJldHVybnMgdGhlIG5ldyBub2RlLlxuICAgICAgICBmdW5jdGlvbiBhZGROb2RlVG8oYWRkVGFyZ2V0LCBjbGFzc05hbWUpIHtcbiAgICAgICAgICAgIHZhciBkaXYgPSBzY29wZV9Eb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgaWYgKGNsYXNzTmFtZSkge1xuICAgICAgICAgICAgICAgIGFkZENsYXNzKGRpdiwgY2xhc3NOYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFkZFRhcmdldC5hcHBlbmRDaGlsZChkaXYpO1xuICAgICAgICAgICAgcmV0dXJuIGRpdjtcbiAgICAgICAgfVxuICAgICAgICAvLyBBcHBlbmQgYSBvcmlnaW4gdG8gdGhlIGJhc2VcbiAgICAgICAgZnVuY3Rpb24gYWRkT3JpZ2luKGJhc2UsIGhhbmRsZU51bWJlcikge1xuICAgICAgICAgICAgdmFyIG9yaWdpbiA9IGFkZE5vZGVUbyhiYXNlLCBvcHRpb25zLmNzc0NsYXNzZXMub3JpZ2luKTtcbiAgICAgICAgICAgIHZhciBoYW5kbGUgPSBhZGROb2RlVG8ob3JpZ2luLCBvcHRpb25zLmNzc0NsYXNzZXMuaGFuZGxlKTtcbiAgICAgICAgICAgIGFkZE5vZGVUbyhoYW5kbGUsIG9wdGlvbnMuY3NzQ2xhc3Nlcy50b3VjaEFyZWEpO1xuICAgICAgICAgICAgaGFuZGxlLnNldEF0dHJpYnV0ZShcImRhdGEtaGFuZGxlXCIsIFN0cmluZyhoYW5kbGVOdW1iZXIpKTtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmtleWJvYXJkU3VwcG9ydCkge1xuICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvR2xvYmFsX2F0dHJpYnV0ZXMvdGFiaW5kZXhcbiAgICAgICAgICAgICAgICAvLyAwID0gZm9jdXNhYmxlIGFuZCByZWFjaGFibGVcbiAgICAgICAgICAgICAgICBoYW5kbGUuc2V0QXR0cmlidXRlKFwidGFiaW5kZXhcIiwgXCIwXCIpO1xuICAgICAgICAgICAgICAgIGhhbmRsZS5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV2ZW50S2V5ZG93bihldmVudCwgaGFuZGxlTnVtYmVyKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGhhbmRsZS5zZXRBdHRyaWJ1dGUoXCJyb2xlXCIsIFwic2xpZGVyXCIpO1xuICAgICAgICAgICAgaGFuZGxlLnNldEF0dHJpYnV0ZShcImFyaWEtb3JpZW50YXRpb25cIiwgb3B0aW9ucy5vcnQgPyBcInZlcnRpY2FsXCIgOiBcImhvcml6b250YWxcIik7XG4gICAgICAgICAgICBpZiAoaGFuZGxlTnVtYmVyID09PSAwKSB7XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3MoaGFuZGxlLCBvcHRpb25zLmNzc0NsYXNzZXMuaGFuZGxlTG93ZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaGFuZGxlTnVtYmVyID09PSBvcHRpb25zLmhhbmRsZXMgLSAxKSB7XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3MoaGFuZGxlLCBvcHRpb25zLmNzc0NsYXNzZXMuaGFuZGxlVXBwZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG9yaWdpbjtcbiAgICAgICAgfVxuICAgICAgICAvLyBJbnNlcnQgbm9kZXMgZm9yIGNvbm5lY3QgZWxlbWVudHNcbiAgICAgICAgZnVuY3Rpb24gYWRkQ29ubmVjdChiYXNlLCBhZGQpIHtcbiAgICAgICAgICAgIGlmICghYWRkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFkZE5vZGVUbyhiYXNlLCBvcHRpb25zLmNzc0NsYXNzZXMuY29ubmVjdCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQWRkIGhhbmRsZXMgdG8gdGhlIHNsaWRlciBiYXNlLlxuICAgICAgICBmdW5jdGlvbiBhZGRFbGVtZW50cyhjb25uZWN0T3B0aW9ucywgYmFzZSkge1xuICAgICAgICAgICAgdmFyIGNvbm5lY3RCYXNlID0gYWRkTm9kZVRvKGJhc2UsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5jb25uZWN0cyk7XG4gICAgICAgICAgICBzY29wZV9IYW5kbGVzID0gW107XG4gICAgICAgICAgICBzY29wZV9Db25uZWN0cyA9IFtdO1xuICAgICAgICAgICAgc2NvcGVfQ29ubmVjdHMucHVzaChhZGRDb25uZWN0KGNvbm5lY3RCYXNlLCBjb25uZWN0T3B0aW9uc1swXSkpO1xuICAgICAgICAgICAgLy8gWzo6OjpPPT09PU89PT09Tz09PT1dXG4gICAgICAgICAgICAvLyBjb25uZWN0T3B0aW9ucyA9IFswLCAxLCAxLCAxXVxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvcHRpb25zLmhhbmRsZXM7IGkrKykge1xuICAgICAgICAgICAgICAgIC8vIEtlZXAgYSBsaXN0IG9mIGFsbCBhZGRlZCBoYW5kbGVzLlxuICAgICAgICAgICAgICAgIHNjb3BlX0hhbmRsZXMucHVzaChhZGRPcmlnaW4oYmFzZSwgaSkpO1xuICAgICAgICAgICAgICAgIHNjb3BlX0hhbmRsZU51bWJlcnNbaV0gPSBpO1xuICAgICAgICAgICAgICAgIHNjb3BlX0Nvbm5lY3RzLnB1c2goYWRkQ29ubmVjdChjb25uZWN0QmFzZSwgY29ubmVjdE9wdGlvbnNbaSArIDFdKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gSW5pdGlhbGl6ZSBhIHNpbmdsZSBzbGlkZXIuXG4gICAgICAgIGZ1bmN0aW9uIGFkZFNsaWRlcihhZGRUYXJnZXQpIHtcbiAgICAgICAgICAgIC8vIEFwcGx5IGNsYXNzZXMgYW5kIGRhdGEgdG8gdGhlIHRhcmdldC5cbiAgICAgICAgICAgIGFkZENsYXNzKGFkZFRhcmdldCwgb3B0aW9ucy5jc3NDbGFzc2VzLnRhcmdldCk7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5kaXIgPT09IDApIHtcbiAgICAgICAgICAgICAgICBhZGRDbGFzcyhhZGRUYXJnZXQsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5sdHIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3MoYWRkVGFyZ2V0LCBvcHRpb25zLmNzc0NsYXNzZXMucnRsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvcHRpb25zLm9ydCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGFkZENsYXNzKGFkZFRhcmdldCwgb3B0aW9ucy5jc3NDbGFzc2VzLmhvcml6b250YWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3MoYWRkVGFyZ2V0LCBvcHRpb25zLmNzc0NsYXNzZXMudmVydGljYWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHRleHREaXJlY3Rpb24gPSBnZXRDb21wdXRlZFN0eWxlKGFkZFRhcmdldCkuZGlyZWN0aW9uO1xuICAgICAgICAgICAgaWYgKHRleHREaXJlY3Rpb24gPT09IFwicnRsXCIpIHtcbiAgICAgICAgICAgICAgICBhZGRDbGFzcyhhZGRUYXJnZXQsIG9wdGlvbnMuY3NzQ2xhc3Nlcy50ZXh0RGlyZWN0aW9uUnRsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGFkZENsYXNzKGFkZFRhcmdldCwgb3B0aW9ucy5jc3NDbGFzc2VzLnRleHREaXJlY3Rpb25MdHIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFkZE5vZGVUbyhhZGRUYXJnZXQsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5iYXNlKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBhZGRUb29sdGlwKGhhbmRsZSwgaGFuZGxlTnVtYmVyKSB7XG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMudG9vbHRpcHMgfHwgIW9wdGlvbnMudG9vbHRpcHNbaGFuZGxlTnVtYmVyXSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhZGROb2RlVG8oaGFuZGxlLmZpcnN0Q2hpbGQsIG9wdGlvbnMuY3NzQ2xhc3Nlcy50b29sdGlwKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBpc1NsaWRlckRpc2FibGVkKCkge1xuICAgICAgICAgICAgcmV0dXJuIHNjb3BlX1RhcmdldC5oYXNBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBEaXNhYmxlIHRoZSBzbGlkZXIgZHJhZ2dpbmcgaWYgYW55IGhhbmRsZSBpcyBkaXNhYmxlZFxuICAgICAgICBmdW5jdGlvbiBpc0hhbmRsZURpc2FibGVkKGhhbmRsZU51bWJlcikge1xuICAgICAgICAgICAgdmFyIGhhbmRsZU9yaWdpbiA9IHNjb3BlX0hhbmRsZXNbaGFuZGxlTnVtYmVyXTtcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVPcmlnaW4uaGFzQXR0cmlidXRlKFwiZGlzYWJsZWRcIik7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gcmVtb3ZlVG9vbHRpcHMoKSB7XG4gICAgICAgICAgICBpZiAoc2NvcGVfVG9vbHRpcHMpIHtcbiAgICAgICAgICAgICAgICByZW1vdmVFdmVudChcInVwZGF0ZVwiICsgSU5URVJOQUxfRVZFTlRfTlMudG9vbHRpcHMpO1xuICAgICAgICAgICAgICAgIHNjb3BlX1Rvb2x0aXBzLmZvckVhY2goZnVuY3Rpb24gKHRvb2x0aXApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRvb2x0aXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZUVsZW1lbnQodG9vbHRpcCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBzY29wZV9Ub29sdGlwcyA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gVGhlIHRvb2x0aXBzIG9wdGlvbiBpcyBhIHNob3J0aGFuZCBmb3IgdXNpbmcgdGhlICd1cGRhdGUnIGV2ZW50LlxuICAgICAgICBmdW5jdGlvbiB0b29sdGlwcygpIHtcbiAgICAgICAgICAgIHJlbW92ZVRvb2x0aXBzKCk7XG4gICAgICAgICAgICAvLyBUb29sdGlwcyBhcmUgYWRkZWQgd2l0aCBvcHRpb25zLnRvb2x0aXBzIGluIG9yaWdpbmFsIG9yZGVyLlxuICAgICAgICAgICAgc2NvcGVfVG9vbHRpcHMgPSBzY29wZV9IYW5kbGVzLm1hcChhZGRUb29sdGlwKTtcbiAgICAgICAgICAgIGJpbmRFdmVudChcInVwZGF0ZVwiICsgSU5URVJOQUxfRVZFTlRfTlMudG9vbHRpcHMsIGZ1bmN0aW9uICh2YWx1ZXMsIGhhbmRsZU51bWJlciwgdW5lbmNvZGVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFzY29wZV9Ub29sdGlwcyB8fCAhb3B0aW9ucy50b29sdGlwcykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzY29wZV9Ub29sdGlwc1toYW5kbGVOdW1iZXJdID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBmb3JtYXR0ZWRWYWx1ZSA9IHZhbHVlc1toYW5kbGVOdW1iZXJdO1xuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnRvb2x0aXBzW2hhbmRsZU51bWJlcl0gIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVkVmFsdWUgPSBvcHRpb25zLnRvb2x0aXBzW2hhbmRsZU51bWJlcl0udG8odW5lbmNvZGVkW2hhbmRsZU51bWJlcl0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzY29wZV9Ub29sdGlwc1toYW5kbGVOdW1iZXJdLmlubmVySFRNTCA9IGZvcm1hdHRlZFZhbHVlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gYXJpYSgpIHtcbiAgICAgICAgICAgIHJlbW92ZUV2ZW50KFwidXBkYXRlXCIgKyBJTlRFUk5BTF9FVkVOVF9OUy5hcmlhKTtcbiAgICAgICAgICAgIGJpbmRFdmVudChcInVwZGF0ZVwiICsgSU5URVJOQUxfRVZFTlRfTlMuYXJpYSwgZnVuY3Rpb24gKHZhbHVlcywgaGFuZGxlTnVtYmVyLCB1bmVuY29kZWQsIHRhcCwgcG9zaXRpb25zKSB7XG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIEFyaWEgVmFsdWVzIGZvciBhbGwgaGFuZGxlcywgYXMgYSBjaGFuZ2UgaW4gb25lIGNoYW5nZXMgbWluIGFuZCBtYXggdmFsdWVzIGZvciB0aGUgbmV4dC5cbiAgICAgICAgICAgICAgICBzY29wZV9IYW5kbGVOdW1iZXJzLmZvckVhY2goZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoYW5kbGUgPSBzY29wZV9IYW5kbGVzW2luZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1pbiA9IGNoZWNrSGFuZGxlUG9zaXRpb24oc2NvcGVfTG9jYXRpb25zLCBpbmRleCwgMCwgdHJ1ZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXggPSBjaGVja0hhbmRsZVBvc2l0aW9uKHNjb3BlX0xvY2F0aW9ucywgaW5kZXgsIDEwMCwgdHJ1ZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBub3cgPSBwb3NpdGlvbnNbaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICAvLyBGb3JtYXR0ZWQgdmFsdWUgZm9yIGRpc3BsYXlcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRleHQgPSBTdHJpbmcob3B0aW9ucy5hcmlhRm9ybWF0LnRvKHVuZW5jb2RlZFtpbmRleF0pKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gTWFwIHRvIHNsaWRlciByYW5nZSB2YWx1ZXNcbiAgICAgICAgICAgICAgICAgICAgbWluID0gc2NvcGVfU3BlY3RydW0uZnJvbVN0ZXBwaW5nKG1pbikudG9GaXhlZCgxKTtcbiAgICAgICAgICAgICAgICAgICAgbWF4ID0gc2NvcGVfU3BlY3RydW0uZnJvbVN0ZXBwaW5nKG1heCkudG9GaXhlZCgxKTtcbiAgICAgICAgICAgICAgICAgICAgbm93ID0gc2NvcGVfU3BlY3RydW0uZnJvbVN0ZXBwaW5nKG5vdykudG9GaXhlZCgxKTtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlLmNoaWxkcmVuWzBdLnNldEF0dHJpYnV0ZShcImFyaWEtdmFsdWVtaW5cIiwgbWluKTtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlLmNoaWxkcmVuWzBdLnNldEF0dHJpYnV0ZShcImFyaWEtdmFsdWVtYXhcIiwgbWF4KTtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlLmNoaWxkcmVuWzBdLnNldEF0dHJpYnV0ZShcImFyaWEtdmFsdWVub3dcIiwgbm93KTtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlLmNoaWxkcmVuWzBdLnNldEF0dHJpYnV0ZShcImFyaWEtdmFsdWV0ZXh0XCIsIHRleHQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZ2V0R3JvdXAocGlwcykge1xuICAgICAgICAgICAgLy8gVXNlIHRoZSByYW5nZS5cbiAgICAgICAgICAgIGlmIChwaXBzLm1vZGUgPT09IGV4cG9ydHMuUGlwc01vZGUuUmFuZ2UgfHwgcGlwcy5tb2RlID09PSBleHBvcnRzLlBpcHNNb2RlLlN0ZXBzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNjb3BlX1NwZWN0cnVtLnhWYWw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocGlwcy5tb2RlID09PSBleHBvcnRzLlBpcHNNb2RlLkNvdW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKHBpcHMudmFsdWVzIDwgMikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyOiAndmFsdWVzJyAoPj0gMikgcmVxdWlyZWQgZm9yIG1vZGUgJ2NvdW50Jy5cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIERpdmlkZSAwIC0gMTAwIGluICdjb3VudCcgcGFydHMuXG4gICAgICAgICAgICAgICAgdmFyIGludGVydmFsID0gcGlwcy52YWx1ZXMgLSAxO1xuICAgICAgICAgICAgICAgIHZhciBzcHJlYWQgPSAxMDAgLyBpbnRlcnZhbDtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWVzID0gW107XG4gICAgICAgICAgICAgICAgLy8gTGlzdCB0aGVzZSBwYXJ0cyBhbmQgaGF2ZSB0aGVtIGhhbmRsZWQgYXMgJ3Bvc2l0aW9ucycuXG4gICAgICAgICAgICAgICAgd2hpbGUgKGludGVydmFsLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzW2ludGVydmFsXSA9IGludGVydmFsICogc3ByZWFkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YWx1ZXMucHVzaCgxMDApO1xuICAgICAgICAgICAgICAgIHJldHVybiBtYXBUb1JhbmdlKHZhbHVlcywgcGlwcy5zdGVwcGVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwaXBzLm1vZGUgPT09IGV4cG9ydHMuUGlwc01vZGUuUG9zaXRpb25zKSB7XG4gICAgICAgICAgICAgICAgLy8gTWFwIGFsbCBwZXJjZW50YWdlcyB0byBvbi1yYW5nZSB2YWx1ZXMuXG4gICAgICAgICAgICAgICAgcmV0dXJuIG1hcFRvUmFuZ2UocGlwcy52YWx1ZXMsIHBpcHMuc3RlcHBlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocGlwcy5tb2RlID09PSBleHBvcnRzLlBpcHNNb2RlLlZhbHVlcykge1xuICAgICAgICAgICAgICAgIC8vIElmIHRoZSB2YWx1ZSBtdXN0IGJlIHN0ZXBwZWQsIGl0IG5lZWRzIHRvIGJlIGNvbnZlcnRlZCB0byBhIHBlcmNlbnRhZ2UgZmlyc3QuXG4gICAgICAgICAgICAgICAgaWYgKHBpcHMuc3RlcHBlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGlwcy52YWx1ZXMubWFwKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ29udmVydCB0byBwZXJjZW50YWdlLCBhcHBseSBzdGVwLCByZXR1cm4gdG8gdmFsdWUuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2NvcGVfU3BlY3RydW0uZnJvbVN0ZXBwaW5nKHNjb3BlX1NwZWN0cnVtLmdldFN0ZXAoc2NvcGVfU3BlY3RydW0udG9TdGVwcGluZyh2YWx1ZSkpKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIE90aGVyd2lzZSwgd2UgY2FuIHNpbXBseSB1c2UgdGhlIHZhbHVlcy5cbiAgICAgICAgICAgICAgICByZXR1cm4gcGlwcy52YWx1ZXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gW107IC8vIHBpcHMubW9kZSA9IG5ldmVyXG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gbWFwVG9SYW5nZSh2YWx1ZXMsIHN0ZXBwZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZXMubWFwKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzY29wZV9TcGVjdHJ1bS5mcm9tU3RlcHBpbmcoc3RlcHBlZCA/IHNjb3BlX1NwZWN0cnVtLmdldFN0ZXAodmFsdWUpIDogdmFsdWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZ2VuZXJhdGVTcHJlYWQocGlwcykge1xuICAgICAgICAgICAgZnVuY3Rpb24gc2FmZUluY3JlbWVudCh2YWx1ZSwgaW5jcmVtZW50KSB7XG4gICAgICAgICAgICAgICAgLy8gQXZvaWQgZmxvYXRpbmcgcG9pbnQgdmFyaWFuY2UgYnkgZHJvcHBpbmcgdGhlIHNtYWxsZXN0IGRlY2ltYWwgcGxhY2VzLlxuICAgICAgICAgICAgICAgIHJldHVybiBOdW1iZXIoKHZhbHVlICsgaW5jcmVtZW50KS50b0ZpeGVkKDcpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBncm91cCA9IGdldEdyb3VwKHBpcHMpO1xuICAgICAgICAgICAgdmFyIGluZGV4ZXMgPSB7fTtcbiAgICAgICAgICAgIHZhciBmaXJzdEluUmFuZ2UgPSBzY29wZV9TcGVjdHJ1bS54VmFsWzBdO1xuICAgICAgICAgICAgdmFyIGxhc3RJblJhbmdlID0gc2NvcGVfU3BlY3RydW0ueFZhbFtzY29wZV9TcGVjdHJ1bS54VmFsLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgdmFyIGlnbm9yZUZpcnN0ID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgaWdub3JlTGFzdCA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIHByZXZQY3QgPSAwO1xuICAgICAgICAgICAgLy8gQ3JlYXRlIGEgY29weSBvZiB0aGUgZ3JvdXAsIHNvcnQgaXQgYW5kIGZpbHRlciBhd2F5IGFsbCBkdXBsaWNhdGVzLlxuICAgICAgICAgICAgZ3JvdXAgPSB1bmlxdWUoZ3JvdXAuc2xpY2UoKS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGEgLSBiO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHRoZSByYW5nZSBzdGFydHMgd2l0aCB0aGUgZmlyc3QgZWxlbWVudC5cbiAgICAgICAgICAgIGlmIChncm91cFswXSAhPT0gZmlyc3RJblJhbmdlKSB7XG4gICAgICAgICAgICAgICAgZ3JvdXAudW5zaGlmdChmaXJzdEluUmFuZ2UpO1xuICAgICAgICAgICAgICAgIGlnbm9yZUZpcnN0ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIExpa2V3aXNlIGZvciB0aGUgbGFzdCBvbmUuXG4gICAgICAgICAgICBpZiAoZ3JvdXBbZ3JvdXAubGVuZ3RoIC0gMV0gIT09IGxhc3RJblJhbmdlKSB7XG4gICAgICAgICAgICAgICAgZ3JvdXAucHVzaChsYXN0SW5SYW5nZSk7XG4gICAgICAgICAgICAgICAgaWdub3JlTGFzdCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBncm91cC5mb3JFYWNoKGZ1bmN0aW9uIChjdXJyZW50LCBpbmRleCkge1xuICAgICAgICAgICAgICAgIC8vIEdldCB0aGUgY3VycmVudCBzdGVwIGFuZCB0aGUgbG93ZXIgKyB1cHBlciBwb3NpdGlvbnMuXG4gICAgICAgICAgICAgICAgdmFyIHN0ZXA7XG4gICAgICAgICAgICAgICAgdmFyIGk7XG4gICAgICAgICAgICAgICAgdmFyIHE7XG4gICAgICAgICAgICAgICAgdmFyIGxvdyA9IGN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgdmFyIGhpZ2ggPSBncm91cFtpbmRleCArIDFdO1xuICAgICAgICAgICAgICAgIHZhciBuZXdQY3Q7XG4gICAgICAgICAgICAgICAgdmFyIHBjdERpZmZlcmVuY2U7XG4gICAgICAgICAgICAgICAgdmFyIHBjdFBvcztcbiAgICAgICAgICAgICAgICB2YXIgdHlwZTtcbiAgICAgICAgICAgICAgICB2YXIgc3RlcHM7XG4gICAgICAgICAgICAgICAgdmFyIHJlYWxTdGVwcztcbiAgICAgICAgICAgICAgICB2YXIgc3RlcFNpemU7XG4gICAgICAgICAgICAgICAgdmFyIGlzU3RlcHMgPSBwaXBzLm1vZGUgPT09IGV4cG9ydHMuUGlwc01vZGUuU3RlcHM7XG4gICAgICAgICAgICAgICAgLy8gV2hlbiB1c2luZyAnc3RlcHMnIG1vZGUsIHVzZSB0aGUgcHJvdmlkZWQgc3RlcHMuXG4gICAgICAgICAgICAgICAgLy8gT3RoZXJ3aXNlLCB3ZSdsbCBzdGVwIG9uIHRvIHRoZSBuZXh0IHN1YnJhbmdlLlxuICAgICAgICAgICAgICAgIGlmIChpc1N0ZXBzKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0ZXAgPSBzY29wZV9TcGVjdHJ1bS54TnVtU3RlcHNbaW5kZXhdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBEZWZhdWx0IHRvIGEgJ2Z1bGwnIHN0ZXAuXG4gICAgICAgICAgICAgICAgaWYgKCFzdGVwKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0ZXAgPSBoaWdoIC0gbG93O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBJZiBoaWdoIGlzIHVuZGVmaW5lZCB3ZSBhcmUgYXQgdGhlIGxhc3Qgc3VicmFuZ2UuIE1ha2Ugc3VyZSBpdCBpdGVyYXRlcyBvbmNlICgjMTA4OClcbiAgICAgICAgICAgICAgICBpZiAoaGlnaCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGhpZ2ggPSBsb3c7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSBzdGVwIGlzbid0IDAsIHdoaWNoIHdvdWxkIGNhdXNlIGFuIGluZmluaXRlIGxvb3AgKCM2NTQpXG4gICAgICAgICAgICAgICAgc3RlcCA9IE1hdGgubWF4KHN0ZXAsIDAuMDAwMDAwMSk7XG4gICAgICAgICAgICAgICAgLy8gRmluZCBhbGwgc3RlcHMgaW4gdGhlIHN1YnJhbmdlLlxuICAgICAgICAgICAgICAgIGZvciAoaSA9IGxvdzsgaSA8PSBoaWdoOyBpID0gc2FmZUluY3JlbWVudChpLCBzdGVwKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIHBlcmNlbnRhZ2UgdmFsdWUgZm9yIHRoZSBjdXJyZW50IHN0ZXAsXG4gICAgICAgICAgICAgICAgICAgIC8vIGNhbGN1bGF0ZSB0aGUgc2l6ZSBmb3IgdGhlIHN1YnJhbmdlLlxuICAgICAgICAgICAgICAgICAgICBuZXdQY3QgPSBzY29wZV9TcGVjdHJ1bS50b1N0ZXBwaW5nKGkpO1xuICAgICAgICAgICAgICAgICAgICBwY3REaWZmZXJlbmNlID0gbmV3UGN0IC0gcHJldlBjdDtcbiAgICAgICAgICAgICAgICAgICAgc3RlcHMgPSBwY3REaWZmZXJlbmNlIC8gKHBpcHMuZGVuc2l0eSB8fCAxKTtcbiAgICAgICAgICAgICAgICAgICAgcmVhbFN0ZXBzID0gTWF0aC5yb3VuZChzdGVwcyk7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgcmF0aW8gcmVwcmVzZW50cyB0aGUgYW1vdW50IG9mIHBlcmNlbnRhZ2Utc3BhY2UgYSBwb2ludCBpbmRpY2F0ZXMuXG4gICAgICAgICAgICAgICAgICAgIC8vIEZvciBhIGRlbnNpdHkgMSB0aGUgcG9pbnRzL3BlcmNlbnRhZ2UgPSAxLiBGb3IgZGVuc2l0eSAyLCB0aGF0IHBlcmNlbnRhZ2UgbmVlZHMgdG8gYmUgcmUtZGl2aWRlZC5cbiAgICAgICAgICAgICAgICAgICAgLy8gUm91bmQgdGhlIHBlcmNlbnRhZ2Ugb2Zmc2V0IHRvIGFuIGV2ZW4gbnVtYmVyLCB0aGVuIGRpdmlkZSBieSB0d29cbiAgICAgICAgICAgICAgICAgICAgLy8gdG8gc3ByZWFkIHRoZSBvZmZzZXQgb24gYm90aCBzaWRlcyBvZiB0aGUgcmFuZ2UuXG4gICAgICAgICAgICAgICAgICAgIHN0ZXBTaXplID0gcGN0RGlmZmVyZW5jZSAvIHJlYWxTdGVwcztcbiAgICAgICAgICAgICAgICAgICAgLy8gRGl2aWRlIGFsbCBwb2ludHMgZXZlbmx5LCBhZGRpbmcgdGhlIGNvcnJlY3QgbnVtYmVyIHRvIHRoaXMgc3VicmFuZ2UuXG4gICAgICAgICAgICAgICAgICAgIC8vIFJ1biB1cCB0byA8PSBzbyB0aGF0IDEwMCUgZ2V0cyBhIHBvaW50LCBldmVudCBpZiBpZ25vcmVMYXN0IGlzIHNldC5cbiAgICAgICAgICAgICAgICAgICAgZm9yIChxID0gMTsgcSA8PSByZWFsU3RlcHM7IHEgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlIHJhdGlvIGJldHdlZW4gdGhlIHJvdW5kZWQgdmFsdWUgYW5kIHRoZSBhY3R1YWwgc2l6ZSBtaWdodCBiZSB+MSUgb2ZmLlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ29ycmVjdCB0aGUgcGVyY2VudGFnZSBvZmZzZXQgYnkgdGhlIG51bWJlciBvZiBwb2ludHNcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHBlciBzdWJyYW5nZS4gZGVuc2l0eSA9IDEgd2lsbCByZXN1bHQgaW4gMTAwIHBvaW50cyBvbiB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZ1bGwgcmFuZ2UsIDIgZm9yIDUwLCA0IGZvciAyNSwgZXRjLlxuICAgICAgICAgICAgICAgICAgICAgICAgcGN0UG9zID0gcHJldlBjdCArIHEgKiBzdGVwU2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ZXNbcGN0UG9zLnRvRml4ZWQoNSldID0gW3Njb3BlX1NwZWN0cnVtLmZyb21TdGVwcGluZyhwY3RQb3MpLCAwXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBEZXRlcm1pbmUgdGhlIHBvaW50IHR5cGUuXG4gICAgICAgICAgICAgICAgICAgIHR5cGUgPSBncm91cC5pbmRleE9mKGkpID4gLTEgPyBleHBvcnRzLlBpcHNUeXBlLkxhcmdlVmFsdWUgOiBpc1N0ZXBzID8gZXhwb3J0cy5QaXBzVHlwZS5TbWFsbFZhbHVlIDogZXhwb3J0cy5QaXBzVHlwZS5Ob1ZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAvLyBFbmZvcmNlIHRoZSAnaWdub3JlRmlyc3QnIG9wdGlvbiBieSBvdmVyd3JpdGluZyB0aGUgdHlwZSBmb3IgMC5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpbmRleCAmJiBpZ25vcmVGaXJzdCAmJiBpICE9PSBoaWdoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlID0gMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoIShpID09PSBoaWdoICYmIGlnbm9yZUxhc3QpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBNYXJrIHRoZSAndHlwZScgb2YgdGhpcyBwb2ludC4gMCA9IHBsYWluLCAxID0gcmVhbCB2YWx1ZSwgMiA9IHN0ZXAgdmFsdWUuXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleGVzW25ld1BjdC50b0ZpeGVkKDUpXSA9IFtpLCB0eXBlXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgdGhlIHBlcmNlbnRhZ2UgY291bnQuXG4gICAgICAgICAgICAgICAgICAgIHByZXZQY3QgPSBuZXdQY3Q7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gaW5kZXhlcztcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBhZGRNYXJraW5nKHNwcmVhZCwgZmlsdGVyRnVuYywgZm9ybWF0dGVyKSB7XG4gICAgICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBzY29wZV9Eb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgdmFyIHZhbHVlU2l6ZUNsYXNzZXMgPSAoX2EgPSB7fSxcbiAgICAgICAgICAgICAgICBfYVtleHBvcnRzLlBpcHNUeXBlLk5vbmVdID0gXCJcIixcbiAgICAgICAgICAgICAgICBfYVtleHBvcnRzLlBpcHNUeXBlLk5vVmFsdWVdID0gb3B0aW9ucy5jc3NDbGFzc2VzLnZhbHVlTm9ybWFsLFxuICAgICAgICAgICAgICAgIF9hW2V4cG9ydHMuUGlwc1R5cGUuTGFyZ2VWYWx1ZV0gPSBvcHRpb25zLmNzc0NsYXNzZXMudmFsdWVMYXJnZSxcbiAgICAgICAgICAgICAgICBfYVtleHBvcnRzLlBpcHNUeXBlLlNtYWxsVmFsdWVdID0gb3B0aW9ucy5jc3NDbGFzc2VzLnZhbHVlU3ViLFxuICAgICAgICAgICAgICAgIF9hKTtcbiAgICAgICAgICAgIHZhciBtYXJrZXJTaXplQ2xhc3NlcyA9IChfYiA9IHt9LFxuICAgICAgICAgICAgICAgIF9iW2V4cG9ydHMuUGlwc1R5cGUuTm9uZV0gPSBcIlwiLFxuICAgICAgICAgICAgICAgIF9iW2V4cG9ydHMuUGlwc1R5cGUuTm9WYWx1ZV0gPSBvcHRpb25zLmNzc0NsYXNzZXMubWFya2VyTm9ybWFsLFxuICAgICAgICAgICAgICAgIF9iW2V4cG9ydHMuUGlwc1R5cGUuTGFyZ2VWYWx1ZV0gPSBvcHRpb25zLmNzc0NsYXNzZXMubWFya2VyTGFyZ2UsXG4gICAgICAgICAgICAgICAgX2JbZXhwb3J0cy5QaXBzVHlwZS5TbWFsbFZhbHVlXSA9IG9wdGlvbnMuY3NzQ2xhc3Nlcy5tYXJrZXJTdWIsXG4gICAgICAgICAgICAgICAgX2IpO1xuICAgICAgICAgICAgdmFyIHZhbHVlT3JpZW50YXRpb25DbGFzc2VzID0gW29wdGlvbnMuY3NzQ2xhc3Nlcy52YWx1ZUhvcml6b250YWwsIG9wdGlvbnMuY3NzQ2xhc3Nlcy52YWx1ZVZlcnRpY2FsXTtcbiAgICAgICAgICAgIHZhciBtYXJrZXJPcmllbnRhdGlvbkNsYXNzZXMgPSBbb3B0aW9ucy5jc3NDbGFzc2VzLm1hcmtlckhvcml6b250YWwsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5tYXJrZXJWZXJ0aWNhbF07XG4gICAgICAgICAgICBhZGRDbGFzcyhlbGVtZW50LCBvcHRpb25zLmNzc0NsYXNzZXMucGlwcyk7XG4gICAgICAgICAgICBhZGRDbGFzcyhlbGVtZW50LCBvcHRpb25zLm9ydCA9PT0gMCA/IG9wdGlvbnMuY3NzQ2xhc3Nlcy5waXBzSG9yaXpvbnRhbCA6IG9wdGlvbnMuY3NzQ2xhc3Nlcy5waXBzVmVydGljYWwpO1xuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0Q2xhc3Nlcyh0eXBlLCBzb3VyY2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgYSA9IHNvdXJjZSA9PT0gb3B0aW9ucy5jc3NDbGFzc2VzLnZhbHVlO1xuICAgICAgICAgICAgICAgIHZhciBvcmllbnRhdGlvbkNsYXNzZXMgPSBhID8gdmFsdWVPcmllbnRhdGlvbkNsYXNzZXMgOiBtYXJrZXJPcmllbnRhdGlvbkNsYXNzZXM7XG4gICAgICAgICAgICAgICAgdmFyIHNpemVDbGFzc2VzID0gYSA/IHZhbHVlU2l6ZUNsYXNzZXMgOiBtYXJrZXJTaXplQ2xhc3NlcztcbiAgICAgICAgICAgICAgICByZXR1cm4gc291cmNlICsgXCIgXCIgKyBvcmllbnRhdGlvbkNsYXNzZXNbb3B0aW9ucy5vcnRdICsgXCIgXCIgKyBzaXplQ2xhc3Nlc1t0eXBlXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGFkZFNwcmVhZChvZmZzZXQsIHZhbHVlLCB0eXBlKSB7XG4gICAgICAgICAgICAgICAgLy8gQXBwbHkgdGhlIGZpbHRlciBmdW5jdGlvbiwgaWYgaXQgaXMgc2V0LlxuICAgICAgICAgICAgICAgIHR5cGUgPSBmaWx0ZXJGdW5jID8gZmlsdGVyRnVuYyh2YWx1ZSwgdHlwZSkgOiB0eXBlO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSBleHBvcnRzLlBpcHNUeXBlLk5vbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBBZGQgYSBtYXJrZXIgZm9yIGV2ZXJ5IHBvaW50XG4gICAgICAgICAgICAgICAgdmFyIG5vZGUgPSBhZGROb2RlVG8oZWxlbWVudCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIG5vZGUuY2xhc3NOYW1lID0gZ2V0Q2xhc3Nlcyh0eXBlLCBvcHRpb25zLmNzc0NsYXNzZXMubWFya2VyKTtcbiAgICAgICAgICAgICAgICBub2RlLnN0eWxlW29wdGlvbnMuc3R5bGVdID0gb2Zmc2V0ICsgXCIlXCI7XG4gICAgICAgICAgICAgICAgLy8gVmFsdWVzIGFyZSBvbmx5IGFwcGVuZGVkIGZvciBwb2ludHMgbWFya2VkICcxJyBvciAnMicuXG4gICAgICAgICAgICAgICAgaWYgKHR5cGUgPiBleHBvcnRzLlBpcHNUeXBlLk5vVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZSA9IGFkZE5vZGVUbyhlbGVtZW50LCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUuY2xhc3NOYW1lID0gZ2V0Q2xhc3Nlcyh0eXBlLCBvcHRpb25zLmNzc0NsYXNzZXMudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShcImRhdGEtdmFsdWVcIiwgU3RyaW5nKHZhbHVlKSk7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUuc3R5bGVbb3B0aW9ucy5zdHlsZV0gPSBvZmZzZXQgKyBcIiVcIjtcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5pbm5lckhUTUwgPSBTdHJpbmcoZm9ybWF0dGVyLnRvKHZhbHVlKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQXBwZW5kIGFsbCBwb2ludHMuXG4gICAgICAgICAgICBPYmplY3Qua2V5cyhzcHJlYWQpLmZvckVhY2goZnVuY3Rpb24gKG9mZnNldCkge1xuICAgICAgICAgICAgICAgIGFkZFNwcmVhZChvZmZzZXQsIHNwcmVhZFtvZmZzZXRdWzBdLCBzcHJlYWRbb2Zmc2V0XVsxXSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50O1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHJlbW92ZVBpcHMoKSB7XG4gICAgICAgICAgICBpZiAoc2NvcGVfUGlwcykge1xuICAgICAgICAgICAgICAgIHJlbW92ZUVsZW1lbnQoc2NvcGVfUGlwcyk7XG4gICAgICAgICAgICAgICAgc2NvcGVfUGlwcyA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gcGlwcyhwaXBzKSB7XG4gICAgICAgICAgICAvLyBGaXggIzY2OVxuICAgICAgICAgICAgcmVtb3ZlUGlwcygpO1xuICAgICAgICAgICAgdmFyIHNwcmVhZCA9IGdlbmVyYXRlU3ByZWFkKHBpcHMpO1xuICAgICAgICAgICAgdmFyIGZpbHRlciA9IHBpcHMuZmlsdGVyO1xuICAgICAgICAgICAgdmFyIGZvcm1hdCA9IHBpcHMuZm9ybWF0IHx8IHtcbiAgICAgICAgICAgICAgICB0bzogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBTdHJpbmcoTWF0aC5yb3VuZCh2YWx1ZSkpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZnJvbTogTnVtYmVyXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgc2NvcGVfUGlwcyA9IHNjb3BlX1RhcmdldC5hcHBlbmRDaGlsZChhZGRNYXJraW5nKHNwcmVhZCwgZmlsdGVyLCBmb3JtYXQpKTtcbiAgICAgICAgICAgIHJldHVybiBzY29wZV9QaXBzO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNob3J0aGFuZCBmb3IgYmFzZSBkaW1lbnNpb25zLlxuICAgICAgICBmdW5jdGlvbiBiYXNlU2l6ZSgpIHtcbiAgICAgICAgICAgIHZhciByZWN0ID0gc2NvcGVfQmFzZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgIHZhciBhbHQgPSAoXCJvZmZzZXRcIiArIFtcIldpZHRoXCIsIFwiSGVpZ2h0XCJdW29wdGlvbnMub3J0XSk7XG4gICAgICAgICAgICByZXR1cm4gb3B0aW9ucy5vcnQgPT09IDAgPyByZWN0LndpZHRoIHx8IHNjb3BlX0Jhc2VbYWx0XSA6IHJlY3QuaGVpZ2h0IHx8IHNjb3BlX0Jhc2VbYWx0XTtcbiAgICAgICAgfVxuICAgICAgICAvLyBIYW5kbGVyIGZvciBhdHRhY2hpbmcgZXZlbnRzIHRyb3VnaCBhIHByb3h5LlxuICAgICAgICBmdW5jdGlvbiBhdHRhY2hFdmVudChldmVudHMsIGVsZW1lbnQsIGNhbGxiYWNrLCBkYXRhKSB7XG4gICAgICAgICAgICAvLyBUaGlzIGZ1bmN0aW9uIGNhbiBiZSB1c2VkIHRvICdmaWx0ZXInIGV2ZW50cyB0byB0aGUgc2xpZGVyLlxuICAgICAgICAgICAgLy8gZWxlbWVudCBpcyBhIG5vZGUsIG5vdCBhIG5vZGVMaXN0XG4gICAgICAgICAgICB2YXIgbWV0aG9kID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIGUgPSBmaXhFdmVudChldmVudCwgZGF0YS5wYWdlT2Zmc2V0LCBkYXRhLnRhcmdldCB8fCBlbGVtZW50KTtcbiAgICAgICAgICAgICAgICAvLyBmaXhFdmVudCByZXR1cm5zIGZhbHNlIGlmIHRoaXMgZXZlbnQgaGFzIGEgZGlmZmVyZW50IHRhcmdldFxuICAgICAgICAgICAgICAgIC8vIHdoZW4gaGFuZGxpbmcgKG11bHRpLSkgdG91Y2ggZXZlbnRzO1xuICAgICAgICAgICAgICAgIGlmICghZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGRvTm90UmVqZWN0IGlzIHBhc3NlZCBieSBhbGwgZW5kIGV2ZW50cyB0byBtYWtlIHN1cmUgcmVsZWFzZWQgdG91Y2hlc1xuICAgICAgICAgICAgICAgIC8vIGFyZSBub3QgcmVqZWN0ZWQsIGxlYXZpbmcgdGhlIHNsaWRlciBcInN0dWNrXCIgdG8gdGhlIGN1cnNvcjtcbiAgICAgICAgICAgICAgICBpZiAoaXNTbGlkZXJEaXNhYmxlZCgpICYmICFkYXRhLmRvTm90UmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gU3RvcCBpZiBhbiBhY3RpdmUgJ3RhcCcgdHJhbnNpdGlvbiBpcyB0YWtpbmcgcGxhY2UuXG4gICAgICAgICAgICAgICAgaWYgKGhhc0NsYXNzKHNjb3BlX1RhcmdldCwgb3B0aW9ucy5jc3NDbGFzc2VzLnRhcCkgJiYgIWRhdGEuZG9Ob3RSZWplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBJZ25vcmUgcmlnaHQgb3IgbWlkZGxlIGNsaWNrcyBvbiBzdGFydCAjNDU0XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50cyA9PT0gYWN0aW9ucy5zdGFydCAmJiBlLmJ1dHRvbnMgIT09IHVuZGVmaW5lZCAmJiBlLmJ1dHRvbnMgPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gSWdub3JlIHJpZ2h0IG9yIG1pZGRsZSBjbGlja3Mgb24gc3RhcnQgIzQ1NFxuICAgICAgICAgICAgICAgIGlmIChkYXRhLmhvdmVyICYmIGUuYnV0dG9ucykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vICdzdXBwb3J0c1Bhc3NpdmUnIGlzIG9ubHkgdHJ1ZSBpZiBhIGJyb3dzZXIgYWxzbyBzdXBwb3J0cyB0b3VjaC1hY3Rpb246IG5vbmUgaW4gQ1NTLlxuICAgICAgICAgICAgICAgIC8vIGlPUyBzYWZhcmkgZG9lcyBub3QsIHNvIGl0IGRvZXNuJ3QgZ2V0IHRvIGJlbmVmaXQgZnJvbSBwYXNzaXZlIHNjcm9sbGluZy4gaU9TIGRvZXMgc3VwcG9ydFxuICAgICAgICAgICAgICAgIC8vIHRvdWNoLWFjdGlvbjogbWFuaXB1bGF0aW9uLCBidXQgdGhhdCBhbGxvd3MgcGFubmluZywgd2hpY2ggYnJlYWtzXG4gICAgICAgICAgICAgICAgLy8gc2xpZGVycyBhZnRlciB6b29taW5nL29uIG5vbi1yZXNwb25zaXZlIHBhZ2VzLlxuICAgICAgICAgICAgICAgIC8vIFNlZTogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzMzExMlxuICAgICAgICAgICAgICAgIGlmICghc3VwcG9ydHNQYXNzaXZlKSB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZS5jYWxjUG9pbnQgPSBlLnBvaW50c1tvcHRpb25zLm9ydF07XG4gICAgICAgICAgICAgICAgLy8gQ2FsbCB0aGUgZXZlbnQgaGFuZGxlciB3aXRoIHRoZSBldmVudCBbIGFuZCBhZGRpdGlvbmFsIGRhdGEgXS5cbiAgICAgICAgICAgICAgICBjYWxsYmFjayhlLCBkYXRhKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIG1ldGhvZHMgPSBbXTtcbiAgICAgICAgICAgIC8vIEJpbmQgYSBjbG9zdXJlIG9uIHRoZSB0YXJnZXQgZm9yIGV2ZXJ5IGV2ZW50IHR5cGUuXG4gICAgICAgICAgICBldmVudHMuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50TmFtZSkge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIG1ldGhvZCwgc3VwcG9ydHNQYXNzaXZlID8geyBwYXNzaXZlOiB0cnVlIH0gOiBmYWxzZSk7XG4gICAgICAgICAgICAgICAgbWV0aG9kcy5wdXNoKFtldmVudE5hbWUsIG1ldGhvZF0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gbWV0aG9kcztcbiAgICAgICAgfVxuICAgICAgICAvLyBQcm92aWRlIGEgY2xlYW4gZXZlbnQgd2l0aCBzdGFuZGFyZGl6ZWQgb2Zmc2V0IHZhbHVlcy5cbiAgICAgICAgZnVuY3Rpb24gZml4RXZlbnQoZSwgcGFnZU9mZnNldCwgZXZlbnRUYXJnZXQpIHtcbiAgICAgICAgICAgIC8vIEZpbHRlciB0aGUgZXZlbnQgdG8gcmVnaXN0ZXIgdGhlIHR5cGUsIHdoaWNoIGNhbiBiZVxuICAgICAgICAgICAgLy8gdG91Y2gsIG1vdXNlIG9yIHBvaW50ZXIuIE9mZnNldCBjaGFuZ2VzIG5lZWQgdG8gYmVcbiAgICAgICAgICAgIC8vIG1hZGUgb24gYW4gZXZlbnQgc3BlY2lmaWMgYmFzaXMuXG4gICAgICAgICAgICB2YXIgdG91Y2ggPSBlLnR5cGUuaW5kZXhPZihcInRvdWNoXCIpID09PSAwO1xuICAgICAgICAgICAgdmFyIG1vdXNlID0gZS50eXBlLmluZGV4T2YoXCJtb3VzZVwiKSA9PT0gMDtcbiAgICAgICAgICAgIHZhciBwb2ludGVyID0gZS50eXBlLmluZGV4T2YoXCJwb2ludGVyXCIpID09PSAwO1xuICAgICAgICAgICAgdmFyIHggPSAwO1xuICAgICAgICAgICAgdmFyIHkgPSAwO1xuICAgICAgICAgICAgLy8gSUUxMCBpbXBsZW1lbnRlZCBwb2ludGVyIGV2ZW50cyB3aXRoIGEgcHJlZml4O1xuICAgICAgICAgICAgaWYgKGUudHlwZS5pbmRleE9mKFwiTVNQb2ludGVyXCIpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcG9pbnRlciA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBFcnJvbmVvdXMgZXZlbnRzIHNlZW0gdG8gYmUgcGFzc2VkIGluIG9jY2FzaW9uYWxseSBvbiBpT1MvaVBhZE9TIGFmdGVyIHVzZXIgZmluaXNoZXMgaW50ZXJhY3Rpbmcgd2l0aFxuICAgICAgICAgICAgLy8gdGhlIHNsaWRlci4gVGhleSBhcHBlYXIgdG8gYmUgb2YgdHlwZSBNb3VzZUV2ZW50LCB5ZXQgdGhleSBkb24ndCBoYXZlIHVzdWFsIHByb3BlcnRpZXMgc2V0LiBJZ25vcmVcbiAgICAgICAgICAgIC8vIGV2ZW50cyB0aGF0IGhhdmUgbm8gdG91Y2hlcyBvciBidXR0b25zIGFzc29jaWF0ZWQgd2l0aCB0aGVtLiAoIzEwNTcsICMxMDc5LCAjMTA5NSlcbiAgICAgICAgICAgIGlmIChlLnR5cGUgPT09IFwibW91c2Vkb3duXCIgJiYgIWUuYnV0dG9ucyAmJiAhZS50b3VjaGVzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVGhlIG9ubHkgdGhpbmcgb25lIGhhbmRsZSBzaG91bGQgYmUgY29uY2VybmVkIGFib3V0IGlzIHRoZSB0b3VjaGVzIHRoYXQgb3JpZ2luYXRlZCBvbiB0b3Agb2YgaXQuXG4gICAgICAgICAgICBpZiAodG91Y2gpIHtcbiAgICAgICAgICAgICAgICAvLyBSZXR1cm5zIHRydWUgaWYgYSB0b3VjaCBvcmlnaW5hdGVkIG9uIHRoZSB0YXJnZXQuXG4gICAgICAgICAgICAgICAgdmFyIGlzVG91Y2hPblRhcmdldCA9IGZ1bmN0aW9uIChjaGVja1RvdWNoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSBjaGVja1RvdWNoLnRhcmdldDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICh0YXJnZXQgPT09IGV2ZW50VGFyZ2V0IHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudFRhcmdldC5jb250YWlucyh0YXJnZXQpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAoZS5jb21wb3NlZCAmJiBlLmNvbXBvc2VkUGF0aCgpLnNoaWZ0KCkgPT09IGV2ZW50VGFyZ2V0KSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAvLyBJbiB0aGUgY2FzZSBvZiB0b3VjaHN0YXJ0IGV2ZW50cywgd2UgbmVlZCB0byBtYWtlIHN1cmUgdGhlcmUgaXMgc3RpbGwgbm8gbW9yZSB0aGFuIG9uZVxuICAgICAgICAgICAgICAgIC8vIHRvdWNoIG9uIHRoZSB0YXJnZXQgc28gd2UgbG9vayBhbW9uZ3N0IGFsbCB0b3VjaGVzLlxuICAgICAgICAgICAgICAgIGlmIChlLnR5cGUgPT09IFwidG91Y2hzdGFydFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXRUb3VjaGVzID0gQXJyYXkucHJvdG90eXBlLmZpbHRlci5jYWxsKGUudG91Y2hlcywgaXNUb3VjaE9uVGFyZ2V0KTtcbiAgICAgICAgICAgICAgICAgICAgLy8gRG8gbm90IHN1cHBvcnQgbW9yZSB0aGFuIG9uZSB0b3VjaCBwZXIgaGFuZGxlLlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0VG91Y2hlcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgeCA9IHRhcmdldFRvdWNoZXNbMF0ucGFnZVg7XG4gICAgICAgICAgICAgICAgICAgIHkgPSB0YXJnZXRUb3VjaGVzWzBdLnBhZ2VZO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSW4gdGhlIG90aGVyIGNhc2VzLCBmaW5kIG9uIGNoYW5nZWRUb3VjaGVzIGlzIGVub3VnaC5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldFRvdWNoID0gQXJyYXkucHJvdG90eXBlLmZpbmQuY2FsbChlLmNoYW5nZWRUb3VjaGVzLCBpc1RvdWNoT25UYXJnZXQpO1xuICAgICAgICAgICAgICAgICAgICAvLyBDYW5jZWwgaWYgdGhlIHRhcmdldCB0b3VjaCBoYXMgbm90IG1vdmVkLlxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRhcmdldFRvdWNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgeCA9IHRhcmdldFRvdWNoLnBhZ2VYO1xuICAgICAgICAgICAgICAgICAgICB5ID0gdGFyZ2V0VG91Y2gucGFnZVk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFnZU9mZnNldCA9IHBhZ2VPZmZzZXQgfHwgZ2V0UGFnZU9mZnNldChzY29wZV9Eb2N1bWVudCk7XG4gICAgICAgICAgICBpZiAobW91c2UgfHwgcG9pbnRlcikge1xuICAgICAgICAgICAgICAgIHggPSBlLmNsaWVudFggKyBwYWdlT2Zmc2V0Lng7XG4gICAgICAgICAgICAgICAgeSA9IGUuY2xpZW50WSArIHBhZ2VPZmZzZXQueTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGUucGFnZU9mZnNldCA9IHBhZ2VPZmZzZXQ7XG4gICAgICAgICAgICBlLnBvaW50cyA9IFt4LCB5XTtcbiAgICAgICAgICAgIGUuY3Vyc29yID0gbW91c2UgfHwgcG9pbnRlcjsgLy8gRml4ICM0MzVcbiAgICAgICAgICAgIHJldHVybiBlO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRyYW5zbGF0ZSBhIGNvb3JkaW5hdGUgaW4gdGhlIGRvY3VtZW50IHRvIGEgcGVyY2VudGFnZSBvbiB0aGUgc2xpZGVyXG4gICAgICAgIGZ1bmN0aW9uIGNhbGNQb2ludFRvUGVyY2VudGFnZShjYWxjUG9pbnQpIHtcbiAgICAgICAgICAgIHZhciBsb2NhdGlvbiA9IGNhbGNQb2ludCAtIG9mZnNldChzY29wZV9CYXNlLCBvcHRpb25zLm9ydCk7XG4gICAgICAgICAgICB2YXIgcHJvcG9zYWwgPSAobG9jYXRpb24gKiAxMDApIC8gYmFzZVNpemUoKTtcbiAgICAgICAgICAgIC8vIENsYW1wIHByb3Bvc2FsIGJldHdlZW4gMCUgYW5kIDEwMCVcbiAgICAgICAgICAgIC8vIE91dC1vZi1ib3VuZCBjb29yZGluYXRlcyBtYXkgb2NjdXIgd2hlbiAubm9VaS1iYXNlIHBzZXVkby1lbGVtZW50c1xuICAgICAgICAgICAgLy8gYXJlIHVzZWQgKGUuZy4gY29udGFpbmVkIGhhbmRsZXMgZmVhdHVyZSlcbiAgICAgICAgICAgIHByb3Bvc2FsID0gbGltaXQocHJvcG9zYWwpO1xuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuZGlyID8gMTAwIC0gcHJvcG9zYWwgOiBwcm9wb3NhbDtcbiAgICAgICAgfVxuICAgICAgICAvLyBGaW5kIGhhbmRsZSBjbG9zZXN0IHRvIGEgY2VydGFpbiBwZXJjZW50YWdlIG9uIHRoZSBzbGlkZXJcbiAgICAgICAgZnVuY3Rpb24gZ2V0Q2xvc2VzdEhhbmRsZShjbGlja2VkUG9zaXRpb24pIHtcbiAgICAgICAgICAgIHZhciBzbWFsbGVzdERpZmZlcmVuY2UgPSAxMDA7XG4gICAgICAgICAgICB2YXIgaGFuZGxlTnVtYmVyID0gZmFsc2U7XG4gICAgICAgICAgICBzY29wZV9IYW5kbGVzLmZvckVhY2goZnVuY3Rpb24gKGhhbmRsZSwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAvLyBEaXNhYmxlZCBoYW5kbGVzIGFyZSBpZ25vcmVkXG4gICAgICAgICAgICAgICAgaWYgKGlzSGFuZGxlRGlzYWJsZWQoaW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGhhbmRsZVBvc2l0aW9uID0gc2NvcGVfTG9jYXRpb25zW2luZGV4XTtcbiAgICAgICAgICAgICAgICB2YXIgZGlmZmVyZW5jZVdpdGhUaGlzSGFuZGxlID0gTWF0aC5hYnMoaGFuZGxlUG9zaXRpb24gLSBjbGlja2VkUG9zaXRpb24pO1xuICAgICAgICAgICAgICAgIC8vIEluaXRpYWwgc3RhdGVcbiAgICAgICAgICAgICAgICB2YXIgY2xpY2tBdEVkZ2UgPSBkaWZmZXJlbmNlV2l0aFRoaXNIYW5kbGUgPT09IDEwMCAmJiBzbWFsbGVzdERpZmZlcmVuY2UgPT09IDEwMDtcbiAgICAgICAgICAgICAgICAvLyBEaWZmZXJlbmNlIHdpdGggdGhpcyBoYW5kbGUgaXMgc21hbGxlciB0aGFuIHRoZSBwcmV2aW91c2x5IGNoZWNrZWQgaGFuZGxlXG4gICAgICAgICAgICAgICAgdmFyIGlzQ2xvc2VyID0gZGlmZmVyZW5jZVdpdGhUaGlzSGFuZGxlIDwgc21hbGxlc3REaWZmZXJlbmNlO1xuICAgICAgICAgICAgICAgIHZhciBpc0Nsb3NlckFmdGVyID0gZGlmZmVyZW5jZVdpdGhUaGlzSGFuZGxlIDw9IHNtYWxsZXN0RGlmZmVyZW5jZSAmJiBjbGlja2VkUG9zaXRpb24gPiBoYW5kbGVQb3NpdGlvbjtcbiAgICAgICAgICAgICAgICBpZiAoaXNDbG9zZXIgfHwgaXNDbG9zZXJBZnRlciB8fCBjbGlja0F0RWRnZSkge1xuICAgICAgICAgICAgICAgICAgICBoYW5kbGVOdW1iZXIgPSBpbmRleDtcbiAgICAgICAgICAgICAgICAgICAgc21hbGxlc3REaWZmZXJlbmNlID0gZGlmZmVyZW5jZVdpdGhUaGlzSGFuZGxlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZU51bWJlcjtcbiAgICAgICAgfVxuICAgICAgICAvLyBGaXJlICdlbmQnIHdoZW4gYSBtb3VzZSBvciBwZW4gbGVhdmVzIHRoZSBkb2N1bWVudC5cbiAgICAgICAgZnVuY3Rpb24gZG9jdW1lbnRMZWF2ZShldmVudCwgZGF0YSkge1xuICAgICAgICAgICAgaWYgKGV2ZW50LnR5cGUgPT09IFwibW91c2VvdXRcIiAmJlxuICAgICAgICAgICAgICAgIGV2ZW50LnRhcmdldC5ub2RlTmFtZSA9PT0gXCJIVE1MXCIgJiZcbiAgICAgICAgICAgICAgICBldmVudC5yZWxhdGVkVGFyZ2V0ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZXZlbnRFbmQoZXZlbnQsIGRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIEhhbmRsZSBtb3ZlbWVudCBvbiBkb2N1bWVudCBmb3IgaGFuZGxlIGFuZCByYW5nZSBkcmFnLlxuICAgICAgICBmdW5jdGlvbiBldmVudE1vdmUoZXZlbnQsIGRhdGEpIHtcbiAgICAgICAgICAgIC8vIEZpeCAjNDk4XG4gICAgICAgICAgICAvLyBDaGVjayB2YWx1ZSBvZiAuYnV0dG9ucyBpbiAnc3RhcnQnIHRvIHdvcmsgYXJvdW5kIGEgYnVnIGluIElFMTAgbW9iaWxlIChkYXRhLmJ1dHRvbnNQcm9wZXJ0eSkuXG4gICAgICAgICAgICAvLyBodHRwczovL2Nvbm5lY3QubWljcm9zb2Z0LmNvbS9JRS9mZWVkYmFjay9kZXRhaWxzLzkyNzAwNS9tb2JpbGUtaWUxMC13aW5kb3dzLXBob25lLWJ1dHRvbnMtcHJvcGVydHktb2YtcG9pbnRlcm1vdmUtZXZlbnQtYWx3YXlzLXplcm9cbiAgICAgICAgICAgIC8vIElFOSBoYXMgLmJ1dHRvbnMgYW5kIC53aGljaCB6ZXJvIG9uIG1vdXNlbW92ZS5cbiAgICAgICAgICAgIC8vIEZpcmVmb3ggYnJlYWtzIHRoZSBzcGVjIE1ETiBkZWZpbmVzLlxuICAgICAgICAgICAgaWYgKG5hdmlnYXRvci5hcHBWZXJzaW9uLmluZGV4T2YoXCJNU0lFIDlcIikgPT09IC0xICYmIGV2ZW50LmJ1dHRvbnMgPT09IDAgJiYgZGF0YS5idXR0b25zUHJvcGVydHkgIT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXZlbnRFbmQoZXZlbnQsIGRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgd2UgYXJlIG1vdmluZyB1cCBvciBkb3duXG4gICAgICAgICAgICB2YXIgbW92ZW1lbnQgPSAob3B0aW9ucy5kaXIgPyAtMSA6IDEpICogKGV2ZW50LmNhbGNQb2ludCAtIGRhdGEuc3RhcnRDYWxjUG9pbnQpO1xuICAgICAgICAgICAgLy8gQ29udmVydCB0aGUgbW92ZW1lbnQgaW50byBhIHBlcmNlbnRhZ2Ugb2YgdGhlIHNsaWRlciB3aWR0aC9oZWlnaHRcbiAgICAgICAgICAgIHZhciBwcm9wb3NhbCA9IChtb3ZlbWVudCAqIDEwMCkgLyBkYXRhLmJhc2VTaXplO1xuICAgICAgICAgICAgbW92ZUhhbmRsZXMobW92ZW1lbnQgPiAwLCBwcm9wb3NhbCwgZGF0YS5sb2NhdGlvbnMsIGRhdGEuaGFuZGxlTnVtYmVycywgZGF0YS5jb25uZWN0KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBVbmJpbmQgbW92ZSBldmVudHMgb24gZG9jdW1lbnQsIGNhbGwgY2FsbGJhY2tzLlxuICAgICAgICBmdW5jdGlvbiBldmVudEVuZChldmVudCwgZGF0YSkge1xuICAgICAgICAgICAgLy8gVGhlIGhhbmRsZSBpcyBubyBsb25nZXIgYWN0aXZlLCBzbyByZW1vdmUgdGhlIGNsYXNzLlxuICAgICAgICAgICAgaWYgKGRhdGEuaGFuZGxlKSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3MoZGF0YS5oYW5kbGUsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5hY3RpdmUpO1xuICAgICAgICAgICAgICAgIHNjb3BlX0FjdGl2ZUhhbmRsZXNDb3VudCAtPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVW5iaW5kIHRoZSBtb3ZlIGFuZCBlbmQgZXZlbnRzLCB3aGljaCBhcmUgYWRkZWQgb24gJ3N0YXJ0Jy5cbiAgICAgICAgICAgIGRhdGEubGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgICAgICBzY29wZV9Eb2N1bWVudEVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihjWzBdLCBjWzFdKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHNjb3BlX0FjdGl2ZUhhbmRsZXNDb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBkcmFnZ2luZyBjbGFzcy5cbiAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyhzY29wZV9UYXJnZXQsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5kcmFnKTtcbiAgICAgICAgICAgICAgICBzZXRaaW5kZXgoKTtcbiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgY3Vyc29yIHN0eWxlcyBhbmQgdGV4dC1zZWxlY3Rpb24gZXZlbnRzIGJvdW5kIHRvIHRoZSBib2R5LlxuICAgICAgICAgICAgICAgIGlmIChldmVudC5jdXJzb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgc2NvcGVfQm9keS5zdHlsZS5jdXJzb3IgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICBzY29wZV9Cb2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzZWxlY3RzdGFydFwiLCBwcmV2ZW50RGVmYXVsdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGF0YS5oYW5kbGVOdW1iZXJzLmZvckVhY2goZnVuY3Rpb24gKGhhbmRsZU51bWJlcikge1xuICAgICAgICAgICAgICAgIGZpcmVFdmVudChcImNoYW5nZVwiLCBoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgICAgIGZpcmVFdmVudChcInNldFwiLCBoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgICAgIGZpcmVFdmVudChcImVuZFwiLCBoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQmluZCBtb3ZlIGV2ZW50cyBvbiBkb2N1bWVudC5cbiAgICAgICAgZnVuY3Rpb24gZXZlbnRTdGFydChldmVudCwgZGF0YSkge1xuICAgICAgICAgICAgLy8gSWdub3JlIGV2ZW50IGlmIGFueSBoYW5kbGUgaXMgZGlzYWJsZWRcbiAgICAgICAgICAgIGlmIChkYXRhLmhhbmRsZU51bWJlcnMuc29tZShpc0hhbmRsZURpc2FibGVkKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBoYW5kbGU7XG4gICAgICAgICAgICBpZiAoZGF0YS5oYW5kbGVOdW1iZXJzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHZhciBoYW5kbGVPcmlnaW4gPSBzY29wZV9IYW5kbGVzW2RhdGEuaGFuZGxlTnVtYmVyc1swXV07XG4gICAgICAgICAgICAgICAgaGFuZGxlID0gaGFuZGxlT3JpZ2luLmNoaWxkcmVuWzBdO1xuICAgICAgICAgICAgICAgIHNjb3BlX0FjdGl2ZUhhbmRsZXNDb3VudCArPSAxO1xuICAgICAgICAgICAgICAgIC8vIE1hcmsgdGhlIGhhbmRsZSBhcyAnYWN0aXZlJyBzbyBpdCBjYW4gYmUgc3R5bGVkLlxuICAgICAgICAgICAgICAgIGFkZENsYXNzKGhhbmRsZSwgb3B0aW9ucy5jc3NDbGFzc2VzLmFjdGl2ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBBIGRyYWcgc2hvdWxkIG5ldmVyIHByb3BhZ2F0ZSB1cCB0byB0aGUgJ3RhcCcgZXZlbnQuXG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIC8vIFJlY29yZCB0aGUgZXZlbnQgbGlzdGVuZXJzLlxuICAgICAgICAgICAgdmFyIGxpc3RlbmVycyA9IFtdO1xuICAgICAgICAgICAgLy8gQXR0YWNoIHRoZSBtb3ZlIGFuZCBlbmQgZXZlbnRzLlxuICAgICAgICAgICAgdmFyIG1vdmVFdmVudCA9IGF0dGFjaEV2ZW50KGFjdGlvbnMubW92ZSwgc2NvcGVfRG9jdW1lbnRFbGVtZW50LCBldmVudE1vdmUsIHtcbiAgICAgICAgICAgICAgICAvLyBUaGUgZXZlbnQgdGFyZ2V0IGhhcyBjaGFuZ2VkIHNvIHdlIG5lZWQgdG8gcHJvcGFnYXRlIHRoZSBvcmlnaW5hbCBvbmUgc28gdGhhdCB3ZSBrZWVwXG4gICAgICAgICAgICAgICAgLy8gcmVseWluZyBvbiBpdCB0byBleHRyYWN0IHRhcmdldCB0b3VjaGVzLlxuICAgICAgICAgICAgICAgIHRhcmdldDogZXZlbnQudGFyZ2V0LFxuICAgICAgICAgICAgICAgIGhhbmRsZTogaGFuZGxlLFxuICAgICAgICAgICAgICAgIGNvbm5lY3Q6IGRhdGEuY29ubmVjdCxcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcnM6IGxpc3RlbmVycyxcbiAgICAgICAgICAgICAgICBzdGFydENhbGNQb2ludDogZXZlbnQuY2FsY1BvaW50LFxuICAgICAgICAgICAgICAgIGJhc2VTaXplOiBiYXNlU2l6ZSgpLFxuICAgICAgICAgICAgICAgIHBhZ2VPZmZzZXQ6IGV2ZW50LnBhZ2VPZmZzZXQsXG4gICAgICAgICAgICAgICAgaGFuZGxlTnVtYmVyczogZGF0YS5oYW5kbGVOdW1iZXJzLFxuICAgICAgICAgICAgICAgIGJ1dHRvbnNQcm9wZXJ0eTogZXZlbnQuYnV0dG9ucyxcbiAgICAgICAgICAgICAgICBsb2NhdGlvbnM6IHNjb3BlX0xvY2F0aW9ucy5zbGljZSgpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZhciBlbmRFdmVudCA9IGF0dGFjaEV2ZW50KGFjdGlvbnMuZW5kLCBzY29wZV9Eb2N1bWVudEVsZW1lbnQsIGV2ZW50RW5kLCB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBldmVudC50YXJnZXQsXG4gICAgICAgICAgICAgICAgaGFuZGxlOiBoYW5kbGUsXG4gICAgICAgICAgICAgICAgbGlzdGVuZXJzOiBsaXN0ZW5lcnMsXG4gICAgICAgICAgICAgICAgZG9Ob3RSZWplY3Q6IHRydWUsXG4gICAgICAgICAgICAgICAgaGFuZGxlTnVtYmVyczogZGF0YS5oYW5kbGVOdW1iZXJzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZhciBvdXRFdmVudCA9IGF0dGFjaEV2ZW50KFwibW91c2VvdXRcIiwgc2NvcGVfRG9jdW1lbnRFbGVtZW50LCBkb2N1bWVudExlYXZlLCB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBldmVudC50YXJnZXQsXG4gICAgICAgICAgICAgICAgaGFuZGxlOiBoYW5kbGUsXG4gICAgICAgICAgICAgICAgbGlzdGVuZXJzOiBsaXN0ZW5lcnMsXG4gICAgICAgICAgICAgICAgZG9Ob3RSZWplY3Q6IHRydWUsXG4gICAgICAgICAgICAgICAgaGFuZGxlTnVtYmVyczogZGF0YS5oYW5kbGVOdW1iZXJzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIFdlIHdhbnQgdG8gbWFrZSBzdXJlIHdlIHB1c2hlZCB0aGUgbGlzdGVuZXJzIGluIHRoZSBsaXN0ZW5lciBsaXN0IHJhdGhlciB0aGFuIGNyZWF0aW5nXG4gICAgICAgICAgICAvLyBhIG5ldyBvbmUgYXMgaXQgaGFzIGFscmVhZHkgYmVlbiBwYXNzZWQgdG8gdGhlIGV2ZW50IGhhbmRsZXJzLlxuICAgICAgICAgICAgbGlzdGVuZXJzLnB1c2guYXBwbHkobGlzdGVuZXJzLCBtb3ZlRXZlbnQuY29uY2F0KGVuZEV2ZW50LCBvdXRFdmVudCkpO1xuICAgICAgICAgICAgLy8gVGV4dCBzZWxlY3Rpb24gaXNuJ3QgYW4gaXNzdWUgb24gdG91Y2ggZGV2aWNlcyxcbiAgICAgICAgICAgIC8vIHNvIGFkZGluZyBjdXJzb3Igc3R5bGVzIGNhbiBiZSBza2lwcGVkLlxuICAgICAgICAgICAgaWYgKGV2ZW50LmN1cnNvcikge1xuICAgICAgICAgICAgICAgIC8vIFByZXZlbnQgdGhlICdJJyBjdXJzb3IgYW5kIGV4dGVuZCB0aGUgcmFuZ2UtZHJhZyBjdXJzb3IuXG4gICAgICAgICAgICAgICAgc2NvcGVfQm9keS5zdHlsZS5jdXJzb3IgPSBnZXRDb21wdXRlZFN0eWxlKGV2ZW50LnRhcmdldCkuY3Vyc29yO1xuICAgICAgICAgICAgICAgIC8vIE1hcmsgdGhlIHRhcmdldCB3aXRoIGEgZHJhZ2dpbmcgc3RhdGUuXG4gICAgICAgICAgICAgICAgaWYgKHNjb3BlX0hhbmRsZXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgICAgICBhZGRDbGFzcyhzY29wZV9UYXJnZXQsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5kcmFnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gUHJldmVudCB0ZXh0IHNlbGVjdGlvbiB3aGVuIGRyYWdnaW5nIHRoZSBoYW5kbGVzLlxuICAgICAgICAgICAgICAgIC8vIEluIG5vVWlTbGlkZXIgPD0gOS4yLjAsIHRoaXMgd2FzIGhhbmRsZWQgYnkgY2FsbGluZyBwcmV2ZW50RGVmYXVsdCBvbiBtb3VzZS90b3VjaCBzdGFydC9tb3ZlLFxuICAgICAgICAgICAgICAgIC8vIHdoaWNoIGlzIHNjcm9sbCBibG9ja2luZy4gVGhlIHNlbGVjdHN0YXJ0IGV2ZW50IGlzIHN1cHBvcnRlZCBieSBGaXJlRm94IHN0YXJ0aW5nIGZyb20gdmVyc2lvbiA1MixcbiAgICAgICAgICAgICAgICAvLyBtZWFuaW5nIHRoZSBvbmx5IGhvbGRvdXQgaXMgaU9TIFNhZmFyaS4gVGhpcyBkb2Vzbid0IG1hdHRlcjogdGV4dCBzZWxlY3Rpb24gaXNuJ3QgdHJpZ2dlcmVkIHRoZXJlLlxuICAgICAgICAgICAgICAgIC8vIFRoZSAnY3Vyc29yJyBmbGFnIGlzIGZhbHNlLlxuICAgICAgICAgICAgICAgIC8vIFNlZTogaHR0cDovL2Nhbml1c2UuY29tLyNzZWFyY2g9c2VsZWN0c3RhcnRcbiAgICAgICAgICAgICAgICBzY29wZV9Cb2R5LmFkZEV2ZW50TGlzdGVuZXIoXCJzZWxlY3RzdGFydFwiLCBwcmV2ZW50RGVmYXVsdCwgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGF0YS5oYW5kbGVOdW1iZXJzLmZvckVhY2goZnVuY3Rpb24gKGhhbmRsZU51bWJlcikge1xuICAgICAgICAgICAgICAgIGZpcmVFdmVudChcInN0YXJ0XCIsIGhhbmRsZU51bWJlcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBNb3ZlIGNsb3Nlc3QgaGFuZGxlIHRvIHRhcHBlZCBsb2NhdGlvbi5cbiAgICAgICAgZnVuY3Rpb24gZXZlbnRUYXAoZXZlbnQpIHtcbiAgICAgICAgICAgIC8vIFRoZSB0YXAgZXZlbnQgc2hvdWxkbid0IHByb3BhZ2F0ZSB1cFxuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICB2YXIgcHJvcG9zYWwgPSBjYWxjUG9pbnRUb1BlcmNlbnRhZ2UoZXZlbnQuY2FsY1BvaW50KTtcbiAgICAgICAgICAgIHZhciBoYW5kbGVOdW1iZXIgPSBnZXRDbG9zZXN0SGFuZGxlKHByb3Bvc2FsKTtcbiAgICAgICAgICAgIC8vIFRhY2tsZSB0aGUgY2FzZSB0aGF0IGFsbCBoYW5kbGVzIGFyZSAnZGlzYWJsZWQnLlxuICAgICAgICAgICAgaWYgKGhhbmRsZU51bWJlciA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBGbGFnIHRoZSBzbGlkZXIgYXMgaXQgaXMgbm93IGluIGEgdHJhbnNpdGlvbmFsIHN0YXRlLlxuICAgICAgICAgICAgLy8gVHJhbnNpdGlvbiB0YWtlcyBhIGNvbmZpZ3VyYWJsZSBhbW91bnQgb2YgbXMgKGRlZmF1bHQgMzAwKS4gUmUtZW5hYmxlIHRoZSBzbGlkZXIgYWZ0ZXIgdGhhdC5cbiAgICAgICAgICAgIGlmICghb3B0aW9ucy5ldmVudHMuc25hcCkge1xuICAgICAgICAgICAgICAgIGFkZENsYXNzRm9yKHNjb3BlX1RhcmdldCwgb3B0aW9ucy5jc3NDbGFzc2VzLnRhcCwgb3B0aW9ucy5hbmltYXRpb25EdXJhdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZXRIYW5kbGUoaGFuZGxlTnVtYmVyLCBwcm9wb3NhbCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICBzZXRaaW5kZXgoKTtcbiAgICAgICAgICAgIGZpcmVFdmVudChcInNsaWRlXCIsIGhhbmRsZU51bWJlciwgdHJ1ZSk7XG4gICAgICAgICAgICBmaXJlRXZlbnQoXCJ1cGRhdGVcIiwgaGFuZGxlTnVtYmVyLCB0cnVlKTtcbiAgICAgICAgICAgIGZpcmVFdmVudChcImNoYW5nZVwiLCBoYW5kbGVOdW1iZXIsIHRydWUpO1xuICAgICAgICAgICAgZmlyZUV2ZW50KFwic2V0XCIsIGhhbmRsZU51bWJlciwgdHJ1ZSk7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5ldmVudHMuc25hcCkge1xuICAgICAgICAgICAgICAgIGV2ZW50U3RhcnQoZXZlbnQsIHsgaGFuZGxlTnVtYmVyczogW2hhbmRsZU51bWJlcl0gfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gRmlyZXMgYSAnaG92ZXInIGV2ZW50IGZvciBhIGhvdmVyZWQgbW91c2UvcGVuIHBvc2l0aW9uLlxuICAgICAgICBmdW5jdGlvbiBldmVudEhvdmVyKGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgcHJvcG9zYWwgPSBjYWxjUG9pbnRUb1BlcmNlbnRhZ2UoZXZlbnQuY2FsY1BvaW50KTtcbiAgICAgICAgICAgIHZhciB0byA9IHNjb3BlX1NwZWN0cnVtLmdldFN0ZXAocHJvcG9zYWwpO1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gc2NvcGVfU3BlY3RydW0uZnJvbVN0ZXBwaW5nKHRvKTtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHNjb3BlX0V2ZW50cykuZm9yRWFjaChmdW5jdGlvbiAodGFyZ2V0RXZlbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoXCJob3ZlclwiID09PSB0YXJnZXRFdmVudC5zcGxpdChcIi5cIilbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgc2NvcGVfRXZlbnRzW3RhcmdldEV2ZW50XS5mb3JFYWNoKGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbChzY29wZV9TZWxmLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIEhhbmRsZXMga2V5ZG93biBvbiBmb2N1c2VkIGhhbmRsZXNcbiAgICAgICAgLy8gRG9uJ3QgbW92ZSB0aGUgZG9jdW1lbnQgd2hlbiBwcmVzc2luZyBhcnJvdyBrZXlzIG9uIGZvY3VzZWQgaGFuZGxlc1xuICAgICAgICBmdW5jdGlvbiBldmVudEtleWRvd24oZXZlbnQsIGhhbmRsZU51bWJlcikge1xuICAgICAgICAgICAgaWYgKGlzU2xpZGVyRGlzYWJsZWQoKSB8fCBpc0hhbmRsZURpc2FibGVkKGhhbmRsZU51bWJlcikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgaG9yaXpvbnRhbEtleXMgPSBbXCJMZWZ0XCIsIFwiUmlnaHRcIl07XG4gICAgICAgICAgICB2YXIgdmVydGljYWxLZXlzID0gW1wiRG93blwiLCBcIlVwXCJdO1xuICAgICAgICAgICAgdmFyIGxhcmdlU3RlcEtleXMgPSBbXCJQYWdlRG93blwiLCBcIlBhZ2VVcFwiXTtcbiAgICAgICAgICAgIHZhciBlZGdlS2V5cyA9IFtcIkhvbWVcIiwgXCJFbmRcIl07XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5kaXIgJiYgIW9wdGlvbnMub3J0KSB7XG4gICAgICAgICAgICAgICAgLy8gT24gYW4gcmlnaHQtdG8tbGVmdCBzbGlkZXIsIHRoZSBsZWZ0IGFuZCByaWdodCBrZXlzIGFjdCBpbnZlcnRlZFxuICAgICAgICAgICAgICAgIGhvcml6b250YWxLZXlzLnJldmVyc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG9wdGlvbnMub3J0ICYmICFvcHRpb25zLmRpcikge1xuICAgICAgICAgICAgICAgIC8vIE9uIGEgdG9wLXRvLWJvdHRvbSBzbGlkZXIsIHRoZSB1cCBhbmQgZG93biBrZXlzIGFjdCBpbnZlcnRlZFxuICAgICAgICAgICAgICAgIHZlcnRpY2FsS2V5cy5yZXZlcnNlKCk7XG4gICAgICAgICAgICAgICAgbGFyZ2VTdGVwS2V5cy5yZXZlcnNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBTdHJpcCBcIkFycm93XCIgZm9yIElFIGNvbXBhdGliaWxpdHkuIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9LZXlib2FyZEV2ZW50L2tleVxuICAgICAgICAgICAgdmFyIGtleSA9IGV2ZW50LmtleS5yZXBsYWNlKFwiQXJyb3dcIiwgXCJcIik7XG4gICAgICAgICAgICB2YXIgaXNMYXJnZURvd24gPSBrZXkgPT09IGxhcmdlU3RlcEtleXNbMF07XG4gICAgICAgICAgICB2YXIgaXNMYXJnZVVwID0ga2V5ID09PSBsYXJnZVN0ZXBLZXlzWzFdO1xuICAgICAgICAgICAgdmFyIGlzRG93biA9IGtleSA9PT0gdmVydGljYWxLZXlzWzBdIHx8IGtleSA9PT0gaG9yaXpvbnRhbEtleXNbMF0gfHwgaXNMYXJnZURvd247XG4gICAgICAgICAgICB2YXIgaXNVcCA9IGtleSA9PT0gdmVydGljYWxLZXlzWzFdIHx8IGtleSA9PT0gaG9yaXpvbnRhbEtleXNbMV0gfHwgaXNMYXJnZVVwO1xuICAgICAgICAgICAgdmFyIGlzTWluID0ga2V5ID09PSBlZGdlS2V5c1swXTtcbiAgICAgICAgICAgIHZhciBpc01heCA9IGtleSA9PT0gZWRnZUtleXNbMV07XG4gICAgICAgICAgICBpZiAoIWlzRG93biAmJiAhaXNVcCAmJiAhaXNNaW4gJiYgIWlzTWF4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgdmFyIHRvO1xuICAgICAgICAgICAgaWYgKGlzVXAgfHwgaXNEb3duKSB7XG4gICAgICAgICAgICAgICAgdmFyIG11bHRpcGxpZXIgPSBvcHRpb25zLmtleWJvYXJkUGFnZU11bHRpcGxpZXI7XG4gICAgICAgICAgICAgICAgdmFyIGRpcmVjdGlvbiA9IGlzRG93biA/IDAgOiAxO1xuICAgICAgICAgICAgICAgIHZhciBzdGVwcyA9IGdldE5leHRTdGVwc0ZvckhhbmRsZShoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgICAgIHZhciBzdGVwID0gc3RlcHNbZGlyZWN0aW9uXTtcbiAgICAgICAgICAgICAgICAvLyBBdCB0aGUgZWRnZSBvZiBhIHNsaWRlciwgZG8gbm90aGluZ1xuICAgICAgICAgICAgICAgIGlmIChzdGVwID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gTm8gc3RlcCBzZXQsIHVzZSB0aGUgZGVmYXVsdCBvZiAxMCUgb2YgdGhlIHN1Yi1yYW5nZVxuICAgICAgICAgICAgICAgIGlmIChzdGVwID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICBzdGVwID0gc2NvcGVfU3BlY3RydW0uZ2V0RGVmYXVsdFN0ZXAoc2NvcGVfTG9jYXRpb25zW2hhbmRsZU51bWJlcl0sIGlzRG93biwgb3B0aW9ucy5rZXlib2FyZERlZmF1bHRTdGVwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGlzTGFyZ2VVcCB8fCBpc0xhcmdlRG93bikge1xuICAgICAgICAgICAgICAgICAgICBzdGVwICo9IG11bHRpcGxpZXI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFN0ZXAgb3ZlciB6ZXJvLWxlbmd0aCByYW5nZXMgKCM5NDgpO1xuICAgICAgICAgICAgICAgIHN0ZXAgPSBNYXRoLm1heChzdGVwLCAwLjAwMDAwMDEpO1xuICAgICAgICAgICAgICAgIC8vIERlY3JlbWVudCBmb3IgZG93biBzdGVwc1xuICAgICAgICAgICAgICAgIHN0ZXAgPSAoaXNEb3duID8gLTEgOiAxKSAqIHN0ZXA7XG4gICAgICAgICAgICAgICAgdG8gPSBzY29wZV9WYWx1ZXNbaGFuZGxlTnVtYmVyXSArIHN0ZXA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc01heCkge1xuICAgICAgICAgICAgICAgIC8vIEVuZCBrZXlcbiAgICAgICAgICAgICAgICB0byA9IG9wdGlvbnMuc3BlY3RydW0ueFZhbFtvcHRpb25zLnNwZWN0cnVtLnhWYWwubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBIb21lIGtleVxuICAgICAgICAgICAgICAgIHRvID0gb3B0aW9ucy5zcGVjdHJ1bS54VmFsWzBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2V0SGFuZGxlKGhhbmRsZU51bWJlciwgc2NvcGVfU3BlY3RydW0udG9TdGVwcGluZyh0byksIHRydWUsIHRydWUpO1xuICAgICAgICAgICAgZmlyZUV2ZW50KFwic2xpZGVcIiwgaGFuZGxlTnVtYmVyKTtcbiAgICAgICAgICAgIGZpcmVFdmVudChcInVwZGF0ZVwiLCBoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgZmlyZUV2ZW50KFwiY2hhbmdlXCIsIGhhbmRsZU51bWJlcik7XG4gICAgICAgICAgICBmaXJlRXZlbnQoXCJzZXRcIiwgaGFuZGxlTnVtYmVyKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBBdHRhY2ggZXZlbnRzIHRvIHNldmVyYWwgc2xpZGVyIHBhcnRzLlxuICAgICAgICBmdW5jdGlvbiBiaW5kU2xpZGVyRXZlbnRzKGJlaGF2aW91cikge1xuICAgICAgICAgICAgLy8gQXR0YWNoIHRoZSBzdGFuZGFyZCBkcmFnIGV2ZW50IHRvIHRoZSBoYW5kbGVzLlxuICAgICAgICAgICAgaWYgKCFiZWhhdmlvdXIuZml4ZWQpIHtcbiAgICAgICAgICAgICAgICBzY29wZV9IYW5kbGVzLmZvckVhY2goZnVuY3Rpb24gKGhhbmRsZSwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlc2UgZXZlbnRzIGFyZSBvbmx5IGJvdW5kIHRvIHRoZSB2aXN1YWwgaGFuZGxlXG4gICAgICAgICAgICAgICAgICAgIC8vIGVsZW1lbnQsIG5vdCB0aGUgJ3JlYWwnIG9yaWdpbiBlbGVtZW50LlxuICAgICAgICAgICAgICAgICAgICBhdHRhY2hFdmVudChhY3Rpb25zLnN0YXJ0LCBoYW5kbGUuY2hpbGRyZW5bMF0sIGV2ZW50U3RhcnQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZU51bWJlcnM6IFtpbmRleF1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBBdHRhY2ggdGhlIHRhcCBldmVudCB0byB0aGUgc2xpZGVyIGJhc2UuXG4gICAgICAgICAgICBpZiAoYmVoYXZpb3VyLnRhcCkge1xuICAgICAgICAgICAgICAgIGF0dGFjaEV2ZW50KGFjdGlvbnMuc3RhcnQsIHNjb3BlX0Jhc2UsIGV2ZW50VGFwLCB7fSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBGaXJlIGhvdmVyIGV2ZW50c1xuICAgICAgICAgICAgaWYgKGJlaGF2aW91ci5ob3Zlcikge1xuICAgICAgICAgICAgICAgIGF0dGFjaEV2ZW50KGFjdGlvbnMubW92ZSwgc2NvcGVfQmFzZSwgZXZlbnRIb3Zlciwge1xuICAgICAgICAgICAgICAgICAgICBob3ZlcjogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gTWFrZSB0aGUgcmFuZ2UgZHJhZ2dhYmxlLlxuICAgICAgICAgICAgaWYgKGJlaGF2aW91ci5kcmFnKSB7XG4gICAgICAgICAgICAgICAgc2NvcGVfQ29ubmVjdHMuZm9yRWFjaChmdW5jdGlvbiAoY29ubmVjdCwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbm5lY3QgPT09IGZhbHNlIHx8IGluZGV4ID09PSAwIHx8IGluZGV4ID09PSBzY29wZV9Db25uZWN0cy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIGhhbmRsZUJlZm9yZSA9IHNjb3BlX0hhbmRsZXNbaW5kZXggLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhhbmRsZUFmdGVyID0gc2NvcGVfSGFuZGxlc1tpbmRleF07XG4gICAgICAgICAgICAgICAgICAgIHZhciBldmVudEhvbGRlcnMgPSBbY29ubmVjdF07XG4gICAgICAgICAgICAgICAgICAgIGFkZENsYXNzKGNvbm5lY3QsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5kcmFnZ2FibGUpO1xuICAgICAgICAgICAgICAgICAgICAvLyBXaGVuIHRoZSByYW5nZSBpcyBmaXhlZCwgdGhlIGVudGlyZSByYW5nZSBjYW5cbiAgICAgICAgICAgICAgICAgICAgLy8gYmUgZHJhZ2dlZCBieSB0aGUgaGFuZGxlcy4gVGhlIGhhbmRsZSBpbiB0aGUgZmlyc3RcbiAgICAgICAgICAgICAgICAgICAgLy8gb3JpZ2luIHdpbGwgcHJvcGFnYXRlIHRoZSBzdGFydCBldmVudCB1cHdhcmQsXG4gICAgICAgICAgICAgICAgICAgIC8vIGJ1dCBpdCBuZWVkcyB0byBiZSBib3VuZCBtYW51YWxseSBvbiB0aGUgb3RoZXIuXG4gICAgICAgICAgICAgICAgICAgIGlmIChiZWhhdmlvdXIuZml4ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50SG9sZGVycy5wdXNoKGhhbmRsZUJlZm9yZS5jaGlsZHJlblswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudEhvbGRlcnMucHVzaChoYW5kbGVBZnRlci5jaGlsZHJlblswXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZXZlbnRIb2xkZXJzLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50SG9sZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRhY2hFdmVudChhY3Rpb25zLnN0YXJ0LCBldmVudEhvbGRlciwgZXZlbnRTdGFydCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXM6IFtoYW5kbGVCZWZvcmUsIGhhbmRsZUFmdGVyXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVOdW1iZXJzOiBbaW5kZXggLSAxLCBpbmRleF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29ubmVjdDogY29ubmVjdFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIEF0dGFjaCBhbiBldmVudCB0byB0aGlzIHNsaWRlciwgcG9zc2libHkgaW5jbHVkaW5nIGEgbmFtZXNwYWNlXG4gICAgICAgIGZ1bmN0aW9uIGJpbmRFdmVudChuYW1lc3BhY2VkRXZlbnQsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBzY29wZV9FdmVudHNbbmFtZXNwYWNlZEV2ZW50XSA9IHNjb3BlX0V2ZW50c1tuYW1lc3BhY2VkRXZlbnRdIHx8IFtdO1xuICAgICAgICAgICAgc2NvcGVfRXZlbnRzW25hbWVzcGFjZWRFdmVudF0ucHVzaChjYWxsYmFjayk7XG4gICAgICAgICAgICAvLyBJZiB0aGUgZXZlbnQgYm91bmQgaXMgJ3VwZGF0ZSwnIGZpcmUgaXQgaW1tZWRpYXRlbHkgZm9yIGFsbCBoYW5kbGVzLlxuICAgICAgICAgICAgaWYgKG5hbWVzcGFjZWRFdmVudC5zcGxpdChcIi5cIilbMF0gPT09IFwidXBkYXRlXCIpIHtcbiAgICAgICAgICAgICAgICBzY29wZV9IYW5kbGVzLmZvckVhY2goZnVuY3Rpb24gKGEsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIGZpcmVFdmVudChcInVwZGF0ZVwiLCBpbmRleCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gaXNJbnRlcm5hbE5hbWVzcGFjZShuYW1lc3BhY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBuYW1lc3BhY2UgPT09IElOVEVSTkFMX0VWRU5UX05TLmFyaWEgfHwgbmFtZXNwYWNlID09PSBJTlRFUk5BTF9FVkVOVF9OUy50b29sdGlwcztcbiAgICAgICAgfVxuICAgICAgICAvLyBVbmRvIGF0dGFjaG1lbnQgb2YgZXZlbnRcbiAgICAgICAgZnVuY3Rpb24gcmVtb3ZlRXZlbnQobmFtZXNwYWNlZEV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgZXZlbnQgPSBuYW1lc3BhY2VkRXZlbnQgJiYgbmFtZXNwYWNlZEV2ZW50LnNwbGl0KFwiLlwiKVswXTtcbiAgICAgICAgICAgIHZhciBuYW1lc3BhY2UgPSBldmVudCA/IG5hbWVzcGFjZWRFdmVudC5zdWJzdHJpbmcoZXZlbnQubGVuZ3RoKSA6IG5hbWVzcGFjZWRFdmVudDtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHNjb3BlX0V2ZW50cykuZm9yRWFjaChmdW5jdGlvbiAoYmluZCkge1xuICAgICAgICAgICAgICAgIHZhciB0RXZlbnQgPSBiaW5kLnNwbGl0KFwiLlwiKVswXTtcbiAgICAgICAgICAgICAgICB2YXIgdE5hbWVzcGFjZSA9IGJpbmQuc3Vic3RyaW5nKHRFdmVudC5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIGlmICgoIWV2ZW50IHx8IGV2ZW50ID09PSB0RXZlbnQpICYmICghbmFtZXNwYWNlIHx8IG5hbWVzcGFjZSA9PT0gdE5hbWVzcGFjZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gb25seSBkZWxldGUgcHJvdGVjdGVkIGludGVybmFsIGV2ZW50IGlmIGludGVudGlvbmFsXG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNJbnRlcm5hbE5hbWVzcGFjZSh0TmFtZXNwYWNlKSB8fCBuYW1lc3BhY2UgPT09IHROYW1lc3BhY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBzY29wZV9FdmVudHNbYmluZF07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBFeHRlcm5hbCBldmVudCBoYW5kbGluZ1xuICAgICAgICBmdW5jdGlvbiBmaXJlRXZlbnQoZXZlbnROYW1lLCBoYW5kbGVOdW1iZXIsIHRhcCkge1xuICAgICAgICAgICAgT2JqZWN0LmtleXMoc2NvcGVfRXZlbnRzKS5mb3JFYWNoKGZ1bmN0aW9uICh0YXJnZXRFdmVudCkge1xuICAgICAgICAgICAgICAgIHZhciBldmVudFR5cGUgPSB0YXJnZXRFdmVudC5zcGxpdChcIi5cIilbMF07XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50TmFtZSA9PT0gZXZlbnRUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlX0V2ZW50c1t0YXJnZXRFdmVudF0uZm9yRWFjaChmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwoXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBVc2UgdGhlIHNsaWRlciBwdWJsaWMgQVBJIGFzIHRoZSBzY29wZSAoJ3RoaXMnKVxuICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGVfU2VsZiwgXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBSZXR1cm4gdmFsdWVzIGFzIGFycmF5LCBzbyBhcmdfMVthcmdfMl0gaXMgYWx3YXlzIHZhbGlkLlxuICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGVfVmFsdWVzLm1hcChvcHRpb25zLmZvcm1hdC50byksIFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSGFuZGxlIGluZGV4LCAwIG9yIDFcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZU51bWJlciwgXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBVbi1mb3JtYXR0ZWQgc2xpZGVyIHZhbHVlc1xuICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGVfVmFsdWVzLnNsaWNlKCksIFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRXZlbnQgaXMgZmlyZWQgYnkgdGFwLCB0cnVlIG9yIGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXAgfHwgZmFsc2UsIFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTGVmdCBvZmZzZXQgb2YgdGhlIGhhbmRsZSwgaW4gcmVsYXRpb24gdG8gdGhlIHNsaWRlclxuICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGVfTG9jYXRpb25zLnNsaWNlKCksIFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWRkIHRoZSBzbGlkZXIgcHVibGljIEFQSSB0byBhbiBhY2Nlc3NpYmxlIHBhcmFtZXRlciB3aGVuIHRoaXMgaXMgdW5hdmFpbGFibGVcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlX1NlbGYpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTcGxpdCBvdXQgdGhlIGhhbmRsZSBwb3NpdGlvbmluZyBsb2dpYyBzbyB0aGUgTW92ZSBldmVudCBjYW4gdXNlIGl0LCB0b29cbiAgICAgICAgZnVuY3Rpb24gY2hlY2tIYW5kbGVQb3NpdGlvbihyZWZlcmVuY2UsIGhhbmRsZU51bWJlciwgdG8sIGxvb2tCYWNrd2FyZCwgbG9va0ZvcndhcmQsIGdldFZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgZGlzdGFuY2U7XG4gICAgICAgICAgICAvLyBGb3Igc2xpZGVycyB3aXRoIG11bHRpcGxlIGhhbmRsZXMsIGxpbWl0IG1vdmVtZW50IHRvIHRoZSBvdGhlciBoYW5kbGUuXG4gICAgICAgICAgICAvLyBBcHBseSB0aGUgbWFyZ2luIG9wdGlvbiBieSBhZGRpbmcgaXQgdG8gdGhlIGhhbmRsZSBwb3NpdGlvbnMuXG4gICAgICAgICAgICBpZiAoc2NvcGVfSGFuZGxlcy5sZW5ndGggPiAxICYmICFvcHRpb25zLmV2ZW50cy51bmNvbnN0cmFpbmVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxvb2tCYWNrd2FyZCAmJiBoYW5kbGVOdW1iZXIgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3RhbmNlID0gc2NvcGVfU3BlY3RydW0uZ2V0QWJzb2x1dGVEaXN0YW5jZShyZWZlcmVuY2VbaGFuZGxlTnVtYmVyIC0gMV0sIG9wdGlvbnMubWFyZ2luLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIHRvID0gTWF0aC5tYXgodG8sIGRpc3RhbmNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGxvb2tGb3J3YXJkICYmIGhhbmRsZU51bWJlciA8IHNjb3BlX0hhbmRsZXMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZSA9IHNjb3BlX1NwZWN0cnVtLmdldEFic29sdXRlRGlzdGFuY2UocmVmZXJlbmNlW2hhbmRsZU51bWJlciArIDFdLCBvcHRpb25zLm1hcmdpbiwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHRvID0gTWF0aC5taW4odG8sIGRpc3RhbmNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBUaGUgbGltaXQgb3B0aW9uIGhhcyB0aGUgb3Bwb3NpdGUgZWZmZWN0LCBsaW1pdGluZyBoYW5kbGVzIHRvIGFcbiAgICAgICAgICAgIC8vIG1heGltdW0gZGlzdGFuY2UgZnJvbSBhbm90aGVyLiBMaW1pdCBtdXN0IGJlID4gMCwgYXMgb3RoZXJ3aXNlXG4gICAgICAgICAgICAvLyBoYW5kbGVzIHdvdWxkIGJlIHVubW92YWJsZS5cbiAgICAgICAgICAgIGlmIChzY29wZV9IYW5kbGVzLmxlbmd0aCA+IDEgJiYgb3B0aW9ucy5saW1pdCkge1xuICAgICAgICAgICAgICAgIGlmIChsb29rQmFja3dhcmQgJiYgaGFuZGxlTnVtYmVyID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZSA9IHNjb3BlX1NwZWN0cnVtLmdldEFic29sdXRlRGlzdGFuY2UocmVmZXJlbmNlW2hhbmRsZU51bWJlciAtIDFdLCBvcHRpb25zLmxpbWl0LCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIHRvID0gTWF0aC5taW4odG8sIGRpc3RhbmNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGxvb2tGb3J3YXJkICYmIGhhbmRsZU51bWJlciA8IHNjb3BlX0hhbmRsZXMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZSA9IHNjb3BlX1NwZWN0cnVtLmdldEFic29sdXRlRGlzdGFuY2UocmVmZXJlbmNlW2hhbmRsZU51bWJlciArIDFdLCBvcHRpb25zLmxpbWl0LCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgdG8gPSBNYXRoLm1heCh0bywgZGlzdGFuY2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFRoZSBwYWRkaW5nIG9wdGlvbiBrZWVwcyB0aGUgaGFuZGxlcyBhIGNlcnRhaW4gZGlzdGFuY2UgZnJvbSB0aGVcbiAgICAgICAgICAgIC8vIGVkZ2VzIG9mIHRoZSBzbGlkZXIuIFBhZGRpbmcgbXVzdCBiZSA+IDAuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5wYWRkaW5nKSB7XG4gICAgICAgICAgICAgICAgaWYgKGhhbmRsZU51bWJlciA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZSA9IHNjb3BlX1NwZWN0cnVtLmdldEFic29sdXRlRGlzdGFuY2UoMCwgb3B0aW9ucy5wYWRkaW5nWzBdLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIHRvID0gTWF0aC5tYXgodG8sIGRpc3RhbmNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGhhbmRsZU51bWJlciA9PT0gc2NvcGVfSGFuZGxlcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3RhbmNlID0gc2NvcGVfU3BlY3RydW0uZ2V0QWJzb2x1dGVEaXN0YW5jZSgxMDAsIG9wdGlvbnMucGFkZGluZ1sxXSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHRvID0gTWF0aC5taW4odG8sIGRpc3RhbmNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0byA9IHNjb3BlX1NwZWN0cnVtLmdldFN0ZXAodG8pO1xuICAgICAgICAgICAgLy8gTGltaXQgcGVyY2VudGFnZSB0byB0aGUgMCAtIDEwMCByYW5nZVxuICAgICAgICAgICAgdG8gPSBsaW1pdCh0byk7XG4gICAgICAgICAgICAvLyBSZXR1cm4gZmFsc2UgaWYgaGFuZGxlIGNhbid0IG1vdmVcbiAgICAgICAgICAgIGlmICh0byA9PT0gcmVmZXJlbmNlW2hhbmRsZU51bWJlcl0gJiYgIWdldFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRvO1xuICAgICAgICB9XG4gICAgICAgIC8vIFVzZXMgc2xpZGVyIG9yaWVudGF0aW9uIHRvIGNyZWF0ZSBDU1MgcnVsZXMuIGEgPSBiYXNlIHZhbHVlO1xuICAgICAgICBmdW5jdGlvbiBpblJ1bGVPcmRlcih2LCBhKSB7XG4gICAgICAgICAgICB2YXIgbyA9IG9wdGlvbnMub3J0O1xuICAgICAgICAgICAgcmV0dXJuIChvID8gYSA6IHYpICsgXCIsIFwiICsgKG8gPyB2IDogYSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gTW92ZXMgaGFuZGxlKHMpIGJ5IGEgcGVyY2VudGFnZVxuICAgICAgICAvLyAoYm9vbCwgJSB0byBtb3ZlLCBbJSB3aGVyZSBoYW5kbGUgc3RhcnRlZCwgLi4uXSwgW2luZGV4IGluIHNjb3BlX0hhbmRsZXMsIC4uLl0pXG4gICAgICAgIGZ1bmN0aW9uIG1vdmVIYW5kbGVzKHVwd2FyZCwgcHJvcG9zYWwsIGxvY2F0aW9ucywgaGFuZGxlTnVtYmVycywgY29ubmVjdCkge1xuICAgICAgICAgICAgdmFyIHByb3Bvc2FscyA9IGxvY2F0aW9ucy5zbGljZSgpO1xuICAgICAgICAgICAgLy8gU3RvcmUgZmlyc3QgaGFuZGxlIG5vdywgc28gd2Ugc3RpbGwgaGF2ZSBpdCBpbiBjYXNlIGhhbmRsZU51bWJlcnMgaXMgcmV2ZXJzZWRcbiAgICAgICAgICAgIHZhciBmaXJzdEhhbmRsZSA9IGhhbmRsZU51bWJlcnNbMF07XG4gICAgICAgICAgICB2YXIgYiA9IFshdXB3YXJkLCB1cHdhcmRdO1xuICAgICAgICAgICAgdmFyIGYgPSBbdXB3YXJkLCAhdXB3YXJkXTtcbiAgICAgICAgICAgIC8vIENvcHkgaGFuZGxlTnVtYmVycyBzbyB3ZSBkb24ndCBjaGFuZ2UgdGhlIGRhdGFzZXRcbiAgICAgICAgICAgIGhhbmRsZU51bWJlcnMgPSBoYW5kbGVOdW1iZXJzLnNsaWNlKCk7XG4gICAgICAgICAgICAvLyBDaGVjayB0byBzZWUgd2hpY2ggaGFuZGxlIGlzICdsZWFkaW5nJy5cbiAgICAgICAgICAgIC8vIElmIHRoYXQgb25lIGNhbid0IG1vdmUgdGhlIHNlY29uZCBjYW4ndCBlaXRoZXIuXG4gICAgICAgICAgICBpZiAodXB3YXJkKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlTnVtYmVycy5yZXZlcnNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBTdGVwIDE6IGdldCB0aGUgbWF4aW11bSBwZXJjZW50YWdlIHRoYXQgYW55IG9mIHRoZSBoYW5kbGVzIGNhbiBtb3ZlXG4gICAgICAgICAgICBpZiAoaGFuZGxlTnVtYmVycy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlTnVtYmVycy5mb3JFYWNoKGZ1bmN0aW9uIChoYW5kbGVOdW1iZXIsIG8pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRvID0gY2hlY2tIYW5kbGVQb3NpdGlvbihwcm9wb3NhbHMsIGhhbmRsZU51bWJlciwgcHJvcG9zYWxzW2hhbmRsZU51bWJlcl0gKyBwcm9wb3NhbCwgYltvXSwgZltvXSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAvLyBTdG9wIGlmIG9uZSBvZiB0aGUgaGFuZGxlcyBjYW4ndCBtb3ZlLlxuICAgICAgICAgICAgICAgICAgICBpZiAodG8gPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wb3NhbCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wb3NhbCA9IHRvIC0gcHJvcG9zYWxzW2hhbmRsZU51bWJlcl07XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wb3NhbHNbaGFuZGxlTnVtYmVyXSA9IHRvO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBJZiB1c2luZyBvbmUgaGFuZGxlLCBjaGVjayBiYWNrd2FyZCBBTkQgZm9yd2FyZFxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYiA9IGYgPSBbdHJ1ZV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgc3RhdGUgPSBmYWxzZTtcbiAgICAgICAgICAgIC8vIFN0ZXAgMjogVHJ5IHRvIHNldCB0aGUgaGFuZGxlcyB3aXRoIHRoZSBmb3VuZCBwZXJjZW50YWdlXG4gICAgICAgICAgICBoYW5kbGVOdW1iZXJzLmZvckVhY2goZnVuY3Rpb24gKGhhbmRsZU51bWJlciwgbykge1xuICAgICAgICAgICAgICAgIHN0YXRlID0gc2V0SGFuZGxlKGhhbmRsZU51bWJlciwgbG9jYXRpb25zW2hhbmRsZU51bWJlcl0gKyBwcm9wb3NhbCwgYltvXSwgZltvXSkgfHwgc3RhdGU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIFN0ZXAgMzogSWYgYSBoYW5kbGUgbW92ZWQsIGZpcmUgZXZlbnRzXG4gICAgICAgICAgICBpZiAoc3RhdGUpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVOdW1iZXJzLmZvckVhY2goZnVuY3Rpb24gKGhhbmRsZU51bWJlcikge1xuICAgICAgICAgICAgICAgICAgICBmaXJlRXZlbnQoXCJ1cGRhdGVcIiwgaGFuZGxlTnVtYmVyKTtcbiAgICAgICAgICAgICAgICAgICAgZmlyZUV2ZW50KFwic2xpZGVcIiwgaGFuZGxlTnVtYmVyKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAvLyBJZiB0YXJnZXQgaXMgYSBjb25uZWN0LCB0aGVuIGZpcmUgZHJhZyBldmVudFxuICAgICAgICAgICAgICAgIGlmIChjb25uZWN0ICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBmaXJlRXZlbnQoXCJkcmFnXCIsIGZpcnN0SGFuZGxlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gVGFrZXMgYSBiYXNlIHZhbHVlIGFuZCBhbiBvZmZzZXQuIFRoaXMgb2Zmc2V0IGlzIHVzZWQgZm9yIHRoZSBjb25uZWN0IGJhciBzaXplLlxuICAgICAgICAvLyBJbiB0aGUgaW5pdGlhbCBkZXNpZ24gZm9yIHRoaXMgZmVhdHVyZSwgdGhlIG9yaWdpbiBlbGVtZW50IHdhcyAxJSB3aWRlLlxuICAgICAgICAvLyBVbmZvcnR1bmF0ZWx5LCBhIHJvdW5kaW5nIGJ1ZyBpbiBDaHJvbWUgbWFrZXMgaXQgaW1wb3NzaWJsZSB0byBpbXBsZW1lbnQgdGhpcyBmZWF0dXJlXG4gICAgICAgIC8vIGluIHRoaXMgbWFubmVyOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD03OTgyMjNcbiAgICAgICAgZnVuY3Rpb24gdHJhbnNmb3JtRGlyZWN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zLmRpciA/IDEwMCAtIGEgLSBiIDogYTtcbiAgICAgICAgfVxuICAgICAgICAvLyBVcGRhdGVzIHNjb3BlX0xvY2F0aW9ucyBhbmQgc2NvcGVfVmFsdWVzLCB1cGRhdGVzIHZpc3VhbCBzdGF0ZVxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVIYW5kbGVQb3NpdGlvbihoYW5kbGVOdW1iZXIsIHRvKSB7XG4gICAgICAgICAgICAvLyBVcGRhdGUgbG9jYXRpb25zLlxuICAgICAgICAgICAgc2NvcGVfTG9jYXRpb25zW2hhbmRsZU51bWJlcl0gPSB0bztcbiAgICAgICAgICAgIC8vIENvbnZlcnQgdGhlIHZhbHVlIHRvIHRoZSBzbGlkZXIgc3RlcHBpbmcvcmFuZ2UuXG4gICAgICAgICAgICBzY29wZV9WYWx1ZXNbaGFuZGxlTnVtYmVyXSA9IHNjb3BlX1NwZWN0cnVtLmZyb21TdGVwcGluZyh0byk7XG4gICAgICAgICAgICB2YXIgdHJhbnNsYXRpb24gPSAxMCAqICh0cmFuc2Zvcm1EaXJlY3Rpb24odG8sIDApIC0gc2NvcGVfRGlyT2Zmc2V0KTtcbiAgICAgICAgICAgIHZhciB0cmFuc2xhdGVSdWxlID0gXCJ0cmFuc2xhdGUoXCIgKyBpblJ1bGVPcmRlcih0cmFuc2xhdGlvbiArIFwiJVwiLCBcIjBcIikgKyBcIilcIjtcbiAgICAgICAgICAgIHNjb3BlX0hhbmRsZXNbaGFuZGxlTnVtYmVyXS5zdHlsZVtvcHRpb25zLnRyYW5zZm9ybVJ1bGVdID0gdHJhbnNsYXRlUnVsZTtcbiAgICAgICAgICAgIHVwZGF0ZUNvbm5lY3QoaGFuZGxlTnVtYmVyKTtcbiAgICAgICAgICAgIHVwZGF0ZUNvbm5lY3QoaGFuZGxlTnVtYmVyICsgMSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSGFuZGxlcyBiZWZvcmUgdGhlIHNsaWRlciBtaWRkbGUgYXJlIHN0YWNrZWQgbGF0ZXIgPSBoaWdoZXIsXG4gICAgICAgIC8vIEhhbmRsZXMgYWZ0ZXIgdGhlIG1pZGRsZSBsYXRlciBpcyBsb3dlclxuICAgICAgICAvLyBbWzddIFs4XSAuLi4uLi4uLi4uIHwgLi4uLi4uLi4uLiBbNV0gWzRdXG4gICAgICAgIGZ1bmN0aW9uIHNldFppbmRleCgpIHtcbiAgICAgICAgICAgIHNjb3BlX0hhbmRsZU51bWJlcnMuZm9yRWFjaChmdW5jdGlvbiAoaGFuZGxlTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRpciA9IHNjb3BlX0xvY2F0aW9uc1toYW5kbGVOdW1iZXJdID4gNTAgPyAtMSA6IDE7XG4gICAgICAgICAgICAgICAgdmFyIHpJbmRleCA9IDMgKyAoc2NvcGVfSGFuZGxlcy5sZW5ndGggKyBkaXIgKiBoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgICAgIHNjb3BlX0hhbmRsZXNbaGFuZGxlTnVtYmVyXS5zdHlsZS56SW5kZXggPSBTdHJpbmcoekluZGV4KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRlc3Qgc3VnZ2VzdGVkIHZhbHVlcyBhbmQgYXBwbHkgbWFyZ2luLCBzdGVwLlxuICAgICAgICAvLyBpZiBleGFjdElucHV0IGlzIHRydWUsIGRvbid0IHJ1biBjaGVja0hhbmRsZVBvc2l0aW9uLCB0aGVuIHRoZSBoYW5kbGUgY2FuIGJlIHBsYWNlZCBpbiBiZXR3ZWVuIHN0ZXBzICgjNDM2KVxuICAgICAgICBmdW5jdGlvbiBzZXRIYW5kbGUoaGFuZGxlTnVtYmVyLCB0bywgbG9va0JhY2t3YXJkLCBsb29rRm9yd2FyZCwgZXhhY3RJbnB1dCkge1xuICAgICAgICAgICAgaWYgKCFleGFjdElucHV0KSB7XG4gICAgICAgICAgICAgICAgdG8gPSBjaGVja0hhbmRsZVBvc2l0aW9uKHNjb3BlX0xvY2F0aW9ucywgaGFuZGxlTnVtYmVyLCB0bywgbG9va0JhY2t3YXJkLCBsb29rRm9yd2FyZCwgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRvID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHVwZGF0ZUhhbmRsZVBvc2l0aW9uKGhhbmRsZU51bWJlciwgdG8pO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVXBkYXRlcyBzdHlsZSBhdHRyaWJ1dGUgZm9yIGNvbm5lY3Qgbm9kZXNcbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlQ29ubmVjdChpbmRleCkge1xuICAgICAgICAgICAgLy8gU2tpcCBjb25uZWN0cyBzZXQgdG8gZmFsc2VcbiAgICAgICAgICAgIGlmICghc2NvcGVfQ29ubmVjdHNbaW5kZXhdKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGwgPSAwO1xuICAgICAgICAgICAgdmFyIGggPSAxMDA7XG4gICAgICAgICAgICBpZiAoaW5kZXggIT09IDApIHtcbiAgICAgICAgICAgICAgICBsID0gc2NvcGVfTG9jYXRpb25zW2luZGV4IC0gMV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaW5kZXggIT09IHNjb3BlX0Nvbm5lY3RzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICBoID0gc2NvcGVfTG9jYXRpb25zW2luZGV4XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFdlIHVzZSB0d28gcnVsZXM6XG4gICAgICAgICAgICAvLyAndHJhbnNsYXRlJyB0byBjaGFuZ2UgdGhlIGxlZnQvdG9wIG9mZnNldDtcbiAgICAgICAgICAgIC8vICdzY2FsZScgdG8gY2hhbmdlIHRoZSB3aWR0aCBvZiB0aGUgZWxlbWVudDtcbiAgICAgICAgICAgIC8vIEFzIHRoZSBlbGVtZW50IGhhcyBhIHdpZHRoIG9mIDEwMCUsIGEgdHJhbnNsYXRpb24gb2YgMTAwJSBpcyBlcXVhbCB0byAxMDAlIG9mIHRoZSBwYXJlbnQgKC5ub1VpLWJhc2UpXG4gICAgICAgICAgICB2YXIgY29ubmVjdFdpZHRoID0gaCAtIGw7XG4gICAgICAgICAgICB2YXIgdHJhbnNsYXRlUnVsZSA9IFwidHJhbnNsYXRlKFwiICsgaW5SdWxlT3JkZXIodHJhbnNmb3JtRGlyZWN0aW9uKGwsIGNvbm5lY3RXaWR0aCkgKyBcIiVcIiwgXCIwXCIpICsgXCIpXCI7XG4gICAgICAgICAgICB2YXIgc2NhbGVSdWxlID0gXCJzY2FsZShcIiArIGluUnVsZU9yZGVyKGNvbm5lY3RXaWR0aCAvIDEwMCwgXCIxXCIpICsgXCIpXCI7XG4gICAgICAgICAgICBzY29wZV9Db25uZWN0c1tpbmRleF0uc3R5bGVbb3B0aW9ucy50cmFuc2Zvcm1SdWxlXSA9XG4gICAgICAgICAgICAgICAgdHJhbnNsYXRlUnVsZSArIFwiIFwiICsgc2NhbGVSdWxlO1xuICAgICAgICB9XG4gICAgICAgIC8vIFBhcnNlcyB2YWx1ZSBwYXNzZWQgdG8gLnNldCBtZXRob2QuIFJldHVybnMgY3VycmVudCB2YWx1ZSBpZiBub3QgcGFyc2UtYWJsZS5cbiAgICAgICAgZnVuY3Rpb24gcmVzb2x2ZVRvVmFsdWUodG8sIGhhbmRsZU51bWJlcikge1xuICAgICAgICAgICAgLy8gU2V0dGluZyB3aXRoIG51bGwgaW5kaWNhdGVzIGFuICdpZ25vcmUnLlxuICAgICAgICAgICAgLy8gSW5wdXR0aW5nICdmYWxzZScgaXMgaW52YWxpZC5cbiAgICAgICAgICAgIGlmICh0byA9PT0gbnVsbCB8fCB0byA9PT0gZmFsc2UgfHwgdG8gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzY29wZV9Mb2NhdGlvbnNbaGFuZGxlTnVtYmVyXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIElmIGEgZm9ybWF0dGVkIG51bWJlciB3YXMgcGFzc2VkLCBhdHRlbXB0IHRvIGRlY29kZSBpdC5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgdG8gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgICAgICB0byA9IFN0cmluZyh0byk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0byA9IG9wdGlvbnMuZm9ybWF0LmZyb20odG8pO1xuICAgICAgICAgICAgaWYgKHRvICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHRvID0gc2NvcGVfU3BlY3RydW0udG9TdGVwcGluZyh0byk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBJZiBwYXJzaW5nIHRoZSBudW1iZXIgZmFpbGVkLCB1c2UgdGhlIGN1cnJlbnQgdmFsdWUuXG4gICAgICAgICAgICBpZiAodG8gPT09IGZhbHNlIHx8IGlzTmFOKHRvKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzY29wZV9Mb2NhdGlvbnNbaGFuZGxlTnVtYmVyXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0bztcbiAgICAgICAgfVxuICAgICAgICAvLyBTZXQgdGhlIHNsaWRlciB2YWx1ZS5cbiAgICAgICAgZnVuY3Rpb24gdmFsdWVTZXQoaW5wdXQsIGZpcmVTZXRFdmVudCwgZXhhY3RJbnB1dCkge1xuICAgICAgICAgICAgdmFyIHZhbHVlcyA9IGFzQXJyYXkoaW5wdXQpO1xuICAgICAgICAgICAgdmFyIGlzSW5pdCA9IHNjb3BlX0xvY2F0aW9uc1swXSA9PT0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgLy8gRXZlbnQgZmlyZXMgYnkgZGVmYXVsdFxuICAgICAgICAgICAgZmlyZVNldEV2ZW50ID0gZmlyZVNldEV2ZW50ID09PSB1bmRlZmluZWQgPyB0cnVlIDogZmlyZVNldEV2ZW50O1xuICAgICAgICAgICAgLy8gQW5pbWF0aW9uIGlzIG9wdGlvbmFsLlxuICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHRoZSBpbml0aWFsIHZhbHVlcyB3ZXJlIHNldCBiZWZvcmUgdXNpbmcgYW5pbWF0ZWQgcGxhY2VtZW50LlxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYW5pbWF0ZSAmJiAhaXNJbml0KSB7XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3NGb3Ioc2NvcGVfVGFyZ2V0LCBvcHRpb25zLmNzc0NsYXNzZXMudGFwLCBvcHRpb25zLmFuaW1hdGlvbkR1cmF0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEZpcnN0IHBhc3MsIHdpdGhvdXQgbG9va0FoZWFkIGJ1dCB3aXRoIGxvb2tCYWNrd2FyZC4gVmFsdWVzIGFyZSBzZXQgZnJvbSBsZWZ0IHRvIHJpZ2h0LlxuICAgICAgICAgICAgc2NvcGVfSGFuZGxlTnVtYmVycy5mb3JFYWNoKGZ1bmN0aW9uIChoYW5kbGVOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICBzZXRIYW5kbGUoaGFuZGxlTnVtYmVyLCByZXNvbHZlVG9WYWx1ZSh2YWx1ZXNbaGFuZGxlTnVtYmVyXSwgaGFuZGxlTnVtYmVyKSwgdHJ1ZSwgZmFsc2UsIGV4YWN0SW5wdXQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2YXIgaSA9IHNjb3BlX0hhbmRsZU51bWJlcnMubGVuZ3RoID09PSAxID8gMCA6IDE7XG4gICAgICAgICAgICAvLyBTZWNvbmRhcnkgcGFzc2VzLiBOb3cgdGhhdCBhbGwgYmFzZSB2YWx1ZXMgYXJlIHNldCwgYXBwbHkgY29uc3RyYWludHMuXG4gICAgICAgICAgICAvLyBJdGVyYXRlIGFsbCBoYW5kbGVzIHRvIGVuc3VyZSBjb25zdHJhaW50cyBhcmUgYXBwbGllZCBmb3IgdGhlIGVudGlyZSBzbGlkZXIgKElzc3VlICMxMDA5KVxuICAgICAgICAgICAgZm9yICg7IGkgPCBzY29wZV9IYW5kbGVOdW1iZXJzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgc2NvcGVfSGFuZGxlTnVtYmVycy5mb3JFYWNoKGZ1bmN0aW9uIChoYW5kbGVOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0SGFuZGxlKGhhbmRsZU51bWJlciwgc2NvcGVfTG9jYXRpb25zW2hhbmRsZU51bWJlcl0sIHRydWUsIHRydWUsIGV4YWN0SW5wdXQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2V0WmluZGV4KCk7XG4gICAgICAgICAgICBzY29wZV9IYW5kbGVOdW1iZXJzLmZvckVhY2goZnVuY3Rpb24gKGhhbmRsZU51bWJlcikge1xuICAgICAgICAgICAgICAgIGZpcmVFdmVudChcInVwZGF0ZVwiLCBoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgICAgIC8vIEZpcmUgdGhlIGV2ZW50IG9ubHkgZm9yIGhhbmRsZXMgdGhhdCByZWNlaXZlZCBhIG5ldyB2YWx1ZSwgYXMgcGVyICM1NzlcbiAgICAgICAgICAgICAgICBpZiAodmFsdWVzW2hhbmRsZU51bWJlcl0gIT09IG51bGwgJiYgZmlyZVNldEV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGZpcmVFdmVudChcInNldFwiLCBoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlc2V0IHNsaWRlciB0byBpbml0aWFsIHZhbHVlc1xuICAgICAgICBmdW5jdGlvbiB2YWx1ZVJlc2V0KGZpcmVTZXRFdmVudCkge1xuICAgICAgICAgICAgdmFsdWVTZXQob3B0aW9ucy5zdGFydCwgZmlyZVNldEV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTZXQgdmFsdWUgZm9yIGEgc2luZ2xlIGhhbmRsZVxuICAgICAgICBmdW5jdGlvbiB2YWx1ZVNldEhhbmRsZShoYW5kbGVOdW1iZXIsIHZhbHVlLCBmaXJlU2V0RXZlbnQsIGV4YWN0SW5wdXQpIHtcbiAgICAgICAgICAgIC8vIEVuc3VyZSBudW1lcmljIGlucHV0XG4gICAgICAgICAgICBoYW5kbGVOdW1iZXIgPSBOdW1iZXIoaGFuZGxlTnVtYmVyKTtcbiAgICAgICAgICAgIGlmICghKGhhbmRsZU51bWJlciA+PSAwICYmIGhhbmRsZU51bWJlciA8IHNjb3BlX0hhbmRsZU51bWJlcnMubGVuZ3RoKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXI6IGludmFsaWQgaGFuZGxlIG51bWJlciwgZ290OiBcIiArIGhhbmRsZU51bWJlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBMb29rIGJvdGggYmFja3dhcmQgYW5kIGZvcndhcmQsIHNpbmNlIHdlIGRvbid0IHdhbnQgdGhpcyBoYW5kbGUgdG8gXCJwdXNoXCIgb3RoZXIgaGFuZGxlcyAoIzk2MCk7XG4gICAgICAgICAgICAvLyBUaGUgZXhhY3RJbnB1dCBhcmd1bWVudCBjYW4gYmUgdXNlZCB0byBpZ25vcmUgc2xpZGVyIHN0ZXBwaW5nICgjNDM2KVxuICAgICAgICAgICAgc2V0SGFuZGxlKGhhbmRsZU51bWJlciwgcmVzb2x2ZVRvVmFsdWUodmFsdWUsIGhhbmRsZU51bWJlciksIHRydWUsIHRydWUsIGV4YWN0SW5wdXQpO1xuICAgICAgICAgICAgZmlyZUV2ZW50KFwidXBkYXRlXCIsIGhhbmRsZU51bWJlcik7XG4gICAgICAgICAgICBpZiAoZmlyZVNldEV2ZW50KSB7XG4gICAgICAgICAgICAgICAgZmlyZUV2ZW50KFwic2V0XCIsIGhhbmRsZU51bWJlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gR2V0IHRoZSBzbGlkZXIgdmFsdWUuXG4gICAgICAgIGZ1bmN0aW9uIHZhbHVlR2V0KCkge1xuICAgICAgICAgICAgdmFyIHZhbHVlcyA9IHNjb3BlX1ZhbHVlcy5tYXAob3B0aW9ucy5mb3JtYXQudG8pO1xuICAgICAgICAgICAgLy8gSWYgb25seSBvbmUgaGFuZGxlIGlzIHVzZWQsIHJldHVybiBhIHNpbmdsZSB2YWx1ZS5cbiAgICAgICAgICAgIGlmICh2YWx1ZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlc1swXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVtb3ZlcyBjbGFzc2VzIGZyb20gdGhlIHJvb3QgYW5kIGVtcHRpZXMgaXQuXG4gICAgICAgIGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgICAgICAvLyByZW1vdmUgcHJvdGVjdGVkIGludGVybmFsIGxpc3RlbmVyc1xuICAgICAgICAgICAgcmVtb3ZlRXZlbnQoSU5URVJOQUxfRVZFTlRfTlMuYXJpYSk7XG4gICAgICAgICAgICByZW1vdmVFdmVudChJTlRFUk5BTF9FVkVOVF9OUy50b29sdGlwcyk7XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhvcHRpb25zLmNzc0NsYXNzZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzKHNjb3BlX1RhcmdldCwgb3B0aW9ucy5jc3NDbGFzc2VzW2tleV0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB3aGlsZSAoc2NvcGVfVGFyZ2V0LmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICAgICAgICBzY29wZV9UYXJnZXQucmVtb3ZlQ2hpbGQoc2NvcGVfVGFyZ2V0LmZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVsZXRlIHNjb3BlX1RhcmdldC5ub1VpU2xpZGVyO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGdldE5leHRTdGVwc0ZvckhhbmRsZShoYW5kbGVOdW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBsb2NhdGlvbiA9IHNjb3BlX0xvY2F0aW9uc1toYW5kbGVOdW1iZXJdO1xuICAgICAgICAgICAgdmFyIG5lYXJieVN0ZXBzID0gc2NvcGVfU3BlY3RydW0uZ2V0TmVhcmJ5U3RlcHMobG9jYXRpb24pO1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gc2NvcGVfVmFsdWVzW2hhbmRsZU51bWJlcl07XG4gICAgICAgICAgICB2YXIgaW5jcmVtZW50ID0gbmVhcmJ5U3RlcHMudGhpc1N0ZXAuc3RlcDtcbiAgICAgICAgICAgIHZhciBkZWNyZW1lbnQgPSBudWxsO1xuICAgICAgICAgICAgLy8gSWYgc25hcHBlZCwgZGlyZWN0bHkgdXNlIGRlZmluZWQgc3RlcCB2YWx1ZVxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuc25hcCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlIC0gbmVhcmJ5U3RlcHMuc3RlcEJlZm9yZS5zdGFydFZhbHVlIHx8IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG5lYXJieVN0ZXBzLnN0ZXBBZnRlci5zdGFydFZhbHVlIC0gdmFsdWUgfHwgbnVsbFxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBJZiB0aGUgbmV4dCB2YWx1ZSBpbiB0aGlzIHN0ZXAgbW92ZXMgaW50byB0aGUgbmV4dCBzdGVwLFxuICAgICAgICAgICAgLy8gdGhlIGluY3JlbWVudCBpcyB0aGUgc3RhcnQgb2YgdGhlIG5leHQgc3RlcCAtIHRoZSBjdXJyZW50IHZhbHVlXG4gICAgICAgICAgICBpZiAoaW5jcmVtZW50ICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSArIGluY3JlbWVudCA+IG5lYXJieVN0ZXBzLnN0ZXBBZnRlci5zdGFydFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGluY3JlbWVudCA9IG5lYXJieVN0ZXBzLnN0ZXBBZnRlci5zdGFydFZhbHVlIC0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gSWYgdGhlIHZhbHVlIGlzIGJleW9uZCB0aGUgc3RhcnRpbmcgcG9pbnRcbiAgICAgICAgICAgIGlmICh2YWx1ZSA+IG5lYXJieVN0ZXBzLnRoaXNTdGVwLnN0YXJ0VmFsdWUpIHtcbiAgICAgICAgICAgICAgICBkZWNyZW1lbnQgPSBuZWFyYnlTdGVwcy50aGlzU3RlcC5zdGVwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobmVhcmJ5U3RlcHMuc3RlcEJlZm9yZS5zdGVwID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGRlY3JlbWVudCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gSWYgYSBoYW5kbGUgaXMgYXQgdGhlIHN0YXJ0IG9mIGEgc3RlcCwgaXQgYWx3YXlzIHN0ZXBzIGJhY2sgaW50byB0aGUgcHJldmlvdXMgc3RlcCBmaXJzdFxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVjcmVtZW50ID0gdmFsdWUgLSBuZWFyYnlTdGVwcy5zdGVwQmVmb3JlLmhpZ2hlc3RTdGVwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gTm93LCBpZiBhdCB0aGUgc2xpZGVyIGVkZ2VzLCB0aGVyZSBpcyBubyBpbi9kZWNyZW1lbnRcbiAgICAgICAgICAgIGlmIChsb2NhdGlvbiA9PT0gMTAwKSB7XG4gICAgICAgICAgICAgICAgaW5jcmVtZW50ID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGxvY2F0aW9uID09PSAwKSB7XG4gICAgICAgICAgICAgICAgZGVjcmVtZW50ID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEFzIHBlciAjMzkxLCB0aGUgY29tcGFyaXNvbiBmb3IgdGhlIGRlY3JlbWVudCBzdGVwIGNhbiBoYXZlIHNvbWUgcm91bmRpbmcgaXNzdWVzLlxuICAgICAgICAgICAgdmFyIHN0ZXBEZWNpbWFscyA9IHNjb3BlX1NwZWN0cnVtLmNvdW50U3RlcERlY2ltYWxzKCk7XG4gICAgICAgICAgICAvLyBSb3VuZCBwZXIgIzM5MVxuICAgICAgICAgICAgaWYgKGluY3JlbWVudCAhPT0gbnVsbCAmJiBpbmNyZW1lbnQgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgaW5jcmVtZW50ID0gTnVtYmVyKGluY3JlbWVudC50b0ZpeGVkKHN0ZXBEZWNpbWFscykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRlY3JlbWVudCAhPT0gbnVsbCAmJiBkZWNyZW1lbnQgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgZGVjcmVtZW50ID0gTnVtYmVyKGRlY3JlbWVudC50b0ZpeGVkKHN0ZXBEZWNpbWFscykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFtkZWNyZW1lbnQsIGluY3JlbWVudF07XG4gICAgICAgIH1cbiAgICAgICAgLy8gR2V0IHRoZSBjdXJyZW50IHN0ZXAgc2l6ZSBmb3IgdGhlIHNsaWRlci5cbiAgICAgICAgZnVuY3Rpb24gZ2V0TmV4dFN0ZXBzKCkge1xuICAgICAgICAgICAgcmV0dXJuIHNjb3BlX0hhbmRsZU51bWJlcnMubWFwKGdldE5leHRTdGVwc0ZvckhhbmRsZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVXBkYXRhYmxlOiBtYXJnaW4sIGxpbWl0LCBwYWRkaW5nLCBzdGVwLCByYW5nZSwgYW5pbWF0ZSwgc25hcFxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVPcHRpb25zKG9wdGlvbnNUb1VwZGF0ZSwgZmlyZVNldEV2ZW50KSB7XG4gICAgICAgICAgICAvLyBTcGVjdHJ1bSBpcyBjcmVhdGVkIHVzaW5nIHRoZSByYW5nZSwgc25hcCwgZGlyZWN0aW9uIGFuZCBzdGVwIG9wdGlvbnMuXG4gICAgICAgICAgICAvLyAnc25hcCcgYW5kICdzdGVwJyBjYW4gYmUgdXBkYXRlZC5cbiAgICAgICAgICAgIC8vIElmICdzbmFwJyBhbmQgJ3N0ZXAnIGFyZSBub3QgcGFzc2VkLCB0aGV5IHNob3VsZCByZW1haW4gdW5jaGFuZ2VkLlxuICAgICAgICAgICAgdmFyIHYgPSB2YWx1ZUdldCgpO1xuICAgICAgICAgICAgdmFyIHVwZGF0ZUFibGUgPSBbXG4gICAgICAgICAgICAgICAgXCJtYXJnaW5cIixcbiAgICAgICAgICAgICAgICBcImxpbWl0XCIsXG4gICAgICAgICAgICAgICAgXCJwYWRkaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJyYW5nZVwiLFxuICAgICAgICAgICAgICAgIFwiYW5pbWF0ZVwiLFxuICAgICAgICAgICAgICAgIFwic25hcFwiLFxuICAgICAgICAgICAgICAgIFwic3RlcFwiLFxuICAgICAgICAgICAgICAgIFwiZm9ybWF0XCIsXG4gICAgICAgICAgICAgICAgXCJwaXBzXCIsXG4gICAgICAgICAgICAgICAgXCJ0b29sdGlwc1wiXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgLy8gT25seSBjaGFuZ2Ugb3B0aW9ucyB0aGF0IHdlJ3JlIGFjdHVhbGx5IHBhc3NlZCB0byB1cGRhdGUuXG4gICAgICAgICAgICB1cGRhdGVBYmxlLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgICAgICAvLyBDaGVjayBmb3IgdW5kZWZpbmVkLiBudWxsIHJlbW92ZXMgdGhlIHZhbHVlLlxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zVG9VcGRhdGVbbmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbE9wdGlvbnNbbmFtZV0gPSBvcHRpb25zVG9VcGRhdGVbbmFtZV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2YXIgbmV3T3B0aW9ucyA9IHRlc3RPcHRpb25zKG9yaWdpbmFsT3B0aW9ucyk7XG4gICAgICAgICAgICAvLyBMb2FkIG5ldyBvcHRpb25zIGludG8gdGhlIHNsaWRlciBzdGF0ZVxuICAgICAgICAgICAgdXBkYXRlQWJsZS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnNUb1VwZGF0ZVtuYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnNbbmFtZV0gPSBuZXdPcHRpb25zW25hbWVdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc2NvcGVfU3BlY3RydW0gPSBuZXdPcHRpb25zLnNwZWN0cnVtO1xuICAgICAgICAgICAgLy8gTGltaXQsIG1hcmdpbiBhbmQgcGFkZGluZyBkZXBlbmQgb24gdGhlIHNwZWN0cnVtIGJ1dCBhcmUgc3RvcmVkIG91dHNpZGUgb2YgaXQuICgjNjc3KVxuICAgICAgICAgICAgb3B0aW9ucy5tYXJnaW4gPSBuZXdPcHRpb25zLm1hcmdpbjtcbiAgICAgICAgICAgIG9wdGlvbnMubGltaXQgPSBuZXdPcHRpb25zLmxpbWl0O1xuICAgICAgICAgICAgb3B0aW9ucy5wYWRkaW5nID0gbmV3T3B0aW9ucy5wYWRkaW5nO1xuICAgICAgICAgICAgLy8gVXBkYXRlIHBpcHMsIHJlbW92ZXMgZXhpc3RpbmcuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5waXBzKSB7XG4gICAgICAgICAgICAgICAgcGlwcyhvcHRpb25zLnBpcHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlUGlwcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVXBkYXRlIHRvb2x0aXBzLCByZW1vdmVzIGV4aXN0aW5nLlxuICAgICAgICAgICAgaWYgKG9wdGlvbnMudG9vbHRpcHMpIHtcbiAgICAgICAgICAgICAgICB0b29sdGlwcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlVG9vbHRpcHMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEludmFsaWRhdGUgdGhlIGN1cnJlbnQgcG9zaXRpb25pbmcgc28gdmFsdWVTZXQgZm9yY2VzIGFuIHVwZGF0ZS5cbiAgICAgICAgICAgIHNjb3BlX0xvY2F0aW9ucyA9IFtdO1xuICAgICAgICAgICAgdmFsdWVTZXQoaXNTZXQob3B0aW9uc1RvVXBkYXRlLnN0YXJ0KSA/IG9wdGlvbnNUb1VwZGF0ZS5zdGFydCA6IHYsIGZpcmVTZXRFdmVudCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSW5pdGlhbGl6YXRpb24gc3RlcHNcbiAgICAgICAgZnVuY3Rpb24gc2V0dXBTbGlkZXIoKSB7XG4gICAgICAgICAgICAvLyBDcmVhdGUgdGhlIGJhc2UgZWxlbWVudCwgaW5pdGlhbGl6ZSBIVE1MIGFuZCBzZXQgY2xhc3Nlcy5cbiAgICAgICAgICAgIC8vIEFkZCBoYW5kbGVzIGFuZCBjb25uZWN0IGVsZW1lbnRzLlxuICAgICAgICAgICAgc2NvcGVfQmFzZSA9IGFkZFNsaWRlcihzY29wZV9UYXJnZXQpO1xuICAgICAgICAgICAgYWRkRWxlbWVudHMob3B0aW9ucy5jb25uZWN0LCBzY29wZV9CYXNlKTtcbiAgICAgICAgICAgIC8vIEF0dGFjaCB1c2VyIGV2ZW50cy5cbiAgICAgICAgICAgIGJpbmRTbGlkZXJFdmVudHMob3B0aW9ucy5ldmVudHMpO1xuICAgICAgICAgICAgLy8gVXNlIHRoZSBwdWJsaWMgdmFsdWUgbWV0aG9kIHRvIHNldCB0aGUgc3RhcnQgdmFsdWVzLlxuICAgICAgICAgICAgdmFsdWVTZXQob3B0aW9ucy5zdGFydCk7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5waXBzKSB7XG4gICAgICAgICAgICAgICAgcGlwcyhvcHRpb25zLnBpcHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9wdGlvbnMudG9vbHRpcHMpIHtcbiAgICAgICAgICAgICAgICB0b29sdGlwcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXJpYSgpO1xuICAgICAgICB9XG4gICAgICAgIHNldHVwU2xpZGVyKCk7XG4gICAgICAgIHZhciBzY29wZV9TZWxmID0ge1xuICAgICAgICAgICAgZGVzdHJveTogZGVzdHJveSxcbiAgICAgICAgICAgIHN0ZXBzOiBnZXROZXh0U3RlcHMsXG4gICAgICAgICAgICBvbjogYmluZEV2ZW50LFxuICAgICAgICAgICAgb2ZmOiByZW1vdmVFdmVudCxcbiAgICAgICAgICAgIGdldDogdmFsdWVHZXQsXG4gICAgICAgICAgICBzZXQ6IHZhbHVlU2V0LFxuICAgICAgICAgICAgc2V0SGFuZGxlOiB2YWx1ZVNldEhhbmRsZSxcbiAgICAgICAgICAgIHJlc2V0OiB2YWx1ZVJlc2V0LFxuICAgICAgICAgICAgLy8gRXhwb3NlZCBmb3IgdW5pdCB0ZXN0aW5nLCBkb24ndCB1c2UgdGhpcyBpbiB5b3VyIGFwcGxpY2F0aW9uLlxuICAgICAgICAgICAgX19tb3ZlSGFuZGxlczogZnVuY3Rpb24gKHVwd2FyZCwgcHJvcG9zYWwsIGhhbmRsZU51bWJlcnMpIHtcbiAgICAgICAgICAgICAgICBtb3ZlSGFuZGxlcyh1cHdhcmQsIHByb3Bvc2FsLCBzY29wZV9Mb2NhdGlvbnMsIGhhbmRsZU51bWJlcnMpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9wdGlvbnM6IG9yaWdpbmFsT3B0aW9ucyxcbiAgICAgICAgICAgIHVwZGF0ZU9wdGlvbnM6IHVwZGF0ZU9wdGlvbnMsXG4gICAgICAgICAgICB0YXJnZXQ6IHNjb3BlX1RhcmdldCxcbiAgICAgICAgICAgIHJlbW92ZVBpcHM6IHJlbW92ZVBpcHMsXG4gICAgICAgICAgICByZW1vdmVUb29sdGlwczogcmVtb3ZlVG9vbHRpcHMsXG4gICAgICAgICAgICBnZXRUb29sdGlwczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzY29wZV9Ub29sdGlwcztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRPcmlnaW5zOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNjb3BlX0hhbmRsZXM7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGlwczogcGlwcyAvLyBJc3N1ZSAjNTk0XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBzY29wZV9TZWxmO1xuICAgIH1cbiAgICAvLyBSdW4gdGhlIHN0YW5kYXJkIGluaXRpYWxpemVyXG4gICAgZnVuY3Rpb24gaW5pdGlhbGl6ZSh0YXJnZXQsIG9yaWdpbmFsT3B0aW9ucykge1xuICAgICAgICBpZiAoIXRhcmdldCB8fCAhdGFyZ2V0Lm5vZGVOYW1lKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyOiBjcmVhdGUgcmVxdWlyZXMgYSBzaW5nbGUgZWxlbWVudCwgZ290OiBcIiArIHRhcmdldCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVGhyb3cgYW4gZXJyb3IgaWYgdGhlIHNsaWRlciB3YXMgYWxyZWFkeSBpbml0aWFsaXplZC5cbiAgICAgICAgaWYgKHRhcmdldC5ub1VpU2xpZGVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyOiBTbGlkZXIgd2FzIGFscmVhZHkgaW5pdGlhbGl6ZWQuXCIpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRlc3QgdGhlIG9wdGlvbnMgYW5kIGNyZWF0ZSB0aGUgc2xpZGVyIGVudmlyb25tZW50O1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHRlc3RPcHRpb25zKG9yaWdpbmFsT3B0aW9ucyk7XG4gICAgICAgIHZhciBhcGkgPSBzY29wZSh0YXJnZXQsIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucyk7XG4gICAgICAgIHRhcmdldC5ub1VpU2xpZGVyID0gYXBpO1xuICAgICAgICByZXR1cm4gYXBpO1xuICAgIH1cbiAgICB2YXIgbm91aXNsaWRlciA9IHtcbiAgICAgICAgLy8gRXhwb3NlZCBmb3IgdW5pdCB0ZXN0aW5nLCBkb24ndCB1c2UgdGhpcyBpbiB5b3VyIGFwcGxpY2F0aW9uLlxuICAgICAgICBfX3NwZWN0cnVtOiBTcGVjdHJ1bSxcbiAgICAgICAgLy8gQSByZWZlcmVuY2UgdG8gdGhlIGRlZmF1bHQgY2xhc3NlcywgYWxsb3dzIGdsb2JhbCBjaGFuZ2VzLlxuICAgICAgICAvLyBVc2UgdGhlIGNzc0NsYXNzZXMgb3B0aW9uIGZvciBjaGFuZ2VzIHRvIG9uZSBzbGlkZXIuXG4gICAgICAgIGNzc0NsYXNzZXM6IGNzc0NsYXNzZXMsXG4gICAgICAgIGNyZWF0ZTogaW5pdGlhbGl6ZVxuICAgIH07XG5cbiAgICBleHBvcnRzLmNyZWF0ZSA9IGluaXRpYWxpemU7XG4gICAgZXhwb3J0cy5jc3NDbGFzc2VzID0gY3NzQ2xhc3NlcztcbiAgICBleHBvcnRzLmRlZmF1bHQgPSBub3Vpc2xpZGVyO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxufSkpKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9ub3Vpc2xpZGVyL2Rpc3Qvbm91aXNsaWRlci5qcyIsIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvbm91aXNsaWRlci9kaXN0L25vdWlzbGlkZXIuY3NzXG4vLyBtb2R1bGUgaWQgPSAxMzZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiKGZ1bmN0aW9uKGZhY3RvcnkpIHtcclxuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcclxuICAgIC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cclxuICAgIGRlZmluZShbXSwgZmFjdG9yeSk7XHJcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xyXG4gICAgLy8gTm9kZS9Db21tb25KU1xyXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIEJyb3dzZXIgZ2xvYmFsc1xyXG4gICAgd2luZG93LndOdW1iID0gZmFjdG9yeSgpO1xyXG4gIH1cclxufSkoZnVuY3Rpb24oKSB7XHJcbiAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gIHZhciBGb3JtYXRPcHRpb25zID0gW1xyXG4gICAgXCJkZWNpbWFsc1wiLFxyXG4gICAgXCJ0aG91c2FuZFwiLFxyXG4gICAgXCJtYXJrXCIsXHJcbiAgICBcInByZWZpeFwiLFxyXG4gICAgXCJzdWZmaXhcIixcclxuICAgIFwiZW5jb2RlclwiLFxyXG4gICAgXCJkZWNvZGVyXCIsXHJcbiAgICBcIm5lZ2F0aXZlQmVmb3JlXCIsXHJcbiAgICBcIm5lZ2F0aXZlXCIsXHJcbiAgICBcImVkaXRcIixcclxuICAgIFwidW5kb1wiXHJcbiAgXTtcclxuXHJcbiAgLy8gR2VuZXJhbFxyXG5cclxuICAvLyBSZXZlcnNlIGEgc3RyaW5nXHJcbiAgZnVuY3Rpb24gc3RyUmV2ZXJzZShhKSB7XHJcbiAgICByZXR1cm4gYVxyXG4gICAgICAuc3BsaXQoXCJcIilcclxuICAgICAgLnJldmVyc2UoKVxyXG4gICAgICAuam9pbihcIlwiKTtcclxuICB9XHJcblxyXG4gIC8vIENoZWNrIGlmIGEgc3RyaW5nIHN0YXJ0cyB3aXRoIGEgc3BlY2lmaWVkIHByZWZpeC5cclxuICBmdW5jdGlvbiBzdHJTdGFydHNXaXRoKGlucHV0LCBtYXRjaCkge1xyXG4gICAgcmV0dXJuIGlucHV0LnN1YnN0cmluZygwLCBtYXRjaC5sZW5ndGgpID09PSBtYXRjaDtcclxuICB9XHJcblxyXG4gIC8vIENoZWNrIGlzIGEgc3RyaW5nIGVuZHMgaW4gYSBzcGVjaWZpZWQgc3VmZml4LlxyXG4gIGZ1bmN0aW9uIHN0ckVuZHNXaXRoKGlucHV0LCBtYXRjaCkge1xyXG4gICAgcmV0dXJuIGlucHV0LnNsaWNlKC0xICogbWF0Y2gubGVuZ3RoKSA9PT0gbWF0Y2g7XHJcbiAgfVxyXG5cclxuICAvLyBUaHJvdyBhbiBlcnJvciBpZiBmb3JtYXR0aW5nIG9wdGlvbnMgYXJlIGluY29tcGF0aWJsZS5cclxuICBmdW5jdGlvbiB0aHJvd0VxdWFsRXJyb3IoRiwgYSwgYikge1xyXG4gICAgaWYgKChGW2FdIHx8IEZbYl0pICYmIEZbYV0gPT09IEZbYl0pIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKGEpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gQ2hlY2sgaWYgYSBudW1iZXIgaXMgZmluaXRlIGFuZCBub3QgTmFOXHJcbiAgZnVuY3Rpb24gaXNWYWxpZE51bWJlcihpbnB1dCkge1xyXG4gICAgcmV0dXJuIHR5cGVvZiBpbnB1dCA9PT0gXCJudW1iZXJcIiAmJiBpc0Zpbml0ZShpbnB1dCk7XHJcbiAgfVxyXG5cclxuICAvLyBQcm92aWRlIHJvdW5kaW5nLWFjY3VyYXRlIHRvRml4ZWQgbWV0aG9kLlxyXG4gIC8vIEJvcnJvd2VkOiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMTMyMzMzMC83NzUyNjVcclxuICBmdW5jdGlvbiB0b0ZpeGVkKHZhbHVlLCBleHApIHtcclxuICAgIHZhbHVlID0gdmFsdWUudG9TdHJpbmcoKS5zcGxpdChcImVcIik7XHJcbiAgICB2YWx1ZSA9IE1hdGgucm91bmQoKyh2YWx1ZVswXSArIFwiZVwiICsgKHZhbHVlWzFdID8gK3ZhbHVlWzFdICsgZXhwIDogZXhwKSkpO1xyXG4gICAgdmFsdWUgPSB2YWx1ZS50b1N0cmluZygpLnNwbGl0KFwiZVwiKTtcclxuICAgIHJldHVybiAoKyh2YWx1ZVswXSArIFwiZVwiICsgKHZhbHVlWzFdID8gK3ZhbHVlWzFdIC0gZXhwIDogLWV4cCkpKS50b0ZpeGVkKGV4cCk7XHJcbiAgfVxyXG5cclxuICAvLyBGb3JtYXR0aW5nXHJcblxyXG4gIC8vIEFjY2VwdCBhIG51bWJlciBhcyBpbnB1dCwgb3V0cHV0IGZvcm1hdHRlZCBzdHJpbmcuXHJcbiAgZnVuY3Rpb24gZm9ybWF0VG8oXHJcbiAgICBkZWNpbWFscyxcclxuICAgIHRob3VzYW5kLFxyXG4gICAgbWFyayxcclxuICAgIHByZWZpeCxcclxuICAgIHN1ZmZpeCxcclxuICAgIGVuY29kZXIsXHJcbiAgICBkZWNvZGVyLFxyXG4gICAgbmVnYXRpdmVCZWZvcmUsXHJcbiAgICBuZWdhdGl2ZSxcclxuICAgIGVkaXQsXHJcbiAgICB1bmRvLFxyXG4gICAgaW5wdXRcclxuICApIHtcclxuICAgIHZhciBvcmlnaW5hbElucHV0ID0gaW5wdXQsXHJcbiAgICAgIGlucHV0SXNOZWdhdGl2ZSxcclxuICAgICAgaW5wdXRQaWVjZXMsXHJcbiAgICAgIGlucHV0QmFzZSxcclxuICAgICAgaW5wdXREZWNpbWFscyA9IFwiXCIsXHJcbiAgICAgIG91dHB1dCA9IFwiXCI7XHJcblxyXG4gICAgLy8gQXBwbHkgdXNlciBlbmNvZGVyIHRvIHRoZSBpbnB1dC5cclxuICAgIC8vIEV4cGVjdGVkIG91dGNvbWU6IG51bWJlci5cclxuICAgIGlmIChlbmNvZGVyKSB7XHJcbiAgICAgIGlucHV0ID0gZW5jb2RlcihpbnB1dCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gU3RvcCBpZiBubyB2YWxpZCBudW1iZXIgd2FzIHByb3ZpZGVkLCB0aGUgbnVtYmVyIGlzIGluZmluaXRlIG9yIE5hTi5cclxuICAgIGlmICghaXNWYWxpZE51bWJlcihpbnB1dCkpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFJvdW5kaW5nIGF3YXkgZGVjaW1hbHMgbWlnaHQgY2F1c2UgYSB2YWx1ZSBvZiAtMFxyXG4gICAgLy8gd2hlbiB1c2luZyB2ZXJ5IHNtYWxsIHJhbmdlcy4gUmVtb3ZlIHRob3NlIGNhc2VzLlxyXG4gICAgaWYgKGRlY2ltYWxzICE9PSBmYWxzZSAmJiBwYXJzZUZsb2F0KGlucHV0LnRvRml4ZWQoZGVjaW1hbHMpKSA9PT0gMCkge1xyXG4gICAgICBpbnB1dCA9IDA7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRm9ybWF0dGluZyBpcyBkb25lIG9uIGFic29sdXRlIG51bWJlcnMsXHJcbiAgICAvLyBkZWNvcmF0ZWQgYnkgYW4gb3B0aW9uYWwgbmVnYXRpdmUgc3ltYm9sLlxyXG4gICAgaWYgKGlucHV0IDwgMCkge1xyXG4gICAgICBpbnB1dElzTmVnYXRpdmUgPSB0cnVlO1xyXG4gICAgICBpbnB1dCA9IE1hdGguYWJzKGlucHV0KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBSZWR1Y2UgdGhlIG51bWJlciBvZiBkZWNpbWFscyB0byB0aGUgc3BlY2lmaWVkIG9wdGlvbi5cclxuICAgIGlmIChkZWNpbWFscyAhPT0gZmFsc2UpIHtcclxuICAgICAgaW5wdXQgPSB0b0ZpeGVkKGlucHV0LCBkZWNpbWFscyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVHJhbnNmb3JtIHRoZSBudW1iZXIgaW50byBhIHN0cmluZywgc28gaXQgY2FuIGJlIHNwbGl0LlxyXG4gICAgaW5wdXQgPSBpbnB1dC50b1N0cmluZygpO1xyXG5cclxuICAgIC8vIEJyZWFrIHRoZSBudW1iZXIgb24gdGhlIGRlY2ltYWwgc2VwYXJhdG9yLlxyXG4gICAgaWYgKGlucHV0LmluZGV4T2YoXCIuXCIpICE9PSAtMSkge1xyXG4gICAgICBpbnB1dFBpZWNlcyA9IGlucHV0LnNwbGl0KFwiLlwiKTtcclxuXHJcbiAgICAgIGlucHV0QmFzZSA9IGlucHV0UGllY2VzWzBdO1xyXG5cclxuICAgICAgaWYgKG1hcmspIHtcclxuICAgICAgICBpbnB1dERlY2ltYWxzID0gbWFyayArIGlucHV0UGllY2VzWzFdO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyBJZiBpdCBpc24ndCBzcGxpdCwgdGhlIGVudGlyZSBudW1iZXIgd2lsbCBkby5cclxuICAgICAgaW5wdXRCYXNlID0gaW5wdXQ7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gR3JvdXAgbnVtYmVycyBpbiBzZXRzIG9mIHRocmVlLlxyXG4gICAgaWYgKHRob3VzYW5kKSB7XHJcbiAgICAgIGlucHV0QmFzZSA9IHN0clJldmVyc2UoaW5wdXRCYXNlKS5tYXRjaCgvLnsxLDN9L2cpO1xyXG4gICAgICBpbnB1dEJhc2UgPSBzdHJSZXZlcnNlKGlucHV0QmFzZS5qb2luKHN0clJldmVyc2UodGhvdXNhbmQpKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSWYgdGhlIG51bWJlciBpcyBuZWdhdGl2ZSwgcHJlZml4IHdpdGggbmVnYXRpb24gc3ltYm9sLlxyXG4gICAgaWYgKGlucHV0SXNOZWdhdGl2ZSAmJiBuZWdhdGl2ZUJlZm9yZSkge1xyXG4gICAgICBvdXRwdXQgKz0gbmVnYXRpdmVCZWZvcmU7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUHJlZml4IHRoZSBudW1iZXJcclxuICAgIGlmIChwcmVmaXgpIHtcclxuICAgICAgb3V0cHV0ICs9IHByZWZpeDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBOb3JtYWwgbmVnYXRpdmUgb3B0aW9uIGNvbWVzIGFmdGVyIHRoZSBwcmVmaXguIERlZmF1bHRzIHRvICctJy5cclxuICAgIGlmIChpbnB1dElzTmVnYXRpdmUgJiYgbmVnYXRpdmUpIHtcclxuICAgICAgb3V0cHV0ICs9IG5lZ2F0aXZlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEFwcGVuZCB0aGUgYWN0dWFsIG51bWJlci5cclxuICAgIG91dHB1dCArPSBpbnB1dEJhc2U7XHJcbiAgICBvdXRwdXQgKz0gaW5wdXREZWNpbWFscztcclxuXHJcbiAgICAvLyBBcHBseSB0aGUgc3VmZml4LlxyXG4gICAgaWYgKHN1ZmZpeCkge1xyXG4gICAgICBvdXRwdXQgKz0gc3VmZml4O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFJ1biB0aGUgb3V0cHV0IHRocm91Z2ggYSB1c2VyLXNwZWNpZmllZCBwb3N0LWZvcm1hdHRlci5cclxuICAgIGlmIChlZGl0KSB7XHJcbiAgICAgIG91dHB1dCA9IGVkaXQob3V0cHV0LCBvcmlnaW5hbElucHV0KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBBbGwgZG9uZS5cclxuICAgIHJldHVybiBvdXRwdXQ7XHJcbiAgfVxyXG5cclxuICAvLyBBY2NlcHQgYSBzdGluZyBhcyBpbnB1dCwgb3V0cHV0IGRlY29kZWQgbnVtYmVyLlxyXG4gIGZ1bmN0aW9uIGZvcm1hdEZyb20oXHJcbiAgICBkZWNpbWFscyxcclxuICAgIHRob3VzYW5kLFxyXG4gICAgbWFyayxcclxuICAgIHByZWZpeCxcclxuICAgIHN1ZmZpeCxcclxuICAgIGVuY29kZXIsXHJcbiAgICBkZWNvZGVyLFxyXG4gICAgbmVnYXRpdmVCZWZvcmUsXHJcbiAgICBuZWdhdGl2ZSxcclxuICAgIGVkaXQsXHJcbiAgICB1bmRvLFxyXG4gICAgaW5wdXRcclxuICApIHtcclxuICAgIHZhciBvcmlnaW5hbElucHV0ID0gaW5wdXQsXHJcbiAgICAgIGlucHV0SXNOZWdhdGl2ZSxcclxuICAgICAgb3V0cHV0ID0gXCJcIjtcclxuXHJcbiAgICAvLyBVc2VyIGRlZmluZWQgcHJlLWRlY29kZXIuIFJlc3VsdCBtdXN0IGJlIGEgbm9uIGVtcHR5IHN0cmluZy5cclxuICAgIGlmICh1bmRvKSB7XHJcbiAgICAgIGlucHV0ID0gdW5kbyhpbnB1dCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVGVzdCB0aGUgaW5wdXQuIENhbid0IGJlIGVtcHR5LlxyXG4gICAgaWYgKCFpbnB1dCB8fCB0eXBlb2YgaW5wdXQgIT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIElmIHRoZSBzdHJpbmcgc3RhcnRzIHdpdGggdGhlIG5lZ2F0aXZlQmVmb3JlIHZhbHVlOiByZW1vdmUgaXQuXHJcbiAgICAvLyBSZW1lbWJlciBpcyB3YXMgdGhlcmUsIHRoZSBudW1iZXIgaXMgbmVnYXRpdmUuXHJcbiAgICBpZiAobmVnYXRpdmVCZWZvcmUgJiYgc3RyU3RhcnRzV2l0aChpbnB1dCwgbmVnYXRpdmVCZWZvcmUpKSB7XHJcbiAgICAgIGlucHV0ID0gaW5wdXQucmVwbGFjZShuZWdhdGl2ZUJlZm9yZSwgXCJcIik7XHJcbiAgICAgIGlucHV0SXNOZWdhdGl2ZSA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUmVwZWF0IHRoZSBzYW1lIHByb2NlZHVyZSBmb3IgdGhlIHByZWZpeC5cclxuICAgIGlmIChwcmVmaXggJiYgc3RyU3RhcnRzV2l0aChpbnB1dCwgcHJlZml4KSkge1xyXG4gICAgICBpbnB1dCA9IGlucHV0LnJlcGxhY2UocHJlZml4LCBcIlwiKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBBbmQgYWdhaW4gZm9yIG5lZ2F0aXZlLlxyXG4gICAgaWYgKG5lZ2F0aXZlICYmIHN0clN0YXJ0c1dpdGgoaW5wdXQsIG5lZ2F0aXZlKSkge1xyXG4gICAgICBpbnB1dCA9IGlucHV0LnJlcGxhY2UobmVnYXRpdmUsIFwiXCIpO1xyXG4gICAgICBpbnB1dElzTmVnYXRpdmUgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFJlbW92ZSB0aGUgc3VmZml4LlxyXG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU3RyaW5nL3NsaWNlXHJcbiAgICBpZiAoc3VmZml4ICYmIHN0ckVuZHNXaXRoKGlucHV0LCBzdWZmaXgpKSB7XHJcbiAgICAgIGlucHV0ID0gaW5wdXQuc2xpY2UoMCwgLTEgKiBzdWZmaXgubGVuZ3RoKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBSZW1vdmUgdGhlIHRob3VzYW5kIGdyb3VwaW5nLlxyXG4gICAgaWYgKHRob3VzYW5kKSB7XHJcbiAgICAgIGlucHV0ID0gaW5wdXQuc3BsaXQodGhvdXNhbmQpLmpvaW4oXCJcIik7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gU2V0IHRoZSBkZWNpbWFsIHNlcGFyYXRvciBiYWNrIHRvIHBlcmlvZC5cclxuICAgIGlmIChtYXJrKSB7XHJcbiAgICAgIGlucHV0ID0gaW5wdXQucmVwbGFjZShtYXJrLCBcIi5cIik7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUHJlcGVuZCB0aGUgbmVnYXRpdmUgc3ltYm9sLlxyXG4gICAgaWYgKGlucHV0SXNOZWdhdGl2ZSkge1xyXG4gICAgICBvdXRwdXQgKz0gXCItXCI7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQWRkIHRoZSBudW1iZXJcclxuICAgIG91dHB1dCArPSBpbnB1dDtcclxuXHJcbiAgICAvLyBUcmltIGFsbCBub24tbnVtZXJpYyBjaGFyYWN0ZXJzIChhbGxvdyAnLicgYW5kICctJyk7XHJcbiAgICBvdXRwdXQgPSBvdXRwdXQucmVwbGFjZSgvW14wLTlcXC5cXC0uXS9nLCBcIlwiKTtcclxuXHJcbiAgICAvLyBUaGUgdmFsdWUgY29udGFpbnMgbm8gcGFyc2UtYWJsZSBudW1iZXIuXHJcbiAgICBpZiAob3V0cHV0ID09PSBcIlwiKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBDb3ZlcnQgdG8gbnVtYmVyLlxyXG4gICAgb3V0cHV0ID0gTnVtYmVyKG91dHB1dCk7XHJcblxyXG4gICAgLy8gUnVuIHRoZSB1c2VyLXNwZWNpZmllZCBwb3N0LWRlY29kZXIuXHJcbiAgICBpZiAoZGVjb2Rlcikge1xyXG4gICAgICBvdXRwdXQgPSBkZWNvZGVyKG91dHB1dCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ2hlY2sgaXMgdGhlIG91dHB1dCBpcyB2YWxpZCwgb3RoZXJ3aXNlOiByZXR1cm4gZmFsc2UuXHJcbiAgICBpZiAoIWlzVmFsaWROdW1iZXIob3V0cHV0KSkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG91dHB1dDtcclxuICB9XHJcblxyXG4gIC8vIEZyYW1ld29ya1xyXG5cclxuICAvLyBWYWxpZGF0ZSBmb3JtYXR0aW5nIG9wdGlvbnNcclxuICBmdW5jdGlvbiB2YWxpZGF0ZShpbnB1dE9wdGlvbnMpIHtcclxuICAgIHZhciBpLFxyXG4gICAgICBvcHRpb25OYW1lLFxyXG4gICAgICBvcHRpb25WYWx1ZSxcclxuICAgICAgZmlsdGVyZWRPcHRpb25zID0ge307XHJcblxyXG4gICAgaWYgKGlucHV0T3B0aW9uc1tcInN1ZmZpeFwiXSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIGlucHV0T3B0aW9uc1tcInN1ZmZpeFwiXSA9IGlucHV0T3B0aW9uc1tcInBvc3RmaXhcIl07XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChpID0gMDsgaSA8IEZvcm1hdE9wdGlvbnMubGVuZ3RoOyBpICs9IDEpIHtcclxuICAgICAgb3B0aW9uTmFtZSA9IEZvcm1hdE9wdGlvbnNbaV07XHJcbiAgICAgIG9wdGlvblZhbHVlID0gaW5wdXRPcHRpb25zW29wdGlvbk5hbWVdO1xyXG5cclxuICAgICAgaWYgKG9wdGlvblZhbHVlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAvLyBPbmx5IGRlZmF1bHQgaWYgbmVnYXRpdmVCZWZvcmUgaXNuJ3Qgc2V0LlxyXG4gICAgICAgIGlmIChvcHRpb25OYW1lID09PSBcIm5lZ2F0aXZlXCIgJiYgIWZpbHRlcmVkT3B0aW9ucy5uZWdhdGl2ZUJlZm9yZSkge1xyXG4gICAgICAgICAgZmlsdGVyZWRPcHRpb25zW29wdGlvbk5hbWVdID0gXCItXCI7XHJcbiAgICAgICAgICAvLyBEb24ndCBzZXQgYSBkZWZhdWx0IGZvciBtYXJrIHdoZW4gJ3Rob3VzYW5kJyBpcyBzZXQuXHJcbiAgICAgICAgfSBlbHNlIGlmIChvcHRpb25OYW1lID09PSBcIm1hcmtcIiAmJiBmaWx0ZXJlZE9wdGlvbnMudGhvdXNhbmQgIT09IFwiLlwiKSB7XHJcbiAgICAgICAgICBmaWx0ZXJlZE9wdGlvbnNbb3B0aW9uTmFtZV0gPSBcIi5cIjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgZmlsdGVyZWRPcHRpb25zW29wdGlvbk5hbWVdID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBGbG9hdGluZyBwb2ludHMgaW4gSlMgYXJlIHN0YWJsZSB1cCB0byA3IGRlY2ltYWxzLlxyXG4gICAgICB9IGVsc2UgaWYgKG9wdGlvbk5hbWUgPT09IFwiZGVjaW1hbHNcIikge1xyXG4gICAgICAgIGlmIChvcHRpb25WYWx1ZSA+PSAwICYmIG9wdGlvblZhbHVlIDwgOCkge1xyXG4gICAgICAgICAgZmlsdGVyZWRPcHRpb25zW29wdGlvbk5hbWVdID0gb3B0aW9uVmFsdWU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihvcHRpb25OYW1lKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFRoZXNlIG9wdGlvbnMsIHdoZW4gcHJvdmlkZWQsIG11c3QgYmUgZnVuY3Rpb25zLlxyXG4gICAgICB9IGVsc2UgaWYgKFxyXG4gICAgICAgIG9wdGlvbk5hbWUgPT09IFwiZW5jb2RlclwiIHx8XHJcbiAgICAgICAgb3B0aW9uTmFtZSA9PT0gXCJkZWNvZGVyXCIgfHxcclxuICAgICAgICBvcHRpb25OYW1lID09PSBcImVkaXRcIiB8fFxyXG4gICAgICAgIG9wdGlvbk5hbWUgPT09IFwidW5kb1wiXHJcbiAgICAgICkge1xyXG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9uVmFsdWUgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgZmlsdGVyZWRPcHRpb25zW29wdGlvbk5hbWVdID0gb3B0aW9uVmFsdWU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihvcHRpb25OYW1lKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIE90aGVyIG9wdGlvbnMgYXJlIHN0cmluZ3MuXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25WYWx1ZSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgZmlsdGVyZWRPcHRpb25zW29wdGlvbk5hbWVdID0gb3B0aW9uVmFsdWU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihvcHRpb25OYW1lKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBTb21lIHZhbHVlcyBjYW4ndCBiZSBleHRyYWN0ZWQgZnJvbSBhXHJcbiAgICAvLyBzdHJpbmcgaWYgY2VydGFpbiBjb21iaW5hdGlvbnMgYXJlIHByZXNlbnQuXHJcbiAgICB0aHJvd0VxdWFsRXJyb3IoZmlsdGVyZWRPcHRpb25zLCBcIm1hcmtcIiwgXCJ0aG91c2FuZFwiKTtcclxuICAgIHRocm93RXF1YWxFcnJvcihmaWx0ZXJlZE9wdGlvbnMsIFwicHJlZml4XCIsIFwibmVnYXRpdmVcIik7XHJcbiAgICB0aHJvd0VxdWFsRXJyb3IoZmlsdGVyZWRPcHRpb25zLCBcInByZWZpeFwiLCBcIm5lZ2F0aXZlQmVmb3JlXCIpO1xyXG5cclxuICAgIHJldHVybiBmaWx0ZXJlZE9wdGlvbnM7XHJcbiAgfVxyXG5cclxuICAvLyBQYXNzIGFsbCBvcHRpb25zIGFzIGZ1bmN0aW9uIGFyZ3VtZW50c1xyXG4gIGZ1bmN0aW9uIHBhc3NBbGwob3B0aW9ucywgbWV0aG9kLCBpbnB1dCkge1xyXG4gICAgdmFyIGksXHJcbiAgICAgIGFyZ3MgPSBbXTtcclxuXHJcbiAgICAvLyBBZGQgYWxsIG9wdGlvbnMgaW4gb3JkZXIgb2YgRm9ybWF0T3B0aW9uc1xyXG4gICAgZm9yIChpID0gMDsgaSA8IEZvcm1hdE9wdGlvbnMubGVuZ3RoOyBpICs9IDEpIHtcclxuICAgICAgYXJncy5wdXNoKG9wdGlvbnNbRm9ybWF0T3B0aW9uc1tpXV0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEFwcGVuZCB0aGUgaW5wdXQsIHRoZW4gY2FsbCB0aGUgbWV0aG9kLCBwcmVzZW50aW5nIGFsbFxyXG4gICAgLy8gb3B0aW9ucyBhcyBhcmd1bWVudHMuXHJcbiAgICBhcmdzLnB1c2goaW5wdXQpO1xyXG4gICAgcmV0dXJuIG1ldGhvZC5hcHBseShcIlwiLCBhcmdzKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHdOdW1iKG9wdGlvbnMpIHtcclxuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiB3TnVtYikpIHtcclxuICAgICAgcmV0dXJuIG5ldyB3TnVtYihvcHRpb25zKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgIT09IFwib2JqZWN0XCIpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIG9wdGlvbnMgPSB2YWxpZGF0ZShvcHRpb25zKTtcclxuXHJcbiAgICAvLyBDYWxsICdmb3JtYXRUbycgd2l0aCBwcm9wZXIgYXJndW1lbnRzLlxyXG4gICAgdGhpcy50byA9IGZ1bmN0aW9uKGlucHV0KSB7XHJcbiAgICAgIHJldHVybiBwYXNzQWxsKG9wdGlvbnMsIGZvcm1hdFRvLCBpbnB1dCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIENhbGwgJ2Zvcm1hdEZyb20nIHdpdGggcHJvcGVyIGFyZ3VtZW50cy5cclxuICAgIHRoaXMuZnJvbSA9IGZ1bmN0aW9uKGlucHV0KSB7XHJcbiAgICAgIHJldHVybiBwYXNzQWxsKG9wdGlvbnMsIGZvcm1hdEZyb20sIGlucHV0KTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICByZXR1cm4gd051bWI7XHJcbn0pO1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvd251bWIvd051bWIuanMiLCIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2NvbW1vbi5ibG9ja3MvcHJpY2UvcHJpY2UubGVzc1xuLy8gbW9kdWxlIGlkID0gMTM4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvY29tbW9uLmJsb2Nrcy9yZWNvbW1lbmRhdGlvbnMvcmVjb21tZW5kYXRpb25zLmxlc3Ncbi8vIG1vZHVsZSBpZCA9IDEzOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2NvbW1vbi5ibG9ja3Mvc2VjdGlvbi9zZWN0aW9uLmxlc3Ncbi8vIG1vZHVsZSBpZCA9IDE0MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2NvbW1vbi5ibG9ja3Mvc2xpZGVyL3NsaWRlci5sZXNzXG4vLyBtb2R1bGUgaWQgPSAxNDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21tb24uYmxvY2tzL3NvY2lhbC9zb2NpYWwubGVzc1xuLy8gbW9kdWxlIGlkID0gMTQyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImZ1bmN0aW9uIHJlcXVpcmVBbGwocikgeyByLmtleXMoKS5mb3JFYWNoKHIpOyB9XG5cbnJlcXVpcmVBbGwocmVxdWlyZS5jb250ZXh0KCcuLycsIHRydWUsIC9cXC5zdmckLykpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2Fzc2V0cy9zdmcvc3ZnLXNwcml0ZS5qcyIsInZhciBtYXAgPSB7XG5cdFwiLi9tdWx0aWNvbG9yL2ljb24tYnJva2VuLWNoYWluLnN2Z1wiOiAxNDUsXG5cdFwiLi9tdWx0aWNvbG9yL2ljb24tYnJva2VuLXJpbmcuc3ZnXCI6IDE0Nixcblx0XCIuL211bHRpY29sb3IvaWNvbi1jb2lucy5zdmdcIjogMTQ3LFxuXHRcIi4vbXVsdGljb2xvci9pY29uLWdpZnQuc3ZnXCI6IDE0OCxcblx0XCIuL211bHRpY29sb3IvaWNvbi1pbmNvbXBsZXRlLWVhcnJpbmdzLnN2Z1wiOiAxNDksXG5cdFwiLi9tdWx0aWNvbG9yL2ljb24tbmV3LWpld2Vscnkuc3ZnXCI6IDE1MCxcblx0XCIuL211bHRpY29sb3IvaWNvbi1vbGQtY2hhaW4uc3ZnXCI6IDE1MSxcblx0XCIuL211bHRpY29sb3IvaWNvbi1vbGQtamV3ZWxyeS5zdmdcIjogMTUyLFxuXHRcIi4vbXVsdGljb2xvci9pY29uLW9ubGluZWJlZXMuc3ZnXCI6IDE1Myxcblx0XCIuL211bHRpY29sb3IvaWNvbi1wcmVjaW91cy5zdmdcIjogMTU0LFxuXHRcIi4vbXVsdGljb2xvci9pY29uLXJpbmdzLnN2Z1wiOiAxNTUsXG5cdFwiLi9tdWx0aWNvbG9yL2ljb24tcm9rZXQuc3ZnXCI6IDE1Nixcblx0XCIuL211bHRpY29sb3IvaWNvbi1zdGFydC5zdmdcIjogMTU3LFxuXHRcIi4vbXVsdGljb2xvci9pY29uLXN0b21hdG9sb2dvY2hlc2tvZS16b2xvdG8uc3ZnXCI6IDE1OCxcblx0XCIuL211bHRpY29sb3IvaWNvbi13ZWRkaW5nLnN2Z1wiOiAxNTksXG5cdFwiLi9tdWx0aWNvbG9yL2ljb24td2l0aG91dC1zYW1wbGUuc3ZnXCI6IDE2MCxcblx0XCIuL211bHRpY29sb3IvaWNvbi16b2xvdGllLWtvcm9ua2kuc3ZnXCI6IDE2MSxcblx0XCIuL211bHRpY29sb3IvaWNvbi16b2xvdG8tcHJvYmEuc3ZnXCI6IDE2Mixcblx0XCIuL211bHRpY29sb3IvdGVsZWdyYW1tLnN2Z1wiOiAxNjMsXG5cdFwiLi9tdWx0aWNvbG9yL3doYXRzdXAuc3ZnXCI6IDE2NCxcblx0XCIuL211bHRpY29sb3Ivd2liZXIuc3ZnXCI6IDE2NVxufTtcbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0KHJlcSkge1xuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyh3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSk7XG59O1xuZnVuY3Rpb24gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkge1xuXHR2YXIgaWQgPSBtYXBbcmVxXTtcblx0aWYoIShpZCArIDEpKSAvLyBjaGVjayBmb3IgbnVtYmVyIG9yIHN0cmluZ1xuXHRcdHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyByZXEgKyBcIicuXCIpO1xuXHRyZXR1cm4gaWQ7XG59O1xud2VicGFja0NvbnRleHQua2V5cyA9IGZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0S2V5cygpIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKG1hcCk7XG59O1xud2VicGFja0NvbnRleHQucmVzb2x2ZSA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZTtcbm1vZHVsZS5leHBvcnRzID0gd2VicGFja0NvbnRleHQ7XG53ZWJwYWNrQ29udGV4dC5pZCA9IDE0NDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9hc3NldHMvc3ZnIFxcLnN2ZyRcbi8vIG1vZHVsZSBpZCA9IDE0NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQgU3ByaXRlU3ltYm9sIGZyb20gXCJzdmctYmFrZXItcnVudGltZS9icm93c2VyLXN5bWJvbFwiO1xuaW1wb3J0IHNwcml0ZSBmcm9tIFwic3ZnLXNwcml0ZS1sb2FkZXIvcnVudGltZS9icm93c2VyLXNwcml0ZS5idWlsZFwiO1xudmFyIHN5bWJvbCA9IG5ldyBTcHJpdGVTeW1ib2woe1xuICBcImlkXCI6IFwiaWNvbi1icm9rZW4tY2hhaW5cIixcbiAgXCJ1c2VcIjogXCJpY29uLWJyb2tlbi1jaGFpbi11c2FnZVwiLFxuICBcInZpZXdCb3hcIjogXCIwIDAgNTEwIDUxMFwiLFxuICBcImNvbnRlbnRcIjogXCI8c3ltYm9sIHZpZXdCb3g9XFxcIjAgMCA1MTAgNTEwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIGlkPVxcXCJpY29uLWJyb2tlbi1jaGFpblxcXCI+PHBhdGggZD1cXFwiTTI5MS42NjYgMzUwLjcyOWwtNjAuMDYzIDYwLjQyMWMtMjcuOTIgMjguMTY4LTczLjE5OCAyOC4xNjgtMTAxLjExOCAwbC0xMy4zNTQtMTMuNDczLTE4LjY4LTE4LjgzOWMtNS4xMDctNS4xNTctOS4yOS0xMC44OS0xMi41MTktMTcuMDExLTE0LjQ3Ny0yNy4yNzQtMTAuMzAzLTYxLjk3MSAxMi41MTktODQuOTcybDU5Ljk2NC02MC4zMjFjMy44NzUtMy44OTUgMTAuMTg0LTMuODg1IDE0LjA0OS4wMWwxOS4zOTUgMTkuNTY0YzMuODI1IDMuODY1IDMuODI1IDEwLjA5NS0uMDEgMTMuOTVsLTUzLjM1NiA1My42MzVhMjkuNjU4IDI5LjY1OCAwIDAgMC03LjU4MSAxMy4xNTVjLTIuNzAzIDkuOTY2LS4xNzkgMjEuMDY0IDcuNTgxIDI4Ljg4NGwxNS4yMjIgMTUuMzYxIDkuNTg4IDkuNjY4YzExLjUwNiAxMS42MDUgMzAuMTc1IDExLjYwNSA0MS42OTEgMGw1My4yNDctNTMuNTM1YTkuODk3IDkuODk3IDAgMCAxIDE0LjA0OS4wMWwxOS4zODUgMTkuNTU0YzMuODI3IDMuODU0IDMuODI3IDEwLjA4NC0uMDA5IDEzLjkzOXpcXFwiIGZpbGw9XFxcIiNlZGY0ZmZcXFwiIC8+PHBhdGggZD1cXFwiTTE1My43MTUgMzYxLjA5M2wtMzYuNTg0IDM2LjU4NC0xOC42OC0xOC44MzljLTUuMTA3LTUuMTU3LTkuMjktMTAuODktMTIuNTE5LTE3LjAxMWw0NC45OC00NC45OGMtMi43MDMgOS45NjYtLjE3OSAyMS4wNjQgNy41ODEgMjguODg0elxcXCIgZmlsbD1cXFwiI2RiZWFmZlxcXCIgLz48ZyBmaWxsPVxcXCIjZGJlYWZmXFxcIj48cGF0aCBkPVxcXCJNMTc3LjYxIDIyMS44NjNjMy44MjggMy44NjIgMy44MjQgMTAuMDg5LS4wMTEgMTMuOTQ0bC01My4zNDkgNTMuNjM1Yy0xMS41MDYgMTEuNjE2LTExLjUwNiAzMC40NCAwIDQyLjA0NWwyNC44MDkgMjUuMDIzYy41MS41MTQgMS4wMzkuOTk4IDEuNTc1IDEuNDY2bC0xMi4xMzctMTIuMjQyYy0xMS41MDYtMTEuNjA1LTExLjUwNi0zMC40MyAwLTQyLjA0NWw1My4zNDktNTMuNjM1YzMuODM1LTMuODU1IDMuODQtMTAuMDgzLjAxMS0xMy45NDRsLTE5LjM5Ni0xOS41NjNhMTAuMDEgMTAuMDEgMCAwIDAtLjkzNi0uODIyek0yOTEuNjc2IDMzNi43ODhsLTE5LjM4OS0xOS41NTZhMTAuMDEgMTAuMDEgMCAwIDAtLjkzNi0uODIybDYuMDc4IDYuMTNhOS44OTQgOS44OTQgMCAwIDEtLjAxIDEzLjk0M0wyMTcuMzUyIDM5Ni45Yy0yNy4xMDcgMjcuMzUtNzAuNTc4IDI4LjE0LTk4LjYzNyAyLjM4bDExLjc2NiAxMS44NjhjMjcuOTE5IDI4LjE2OSA3My4xOTkgMjguMTY5IDEwMS4xMTggMGw2MC4wNjYtNjAuNDE3YzMuODM0LTMuODU2IDMuODM4LTEwLjA4My4wMTEtMTMuOTQzelxcXCIgLz48L2c+PHBhdGggZD1cXFwiTTIwLjc5NCA0OTYuNjlsLTcuNzA0LTcuNzA0Yy03LjEzLTcuMTMtNy4xMy0xOC42OTEgMC0yNS44MjFsMTM5LjE1My0xMzkuMTUzYzcuMTMtNy4xMyAxOC42OTEtNy4xMyAyNS44MjEgMGw3LjcwNCA3LjcwNGM3LjEzIDcuMTMgNy4xMyAxOC42OTEgMCAyNS44MjFMNDYuNjE1IDQ5Ni42OWMtNy4xMyA3LjEzLTE4LjY5MSA3LjEzLTI1LjgyMSAwelxcXCIgZmlsbD1cXFwiI2VkZjRmZlxcXCIgLz48cGF0aCBkPVxcXCJNMTg1Ljg1MSAzMzEuNzk5bC03Ljg2OS03Ljg2OWExOC4xIDE4LjEgMCAwIDAtMy42MDUtMi43NzNjNC4xMTkgNi45NTkgMy4yMDggMTYuMDY5LTIuNzczIDIyLjA1TDMyLjI4NSA0ODIuNTI1Yy01Ljk4MSA1Ljk4MS0xNS4wOTIgNi44OTItMjIuMDUgMi43NzNhMTguMTM4IDE4LjEzOCAwIDAgMCAyLjc3MyAzLjYwNWw3Ljg2OSA3Ljg2OWM3LjA4NSA3LjA4NSAxOC41NzEgNy4wODUgMjUuNjU1IDBsMTM5LjMxOS0xMzkuMzE4YzcuMDg0LTcuMDg0IDcuMDg0LTE4LjU3MSAwLTI1LjY1NXpcXFwiIGZpbGw9XFxcIiNkYmVhZmZcXFwiIC8+PHBhdGggZD1cXFwiTTQxMS4xOTYgMjMxLjU1N2wtNjAuNDIxIDYwLjA2M2MtMy44NTUgMy44MzUtMTAuMDg1IDMuODM1LTEzLjk0LjAxbC0xOS41NTQtMTkuMzg1YTkuODk3IDkuODk3IDAgMCAxLS4wMS0xNC4wNDlsNTMuNTM1LTUzLjI0N2MxMS42MDUtMTEuNTE2IDExLjYwNS0zMC4xODYgMC00MS42OTFsLTkuNjY4LTkuNTg4LTE1LjM2MS0xNS4yMjJjLTcuODE5LTcuNzYtMTguOTE4LTEwLjI4NC0yOC44ODQtNy41ODFhMjkuNjYyIDI5LjY2MiAwIDAgMC0xMy4xNTUgNy41ODFsLTUzLjYzNSA1My4zNTZjLTMuODU1IDMuODM1LTEwLjA4NSAzLjgzNS0xMy45NS4wMWwtMTkuNTY0LTE5LjM5NWMtMy44OTUtMy44NjUtMy45MDUtMTAuMTc0LS4wMS0xNC4wNDlMMjc2LjkgOTguNDA2YzIzLjAwMi0yMi44MjMgNTcuNjk4LTI2Ljk5NiA4NC45NzItMTIuNTE5IDYuMTIxIDMuMjI5IDExLjg1NCA3LjQxMiAxNy4wMSAxMi41MTlsMTguODM5IDE4LjY4IDEzLjQ3MyAxMy4zNTRjMjguMTcxIDI3LjkxOSAyOC4xNzEgNzMuMTk3LjAwMiAxMDEuMTE3elxcXCIgZmlsbD1cXFwiI2VkZjRmZlxcXCIgLz48cGF0aCBkPVxcXCJNMzk3LjcyMyAxMTcuMDg1bC0zNi41ODQgMzYuNTg0LTE1LjM2MS0xNS4yMjJjLTcuODE5LTcuNzYtMTguOTE4LTEwLjI4NC0yOC44ODQtNy41ODFsNDQuOTgtNDQuOThjNi4xMjEgMy4yMjkgMTEuODU0IDcuNDEyIDE3LjAxIDEyLjUxOXpcXFwiIGZpbGw9XFxcIiNkYmVhZmZcXFwiIC8+PGcgZmlsbD1cXFwiI2RiZWFmZlxcXCI+PHBhdGggZD1cXFwiTTQxMS4xOTMgMTMwLjQzNmwtMTEuODY4LTExLjc2NmMyNS43NiAyOC4wNTggMjQuOTcgNzEuNTMtMi4zOCA5OC42MzdsLTYwLjQxNyA2MC4wNjZjLTMuODU2IDMuODMzLTEwLjA4MiAzLjgzOC0xMy45NDMuMDFsLTYuMTMtNi4wNzhjLjI1NC4zMjQuNTIyLjYzOS44MjIuOTM3bDE5LjU1NiAxOS4zODlhOS44OTUgOS44OTUgMCAwIDAgMTMuOTQzLS4wMDlsNjAuNDE3LTYwLjA2NmMyOC4xNjktMjcuOTIgMjguMTY5LTczLjIwMSAwLTEwMS4xMnpNMzQ1Ljc4MSAxMzguNDUxbDEyLjI0MSAxMi4xMzdhMzAuMDcyIDMwLjA3MiAwIDAgMC0xLjQ2Ni0xLjU3NWwtMjUuMDIzLTI0LjgwOWMtMTEuNjA1LTExLjUwNi0zMC40My0xMS41MDYtNDIuMDQ1IDBsLTUzLjYzNSA1My4zNDljLTMuODU1IDMuODM1LTEwLjA4MyAzLjg0LTEzLjk0NC4wMTFsLTYuMTM3LTYuMDg1Yy4yNTQuMzI0LjUyMi42MzkuODIyLjkzNmwxOS41NjMgMTkuMzk2YzMuODYxIDMuODI5IDEwLjA4OSAzLjgyNCAxMy45NDQtLjAxMWw1My42MzUtNTMuMzQ5YzExLjYxNi0xMS41MDYgMzAuNDQtMTEuNTA2IDQyLjA0NSAwelxcXCIgLz48L2c+PHBhdGggZD1cXFwiTTQ5Ni43MzYgMjAuNzQ4bC03LjcwNC03LjcwNGMtNy4xMy03LjEzLTE4LjY5MS03LjEzLTI1LjgyMSAwTDMyNC4wNTggMTUyLjE5N2MtNy4xMyA3LjEzLTcuMTMgMTguNjkxIDAgMjUuODIxbDcuNzA0IDcuNzA0YzcuMTMgNy4xMyAxOC42OTEgNy4xMyAyNS44MjEgMEw0OTYuNzM2IDQ2LjU2OWM3LjEzLTcuMTMgNy4xMy0xOC42OTEgMC0yNS44MjF6XFxcIiBmaWxsPVxcXCIjZWRmNGZmXFxcIiAvPjxwYXRoIGQ9XFxcIk00OTYuODE5IDIwLjgzMWwtNy44NjktNy44NjlhMTguMSAxOC4xIDAgMCAwLTMuNjA1LTIuNzczYzQuMTE5IDYuOTU5IDMuMjA4IDE2LjA2OS0yLjc3MyAyMi4wNUwzNDMuMjUzIDE3MS41NTdjLTUuOTgxIDUuOTgyLTE1LjA5MiA2Ljg5Mi0yMi4wNSAyLjc3M2ExOC4xMzggMTguMTM4IDAgMCAwIDIuNzczIDMuNjA1bDcuODY5IDcuODY5YzcuMDg0IDcuMDg0IDE4LjU3MSA3LjA4NCAyNS42NTUgMEw0OTYuODE5IDQ2LjQ4NmM3LjA4NS03LjA4NCA3LjA4NS0xOC41NzEgMC0yNS42NTV6XFxcIiBmaWxsPVxcXCIjZGJlYWZmXFxcIiAvPjxnPjxwYXRoIGQ9XFxcIk0yNzcuNTgxIDMxMS45ODVjLTYuNDY1LTYuNzkxLTE4LjE0OC02Ljc5OC0yNC42MjMtLjAxNmwtNTMuMjUyIDUzLjUzOWMtNC44NDQgNC44NzktMTEuMzgyIDcuMDcyLTE3Ljc3OSA2LjQwNyAyMS4yMTctMTguMjggMjMuMjA3LTM0LjM0NCAxLjMyMy01My4yNTQtMTYuOTYtMTUuMzI1LTMzLjE0Ni01LjMwOC00NS42NzcgOS40ODItMS4wNDctNi44NDkgMS4wOTUtMTQuMDM3IDYuMjAzLTE5LjE5Nmw1My4zNTYtNTMuNjM0YzYuNjk0LTYuNzI5IDYuNzA0LTE3LjY5Ny4wMTgtMjQuNDUyLTExLjI5My05Ljk4OS0yNi45NzctMzUuODg5LTQ0LjAyMi0xOS41OC00NSA0OC4wNTQtMTE4LjE0OSA5My4xNjQtNjUuNDA4IDE2Ni43MTNsLTM3LjYzOCAzNy42MzhjLTYuOTM0IDYuNzUgMy44IDE3LjQ2NyAxMC41NCAxMC41MzlsOTYuOTcyLTk2Ljk3MmMzLjk3OC00LjE0NyAxMS4xMzgtNC4xNDggMTUuMTE1LjAwMSA2LjE0OCA1LjY3OSAxNi4zMTEgMTQuNTg1IDcuODY5IDIyLjk4NUw0MS4yNjIgNDkxLjUwNGMtOC40MDYgOC40NDEtMTcuMzA3LTEuNzI2LTIyLjk4NS03Ljg3MS0xMS40ODctMTEuMDY2IDExLjM3OC0yNC43NDMgMTcuMDUyLTMyLjE2NyA2Ljk1NS02LjczOS0zLjgxNC0xNy40NzMtMTAuNTM4LTEwLjUzOEM5LjU2NiA0NTUuNTktMTEuNTk3IDQ3Mi41OSA3LjczOCA0OTQuMTc0YzYuODQ4IDcuMTc5IDE1LjEwNCAxNi4wNjcgMjUuOTY3IDE1LjM2NCAxNS43NCA1LjA0OCA4Ni41MTYtNzkuNzQ0IDk3LjkyOS04Ny4zMjggNzIuODggNTIuNzc0IDExOC4wODgtMjEuNjMxIDE2NS4zMTYtNjYuMjI3IDE2LjA3OC0xNi42ODctOS41ODYtMzIuODEyLTE5LjM2OS00My45OTh6bS0xNzMuODQ0LTI5Ljg3Nmw1OS45Ni02MC4zMThjMS4zNzEtMS4wMjMgMi4xMDUtMS4wMjIgMy40NzUgMGwxOS4zOTEgMTkuNTZjLjk0Ni45NTYuOTQ3IDIuNTA0LjAwNCAzLjQ1M2wtNTMuMzY4IDUzLjY0NmMtMTAuOTY2IDExLjA3NC0xMy43MzMgMjcuNzM0LTcuNTEzIDQxLjU4MmwtMjcuMzQxIDI3LjM0MWMtMTkuNDA2LTI1LjMzNS0xNy41NzYtNjIuMTE2IDUuMzkyLTg1LjI2NHptMTgyLjY0NCA2My4zNjhjLTQwLjUxNiAzNS42NjQtODEuNjM0IDExMC40OTItMTQ0LjEzIDY2LjExNWwyNy41ODYtMjcuNTg3YzEzLjU4NCA1LjcwOSAyOS43ODUgMi43NDEgNDAuNDQtNy45OWw1My4yNDYtNTMuNTM0YzEuMzQ2LTEuMDM5IDIuMTktMS4wMDIgMy40NzYgMGwxOS4zODcgMTkuNTU3Yy45NC45NDguOTM5IDIuNDktLjAwNSAzLjQzOXpNNTA5LjU4NSAzMy42NTljLjY3My0xMC44MjYtOC4xNDItMTkuMTY3LTE1LjM2Ny0yNS45NjctOS41MjctOS45MjgtMjYuNjY3LTkuOTI4LTM2LjE5NCAwbC03OS45ODMgNzkuOTg0Yy03My42MTEtNTIuNzQ5LTExOC42NjYgMjAuNDQzLTE2Ni43MTcgNjUuNDEyLTE2LjI5NiAxNi45OTcgOS41OTQgMzIuNzYxIDE5LjU4OCA0NC4wMjMgNi43NDcgNi42NzkgMTcuNzE0IDYuNjcyIDI0LjQ0Ny0uMDIzbDUzLjYyMi01My4zNDVjNS4xNjctNS4xMTcgMTIuMzU3LTcuMjYxIDE5LjIwOC02LjIxNC0xNC43OTUgMTIuNTQ0LTI0LjgwNyAyOC43MDktOS40ODMgNDUuNjc3IDE4LjkxNSAyMS44OTMgMzQuOTk1IDE5Ljg3OCA1My4yNTQtMS4zMjIuNjY0IDYuMzk2LTEuNTI5IDEyLjkzNC02LjQxIDE3Ljc4MmwtNTMuNTM2IDUzLjI0OGMtMTYuMjk4IDE2Ljk5NCA5LjU3OSAzMi43NDcgMTkuNTczIDQ0LjAwOCA2Ljc0MiA2LjY5IDE3LjcwNyA2LjY4MiAyNC40NDItLjAxNWw2MC40MTMtNjAuMDU1YzE5Ljg3Ni0xOS42OTkgMjcuODM5LTQ4LjcxMyAyMC43ODMtNzUuNzJhNy40NTMgNy40NTMgMCAwIDAtMTQuNDIxIDMuNzY3YzE2Ljk3NyA0OC4wMjktNTEuMzc2IDkxLjM3NC03Ny4yODMgMTIxLjQ0YTIuNDQ3IDIuNDQ3IDAgMCAxLTMuNDM5LjAwMWwtMTkuNTUyLTE5LjM4MmMtMS4wMDUtMS4yODgtMS4wNDMtMi4xMjktLjAwNC0zLjQ3OGw1My41MzEtNTMuMjQyYzEwLjczNC0xMC42NiAxMy43MDItMjYuODYxIDcuOTk0LTQwLjQ0NCA2LjA3NC0xMC4xOTIgMTM0LjE0NC0xMjMuNDQ5IDEyNS41MzQtMTM2LjEzNXptLTIxMS4xMDIgOTkuNTA1bC01My42MzQgNTMuMzU2YTIuNDU3IDIuNDU3IDAgMCAxLTMuNDQ4LjAwMWwtMTkuNTYyLTE5LjM5NGMtMS4wMjQtMS4zNjktMS4wMjUtMi4xMDQtLjAwNS0zLjQ3NGw2MC4zMTYtNTkuOTU4YzIzLjE1Mi0yMi45NzQgNTkuOTM0LTI0LjgwMyA4NS4yNjgtNS4zOTdsLTI3LjM0MSAyNy4zNDFjLTEzLjg0OC02LjIyMS0zMC41MS0zLjQ1Mi00MS41OTQgNy41MjV6bTE5My4wNjYtOTEuOTQ3TDM1Mi4yMyAxODAuNTM2YTEwLjYxNyAxMC42MTcgMCAwIDEtNy41NTggMy4xMzFjLTYuMDA0LjY3OC0xMS41MTYtNy42NjItMTUuNDI4LTExLjAwMS00LjE0NC0zLjk4LTQuMTQ5LTExLjEzNi4wMDEtMTUuMTE1TDQ2OC41NjMgMTguMjMyYzMuOTc3LTQuMTQ3IDExLjEzOS00LjE0NyAxNS4xMTUgMCA2LjE0OSA1LjY3OCAxNi4zMTEgMTQuNTg0IDcuODcxIDIyLjk4NXpNOTUuMjUyIDE4MS4zNzhsMjEuNzcyIDguMjM2YzMuNzQ4IDEuNDQ4IDguMTU0LS40NDUgOS42MDYtNC4zMzNhNy40NTIgNy40NTIgMCAwIDAtNC4zMzMtOS42MDZsLTIxLjc3Mi04LjIzNmMtOC45ODMtMy41NTQtMTQuMzczIDEwLjY1LTUuMjczIDEzLjkzOXpNMTQ0LjgwNSAxNDYuNTI3YzYuNjUyIDcuMDExIDE3LjUyMy0zLjU5MiAxMC42NjMtMTAuNDE0bC0xNi45MzEtMTcuMzM5YTcuNDUzIDcuNDUzIDAgMCAwLTEwLjY2NCAxMC40MTR6TTE4NS43NTkgMTE3LjcxYzIuMzggOS40MjQgMTcuMDAzIDUuNDg1IDE0LjQxMS0zLjc5OGwtNi4wMjctMjIuODY3YTcuNDUxIDcuNDUxIDAgMSAwLTE0LjQxMSAzLjc5N3pcXFwiIC8+PC9nPjwvc3ltYm9sPlwiXG59KTtcbnZhciByZXN1bHQgPSBzcHJpdGUuYWRkKHN5bWJvbCk7XG5leHBvcnQgZGVmYXVsdCBzeW1ib2xcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9hc3NldHMvc3ZnL211bHRpY29sb3IvaWNvbi1icm9rZW4tY2hhaW4uc3ZnXG4vLyBtb2R1bGUgaWQgPSAxNDVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IFNwcml0ZVN5bWJvbCBmcm9tIFwic3ZnLWJha2VyLXJ1bnRpbWUvYnJvd3Nlci1zeW1ib2xcIjtcbmltcG9ydCBzcHJpdGUgZnJvbSBcInN2Zy1zcHJpdGUtbG9hZGVyL3J1bnRpbWUvYnJvd3Nlci1zcHJpdGUuYnVpbGRcIjtcbnZhciBzeW1ib2wgPSBuZXcgU3ByaXRlU3ltYm9sKHtcbiAgXCJpZFwiOiBcImljb24tYnJva2VuLXJpbmdcIixcbiAgXCJ1c2VcIjogXCJpY29uLWJyb2tlbi1yaW5nLXVzYWdlXCIsXG4gIFwidmlld0JveFwiOiBcIjAgMCA1MTIgNTEyXCIsXG4gIFwiY29udGVudFwiOiBcIjxzeW1ib2wgdmlld0JveD1cXFwiMCAwIDUxMiA1MTJcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgaWQ9XFxcImljb24tYnJva2VuLXJpbmdcXFwiPjxjaXJjbGUgY3g9XFxcIjQxNy4yNDlcXFwiIGN5PVxcXCI0MTYuODFcXFwiIHI9XFxcIjEwXFxcIiAvPjxwYXRoIGQ9XFxcIk00NTYuNzE2IDMwNC42OGMtMi43NC0xLjkxLTYuMzQtMi4zMy05LjQ1LTEuMDgtNi40NiAyLjU4LTEyLjAxIDUuOTgtMTYuNDggMTAuMTAxLTIuNiAyLjM4LTYuNDkgNi45MzktNi42NyA3LjE0OS0yLjU4IDMuMDIxLTMuNzggNC4yLTUuNzg5IDUuMjEtMi40MTcgMS4yMTMtNi4xNCAxLjkwOC0xMS4wODEgMi4wODUtLjg0NC4wMy0zLjYwOS4wNDUtNC4yMzkuMDM2LTIuMzYtLjAyLTQuNjYuNzUtNi40OCAyLjIzYTEwLjA5MiAxMC4wOTIgMCAwIDAtMy40OSA1LjY5OUMzNzkuNDU3IDQwMC4zNiAzMjEuODU4IDQ0NyAyNTYuMDg4IDQ0N2gtLjA0Yy0zNy40LS4wMS03Mi41NTktMTQuNTctOTkuMDE5LTQxLjAxLTI2LjQ0OS0yNi40NS00MS4wMDktNjEuNjEtNDEuMDItOTguOTkuMDEtMzcuMzggMTQuNTctNzIuNTQgNDEuMDItOTguOTkgMjYuNDYtMjYuNDQgNjEuNjItNDEuMDEgOTkuMDE5LTQxLjAxaC4wNGM2Mi40MSAwIDExNy44MTkgNDEuOTEgMTM0LjczOSAxMDEuOTJhMTAuMDIxIDEwLjAyMSAwIDAgMCA2LjI1IDYuN2MzLjAzIDEuMDkgNi40NS42MyA5LjA5LTEuMmE2MS41NTYgNjEuNTU2IDAgMCAwIDYuNjg5LTUuNDAxbC4wMDUtLjAwMmMyLjQxNC0yLjIyOCA5Ljc1NS05LjAxMiAyOC40NjktMi4zODlhOS45OTggOS45OTggMCAxIDAgMTMuMDA1LTExLjk3M2MtMS4yMDYtNC41ODEtNS4wODQtMTYuNDMxLTUuMDk5LTE2LjQ3MWEyMDQuMDU0IDIwNC4wNTQgMCAwIDAtMjguMzctNTMuMTUzIDIwNS44MTMgMjA1LjgxMyAwIDAgMC00NC4zMTktNDMuOTIxIDIwNS4xOTcgMjA1LjE5NyAwIDAgMC0xOC40NzQtMTEuOTYzTDQwOC4wNiA3OS4yNmExMCAxMCAwIDAgMCAwLTE0LjE1NkwzNDUuNzU0IDIuOTIyYy0zLjkwMy0zLjg5Ni0xMC4yMjUtMy44OTYtMTQuMTI4IDBsLTcuMDcyIDcuMDU4SDE4Ny40NDJsLTcuMDcyLTcuMDU4Yy0zLjkwMy0zLjg5Ni0xMC4yMjQtMy44OTUtMTQuMTI4IDBsLTYyLjMwNyA2Mi4xODJhMTAgMTAgMCAwIDAgMCAxNC4xNTZsNTAuMDE5IDQ5LjkxOWEyMDUuMzggMjA1LjM4IDAgMCAwLTEyLjU1NiA3LjgzMSAyMDUuNDI3IDIwNS40MjcgMCAwIDAtMzAuMzQgMjUuMDMgMjA1LjkwOCAyMDUuOTA4IDAgMCAwLTI1LjA0IDMwLjM0IDIwMy45NDYgMjAzLjk0NiAwIDAgMC0xOC45IDM0LjgyIDIwMy4xODcgMjAzLjE4NyAwIDAgMC0xMS45NSAzOC40NzlDNTIuNCAyNzkuMTkgNTEgMjkzLjA5IDUxIDMwN3MxLjQgMjcuODEgNC4xNyA0MS4zMTlhMjAzLjIyIDIwMy4yMiAwIDAgMCAxMS45NSAzOC40OCAyMDMuOTQ2IDIwMy45NDYgMCAwIDAgMTguOSAzNC44MiAyMDYuNTMzIDIwNi41MzMgMCAwIDAgMjUuMDQgMzAuMzRjOS4yNyA5LjI3IDE5LjQ4IDE3LjcgMzAuMzQgMjUuMDNhMjA1LjQzIDIwNS40MyAwIDAgMCAzNC44MyAxOC44OTljMTIuMzggNS4yMyAyNS4zMyA5LjI1IDM4LjQ4OSAxMS45NCAxMy41MSAyLjc3IDI3LjQxIDQuMTcgNDEuMzMgNC4xN2wuMDMtLjA1VjUxMmM1MS40NDkgMCAxMDAuNjQ5LTE5LjE0MSAxMzguNTI5LTUzLjg5MSA0LjA2LTMuNzI5IDQuMzQtMTAuMDY5LjYxLTE0LjEzYTEwLjAxNSAxMC4wMTUgMCAwIDAtNy4zNy0zLjIzOWMtMi41MSAwLTQuOTEuOTMtNi43NiAyLjYzLTM0LjIgMzEuMzUtNzguNjA5IDQ4LjYyLTEyNS4wMzkgNDguNjMtNDkuNDE5LS4wMS05NS44ODktMTkuMjUtMTMwLjg0OS01NC4xODFDOTAuMjUgNDAyLjg2IDcxIDM1Ni40IDcxIDMwN3MxOS4yNS05NS44NiA1NC4xOTktMTMwLjgyYzM0Ljk2LTM0LjkzIDgxLjQyOS01NC4xOCAxMzAuODQ5LTU0LjE4aC4wM2M3OC4wMTMgMCAxNDcuNDgzIDQ4Ljg0NyAxNzMuOTY4IDEyMS45MDgtMTAuNTA2LS42NDItMTguNTY5IDIuMDU0LTI0LjU5MiA1Ljc1NWExNTkuMzI3IDE1OS4zMjcgMCAwIDAtMjIuNDc3LTQwLjExMyAxNjAuNjgzIDE2MC42ODMgMCAwIDAtMzQuNDItMzMuMTIgMTU5LjA0NyAxNTkuMDQ3IDAgMCAwLTQzLjEzLTIxLjY2Yy0xNS44OS01LjE0OS0zMi41MDktNy43Ny00OS4zNzktNy43Ny0yMS42MSAwLTQyLjU2OSA0LjIyOS02Mi4yOTkgMTIuNTgtOS40OCA0LjAxLTE4LjYzIDguOTctMjcuMTggMTQuNzVhMTYxLjA0NSAxNjEuMDQ1IDAgMCAwLTIzLjY4IDE5LjUyOSAxNjEuMDc4IDE2MS4wNzggMCAwIDAtMTkuNTUgMjMuNjgxIDE2MC4yIDE2MC4yIDAgMCAwLTE0Ljc1IDI3LjE4Yy04LjM1IDE5LjczLTEyLjU4IDQwLjY4LTEyLjU4IDYyLjI4czQuMjMgNDIuNTYgMTIuNTggNjIuMjc5YzQuMDEgOS40OCA4Ljk3IDE4LjYyIDE0Ljc1IDI3LjE4MWExNjAuOTI1IDE2MC45MjUgMCAwIDAgNDMuMjMgNDMuMjFjOC41NSA1Ljc4IDE3LjcgMTAuNzQgMjcuMTggMTQuNzUgMTkuNzMgOC4zNSA0MC42OSAxMi41OCA2Mi4yOTkgMTIuNTggMTguMTUtLjAxIDM1Ljk3LTMuMDIxIDUyLjkzOS04Ljk3MWExNTkuNDU1IDE1OS40NTUgMCAwIDAgNDUuNDctMjQuODUgMTYwLjY0MyAxNjAuNjQzIDAgMCAwIDM0Ljk0OS0zNy43MWM5LjcxLTE0LjYgMTYuOS0zMC41OCAyMS4zNi00Ny40NzkgNS42My0uNCAxMC4zNS0xLjQyMSAxNC40My0zLjA5MSA0LjU3LTEuODcgNy45My00LjU4IDkuOTQtNi41MjkgMS42MS0xLjU3IDIuOTEtMy4wNCAzLjk4LTQuMjcxYTE4NC40MjYgMTg0LjQyNiAwIDAgMS0xMC4zMjkgMzkuMzZjLS45NiAyLjQ5LS44OSA1LjIxLjE5IDcuNjQ5YTkuOTIxIDkuOTIxIDAgMCAwIDUuNTUgNS4yOGMzLjA0IDEuMTcgNi41Ljc2IDkuMTktMS4wNWE5LjkxNCA5LjkxNCAwIDAgMCAzLjczLTQuNjljOC4zLTIxLjU0IDEyLjg2LTQ0LjIzOSAxMy41NS02Ny40Ny4wODktMy4zODctMS41LTYuNTY4LTQuMjgxLTguNDk4ek0zODYuODQxIDcyLjE4MmwtNDcuNTI4IDQ3LjQzM2EyMDMuOTM1IDIwMy45MzUgMCAwIDAtMTguODE1LTcuMjc0Yy0uMjQ0LS4wODEtLjQ4OS0uMTU1LS43MzMtLjIzNGwzMi45MTItMzIuODQ2YTEwIDEwIDAgMCAwIDAtMTQuMTU2bC0yNy41MjMtMjcuNDY3IDEzLjUzNi0xMy41MDl6bS0yNjEuNjg1IDBsNDguMTUxLTQ4LjA1NCAxMy41MzYgMTMuNTA5LTI3LjUyMyAyNy40NjdhMTAgMTAgMCAwIDAgMCAxNC4xNTZsMzIuOTQgMzIuODc0Yy01LjQyNiAxLjc3My0xOC4zNzYgNi45OTMtMTkuNTQ0IDcuNTEzek0yNTYuMDQ4IDEwMmMtMTMuOTIgMC0yNy44MiAxLjM5OS00MS4zMyA0LjE3bC0uMS4wMjItMzQuMDc4LTM0LjAxIDI3LjUyMi0yNy40NjdhMTAgMTAgMCAwIDAgMC0xNC4xNTZsLS41OC0uNTc5aDk3LjAzMWwtLjU4LjU3OWExMCAxMCAwIDAgMCAwIDE0LjE1NmwyNy41MjIgMjcuNDY3LTM0LjA2NCAzMy45OTZBMjA1Ljg0MiAyMDUuODQyIDAgMCAwIDI1Ni4wNDggMTAyelxcXCIgLz48L3N5bWJvbD5cIlxufSk7XG52YXIgcmVzdWx0ID0gc3ByaXRlLmFkZChzeW1ib2wpO1xuZXhwb3J0IGRlZmF1bHQgc3ltYm9sXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvYXNzZXRzL3N2Zy9tdWx0aWNvbG9yL2ljb24tYnJva2VuLXJpbmcuc3ZnXG4vLyBtb2R1bGUgaWQgPSAxNDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IFNwcml0ZVN5bWJvbCBmcm9tIFwic3ZnLWJha2VyLXJ1bnRpbWUvYnJvd3Nlci1zeW1ib2xcIjtcbmltcG9ydCBzcHJpdGUgZnJvbSBcInN2Zy1zcHJpdGUtbG9hZGVyL3J1bnRpbWUvYnJvd3Nlci1zcHJpdGUuYnVpbGRcIjtcbnZhciBzeW1ib2wgPSBuZXcgU3ByaXRlU3ltYm9sKHtcbiAgXCJpZFwiOiBcImljb24tY29pbnNcIixcbiAgXCJ1c2VcIjogXCJpY29uLWNvaW5zLXVzYWdlXCIsXG4gIFwidmlld0JveFwiOiBcIjAgMCA1MTIgNTEyXCIsXG4gIFwiY29udGVudFwiOiBcIjxzeW1ib2wgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB2aWV3Qm94PVxcXCIwIDAgNTEyIDUxMlxcXCIgaWQ9XFxcImljb24tY29pbnNcXFwiPjxwYXRoIGQ9XFxcIk0yNTYgMzg2Yy01LjUyIDAtMTAgNC40OC0xMCAxMHM0LjQ4IDEwIDEwIDEwIDEwLTQuNDggMTAtMTAtNC40OC0xMC0xMC0xMHpcXFwiIC8+PHBhdGggZD1cXFwiTTQ2OS4wODcgNjEuMzdDNDQ0LjQ3OSA1MS40NTkgNDEyLjQ4NSA0NiAzNzkgNDZzLTY1LjQ3OSA1LjQ1OS05MC4wODcgMTUuMzdDMjc0LjM3MSA2Ny4yMjcgMjYzLjI2OCA3NC4zODUgMjU2IDgyLjQxN2MtNy4yNjgtOC4wMzItMTguMzcxLTE1LjE4OS0zMi45MTMtMjEuMDQ2QzE5OC40NzkgNTEuNDU5IDE2Ni40ODUgNDYgMTMzIDQ2cy02NS40NzkgNS40NTktOTAuMDg3IDE1LjM3QzE1LjI0IDcyLjUxNiAwIDg4LjM2NiAwIDEwNnYyNDBjMCAxNy42MzQgMTUuMjQgMzMuNDg0IDQyLjkxMyA0NC42M0M2NS44IDM5OS44NDggOTUuMDc4IDQwNS4yMDggMTI2IDQwNS45MTRWNDA2YzAgMzQuMjA2IDU1Ljg4OCA2MCAxMzAgNjBzMTMwLTI1Ljc5NCAxMzAtNjB2LS4wODZjMzAuOTIyLS43MDYgNjAuMi02LjA2NiA4My4wODctMTUuMjg0QzQ5Ni43NiAzNzkuNDg0IDUxMiAzNjMuNjM0IDUxMiAzNDZWMTA2YzAtMTcuNjM0LTE1LjI0LTMzLjQ4NC00Mi45MTMtNDQuNjN6TTQ5MiAyODZjMCA4LjUzNy0xMS42NDMgMTguNTI5LTMwLjM4NSAyNi4wNzgtMjAuMjg1IDguMTctNDcuNTE5IDEzLjExMy03NS42MTUgMTMuODIzVjI4NmwtLjAwMi0uMDg2YzMwLjkyMy0uNzA1IDYwLjIwMS02LjA2NSA4My4wOS0xNS4yODQgOC45ODMtMy42MTggMTYuNjQ2LTcuNzM0IDIyLjkxMy0xMi4yNDRMNDkyIDI4NnpNMjQ2IDE2NmMwIDguNTM3LTExLjY0MyAxOC41MjktMzAuMzg1IDI2LjA3OEMxOTMuNjQ4IDIwMC45MjYgMTYzLjUzNiAyMDYgMTMzIDIwNnMtNjAuNjQ4LTUuMDc0LTgyLjYxNS0xMy45MjJDMzEuNjQzIDE4NC41MjkgMjAgMTc0LjUzNyAyMCAxNjZ2LTI3LjYxNGM2LjI2NyA0LjUxIDEzLjkzIDguNjI2IDIyLjkxMyAxMi4yNDRDNjcuNTIxIDE2MC41NDEgOTkuNTE1IDE2NiAxMzMgMTY2czY1LjQ3OS01LjQ1OSA5MC4wODctMTUuMzdjOC45ODMtMy42MTggMTYuNjQ2LTcuNzM0IDIyLjkxMy0xMi4yNDRWMTY2ek00Mi45MTMgMjEwLjYzQzY3LjUyMSAyMjAuNTQxIDk5LjUxNSAyMjYgMTMzIDIyNnM2NS40NzktNS40NTkgOTAuMDg3LTE1LjM3YzguOTgzLTMuNjE4IDE2LjY0Ni03LjczNCAyMi45MTMtMTIuMjQ0djI3Ljc5MWMtMjUuODcuODc2LTUwLjY4IDUuMTIyLTcwLjc0NyAxMi4xODktMjAuMTI3IDcuMDg5LTM0LjYxIDE2LjU0Mi00Mi40ODYgMjcuNjMxLTMwLjQ1Ni0uMDI2LTYwLjQ3MS01LjA5NC04Mi4zODItMTMuOTE5QzMxLjY0MyAyNDQuNTI5IDIwIDIzNC41MzcgMjAgMjI2di0yNy42MTRjNi4yNjcgNC41MSAxMy45MyA4LjYyNiAyMi45MTMgMTIuMjQ0ek0yMCAyNTguMzg2YzYuMjY3IDQuNTEgMTMuOTMgOC42MjYgMjIuOTEzIDEyLjI0NCAyMi44ODggOS4yMTggNTIuMTY3IDE0LjU3OCA4My4wOSAxNS4yODRsLS4wMDIuMDg2djM5LjkwMWMtMjguMDk3LS43MS01NS4zMy01LjY1My03NS42MTUtMTMuODIzQzMxLjY0MyAzMDQuNTI5IDIwIDI5NC41MzcgMjAgMjg2di0yNy42MTR6bTEyNy4wNTggMjIuNzAxQzE1NC40NjkgMjYzLjg0IDE5Ny4yNDQgMjQ2IDI1NiAyNDZzMTAxLjUzMSAxNy44NCAxMDguOTM0IDM1LjA2N2MuNzE4IDEuNjgxIDEuMDY2IDMuMjk0IDEuMDY2IDQuOTMzIDAgOC43OTItMTAuODM5IDE4LjU1OC0yOC45OTUgMjYuMTIzQzMxNS41MjkgMzIxLjA3MiAyODYuNzYxIDMyNiAyNTYgMzI2cy01OS41MjktNC45MjgtODEuMDA1LTEzLjg3N0MxNTYuODM5IDMwNC41NTggMTQ2IDI5NC43OTIgMTQ2IDI4NmMwLTEuNjM5LjM0OS0zLjI1MiAxLjA1OC00LjkxM3pNNDkyIDIyNmMwIDguNTM3LTExLjY0MyAxOC41MjktMzAuMzg1IDI2LjA3OC0yMS45MSA4LjgyNS01MS45MjQgMTMuODkzLTgyLjM3OSAxMy45MTktNy44Ny0xMS4wODMtMjIuMzU1LTIwLjU0LTQyLjQ4OS0yNy42MzEtMjAuMDY3LTcuMDY4LTQ0Ljg3Ny0xMS4zMTMtNzAuNzQ3LTEyLjE4OXYtMjcuNzkxYzYuMjY3IDQuNTEgMTMuOTMgOC42MjYgMjIuOTEzIDEyLjI0NEMzMTMuNTIxIDIyMC41NDEgMzQ1LjUxNSAyMjYgMzc5IDIyNnM2NS40NzktNS40NTkgOTAuMDg3LTE1LjM3YzguOTgzLTMuNjE4IDE2LjY0Ni03LjczNCAyMi45MTMtMTIuMjQ0VjIyNnptMC02MGMwIDguNTM3LTExLjY0MyAxOC41MjktMzAuMzg1IDI2LjA3OEM0MzkuNjQ4IDIwMC45MjYgNDA5LjUzNiAyMDYgMzc5IDIwNnMtNjAuNjQ4LTUuMDc0LTgyLjYxNS0xMy45MjJDMjc3LjY0MyAxODQuNTI5IDI2NiAxNzQuNTM3IDI2NiAxNjZ2LTI3LjYxNGM2LjI2NyA0LjUxIDEzLjkzIDguNjI2IDIyLjkxMyAxMi4yNDRDMzEzLjUyMSAxNjAuNTQxIDM0NS41MTUgMTY2IDM3OSAxNjZzNjUuNDc5LTUuNDU5IDkwLjA4Ny0xNS4zN2M4Ljk4My0zLjYxOCAxNi42NDYtNy43MzQgMjIuOTEzLTEyLjI0NFYxNjZ6TTI5Ni4zODUgNzkuOTIyQzMxOC4zNTIgNzEuMDc0IDM0OC40NjQgNjYgMzc5IDY2czYwLjY0OCA1LjA3NCA4Mi42MTUgMTMuOTIyQzQ4MC4zNTcgODcuNDcxIDQ5MiA5Ny40NjMgNDkyIDEwNnMtMTEuNjQzIDE4LjUyOS0zMC4zODUgMjYuMDc4QzQzOS42NDggMTQwLjkyNiA0MDkuNTM2IDE0NiAzNzkgMTQ2cy02MC42NDgtNS4wNzQtODIuNjE1LTEzLjkyMkMyNzcuNjQzIDEyNC41MjkgMjY2IDExNC41MzcgMjY2IDEwNnMxMS42NDMtMTguNTI5IDMwLjM4NS0yNi4wNzh6bS0yNDYgMEM3Mi4zNTIgNzEuMDc0IDEwMi40NjQgNjYgMTMzIDY2czYwLjY0OCA1LjA3NCA4Mi42MTUgMTMuOTIyQzIzNC4zNTcgODcuNDcxIDI0NiA5Ny40NjMgMjQ2IDEwNnMtMTEuNjQzIDE4LjUyOS0zMC4zODUgMjYuMDc4QzE5My42NDggMTQwLjkyNiAxNjMuNTM2IDE0NiAxMzMgMTQ2cy02MC42NDgtNS4wNzQtODIuNjE1LTEzLjkyMkMzMS42NDMgMTI0LjUyOSAyMCAxMTQuNTM3IDIwIDEwNnMxMS42NDMtMTguNTI5IDMwLjM4NS0yNi4wNzh6bTAgMjkyLjE1NkMzMS42NDMgMzY0LjUyOSAyMCAzNTQuNTM3IDIwIDM0NnYtMjcuNjE0YzYuMjY3IDQuNTEgMTMuOTMgOC42MjYgMjIuOTEzIDEyLjI0NEM2NS44IDMzOS44NDggOTUuMDc4IDM0NS4yMDggMTI2IDM0NS45MTR2MzkuOTg4Yy0yOC4wOTctLjcxMS01NS4zMy01LjY1My03NS42MTUtMTMuODI0em0yODYuNjIgNjAuMDQ1QzMxNS41MjkgNDQxLjA3MiAyODYuNzYxIDQ0NiAyNTYgNDQ2cy01OS41MjktNC45MjgtODEuMDA1LTEzLjg3N0MxNTYuODM5IDQyNC41NTggMTQ2IDQxNC43OTIgMTQ2IDQwNnYtMjcuMDMxYTg4LjEwOCA4OC4xMDggMCAwIDAgNy41NDQgNC44NzRjMTUuNTI5IDguOTg2IDM2LjY1OCAxNS42MzMgNjEuMTA0IDE5LjIyMS40OTMuMDcyLjk4MS4xMDcgMS40NjUuMTA3IDQuODggMCA5LjE1MS0zLjU3NyA5Ljg4MS04LjU0OS44MDItNS40NjQtMi45NzgtMTAuNTQ0LTguNDQxLTExLjM0NkMxNzEuMDc4IDM3Ni40NTMgMTQ2IDM1OC45NzkgMTQ2IDM0NnYtMjcuMTJDMTY4LjYzNCAzMzUuNDQyIDIwOC41ODcgMzQ2IDI1NiAzNDZzODcuMzY2LTEwLjU1OCAxMTAtMjcuMTJWMzQ2YzAgMTIuOTc5LTI1LjA3OCAzMC40NTMtNzEuNTUzIDM3LjI3Ni01LjQ2NC44MDItOS4yNDQgNS44ODItOC40NDEgMTEuMzQ2LjczIDQuOTczIDUuMDAxIDguNTQ5IDkuODgxIDguNTQ5LjQ4MyAwIC45NzMtLjAzNSAxLjQ2NS0uMTA3IDI0LjQ0NS0zLjU4OCA0NS41NzQtMTAuMjM0IDYxLjEwNC0xOS4yMjFhODguMjY2IDg4LjI2NiAwIDAgMCA3LjU0NC00Ljg3NFY0MDZjMCA4Ljc5Mi0xMC44MzkgMTguNTU4LTI4Ljk5NSAyNi4xMjN6bTEyNC42MS02MC4wNDVjLTIwLjI4NSA4LjE3LTQ3LjUxOSAxMy4xMTMtNzUuNjE1IDEzLjgyM3YtMzkuOTg4YzMwLjkyMi0uNzA2IDYwLjItNi4wNjYgODMuMDg3LTE1LjI4NCA4Ljk4My0zLjYxOCAxNi42NDYtNy43MzQgMjIuOTEzLTEyLjI0NFYzNDZjMCA4LjUzNy0xMS42NDMgMTguNTI5LTMwLjM4NSAyNi4wNzh6XFxcIiAvPjwvc3ltYm9sPlwiXG59KTtcbnZhciByZXN1bHQgPSBzcHJpdGUuYWRkKHN5bWJvbCk7XG5leHBvcnQgZGVmYXVsdCBzeW1ib2xcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9hc3NldHMvc3ZnL211bHRpY29sb3IvaWNvbi1jb2lucy5zdmdcbi8vIG1vZHVsZSBpZCA9IDE0N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQgU3ByaXRlU3ltYm9sIGZyb20gXCJzdmctYmFrZXItcnVudGltZS9icm93c2VyLXN5bWJvbFwiO1xuaW1wb3J0IHNwcml0ZSBmcm9tIFwic3ZnLXNwcml0ZS1sb2FkZXIvcnVudGltZS9icm93c2VyLXNwcml0ZS5idWlsZFwiO1xudmFyIHN5bWJvbCA9IG5ldyBTcHJpdGVTeW1ib2woe1xuICBcImlkXCI6IFwiaWNvbi1naWZ0XCIsXG4gIFwidXNlXCI6IFwiaWNvbi1naWZ0LXVzYWdlXCIsXG4gIFwidmlld0JveFwiOiBcIjAgMCA2NCA2NVwiLFxuICBcImNvbnRlbnRcIjogXCI8c3ltYm9sIHZpZXdCb3g9XFxcIjAgMCA2NCA2NVxcXCIgZmlsbD1cXFwibm9uZVxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiBpZD1cXFwiaWNvbi1naWZ0XFxcIj48cGF0aCBkPVxcXCJNNTcuNDI4IDE2LjE3N0g0NS43MzRjLjExNS0uMDc5LjIzMS0uMTQ0LjMyMS0uMjEgMy4yMzktMi4yODUgNC4wMzUtNi44MzEgMS43ODYtMTAuMTIzYTcuMTE5IDcuMTE5IDAgMCAwLTUuODg1LTMuMTIzIDYuOTkgNi45OSAwIDAgMC00LjA4NyAxLjMwN2MtMS4yMi44NjItNC4xMTIgMy44MjctNS44ODYgNi45NzYtMS43NzMtMy4xNDktNC42NjUtNi4xMTQtNS44ODYtNi45NzZhNy4wODMgNy4wODMgMCAwIDAtNC4wODYtMS4zMDcgNy4xMTMgNy4xMTMgMCAwIDAtNS44NzMgMy4xMjMgNy4zMjYgNy4zMjYgMCAwIDAtMS4xNyA1LjQzNCA3LjI1IDcuMjUgMCAwIDAgMi45NTYgNC42OWMuMTAzLjA2NS4yMDYuMTQzLjMyMi4yMDlINi41NWMtLjg0OCAwLTEuNTU1LjcxOC0xLjU1NSAxLjU5M3YxMS45MjdjMCAuODc2LjcwNyAxLjU5NCAxLjU2OCAxLjU5NGgxLjM3NXYyOS44MzdjMCAuODc1LjcwNyAxLjU5MyAxLjU2OCAxLjU5M0g1NC41MWMuODYxIDAgMS41NjgtLjcxOCAxLjU2OC0xLjU5M1YzMS4yOWgxLjM1Yy44NiAwIDEuNTY3LS43MTggMS41NjctMS41OTR2LTExLjk0YzAtLjg2Mi0uNzA3LTEuNTgtMS41NjgtMS41OHptLTIuOTMgMy4xODdoMS4zNzV2OC43NTNoLTIyLjMxdi04Ljc1M2gyMC45MzV6TTM5LjY2OCA2LjY0YTMuOTEzIDMuOTEzIDAgMCAxIDIuMjg4LS43MzFjMS4zMjMgMCAyLjU1Ny42NTMgMy4zMTUgMS43NWE0LjE0NCA0LjE0NCAwIDAgMS0xLjAwMiA1LjY5NmMtMS42MDcgMS4xMzYtNi4wOTIgMi44MjItOC45OTYgMi44MjItMS4wOTIgMC0xLjUwNC0uMjQ4LTEuNTY4LS4zNC0uNzg0LTEuMTYzIDMuMTEtNy4xODUgNS45NjMtOS4xOTd6bS0xOS45NDUgNi43MTVhNC4wMDMgNC4wMDMgMCAwIDEtMS42NTctMi42MzkgNC4wOTMgNC4wOTMgMCAwIDEgLjY1NS0zLjA1NyA0LjAyMiA0LjAyMiAwIDAgMSAzLjMwMy0xLjc1Yy44MjIgMCAxLjYxOS4yNDggMi4yODcuNzMxIDIuODUzIDIuMDI1IDYuNzQ3IDguMDM0IDUuOTYzIDkuMTk3LS4wNjQuMDkxLS40NzUuMzQtMS41NjguMzQtMi44OTEgMC03LjM3Ni0xLjY4NS04Ljk4My0yLjgyMnptLTExLjU5MSA2LjAxaDIyLjMxdjguNzUySDguMTMxdi04Ljc1M3ptMi45MyAxMS45MjZoMTkuMzY2djI4LjI0M0gxMS4wNjJWMzEuMjkxek01Mi45MyA1OS41MzRIMzMuNTY0VjMxLjI5MUg1Mi45M3YyOC4yNDN6XFxcIiBmaWxsPVxcXCIjODg2QTVBXFxcIiAvPjwvc3ltYm9sPlwiXG59KTtcbnZhciByZXN1bHQgPSBzcHJpdGUuYWRkKHN5bWJvbCk7XG5leHBvcnQgZGVmYXVsdCBzeW1ib2xcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9hc3NldHMvc3ZnL211bHRpY29sb3IvaWNvbi1naWZ0LnN2Z1xuLy8gbW9kdWxlIGlkID0gMTQ4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCBTcHJpdGVTeW1ib2wgZnJvbSBcInN2Zy1iYWtlci1ydW50aW1lL2Jyb3dzZXItc3ltYm9sXCI7XG5pbXBvcnQgc3ByaXRlIGZyb20gXCJzdmctc3ByaXRlLWxvYWRlci9ydW50aW1lL2Jyb3dzZXItc3ByaXRlLmJ1aWxkXCI7XG52YXIgc3ltYm9sID0gbmV3IFNwcml0ZVN5bWJvbCh7XG4gIFwiaWRcIjogXCJpY29uLWluY29tcGxldGUtZWFycmluZ3NcIixcbiAgXCJ1c2VcIjogXCJpY29uLWluY29tcGxldGUtZWFycmluZ3MtdXNhZ2VcIixcbiAgXCJ2aWV3Qm94XCI6IFwiMCAwIDUxMiA1MTJcIixcbiAgXCJjb250ZW50XCI6IFwiPHN5bWJvbCB2aWV3Qm94PVxcXCIwIDAgNTEyIDUxMlxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiBpZD1cXFwiaWNvbi1pbmNvbXBsZXRlLWVhcnJpbmdzXFxcIj48cGF0aCBkPVxcXCJNMzA5LjYyNyAyOTkuNjA2Yy0xNC42My0yMC41ODQtMzMuMTY4LTM3LjQ4Ni00Ni4xMjctNDIuODN2LTcuNjI4YzE3LjA5Ni0zLjQ4NCAzMC0xOC42MzUgMzAtMzYuNzQ1cy0xMi45MDQtMzMuMjYxLTMwLTM2Ljc0NXYtOC43NDJjMTkuODA0LTMuNTUzIDM0Ljg4NS0yMC44OTYgMzQuODg1LTQxLjcwNyAwLTMuNDExLS40MDctNi44MDgtMS4yMTItMTAuMDk2YTcuNDk4IDcuNDk4IDAgMCAwLTkuMDY2LTUuNTA0IDcuNSA3LjUgMCAwIDAtNS41MDQgOS4wNjZjLjUxOSAyLjEyNC43ODIgNC4zMjEuNzgyIDYuNTMzIDAgMTUuMS0xMi4yODUgMjcuMzg1LTI3LjM4NSAyNy4zODVzLTI3LjM4NS0xMi4yODUtMjcuMzg1LTI3LjM4NVMyNDAuOSA5Ny44MjMgMjU2IDk3LjgyM2MzLjcwMSAwIDcuMjg3LjcyMyAxMC42NTcgMi4xNDhhNy41IDcuNSAwIDAgMCA1Ljg0NC0xMy44MTQgNDIuMDg5IDQyLjA4OSAwIDAgMC05LjAwMS0yLjY2MVY2Mi42NTdjMC00LjY5OCAyLjUwOC05LjEwOCA2LjU0Ni0xMS41MTFhMjcuNDY4IDI3LjQ2OCAwIDAgMCAxMy40MTUtMjUuMTE2QzI4Mi43MzUgMTIuMTgxIDI3MS4zMTguNzY0IDI1Ny40Ny4wMzljLTcuNjI3LS4zOTktMTQuODcyIDIuMjY4LTIwLjM5NyA3LjUxMUEyNy42MiAyNy42MiAwIDAgMCAyMjguNSAyNy41YzAgNC4xNDMgMy4zNTggNy41IDcuNSA3LjVzNy41LTMuMzU3IDcuNS03LjVjMC0zLjQ2MyAxLjM4NC02LjY4NCAzLjg5OC05LjA2OSAyLjUxMi0yLjM4NCA1LjgxNS0zLjU5NSA5LjI4Ny0zLjQxMyA2LjI4Ni4zMyAxMS40NjggNS41MTIgMTEuNzk4IDExLjc5OGExMi41MSAxMi41MSAwIDAgMS02LjEwNSAxMS40MzljLTguNTYgNS4wOTItMTMuODc3IDE0LjQ0Mi0xMy44NzcgMjQuNDAydjIwLjg0NGMtMTkuODA0IDMuNTUzLTM0Ljg4NSAyMC44OTYtMzQuODg1IDQxLjcwN3MxNS4wODEgMzguMTU0IDM0Ljg4NSA0MS43MDd2OC43NDJjLTE3LjA5NiAzLjQ4NC0zMCAxOC42MzUtMzAgMzYuNzQ1czEyLjkwNCAzMy4yNjEgMzAgMzYuNzQ1djcuNTkxYy0xMC4yNDkgNC4xOTgtMjIuODI1IDE1LjI4Ni0zMS43OTQgMjUuMDgxYTcuNSA3LjUgMCAwIDAgMTEuMDYyIDEwLjEzMWMxNC41NTgtMTUuODk3IDI1LjY0NC0yMS41ODMgMjguMjM0LTIxLjk0MiA0LjY1My41OTMgMjMuNjQ2IDEyLjkzIDQyLjEyOCAzOS4zMjEgMTUuNjc5IDIyLjM4OSAzNC4zNjkgNTkuOCAzNC4zNjkgMTEwLjg4MSAwIDQyLjM0Mi0zNC4zMTcgNzYuNzktNzYuNSA3Ni43OS00Mi4xODIgMC03Ni41LTM0LjQ0OC03Ni41LTc2Ljc5IDAtNDcuMTI5IDE2LjE0NC04Mi40ODkgMjkuNjg2LTEwMy44NTRhNy41MDEgNy41MDEgMCAwIDAtMTIuNjY5LTguMDMyQzE4MS45MTEgMzMxLjM2NyAxNjQuNSAzNjkuNDgzIDE2NC41IDQyMC4yMWMwIDUwLjYxMyA0MS4wNDcgOTEuNzkgOTEuNSA5MS43OXM5MS41LTQxLjE3NyA5MS41LTkxLjc5YzAtNTUuNjQyLTIwLjU5Ni05Ni4yOTctMzcuODczLTEyMC42MDR6TTIzMy41IDIxMi40MDJjMC0xMi40MDYgMTAuMDkzLTIyLjUgMjIuNS0yMi41IDEyLjQwNiAwIDIyLjUgMTAuMDk0IDIyLjUgMjIuNXMtMTAuMDk0IDIyLjUtMjIuNSAyMi41Yy0xMi40MDcgMC0yMi41LTEwLjA5My0yMi41LTIyLjV6XFxcIiAvPjxwYXRoIGQ9XFxcIk0yODguNzE5IDQ0MS43MjdhNy40OTggNy40OTggMCAwIDAgOS42MDQtNC40OTlBNDQuODU4IDQ0Ljg1OCAwIDAgMCAzMDEgNDIxLjkxMmMwLTI0LjgxMy0yMC4xODctNDUtNDUtNDVzLTQ1IDIwLjE4Ny00NSA0NSAyMC4xODcgNDUgNDUgNDVjNS41MjggMCAxMC45MzEtLjk5MyAxNi4wNTgtMi45NTJhNy41IDcuNSAwIDAgMCA0LjMyOS05LjY4MyA3LjQ5NSA3LjQ5NSAwIDAgMC05LjY4My00LjMyOUEyOS44ODQgMjkuODg0IDAgMCAxIDI1NiA0NTEuOTEyYy0xNi41NDIgMC0zMC0xMy40NTgtMzAtMzBzMTMuNDU4LTMwIDMwLTMwIDMwIDEzLjQ1OCAzMCAzMGMwIDMuNTEyLS41OTkgNi45NDctMS43OCAxMC4yMTFhNy40OTkgNy40OTkgMCAwIDAgNC40OTkgOS42MDR6XFxcIiAvPjwvc3ltYm9sPlwiXG59KTtcbnZhciByZXN1bHQgPSBzcHJpdGUuYWRkKHN5bWJvbCk7XG5leHBvcnQgZGVmYXVsdCBzeW1ib2xcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9hc3NldHMvc3ZnL211bHRpY29sb3IvaWNvbi1pbmNvbXBsZXRlLWVhcnJpbmdzLnN2Z1xuLy8gbW9kdWxlIGlkID0gMTQ5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCBTcHJpdGVTeW1ib2wgZnJvbSBcInN2Zy1iYWtlci1ydW50aW1lL2Jyb3dzZXItc3ltYm9sXCI7XG5pbXBvcnQgc3ByaXRlIGZyb20gXCJzdmctc3ByaXRlLWxvYWRlci9ydW50aW1lL2Jyb3dzZXItc3ByaXRlLmJ1aWxkXCI7XG52YXIgc3ltYm9sID0gbmV3IFNwcml0ZVN5bWJvbCh7XG4gIFwiaWRcIjogXCJpY29uLW5ldy1qZXdlbHJ5XCIsXG4gIFwidXNlXCI6IFwiaWNvbi1uZXctamV3ZWxyeS11c2FnZVwiLFxuICBcInZpZXdCb3hcIjogXCIwIDAgNTEyLjAxOSA1MTIuMDE5XCIsXG4gIFwiY29udGVudFwiOiBcIjxzeW1ib2wgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB2aWV3Qm94PVxcXCIwIDAgNTEyLjAxOSA1MTIuMDE5XFxcIiBpZD1cXFwiaWNvbi1uZXctamV3ZWxyeVxcXCI+PHBhdGggZD1cXFwiTTQ4Ni4zMjkgNjkuMzg1Yy4wOTktLjM2Ny4xNzMtLjc0MS4yMjItMS4xMThWMjUuNmMwLTE0LjEzOC0xMS40NjItMjUuNi0yNS42LTI1LjZINTEuMzVjLTE0LjEzOCAwLTI1LjYgMTEuNDYxLTI1LjYgMjUuNnY0Mi42NjdjLjA0OC4zNzcuMTIzLjc1MS4yMjIgMS4xMTgtLjAwMS4zOTEuMDI3Ljc4Mi4wODUgMS4xNjlMNjcuOTczIDIyMS40NGwtNDEuNjYgMTA4LjI5N2E4LjUyNiA4LjUyNiAwIDAgMC0uMjY1IDEuNTg3IDcuODIxIDcuODIxIDAgMCAwLS4yOTkgMS40NzZ2MTU1Ljc4NWEyNC43NDQgMjQuNzQ0IDAgMCAwIDQuOTA3IDE4Ljg4NEExNi40NjYgMTYuNDY2IDAgMCAwIDQyLjgxNiA1MTJINDYwLjk1YzE0LjEzOCAwIDI1LjYtMTEuNDYxIDI1LjYtMjUuNlYzMzIuOGE3LjkxMyA3LjkxMyAwIDAgMC0uMjk5LTEuNDg1IDguMzYyIDguMzYyIDAgMCAwLS4yNjUtMS41NzlsLTQxLjY2LTEwOC4yOTcgNDEuOTE2LTE1MC44ODZjLjA1OS0uMzg2LjA4OC0uNzc3LjA4Ny0xLjE2OHpNODIuODEzIDIzMC40aDMwLjI4NWwtMjUuNiA5My44NjdoLTQwLjc5TDgyLjgxMyAyMzAuNHptMTA1LjA3MS00OS4wNzVhMTguMDI3IDE4LjAyNyAwIDAgMC0zLjUwNyAyLjMzYy0xNC42MjYgMTIuNzA2LTM5LjE1OSAzNy43NDMtMzkuMTU5IDYyLjU4M2E0OS4wNjYgNDkuMDY2IDAgMCAwIDUxLjIgNTIuNDI4IDQ5LjA2NyA0OS4wNjcgMCAwIDAgNTEuMi01Mi40MjhjMC0yNC44NDEtMjQuNTMzLTQ5Ljg3Ny0zOS4xNTEtNjIuNTc1YTE3Ljg2IDE3Ljg2IDAgMCAwLTMuNTE2LTIuMzM4VjE1My42aDEwMi40djI3LjcyNWExOC4wMjcgMTguMDI3IDAgMCAwLTMuNTA3IDIuMzNjLTE0LjYyNiAxMi43MDYtMzkuMTU5IDM3Ljc0My0zOS4xNTkgNjIuNTgzYTQ5LjA2NiA0OS4wNjYgMCAwIDAgNTEuMiA1Mi40MjggNDkuMDY3IDQ5LjA2NyAwIDAgMCA1MS4yLTUyLjQyOGMwLTI0Ljg0MS0yNC41MzMtNDkuODc3LTM5LjE1MS02Mi41NzVhMTcuODYgMTcuODYgMCAwIDAtMy41MTYtMi4zMzhWMTUzLjZoMjkuNjM2YTguNTM0IDguNTM0IDAgMCAxIDguMjM1IDYuMjg5bDQ0LjgyNiAxNjQuMzc4SDEwNS4xODdsNDQuODM0LTE2NC4zNzhhOC41MzMgOC41MzMgMCAwIDEgOC4yMjYtNi4yODloMjkuNjM2djI3LjcyNXptNy42OCAxNS4yMDZhMS40NTEgMS40NTEgMCAwIDEgMS43MDcgMGMyMC44NDcgMTguMTA4IDMzLjI4IDM2LjY5MyAzMy4yOCA0OS42OTggMCAyMi4xNTMtMTIuNzU3IDM1LjM3MS0zNC4xMzMgMzUuMzcxcy0zNC4xMzMtMTMuMjE4LTM0LjEzMy0zNS4zNjJjLS4wMDEtMTMuMDA1IDEyLjQ0LTMxLjU5MSAzMy4yNzktNDkuNzA3em0xMTkuNDY2IDBhMS40NTEgMS40NTEgMCAwIDEgMS43MDcgMGMyMC44NDcgMTguMTA4IDMzLjI4IDM2LjY5MyAzMy4yOCA0OS42OTggMCAyMi4xNTMtMTIuNzU3IDM1LjM3MS0zNC4xMzMgMzUuMzcxcy0zNC4xMzMtMTMuMjE4LTM0LjEzMy0zNS4zNjJjLS4wMDEtMTMuMDA1IDEyLjQ0MS0zMS41OTEgMzMuMjc5LTQ5LjcwN3pNNDY5LjQ4NCA0ODYuNGE4LjUzMyA4LjUzMyAwIDAgMS04LjUzMyA4LjUzM0g0Mi45NzFhNTUuOTg1IDU1Ljk4NSAwIDAgMS0uMTU0LTYuMjEyVjM0MS4zMzNoNDI2LjY2N1Y0ODYuNHptLTMuODkxLTE2Mi4xMzNoLTQwLjc4OWwtMjUuNi05My44NjdoMzAuMjg1bDM2LjEwNCA5My44Njd6bS0zNi43MjgtMTEwLjkzNGgtMzQuMzEzbC0xNS44MDQtNTcuOTQxYTI1LjY1MiAyNS42NTIgMCAwIDAtMjQuNjk1LTE4Ljg1OWgtMjkuNjM2YzAtNC43MTMtMy44Mi04LjUzMy04LjUzMy04LjUzM3MtOC41MzMgMy44Mi04LjUzMyA4LjUzM2gtMTAyLjRjMC00LjcxMy0zLjgyLTguNTMzLTguNTMzLTguNTMzcy04LjUzMyAzLjgyLTguNTMzIDguNTMzaC0yOS42MzZhMjUuNjUgMjUuNjUgMCAwIDAtMjQuNjk1IDE4Ljg1OWwtMTUuODA0IDU3Ljk0MUg4My40MzZMNDUuNTE0IDc2LjhoNDIxLjI3NGwtMzcuOTIzIDEzNi41MzN6bTQwLjYxOS0xNTMuNkg0Mi44MTdWMjUuNmE4LjUzMyA4LjUzMyAwIDAgMSA4LjUzMy04LjUzM2g0MDkuNmE4LjUzMyA4LjUzMyAwIDAgMSA4LjUzMyA4LjUzM3YzNC4xMzN6XFxcIiAvPjxwYXRoIGQ9XFxcIk0xNzkuNjE1IDI1MS42NTdhOC41MzMgOC41MzMgMCAwIDAgOC40MjIgNy4wNCA4LjAyOSA4LjAyOSAwIDAgMCAxLjQ5My0uMTI4IDguNTMzIDguNTMzIDAgMCAwIDYuODg2LTkuODljLS40MTgtMi4zNzIgMy4zNTQtNy4xMjUgNS42MDYtOS45NjdsMS4wODQtMS4zNzRhOC41MzEgOC41MzEgMCAwIDAtNS40NzEtMTMuOTAzIDguNTM1IDguNTM1IDAgMCAwLTcuOTc4IDMuNDA4bC0uOTk4IDEuMjU0YTMwLjQzOSAzMC40MzkgMCAwIDAtOS4wNDQgMjMuNTZ6TTI5OS4wODIgMjUxLjY1N2E4LjUzMyA4LjUzMyAwIDAgMCA4LjQyMiA3LjA0IDguMDI5IDguMDI5IDAgMCAwIDEuNDkzLS4xMjggOC41MzMgOC41MzMgMCAwIDAgNi44ODYtOS44OWMtLjQxOC0yLjM3MiAzLjM1NC03LjEyNSA1LjYwNi05Ljk2N2wxLjA4NC0xLjM3NGE4LjUzMyA4LjUzMyAwIDAgMC0xMy40NDgtMTAuNDk2bC0uOTk4IDEuMjU0YTMwLjQ0IDMwLjQ0IDAgMCAwLTkuMDQ1IDIzLjU2MXpcXFwiIC8+PC9zeW1ib2w+XCJcbn0pO1xudmFyIHJlc3VsdCA9IHNwcml0ZS5hZGQoc3ltYm9sKTtcbmV4cG9ydCBkZWZhdWx0IHN5bWJvbFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2Fzc2V0cy9zdmcvbXVsdGljb2xvci9pY29uLW5ldy1qZXdlbHJ5LnN2Z1xuLy8gbW9kdWxlIGlkID0gMTUwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCBTcHJpdGVTeW1ib2wgZnJvbSBcInN2Zy1iYWtlci1ydW50aW1lL2Jyb3dzZXItc3ltYm9sXCI7XG5pbXBvcnQgc3ByaXRlIGZyb20gXCJzdmctc3ByaXRlLWxvYWRlci9ydW50aW1lL2Jyb3dzZXItc3ByaXRlLmJ1aWxkXCI7XG52YXIgc3ltYm9sID0gbmV3IFNwcml0ZVN5bWJvbCh7XG4gIFwiaWRcIjogXCJpY29uLW9sZC1jaGFpblwiLFxuICBcInVzZVwiOiBcImljb24tb2xkLWNoYWluLXVzYWdlXCIsXG4gIFwidmlld0JveFwiOiBcIjAgMCA1MTIgNTEyXCIsXG4gIFwiY29udGVudFwiOiBcIjxzeW1ib2wgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB2aWV3Qm94PVxcXCIwIDAgNTEyIDUxMlxcXCIgaWQ9XFxcImljb24tb2xkLWNoYWluXFxcIj48ZyB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIGZpbGw9XFxcIiNmZGU1NzVcXFwiPjxyZWN0IGhlaWdodD1cXFwiMzJcXFwiIHJ4PVxcXCIxNlxcXCIgdHJhbnNmb3JtPVxcXCJyb3RhdGUoMTgwIDI1NiA0NzIpXFxcIiB3aWR0aD1cXFwiNjRcXFwiIHg9XFxcIjIyNFxcXCIgeT1cXFwiNDU2XFxcIiBmaWxsPVxcXCIjZmZmZmZmMDBcXFwiIGRhdGEtb3JpZ2luYWw9XFxcIiNmZGU1NzVcXFwiIC8+PHJlY3QgaGVpZ2h0PVxcXCIzMlxcXCIgcng9XFxcIjE2XFxcIiB0cmFuc2Zvcm09XFxcInJvdGF0ZSgtMTUyLjM4IDE1NS42NTMgNDQ3LjI4OSlcXFwiIHdpZHRoPVxcXCI2NFxcXCIgeD1cXFwiMTIzLjczMVxcXCIgeT1cXFwiNDMxLjMxN1xcXCIgZmlsbD1cXFwiI2ZmZmZmZjAwXFxcIiBkYXRhLW9yaWdpbmFsPVxcXCIjZmRlNTc1XFxcIiAvPjxyZWN0IGhlaWdodD1cXFwiMzJcXFwiIHJ4PVxcXCIxNlxcXCIgdHJhbnNmb3JtPVxcXCJzY2FsZSgtMSkgcm90YXRlKDU1LjMgNzIzLjMgLTE0OS41NTYpXFxcIiB3aWR0aD1cXFwiNjRcXFwiIHg9XFxcIjQ2LjM3OVxcXCIgeT1cXFwiMzYyLjkwOVxcXCIgZmlsbD1cXFwiI2ZmZmZmZjAwXFxcIiBkYXRhLW9yaWdpbmFsPVxcXCIjZmRlNTc1XFxcIiAvPjxyZWN0IGhlaWdodD1cXFwiMzJcXFwiIHJ4PVxcXCIxNlxcXCIgdHJhbnNmb3JtPVxcXCJzY2FsZSgtMSkgcm90YXRlKDgyLjk5IDMxOS40NjQgLTQ3LjExNilcXFwiIHdpZHRoPVxcXCI2NFxcXCIgeD1cXFwiOS42MjFcXFwiIHk9XFxcIjI2Ni40MTFcXFwiIGZpbGw9XFxcIiNmZmZmZmYwMFxcXCIgZGF0YS1vcmlnaW5hbD1cXFwiI2ZkZTU3NVxcXCIgLz48cmVjdCBoZWlnaHQ9XFxcIjMyXFxcIiByeD1cXFwiMTZcXFwiIHRyYW5zZm9ybT1cXFwicm90YXRlKC02OS4zOSA1My44IDE3OS44MylcXFwiIHdpZHRoPVxcXCI2NFxcXCIgeD1cXFwiMjEuODU4XFxcIiB5PVxcXCIxNjMuODc3XFxcIiBmaWxsPVxcXCIjZmZmZmZmMDBcXFwiIGRhdGEtb3JpZ2luYWw9XFxcIiNmZGU1NzVcXFwiIC8+PHJlY3QgaGVpZ2h0PVxcXCIzMlxcXCIgcng9XFxcIjE2XFxcIiB0cmFuc2Zvcm09XFxcInJvdGF0ZSgtNDEuNjcgMTEyLjQwMyA5NC43NTIpXFxcIiB3aWR0aD1cXFwiNjRcXFwiIHg9XFxcIjgwLjI5NVxcXCIgeT1cXFwiNzguNzRcXFwiIGZpbGw9XFxcIiNmZmZmZmYwMFxcXCIgZGF0YS1vcmlnaW5hbD1cXFwiI2ZkZTU3NVxcXCIgLz48cmVjdCBoZWlnaHQ9XFxcIjMyXFxcIiByeD1cXFwiMTZcXFwiIHRyYW5zZm9ybT1cXFwicm90YXRlKC0yNy42MyAzNTYuNjcgNDQ3LjQwNilcXFwiIHdpZHRoPVxcXCI2NFxcXCIgeD1cXFwiMzI0LjI2OVxcXCIgeT1cXFwiNDMxLjMxN1xcXCIgZmlsbD1cXFwiI2ZmZmZmZjAwXFxcIiBkYXRhLW9yaWdpbmFsPVxcXCIjZmRlNTc1XFxcIiAvPjxyZWN0IGhlaWdodD1cXFwiMzJcXFwiIHJ4PVxcXCIxNlxcXCIgdHJhbnNmb3JtPVxcXCJyb3RhdGUoLTU1LjMgNDMzLjg0IDM3OS4wMzgpXFxcIiB3aWR0aD1cXFwiNjRcXFwiIHg9XFxcIjQwMS42MjFcXFwiIHk9XFxcIjM2Mi45MDlcXFwiIGZpbGw9XFxcIiNmZmZmZmYwMFxcXCIgZGF0YS1vcmlnaW5hbD1cXFwiI2ZkZTU3NVxcXCIgLz48cmVjdCBoZWlnaHQ9XFxcIjMyXFxcIiByeD1cXFwiMTZcXFwiIHRyYW5zZm9ybT1cXFwicm90YXRlKC04Mi45OSA0NzAuNTQgMjgyLjU3NilcXFwiIHdpZHRoPVxcXCI2NFxcXCIgeD1cXFwiNDM4LjM3OVxcXCIgeT1cXFwiMjY2LjQxMVxcXCIgZmlsbD1cXFwiI2ZmZmZmZjAwXFxcIiBkYXRhLW9yaWdpbmFsPVxcXCIjZmRlNTc1XFxcIiAvPjxyZWN0IGhlaWdodD1cXFwiMzJcXFwiIHJ4PVxcXCIxNlxcXCIgdHJhbnNmb3JtPVxcXCJyb3RhdGUoLTExMC42MSA0NTguMjU0IDE3OS44MDEpXFxcIiB3aWR0aD1cXFwiNjRcXFwiIHg9XFxcIjQyNi4xNDJcXFwiIHk9XFxcIjE2My44NzdcXFwiIGZpbGw9XFxcIiNmZmZmZmYwMFxcXCIgZGF0YS1vcmlnaW5hbD1cXFwiI2ZkZTU3NVxcXCIgLz48cmVjdCBoZWlnaHQ9XFxcIjMyXFxcIiByeD1cXFwiMTZcXFwiIHRyYW5zZm9ybT1cXFwicm90YXRlKC0xMzguMzMgMzk5LjYyMSA5NC44MTgpXFxcIiB3aWR0aD1cXFwiNjRcXFwiIHg9XFxcIjM2Ny43MDVcXFwiIHk9XFxcIjc4Ljc0XFxcIiBmaWxsPVxcXCIjZmZmZmZmMDBcXFwiIGRhdGEtb3JpZ2luYWw9XFxcIiNmZGU1NzVcXFwiIC8+PC9nPjxwYXRoIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgZD1cXFwiTTQ3Ny45NzggMjQzLjIwN2wtNC40MTItMjYuNDcyYTIzLjk0OSAyMy45NDkgMCAwIDAgMTIuNjc1LTMwLjM0M2wtMTEuMjc4LTI5Ljk0N2EyNC4wMjcgMjQuMDI3IDAgMCAwLTI5LjM5My0xNC41MTNMNDMwLjgxNSAxMTkuOGEyNC4wMTkgMjQuMDE5IDAgMCAwLTMuMi0zMi4zMzRsLTIzLjg5LTIxLjI5YTIzLjk5NCAyMy45OTQgMCAwIDAtMzEuODQ2LS4wNzRMMzM4Ljk1IDUxLjk4OWwxMi4yLTI0LjQxMWE4IDggMCAxIDAtMTQuMzEtNy4xNTZsLTMyIDY0YTggOCAwIDEgMCAxNC4zMSA3LjE1NmwxMi42MjctMjUuMjU0IDMyLjMgMTMuODQzYTI0LjIzNCAyNC4yMzQgMCAwIDAtLjI4MiA1LjMwOCAyMy44NCAyMy44NCAwIDAgMCA3Ljk5MyAxNi41MzhsMjMuODkxIDIxLjI5YTIzLjkgMjMuOSAwIDAgMCAxNS45NTQgNi4wNzEgMjQuMjA3IDI0LjIwNyAwIDAgMCA1Ljg0OC0uNzIzbDE1LjE4IDIyLjc3YTIzLjk4MyAyMy45ODMgMCAwIDAtMi42MjQgMjEuOTRsMTEuMjc4IDI5Ljk0N0EyMy45NyAyMy45NyAwIDAgMCA0NTcuNTU3IDIxOGw0LjQ3OCAyNi44NjdhMjQgMjQgMCAwIDAtMTMuNTE5IDE4LjczM2wtMy45MTYgMzEuNzU2QTIzLjk4MSAyMy45ODEgMCAwIDAgNDUyLjI1IDMxNmwtNy4zODMgMjUuODQyYTI0LjE1NyAyNC4xNTcgMCAwIDAtNi40NC4yOTUgMjMuODQ1IDIzLjg0NSAwIDAgMC0xNS40MzcgOS45NjNsLTE4LjIwOSAyNi4zMWEyNCAyNCAwIDAgMC0yLjYwNSAyMi40bC0yMS42NDUgMTcuMzJhMjMuOTcxIDIzLjk3MSAwIDAgMC0yMS4yMzIuNWwtMjguMzQyIDE0Ljg1NWEyMy44NDMgMjMuODQzIDAgMCAwLTExLjc2OSAxNC4xIDI0LjE4NiAyNC4xODYgMCAwIDAtMS4wMTEgNS4xODFsLTI1LjM5MSA3LjI1NEEyNC4wMDggMjQuMDA4IDAgMCAwIDI3MiA0NDhoLTMyYTI0LjAwOCAyNC4wMDggMCAwIDAtMjAuNzg2IDEyLjAyNmwtMjUuMzkxLTcuMjU0YTI0LjE4NiAyNC4xODYgMCAwIDAtMS4wMTEtNS4xODEgMjMuODQzIDIzLjg0MyAwIDAgMC0xMS43NjktMTQuMUwxNTIuNyA0MTguNjMyYTIzLjk3NCAyMy45NzQgMCAwIDAtMjEuMjMyLS41bC0yMS42NDUtMTcuMzE2YTI0IDI0IDAgMCAwLTIuNjA1LTIyLjRMODkuMDEgMzUyLjFhMjMuODQ1IDIzLjg0NSAwIDAgMC0xNS40MzctOS45NTYgMjQuMTE4IDI0LjExOCAwIDAgMC02LjQ0LS4zTDU5Ljc1IDMxNmEyMy45ODEgMjMuOTgxIDAgMCAwIDcuNjUtMjAuNjQ0TDYzLjQ4NCAyNjMuNmEyMy45OTQgMjMuOTk0IDAgMCAwLTEzLjUxOS0xOC43MjdsNC40NzMtMjYuODM0YTI0LjMgMjQuMyAwIDAgMCAzLjY4My0xLjMyMiAyMy44NDcgMjMuODQ3IDAgMCAwIDEyLjU1OS0xMy40bDExLjI3OC0yOS45NDdhMjMuOTgzIDIzLjk4MyAwIDAgMC0yLjYyNC0yMS45NGwxNS4xOC0yMi43N2EyNC4yMDcgMjQuMjA3IDAgMCAwIDUuODQ4LjcyMyAyMy45MDUgMjMuOTA1IDAgMCAwIDE1Ljk1NC02LjA3MWwyMy44OTEtMjEuMjlhMjMuODQgMjMuODQgMCAwIDAgNy45OTMtMTYuNTQ3IDI0LjIzNCAyNC4yMzQgMCAwIDAtLjI4Mi01LjMwOGwxMC43NzUtNC42MTdhMzEuODE4IDMxLjgxOCAwIDEgMC02LjMyNS0xNC43bC0xMi4yNSA1LjI1YTIzLjk5NCAyMy45OTQgMCAwIDAtMzEuODQ2LjA3NGwtMjMuODkgMjEuMjlhMjQuMDE5IDI0LjAxOSAwIDAgMC0zLjIgMzIuMzM0TDY2LjQzIDE0MS45MzNhMjQuMDI3IDI0LjAyNyAwIDAgMC0yOS4zOTMgMTQuNTEybC0xMS4yNzggMjkuOTQ3YTIzLjk0OSAyMy45NDkgMCAwIDAgMTIuNjc1IDMwLjM0M2wtNC40MTIgMjYuNDcyYTIzLjk5MiAyMy45OTIgMCAwIDAtMTguMTc3IDI2LjI1OGwzLjkxMiAzMS43NjFhMjQuMDM1IDI0LjAzNSAwIDAgMCAyMy44IDIxLjA2NmMuNDQyIDAgLjg4OC0uMDE2IDEuMzM0LS4wNDFsNy41NDggMjYuNDE2YTIzLjk2IDIzLjk2IDAgMCAwLTIuOSAzMC43NDJsMTguMjA5IDI2LjMxNGEyMy44NDEgMjMuODQxIDAgMCAwIDE1LjQzNyA5Ljk1NiAyNC4zNjYgMjQuMzY2IDAgMCAwIDQuMzQ5LjM5NCAyMy43NTggMjMuNzU4IDAgMCAwIDExLjgxMi0zLjE1MWwyMC42MjUgMTYuNWEyNC4wMjQgMjQuMDI0IDAgMCAwIDEwLjQ0NyAzMS43MjVMMTU4Ljc2MiA0NzZhMjMuOTc3IDIzLjk3NyAwIDAgMCAzMC45Ny03Ljc1OGwyNi41NzkgNy41OTRBMjQuMDM2IDI0LjAzNiAwIDAgMCAyNDAgNDk2aDMyYTI0LjAzNiAyNC4wMzYgMCAwIDAgMjMuNjg5LTIwLjE2MmwyNi41NzktNy41OTRhMjMuOTkzIDIzLjk5MyAwIDAgMCAzMC45NyA3Ljc1NmwyOC4zNDQtMTQuODU1YTI0LjAyNCAyNC4wMjQgMCAwIDAgMTAuNDQ3LTMxLjcyNWwyMC42MjUtMTYuNWEyMy43NTggMjMuNzU4IDAgMCAwIDExLjgxMiAzLjE1MSAyNC4zNjYgMjQuMzY2IDAgMCAwIDQuMzQ5LS4zOTQgMjMuODQxIDIzLjg0MSAwIDAgMCAxNS40MzctOS45NTZsMTguMjA5LTI2LjMxNGEyMy45NiAyMy45NiAwIDAgMC0yLjktMzAuNzQybDcuNTQ4LTI2LjQxNmMuNDQ2LjAyNS44OTEuMDQxIDEuMzM0LjA0MWEyNC4wMzYgMjQuMDM2IDAgMCAwIDIzLjgtMjEuMDY2bDMuOTEyLTMxLjc2YTIzLjk5MiAyMy45OTIgMCAwIDAtMTguMTc3LTI2LjI1OXpNMTg0IDQwYTE2IDE2IDAgMSAxLTE2IDE2IDE2LjAxOSAxNi4wMTkgMCAwIDEgMTYtMTZ6bTE5OC40MzggNTAuMDY4YTcuOTMyIDcuOTMyIDAgMCAxLTIuMDYxLTIuOTE3bC40NzIuMmE4IDggMCAwIDAgMTAuNTU3LTEwLjM3MiA4LjAzMiA4LjAzMiAwIDAgMSAxLjY3NyAxLjE0MmwyMy44OSAyMS4yOWE3Ljk3MSA3Ljk3MSAwIDAgMSAyLjY1NSA1LjQ2MSA3Ljk5MSA3Ljk5MSAwIDAgMC0xMS42MDYgNy42MzQgOC4wMjkgOC4wMjkgMCAwIDEtMS42OTQtMS4xNTF6bTYyLjU3OCA3Ny42NTVjLS4wNDUtLjExOS0uMDc2LS4yNC0uMTE1LS4zNmE3Ljk4NSA3Ljk4NSAwIDAgMCAxMC43MDYtOS44MjEgNy45NjggNy45NjggMCAwIDEgNC4zODMgNC41NDJsMTEuMjc3IDI5Ljk0N2E3Ljk4NiA3Ljk4NiAwIDAgMS0yLjgzNCA5LjMyMSA3Ljk1MSA3Ljk1MSAwIDAgMC05LjA4NS4xNDkgNy45MjkgNy45MjkgMCAwIDEtMy4wNTQtMy44MzJ6TTk1LjAyNyA5OS40MTNsMjMuODktMjEuMjlhOCA4IDAgMCAxIDEuNjgtMS4xNDggOCA4IDAgMCAwIDEwLjU1NCAxMC4zNzhsLjQ3Mi0uMmE3LjkzMiA3LjkzMiAwIDAgMS0yLjA2MSAyLjkxN2wtMjMuODkgMjEuMjg5YTguMDcxIDguMDcxIDAgMCAxLTEuNjk0IDEuMTUyIDcuOTkxIDcuOTkxIDAgMCAwLTExLjYwNi03LjYzNSA3Ljk2NyA3Ljk2NyAwIDAgMSAyLjY1NS01LjQ2M3ptLTU0LjI5NCA5Mi42MThsMTEuMjc3LTI5Ljk0N2E3Ljk2IDcuOTYgMCAwIDEgNC4zNzgtNC41MjcgNy45NzYgNy45NzYgMCAwIDAgMTAuNzEyIDkuODA2Yy0uMDM5LjEyLS4wNy4yNDEtLjExNS4zNmwtMTEuMjc5IDI5Ljk0NmE3LjkyOSA3LjkyOSAwIDAgMS0zLjA1NCAzLjgzMiA3Ljk1MSA3Ljk1MSAwIDAgMC05LjA4Mi0uMTUxIDguMDA4IDguMDA4IDAgMCAxLTIuODM3LTkuMzE5em0tNS4xIDEwNy4yMzlsLTMuOTEyLTMxLjc2MWE3Ljk0MyA3Ljk0MyAwIDAgMSAxLjYzMy01LjljLjE0Ny0uMTg4LjMtLjM2NS40NjQtLjUzN2E3Ljk2MiA3Ljk2MiAwIDAgMCA0Ljg2MyAyLjgyIDcuOTY5IDcuOTY5IDAgMCAwIDcuMTU2LTIuNDMzIDcuOTM4IDcuOTM4IDAgMCAxIDEuNzYzIDQuMDk1bDMuODQ5IDMxLjI0MWE3Ljk4NiA3Ljk4NiAwIDAgMC0xMS4zIDguNzE0IDcuOTkgNy45OSAwIDAgMS00LjUxMi02LjIzOXpNODYuMDUgMzk5LjkzN2E3Ljk0NCA3Ljk0NCAwIDAgMS01LjE0NS0zLjMxOEw2Mi43IDM3MC4zYTcuOTc0IDcuOTc0IDAgMCAxLTEuMi0yLjcwOSA3Ljk5IDcuOTkgMCAwIDAgMTAuMjg0LTkuNDMzIDcuOTMgNy45MyAwIDAgMSA0LjA3NyAzLjAzOEw5NC4wNyAzODcuNTFhNy45NDcgNy45NDcgMCAwIDEgMS40MTkgNC41MTJBNy45NzggNy45NzggMCAwIDAgODggNDAwLjA0NGE3Ljk4MSA3Ljk4MSAwIDAgMS0xLjk1LS4xMDd6bTgwLjEzOSA2MS44OTNsLTI4LjM0My0xNC44NTRhNy45NyA3Ljk3IDAgMCAxLTQuMjc2LTcuMzU3IDcuOTgyIDcuOTgyIDAgMCAwIDEwLjQxNi03LjMzOSA3Ljk3IDcuOTcgMCAwIDEgMS4yODcuNTI0bDI4LjM0NCAxNC44NTVhOC4wMTMgOC4wMTMgMCAwIDEgLjgyLjUgNy45OTEgNy45OTEgMCAwIDAtMi45NjcgMTQuNDI4IDcuOTM4IDcuOTM4IDAgMCAxLTUuMjgxLS43NTd6TTI0MCA0ODBhNy45MzkgNy45MzkgMCAwIDEtNC4wMS0xLjA4OSA3Ljk2OSA3Ljk2OSAwIDAgMCAuMDEtMTMuODI5IDcuOTM5IDcuOTM5IDAgMCAxIDQtMS4wODJoMzJhNy45MzkgNy45MzkgMCAwIDEgNCAxLjA4MiA3Ljk2OSA3Ljk2OSAwIDAgMCAuMDExIDEzLjgyOUE3LjkzNiA3LjkzNiAwIDAgMSAyNzIgNDgwem0xMzguMDc3LTM3LjcyNmE3Ljk1NSA3Ljk1NSAwIDAgMS0zLjkyMyA0LjdsLTI4LjM0MyAxNC44NTZhNy45NDQgNy45NDQgMCAwIDEtNS4yODEuNzU4IDcuOTkxIDcuOTkxIDAgMCAwLTIuOTY3LTE0LjQyOCA3LjkyMSA3LjkyMSAwIDAgMSAuODIxLS41bDI4LjM0My0xNC44NmE3Ljk3IDcuOTcgMCAwIDEgMS4yODctLjUyNCA3Ljk4MSA3Ljk4MSAwIDAgMCAxMC40MTYgNy4zMzggOCA4IDAgMCAxLS4zNTMgMi42NnptNTMuMDIzLTQ1LjY1NWE3Ljk1OCA3Ljk1OCAwIDAgMS03LjEgMy40MjUgNy45NzggNy45NzggMCAwIDAtNy40NzgtOC4wMTggNy45NDkgNy45NDkgMCAwIDEgMS40MTktNC41MTJsMTguMjA2LTI2LjMxNGE3LjkzIDcuOTMgMCAwIDEgNC4wNzctMy4wMzggNy45ODUgNy45ODUgMCAwIDAgMTAuMjg0IDkuNDMzIDcuOTc0IDcuOTc0IDAgMCAxLTEuMiAyLjcwOXptNDkuMTgtMTI5LjExbC0zLjkxMiAzMS43NmE4IDggMCAwIDEtNC41MDkgNi4yMzMgNy45ODYgNy45ODYgMCAwIDAtMTEuMzA3LTguNzA4bDMuODQ5LTMxLjI0MWE3LjkzNCA3LjkzNCAwIDAgMSAxLjc2NS00LjA5MyA4IDggMCAwIDAgNS44MjQgMi41NCA4LjA3NiA4LjA3NiAwIDAgMCAxLjMyNS0uMTEgNy45NjIgNy45NjIgMCAwIDAgNC44NjMtMi44MmMuMTYxLjE3Mi4zMTcuMzQ5LjQ2NC41MzdhNy45NDMgNy45NDMgMCAwIDEgMS42MzMgNS45MDJ6XFxcIiBkYXRhLW9yaWdpbmFsPVxcXCIjMDAwMDAwXFxcIiAvPjwvc3ltYm9sPlwiXG59KTtcbnZhciByZXN1bHQgPSBzcHJpdGUuYWRkKHN5bWJvbCk7XG5leHBvcnQgZGVmYXVsdCBzeW1ib2xcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9hc3NldHMvc3ZnL211bHRpY29sb3IvaWNvbi1vbGQtY2hhaW4uc3ZnXG4vLyBtb2R1bGUgaWQgPSAxNTFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IFNwcml0ZVN5bWJvbCBmcm9tIFwic3ZnLWJha2VyLXJ1bnRpbWUvYnJvd3Nlci1zeW1ib2xcIjtcbmltcG9ydCBzcHJpdGUgZnJvbSBcInN2Zy1zcHJpdGUtbG9hZGVyL3J1bnRpbWUvYnJvd3Nlci1zcHJpdGUuYnVpbGRcIjtcbnZhciBzeW1ib2wgPSBuZXcgU3ByaXRlU3ltYm9sKHtcbiAgXCJpZFwiOiBcImljb24tb2xkLWpld2VscnlcIixcbiAgXCJ1c2VcIjogXCJpY29uLW9sZC1qZXdlbHJ5LXVzYWdlXCIsXG4gIFwidmlld0JveFwiOiBcIjAgMCA1MTIgNTEyXCIsXG4gIFwiY29udGVudFwiOiBcIjxzeW1ib2wgdmlld0JveD1cXFwiMCAwIDUxMiA1MTJcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgaWQ9XFxcImljb24tb2xkLWpld2VscnlcXFwiPjxwYXRoIGQ9XFxcIk00OTIuNjggMjc1LjQxM0M1MDQuNTIyIDI2Ni45OTEgNTEyIDI1My4yIDUxMiAyMzguMDY3YzAtMTUuMzg0LTcuNjQ0LTI5LjAxMy0xOS4zMzUtMzcuMzM3IDguNjU4LTExLjY3MSAxMS40OTgtMjcuMTAyIDYuODA3LTQxLjQ5OC00Ljc3LTE0LjYyOS0xNi4yNzEtMjUuMjM0LTI5Ljk3Ny0yOS41NDUgNC42MTYtMTMuNzY3IDIuNTMyLTI5LjMyMS02LjM5OC00MS41NzEtOS4wNzMtMTIuNDM3LTIzLjMwMS0xOC45NzQtMzcuNjczLTE4Ljg0OC4xMjktMTQuNTIxLTYuNjcyLTI4LjY3Ny0xOC45NjItMzcuNTc2LTE5LjA4Mi0xMy44MDctNDUuMzM1LTEwLjgyNi02MC45MDIgNi4wOTlhMjE5LjEyNCAyMTkuMTI0IDAgMCAwLTQ3LjY3NS0xNC45NjJjLTUuNDI2LTEuMDQtMTAuNjY1IDIuNTEyLTExLjcwNSA3LjkzNi0xLjA0MiA1LjQyNCAyLjUxMiAxMC42NjUgNy45MzYgMTEuNzA2IDE0LjIxMyAyLjcyOCAyOC4wODEgNy4wMjggNDEuMzY2IDEyLjc2M2E0NS41MzYgNDUuNTM2IDAgMCAwLTEuNDg3IDIwLjcyNWMxLjkxOSAxMi4xMTcgOC40NiAyMi43NTkgMTguNDIxIDI5Ljk2NmE0NS45NzUgNDUuOTc1IDAgMCAwIDI2Ljk4NCA4Ljc1OGMuMTYzIDAgLjMyNy0uMDA5LjQ5LS4wMTEtLjExMSA5Ljc5NyAyLjkyIDE5LjMzMSA4LjgwMiAyNy4zOTNhNDUuODQ0IDQ1Ljg0NCAwIDAgMCAyMy40MDIgMTYuNzg0Yy0zLjEzNyA5LjI3Ni0zLjIxMSAxOS4yNy0uMTIxIDI4Ljc0NWE0NS43MDIgNDUuNzAyIDAgMCAwIDE3LjA3OCAyMy4xODhjLTUuNjgzIDcuNjMtOS4wNTEgMTcuMDcyLTkuMDUxIDI3LjI4NGE0NS41OTggNDUuNTk4IDAgMCAwIDkuMDUxIDI3LjMwOWMtNy43NzYgNS41MDUtMTMuOTEgMTMuNDQ3LTE3LjA3NyAyMy4xNmE0NS41ODYgNDUuNTg2IDAgMCAwIC4xMzggMjguNzY3Yy05LjEgMi44NC0xNy4zOTYgOC41MDMtMjMuNDIgMTYuNzY2YTQ1LjY0IDQ1LjY0IDAgMCAwLTguNzg1IDI3LjQxNWMtOS41NDMtLjExLTE5LjE5NyAyLjcyLTI3LjQ5MSA4LjcyNmE0NS43MSA0NS43MSAwIDAgMC0xNi44NjIgMjMuMzc3IDQ1Ljg3NyA0NS44NzcgMCAwIDAtMjguODU5LS4xNzUgNDUuODEgNDUuODEgMCAwIDAtMjMuMjg5IDE3LjA1NWMtNy42Ni01LjY4NC0xNy4xNDUtOS4wNTItMjcuNDA1LTkuMDUycy0xOS43NDUgMy4zNjktMjcuNDA1IDkuMDUyYTQ1LjgxMiA0NS44MTIgMCAwIDAtMjMuMjg4LTE3LjA1NSA0NS44OCA0NS44OCAwIDAgMC0yOC44Ni4xNzUgNDUuNjk1IDQ1LjY5NSAwIDAgMC0xNi44NTgtMjMuMzc1Yy04LjI5Ni02LjAwOC0xNy45NTItOC44MzgtMjcuNDk2LTguNzI4YTQ1LjYzIDQ1LjYzIDAgMCAwLTguNzg1LTI3LjQxNmMtNi4wMjQtOC4yNjMtMTQuMzE5LTEzLjkyNi0yMy40MTktMTYuNzY2YTQ1LjU4IDQ1LjU4IDAgMCAwIC4xMzgtMjguNzY1Yy0zLjE2Ny05LjcxNC05LjMwMi0xNy42NTYtMTcuMDc5LTIzLjE2QTQ1LjU5OCA0NS41OTggMCAwIDAgOTIgMjM4LjA2NmMwLTEwLjIxMy0zLjM2OC0xOS42NTQtOS4wNTEtMjcuMjg1YTQ1LjY5MSA0NS42OTEgMCAwIDAgMTcuMDc4LTIzLjE4NmMzLjA5LTkuNDc3IDMuMDE3LTE5LjQ3MS0uMTIxLTI4Ljc0N2E0NS44NCA0NS44NCAwIDAgMCAyMy40LTE2Ljc4MWM1Ljg4NS04LjA2NiA4LjkxNi0xNy42IDguODA1LTI3LjM5Ny4xNjMuMDAyLjMyNi4wMTEuNDg5LjAxMWE0NS45ODYgNDUuOTg2IDAgMCAwIDI2Ljk4Ni04Ljc1OGM5Ljk2LTcuMjA2IDE2LjUwMS0xNy44NDkgMTguNDItMjkuOTY2IDEuMTE2LTcuMDUuNTc4LTE0LjEwNC0xLjQ4Ny0yMC43MjUgMTMuMjg2LTUuNzM1IDI3LjE1My0xMC4wMzUgNDEuMzY2LTEyLjc2MyA1LjQyNC0xLjA0MSA4Ljk3Ny02LjI4MiA3LjkzNi0xMS43MDYtMS4wNDItNS40MjQtNi4yODUtOC45NzYtMTEuNzA2LTcuOTM2YTIxOS4xNDEgMjE5LjE0MSAwIDAgMC00Ny42NzUgMTQuOTYyYy0xNS41Ny0xNi45MjYtNDEuODIyLTE5LjkwNS02MC45MDQtNi4wOTctMTIuMjg4IDguODk4LTE5LjA4OSAyMy4wNTItMTguOTYgMzcuNTczLTE0LjM3My0uMTIzLTI4LjYwMiA2LjQxNS0zNy42NzcgMTguODU1LTguOTI3IDEyLjI0Ny0xMS4wMSAyNy44MDEtNi4zOTQgNDEuNTY3LTEzLjcwNSA0LjMxMS0yNS4yMDUgMTQuOTE3LTI5Ljk3NiAyOS41NDYtNC42OTIgMTQuMzk1LTEuODUxIDI5LjgyNSA2LjgwNyA0MS40OTdDNy42NDQgMjA5LjA1NSAwIDIyMi42ODMgMCAyMzguMDY3YzAgMTUuMTMzIDcuNDc4IDI4LjkyMyAxOS4zMjEgMzcuMzQ2YTQ2LjM5IDQ2LjM5IDAgMCAwLTQuMDU4IDYuNTM5Yy01LjU1NiAxMC45MDUtNi41MjcgMjMuMzE4LTIuNzM0IDM0Ljk0OSA0LjY4NyAxNC4zODEgMTYuMDggMjUuMTk3IDI5Ljk1OSAyOS41NjdhNDYuMjg3IDQ2LjI4NyAwIDAgMC0xLjgyIDcuNDA5Yy0xLjkxOCAxMi4xMDIgMS4wMDUgMjQuMjI1IDguMjM0IDM0LjE0MSA4Ljg0MSAxMi4xMTkgMjIuODUgMTguODg0IDM3LjI2MiAxOC44ODQuMTM1IDAgLjI3MS0uMDA4LjQwNi0uMDA5YTQ2LjMwMiA0Ni4zMDIgMCAwIDAgLjU2IDcuNTg4YzEuOTE4IDEyLjExMyA4LjQ1NSAyMi43NTMgMTguNDEgMjkuOTYyIDguMDYzIDUuODMyIDE3LjU1NCA4LjcyOSAyNy4wMyA4LjcyOSA0Ljk1OSAwIDkuOTExLS44MDEgMTQuNjUzLTIuMzg0YTQ2LjMzOCA0Ni4zMzggMCAwIDAgMi44NzUgNy4wMzNjNS41NzcgMTAuOTQzIDE1LjA5NiAxOS4wNTcgMjYuODA1IDIyLjg0N2E0NS45NSA0NS45NSAwIDAgMCAxNC4xNTMgMi4yMzQgNDYuMzEgNDYuMzEgMCAwIDAgMjcuNDc1LTkuMDY3YzguMzQ3IDExLjY3NCAyMi4wMjcgMTkuMzA5IDM3LjQ2OSAxOS4zMDkgMTUuNDQzIDAgMjkuMTIzLTcuNjM1IDM3LjQ3LTE5LjMxYTQ2LjMxIDQ2LjMxIDAgMCAwIDI3LjQ3NSA5LjA2N2M0LjcxOSAwIDkuNDkxLS43MjYgMTQuMTU0LTIuMjM0IDExLjcwOS0zLjc5IDIxLjIyOC0xMS45MDMgMjYuODA1LTIyLjg0N2E0Ni4zIDQ2LjMgMCAwIDAgMi44NzQtNy4wMyA0Ni4zMDkgNDYuMzA5IDAgMCAwIDE0LjY1MiAyLjM4M2M5LjQ3NiAwIDE4Ljk3Mi0yLjkgMjcuMDM1LTguNzMzIDkuOTUxLTcuMjA2IDE2LjQ4Ny0xNy44NDYgMTguNDA1LTI5Ljk1OWE0Ni4yOCA0Ni4yOCAwIDAgMCAuNTU5LTcuNTg3Yy4xMzUuMDAxLjI3MS4wMDkuNDA2LjAwOSAxNC40MTEgMCAyOC40MjMtNi43NjcgMzcuMjY0LTE4Ljg4NyA3LjIyNy05LjkxMyAxMC4xNTEtMjIuMDM2IDguMjMzLTM0LjEzN2E0Ni4zMTMgNDYuMzEzIDAgMCAwLTEuODIxLTcuNDExYzEzLjg4LTQuMzcxIDI1LjI3My0xNS4xODYgMjkuOTU5LTI5LjU2NSAzLjc5NC0xMS42MzIgMi44MjMtMjQuMDQ0LTIuNzMyLTM0Ljk1YTQ2LjQwMiA0Ni40MDIgMCAwIDAtNC4wNTgtNi41NHptLTEyLjIyNC0xMDkuOTgxYzMuMjEzIDkuODU3LjE0NSAyMC41NzEtNy40NTYgMjcuMzAxYTQ2LjMwNCA0Ni4zMDQgMCAwIDAtNy0uNTMgNDUuODEzIDQ1LjgxMyAwIDAgMC0yMC42NjkgNC45MWMtNi43ODQtMi45MjktMTIuMDIxLTguNTg5LTE0LjM0NC0xNS43MTYtMi4xMzUtNi41NDUtMS41ODgtMTMuNTMxIDEuNTM5LTE5LjY2OSAzLjE0OC02LjE3OSA4LjUyNy0xMC43NjIgMTUuMTQ1LTEyLjkwNSAxMy42NS00LjQyMSAyOC4zNTggMy4wMzIgMzIuNzg1IDE2LjYwOXptLTExNi4zMTctNzUuNzFjLTUuNjItNC4wNjYtOS4zMS0xMC4wNjUtMTAuMzkxLTE2Ljg5MS0xLjA3OC02LjgwNy41NjktMTMuNjI3IDQuNjQtMTkuMjA4IDguNDMyLTExLjU2MiAyNC43MzUtMTQuMTI5IDM2LjM0OC01LjcyOSA4LjQxNSA2LjA5MyAxMi4yNjEgMTYuNTQ2IDEwLjA5MyAyNi40MjdhNDYuMjY4IDQ2LjI2OCAwIDAgMC01Ljk2NiAzLjY2NGMtNS45MTIgNC4yODEtMTAuNjA2IDkuNzgxLTEzLjg1NSAxNi4wNzRhMjYuMDIgMjYuMDIgMCAwIDEtMjAuODY5LTQuMzM3em00MC43MTIgNDAuNTU5Yy00LjA2OC01LjU3Ny01LjcxNy0xMi4zOTctNC42NC0xOS4yMDYgMS4wNzktNi44MjYgNC43NjctMTIuODI1IDEwLjM3OS0xNi44OSAxMS42MTMtOC40MDMgMjcuOTIxLTUuODM2IDM2LjM0OSA1LjcxNSA2LjExMyA4LjM4NiA2LjUyNiAxOS41MTQgMS4zOTQgMjguMjQyLTIuMjguMzcxLTQuNTU5LjkxOC02LjgyMiAxLjY1MS02Ljk1NiAyLjI1My0xMy4xMyA2LjA0Mi0xOC4xNzMgMTEuMDM0YTI1Ljg3OCAyNS44NzggMCAwIDEtMTguNDg3LTEwLjU0NnpNNDQwIDIzOC4wNjdjMC05LjAxOCA0LjY2Ni0xNi45NjggMTEuNzItMjEuNTk5bC4wMDItLjAwMUEyNS45MzkgMjUuOTM5IDAgMCAxIDQ2NiAyMTIuMjAzYzIuMjA3IDAgNC4zNTEuMjc3IDYuMzk5Ljc5NS4wOC4wMjUuMTYyLjA0MS4yNDMuMDY0QzQ4My43NzEgMjE1Ljk4OSA0OTIgMjI2LjA4OSA0OTIgMjM4LjA2N2MwIDEwLjM4MS02LjI1NiAxOS42MzQtMTUuNTkyIDIzLjY4YTQ2Ljc1IDQ2Ljc1IDAgMCAwLTYuNDc3LTIuNjQ5IDQ1Ljg0MiA0NS44NDIgMCAwIDAtMjEuMTcyLTEuNjk2QTI1LjY2OCAyNS42NjggMCAwIDEgNDQwIDIzOC4wNjd6TTQyLjA2NyAyNTkuMDk5YTQ2Ljg0MyA0Ni44NDMgMCAwIDAtNi40NzUgMi42NDhDMjYuMjU1IDI1Ny43MDEgMjAgMjQ4LjQ0OCAyMCAyMzguMDY3YzAtMTEuOTcxIDguMjE5LTIyLjA2NSAxOS4zMzgtMjUgLjA5MS0uMDI2LjE4NS0uMDQ0LjI3NS0uMDcyYTI2LjA2NyAyNi4wNjcgMCAwIDEgNi4zODctLjc5MiAyNS45MzggMjUuOTM4IDAgMCAxIDE0LjI2MyA0LjI1NWwuMDMuMDJDNjcuMzQgMjIxLjEwOSA3MiAyMjkuMDU1IDcyIDIzOC4wNjdhMjUuNjc1IDI1LjY3NSAwIDAgMS04Ljc2IDE5LjMzNyA0NS44NTcgNDUuODU3IDAgMCAwLTIxLjE3MyAxLjY5NXptNzUuMTk1LTIxMS4yMDNjMTEuNjEzLTguNDA2IDI3LjkyLTUuODM0IDM2LjM1MSA1LjczIDQuMDY5IDUuNTc3IDUuNzE3IDEyLjM5OCA0LjYzOSAxOS4yMDUtMS4wODEgNi44MjYtNC43NzEgMTIuODI0LTEwLjM5IDE2Ljg5YTI2LjAyMSAyNi4wMjEgMCAwIDEtMjAuODcgNC4zMzdjLTMuMjQ5LTYuMjk0LTcuOTQ1LTExLjc5NC0xMy44NTgtMTYuMDc3YTQ2LjIyOSA0Ni4yMjkgMCAwIDAtNS45NjMtMy42NjNjLTIuMTY4LTkuODc4IDEuNjc4LTIwLjMzMSAxMC4wOTEtMjYuNDIyek02NS4wNTkgOTkuOTA0YzguNDMxLTExLjU1NiAyNC43MzgtMTQuMTIzIDM2LjM0OC01LjcyMSA1LjYxNiA0LjA2NiA5LjMwMyAxMC4wNjUgMTAuMzgzIDE2Ljg5MSAxLjA3NyA2LjgwOS0uNTcxIDEzLjYyOS00LjY0MyAxOS4yMWEyNS45MTggMjUuOTE4IDAgMCAxLTE4LjQ4NiAxMC41NDJjLTUuMDQzLTQuOTkxLTExLjIxNy04Ljc4MS0xOC4xNzQtMTEuMDM0YTQ2LjE4OSA0Ni4xODkgMCAwIDAtNi44Mi0xLjY1MWMtNS4xMzEtOC43MjYtNC43MTgtMTkuODU0IDEuMzkyLTI4LjIzN3ptLTMzLjUxNSA2NS41MjljNC40MjgtMTMuNTc4IDE5LjEzMy0yMS4wMzEgMzIuNzg0LTE2LjYxMiA2LjYyIDIuMTQ0IDExLjk5OSA2LjcyNyAxNS4xNDYgMTIuOTA1IDMuMTI4IDYuMTM5IDMuNjc0IDEzLjEyNCAxLjUzOSAxOS42NzItMi4zMjIgNy4xMjYtNy41NiAxMi43ODUtMTQuMzQzIDE1LjcxNGE0NS44MTMgNDUuODEzIDAgMCAwLTIwLjY2OS00LjkxYy0yLjM3OSAwLTQuNzE3LjE4MS03IC41My03LjYwMy02LjcyOS0xMC42Ny0xNy40NDQtNy40NTctMjcuMjk5em0wIDE0NS4yNjljLTIuMTM1LTYuNTQ2LTEuNTg4LTEzLjUzMSAxLjUzOS0xOS42NyAzLjE0Ny02LjE3OCA4LjUyNi0xMC43NjEgMTUuMTQ0LTEyLjkwNCAxMy42NDktNC40MTggMjguMzU4IDMuMDM0IDMyLjc4NiAxNi42MTJhMjUuNjYgMjUuNjYgMCAwIDEtMi4zMDYgMjEuMDQ4IDQ1LjczNiA0NS43MzYgMCAwIDAtMTkuNjIxIDguMTM0IDQ2LjUwNSA0Ni41MDUgMCAwIDAtNS4zNjEgNC41MzRjLTEwLjE0Ni0uOTk4LTE4Ljk2NS03Ljg4NC0yMi4xODEtMTcuNzU0em0zMy41MTcgNjUuNTMyYy00LjA3Mi01LjU4Ni01LjcyLTEyLjQxMy00LjY0LTE5LjIyNCAxLjA4Mi02LjgyNSA0Ljc3Mi0xMi44MjIgMTAuMzkzLTE2Ljg4OSAxMS42MDUtOC40MDMgMjcuOTA0LTUuODMzIDM2LjMzNCA1LjcyOWEyNS42ODUgMjUuNjg1IDAgMCAxIDQuMzM5IDIwLjczIDQ1LjY2MSA0NS42NjEgMCAwIDAtMTYuMTIzIDEzLjc2NiA0Ni41NTYgNDYuNTU2IDAgMCAwLTMuNjgzIDUuOTQ3Yy05Ljk1NyAyLjE3OS0yMC40OS0xLjY1Ni0yNi42Mi0xMC4wNTl6bTUyLjIwNCA1Mi4wMDhjLTUuNjE0LTQuMDY2LTkuMzAxLTEwLjA2My0xMC4zODItMTYuODg4LTEuMDc5LTYuODEzLjU2OS0xMy42NCA0LjYzOS0xOS4yMjIgOC40MzMtMTEuNTU3IDI0LjczMy0xNC4xMjQgMzYuMzQxLTUuNzE4YTI1LjczMiAyNS43MzIgMCAwIDEgMTAuNTY1IDE4LjM3MiA0NS41NDIgNDUuNTQyIDAgMCAwLTExLjA2NyAxOC4wNjYgNDYuMzk2IDQ2LjM5NiAwIDAgMC0xLjY1OCA2Ljc4MmMtOC43ODkgNS4xMjgtMTkuOTk2IDQuNzE0LTI4LjQzOC0xLjM5MnptNjUuNzk0IDMzLjM5N2MtNi42MTgtMi4xNDItMTEuOTk1LTYuNzIzLTE1LjE0My0xMi44OTgtMy4xMzEtNi4xNDQtMy42NzgtMTMuMTM2LTEuNTQyLTE5LjY4NyA0LjQzLTEzLjU3NiAxOS4xMzUtMjEuMDI3IDMyLjc3NS0xNi42MTMgNy4xNDcgMi4zMTIgMTIuODI0IDcuNTEyIDE1Ljc2NyAxNC4yNDVhNDUuNDU0IDQ1LjQ1NCAwIDAgMC00LjkxNyAyMC41OTRjMCAyLjM2MS4xOCA0LjY4LjUyNyA2Ljk0Ni02Ljc2OSA3LjU3Mi0xNy41NDcgMTAuNjIzLTI3LjQ2NyA3LjQxM3pNMjU2IDQ3My4xNDRjLTEyLjAxMyAwLTIyLjE0NC04LjE0OC0yNS4xMTUtMTkuMTc5LS4wMzEtLjExMS0uMDU1LS4yMjMtLjA5LS4zMzNhMjUuNzEgMjUuNzEgMCAwIDEtLjc5Ni02LjM1M2MwLTE0LjI2MiAxMS42NjQtMjUuODY1IDI2LTI1Ljg2NSAxNC4zMzcgMCAyNiAxMS42MDMgMjYgMjUuODY1IDAgMi4xOTMtLjI3OCA0LjMyMy0uNzk3IDYuMzU4LS4wMzEuMS0uMDUzLjIwMi0uMDgxLjMwMy0yLjk2MSAxMS4wNDQtMTMuMDk5IDE5LjIwNC0yNS4xMjEgMTkuMjA0em04OC4wODQtMjQuNDA0Yy0zLjE0OCA2LjE3Ny04LjUyNSAxMC43NTgtMTUuMTQzIDEyLjktOS45MjYgMy4yMDktMjAuNy4xNTgtMjcuNDY5LTcuNDE1LjM0Ny0yLjI2NS41MjctNC41ODUuNTI3LTYuOTQ1YTQ1LjQ0MiA0NS40NDIgMCAwIDAtNC45MTgtMjAuNTk0YzIuOTQ0LTYuNzMyIDguNjIyLTExLjkzMyAxNS43NjktMTQuMjQ1IDEzLjY0Ni00LjQxMiAyOC4zNDUgMy4wMzggMzIuNzczIDE2LjYxMiAyLjEzOSA2LjU1MSAxLjU5MSAxMy41NDQtMS41MzkgMTkuNjg3em02MS4wMzItMzcuMzg3Yy0xLjA4IDYuODI1LTQuNzY4IDEyLjgyMy0xMC4zNzggMTYuODg2LTguNDQ2IDYuMTExLTE5LjY1MiA2LjUyMy0yOC40NDEgMS4zOTVhNDYuNDIxIDQ2LjQyMSAwIDAgMC0xLjY1OC02Ljc4NCA0NS41NCA0NS41NCAwIDAgMC0xMS4wNjYtMTguMDY1IDI1LjczOCAyNS43MzggMCAwIDEgMTAuNTY5LTE4LjM3NGMxMS42MDMtOC40MDEgMjcuOTAyLTUuODM3IDM2LjMzNCA1LjcxOCA0LjA3MSA1LjU4NCA1LjcxOSAxMi40MTEgNC42NCAxOS4yMjR6bTQxLjgyNC0zNS4xMjJjLTYuMTMxIDguNDA3LTE2LjY2NCAxMi4yNDMtMjYuNjIyIDEwLjA2MmE0Ni41NjEgNDYuNTYxIDAgMCAwLTMuNjg1LTUuOTUgNDUuNjQ2IDQ1LjY0NiAwIDAgMC0xNi4xMi0xMy43NjQgMjUuNjg2IDI1LjY4NiAwIDAgMSA0LjMzOS0yMC43MjhjOC40MzEtMTEuNTY0IDI0LjcyOS0xNC4xMzMgMzYuMzM3LTUuNzI4IDUuNjE4IDQuMDY1IDkuMzA4IDEwLjA2MyAxMC4zOSAxNi44ODcgMS4wOCA2LjgxMi0uNTY4IDEzLjYzOC00LjYzOSAxOS4yMjF6bTMzLjUxNi02NS41MjhjLTMuMjE2IDkuODY4LTEyLjAzOSAxNi43NTgtMjIuMTc4IDE3Ljc1MmE0Ni41MDUgNDYuNTA1IDAgMCAwLTUuMzYxLTQuNTM0IDQ1Ljc0IDQ1Ljc0IDAgMCAwLTE5LjYyMi04LjEzNCAyNS42NTYgMjUuNjU2IDAgMCAxLTIuMzA3LTIxLjA1YzQuNDI4LTEzLjU3NyAxOS4xMzMtMjEuMDI5IDMyLjc4My0xNi42MTEgNi42MiAyLjE0MyAxMS45OTkgNi43MjcgMTUuMTQ2IDEyLjkwNSAzLjEyOCA2LjEzOSAzLjY3NSAxMy4xMjUgMS41MzkgMTkuNjcyelxcXCIgLz48Y2lyY2xlIGN4PVxcXCIyNTZcXFwiIGN5PVxcXCIyOC44NTZcXFwiIHI9XFxcIjEwXFxcIiAvPjwvc3ltYm9sPlwiXG59KTtcbnZhciByZXN1bHQgPSBzcHJpdGUuYWRkKHN5bWJvbCk7XG5leHBvcnQgZGVmYXVsdCBzeW1ib2xcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9hc3NldHMvc3ZnL211bHRpY29sb3IvaWNvbi1vbGQtamV3ZWxyeS5zdmdcbi8vIG1vZHVsZSBpZCA9IDE1MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQgU3ByaXRlU3ltYm9sIGZyb20gXCJzdmctYmFrZXItcnVudGltZS9icm93c2VyLXN5bWJvbFwiO1xuaW1wb3J0IHNwcml0ZSBmcm9tIFwic3ZnLXNwcml0ZS1sb2FkZXIvcnVudGltZS9icm93c2VyLXNwcml0ZS5idWlsZFwiO1xudmFyIHN5bWJvbCA9IG5ldyBTcHJpdGVTeW1ib2woe1xuICBcImlkXCI6IFwiaWNvbi1vbmxpbmViZWVzXCIsXG4gIFwidXNlXCI6IFwiaWNvbi1vbmxpbmViZWVzLXVzYWdlXCIsXG4gIFwidmlld0JveFwiOiBcIjAgMCAxMjYgMjRcIixcbiAgXCJjb250ZW50XCI6IFwiPHN5bWJvbCB2aWV3Qm94PVxcXCIwIDAgMTI2IDI0XFxcIiBmaWxsPVxcXCJub25lXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIGlkPVxcXCJpY29uLW9ubGluZWJlZXNcXFwiPjxnIGNsaXAtcGF0aD1cXFwidXJsKCNpY29uLW9ubGluZWJlZXNfYSlcXFwiPjxwYXRoIGZpbGwtcnVsZT1cXFwiZXZlbm9kZFxcXCIgY2xpcC1ydWxlPVxcXCJldmVub2RkXFxcIiBkPVxcXCJNMjMuOTIzIDUuMzA5YTIuODM3IDIuODM3IDAgMCAwLTQuMDA4IDBsLS4yODkuMjg5YTMuNzQ0IDMuNzQ0IDAgMCAwLS4xNjMtLjE3NmwtLjg4NS0uODg1YTMuNzc3IDMuNzc3IDAgMCAwLS4xNzUtLjE2M2wuMjg5LS4yOWEyLjgzNyAyLjgzNyAwIDAgMCAwLTQuMDA3TDE4LjYxNCAwbC0uOTk0Ljk5NC4wNzYuMDc3YTEuNDMgMS40MyAwIDAgMSAwIDIuMDJsLS41Ni41NmEzLjY1NSAzLjY1NSAwIDAgMC0zLjcxOC44ODZBMy42MyAzLjYzIDAgMCAwIDEyLjM4IDYuNjdsLTEuNTE2LTEuNTE2YTUuNDggNS40OCAwIDAgMC0zLjktMS42MTYgNS40OCA1LjQ4IDAgMCAwLTMuOTAyIDEuNjE2TDEuNTc0IDYuNjQybDQuMzQgNC4zNC0yLjMyNyAyLjMyNWE3LjIzIDcuMjMgMCAwIDAtMi4wMTggMy44NzggNy4yMjUgNy4yMjUgMCAwIDAgLjM3NyAzLjg3NUwwIDIzLjAwNi45OTQgMjRsMS45NDctMS45NDdhNy4yMTIgNy4yMTIgMCAwIDAgMy44NzQuMzc3IDcuMjMgNy4yMyAwIDAgMCAzLjg3OC0yLjAxN2wyLjMyNi0yLjMyNyA0LjMzOSA0LjM0IDEuNDg4LTEuNDg4YTUuNDggNS40OCAwIDAgMCAxLjYxNi0zLjkwMWMwLTEuNDc0LS41NzQtMi44Ni0xLjYxNi0zLjkwMmwtMS41MTQtMS41MTRhMy42MiAzLjYyIDAgMCAwIDIuMTMtMS4wNCAzLjY1NSAzLjY1NSAwIDAgMCAuODg3LTMuNzE5bC41Ni0uNTZhMS40MyAxLjQzIDAgMCAxIDIuMDIgMGwuMDc3LjA3Ny45OTQtLjk5NC0uMDc3LS4wNzZ6bS0xOS44NjcuODRhNC4wODQgNC4wODQgMCAwIDEgMi45MDctMS4yMDVjMS4wOTggMCAyLjEzLjQyOCAyLjkwNyAxLjIwNWwzLjQ5NCAzLjQ5My0xLjI3NSAxLjI3NGEyLjk4OCAyLjk4OCAwIDAgMS0yLjEyNi44ODEgMi45ODggMi45ODggMCAwIDEtMi4xMjYtLjg4TDMuNTYzIDYuNjQxbC40OTMtLjQ5M3ptNS45MDcgNy4wNTRjLjMxOSAwIC42MzItLjAzNC45MzYtLjFhNC40MTIgNC40MTIgMCAwIDAgMS4xMjcgMy45ODhsLS42ODQuNjgzLTUuMTE3LTUuMTE3LjY4My0uNjgyYTQuMzgzIDQuMzgzIDAgMCAwIDMuMDU1IDEuMjI4em0tNi42NTEgNy40ODVhNS44NjYgNS44NjYgMCAwIDEtLjI2OC0zLjY2MmwzLjkzIDMuOTNhNS44NjggNS44NjggMCAwIDEtMy42NjItLjI2OHptNS4wODktLjI5M2wtNC43OTYtNC43OTZjLjI2LS40NjkuNTg2LS45MDcuOTc3LTEuMjk4bC42NS0uNjUgNS4xMTYgNS4xMTgtLjY1LjY1Yy0uMzkuMzktLjgyOC43MTYtMS4yOTcuOTc2em0xMC42NTUtMy4zNThjMCAxLjA5OC0uNDI4IDIuMTMtMS4yMDQgMi45MDdsLS40OTQuNDkzLTQuMjc0LTQuMjc0YTMuMDEgMy4wMSAwIDAgMSAwLTQuMjUzbDEuMjc0LTEuMjc0IDMuNDk0IDMuNDk0YTQuMDg0IDQuMDg0IDAgMCAxIDEuMjA0IDIuOTA3em0tNC42NDQtOC4zMzVhMi4yNDUgMi4yNDUgMCAwIDEgLjAwMS0zLjE3IDIuMjI4IDIuMjI4IDAgMCAxIDEuNTg2LS42NTdjLjU5OSAwIDEuMTYyLjIzMyAxLjU4NS42NTZsLjg4NC44ODVhMi4yNDUgMi4yNDUgMCAwIDEgMCAzLjE3MSAyLjIyNyAyLjIyNyAwIDAgMS0xLjU4NS42NTcgMi4yMjggMi4yMjggMCAwIDEtMS41ODUtLjY1NmwtLjg4Ni0uODg2elxcXCIgZmlsbD1cXFwiI0FDOTE4MlxcXCIgLz48L2c+PHBhdGggZD1cXFwiTTMwLjkyOCAxMi40NDhjMC0uOTUuMTM5LTEuNzg3LjQxNi0yLjUxMi4yODgtLjcyNS42NzItMS4zMjggMS4xNTItMS44MDhhNC44MSA0LjgxIDAgMCAxIDEuNjk2LTEuMTA0IDUuODAyIDUuODAyIDAgMCAxIDIuMDY0LS4zNjggNS41IDUuNSAwIDAgMSAyLjAxNi4zNjhjLjY0LjI0NSAxLjIuNjEzIDEuNjggMS4xMDQuNDguNDguODU5IDEuMDgzIDEuMTM2IDEuODA4LjI4OC43MjUuNDMyIDEuNTYzLjQzMiAyLjUxMiAwIC45NS0uMTQ0IDEuNzg3LS40MzIgMi41MTItLjI3Ny43MjUtLjY1NiAxLjMzMy0xLjEzNiAxLjgyNC0uNDguNDgtMS4wNC44NDMtMS42OCAxLjA4OGE1LjUwMiA1LjUwMiAwIDAgMS0yLjAxNi4zNjggNS44MDIgNS44MDIgMCAwIDEtMi4wNjQtLjM2OCA0LjkxOCA0LjkxOCAwIDAgMS0xLjY5Ni0xLjA4OGMtLjQ4LS40OS0uODY0LTEuMDk5LTEuMTUyLTEuODI0LS4yNzctLjcyNS0uNDE2LTEuNTYzLS40MTYtMi41MTJ6bTEuNjMyIDBjMCAuNjcyLjA4NSAxLjI4NS4yNTYgMS44NC4xNy41NDQuNDEgMS4wMDguNzIgMS4zOTIuMzIuMzg0LjcwNC42ODMgMS4xNTIuODk2LjQ1OS4yMDMuOTcuMzA0IDEuNTM2LjMwNC41NjUgMCAxLjA3Mi0uMTAxIDEuNTItLjMwNGEzLjIxNCAzLjIxNCAwIDAgMCAxLjEzNi0uODk2Yy4zMi0uMzg0LjU2NS0uODQ4LjczNi0xLjM5Mi4xNy0uNTU1LjI1Ni0xLjE2OC4yNTYtMS44NCAwLS42NzItLjA4NS0xLjI4LS4yNTYtMS44MjRhNC4wMTQgNC4wMTQgMCAwIDAtLjczNi0xLjQwOCAzLjA1OCAzLjA1OCAwIDAgMC0xLjEzNi0uODggMy40OTMgMy40OTMgMCAwIDAtMS41Mi0uMzJjLS41NjUgMC0xLjA3Ny4xMDctMS41MzYuMzJhMy4yIDMuMiAwIDAgMC0xLjE1Mi44OGMtLjMxLjM4NC0uNTUuODUzLS43MiAxLjQwOGE2LjA3NyA2LjA3NyAwIDAgMC0uMjU2IDEuODI0ek01MS41OSAxOGE1OS45MSA1OS45MSAwIDAgMC0uODE3LTEuMzI4Yy0uMjk5LS40OS0uNjI0LS45OTctLjk3Ni0xLjUyYTYyLjYyNCA2Mi42MjQgMCAwIDAtMS4xMDQtMS42MTYgNDkuNyA0OS43IDAgMCAwLTEuMTItMS41NjggNTAuMjY3IDUwLjI2NyAwIDAgMC0xLjA4OC0xLjQ0IDI5LjI4IDI5LjI4IDAgMCAwLS45NzYtMS4xODRWMThoLTEuNTJWNi45MTJoMS4yMzJhMjkuMTE5IDI5LjExOSAwIDAgMSAxLjYgMS44NzIgNTEuNjg4IDUxLjY4OCAwIDAgMSAxLjY5NiAyLjE5MiA1MC45NTIgNTAuOTUyIDAgMCAxIDEuNTg0IDIuMjA4Yy41MDIuNzI1LjkyMyAxLjM3IDEuMjY0IDEuOTM2VjYuOTEyaDEuNTJWMThINTEuNTl6bTEwLjg3Mi0xLjM0NFYxOEg1NS43OVY2LjkxMmgxLjU1MnY5Ljc0NGg1LjEyem0xLjc4NS05Ljc0NGgxLjU1MlYxOGgtMS41NTJWNi45MTJ6TTc2LjMwMyAxOGE2MC42NzcgNjAuNjc3IDAgMCAwLS44MTYtMS4zMjhjLS4yOTgtLjQ5LS42MjMtLjk5Ny0uOTc1LTEuNTJhNjIuNjI0IDYyLjYyNCAwIDAgMC0xLjEwNS0xLjYxNiA0OS44NjQgNDkuODY0IDAgMCAwLTEuMTItMS41NjggNTAuMjY3IDUwLjI2NyAwIDAgMC0xLjA4OC0xLjQ0IDI5LjI4IDI5LjI4IDAgMCAwLS45NzUtMS4xODRWMThoLTEuNTJWNi45MTJoMS4yMzJhMjkuMTUgMjkuMTUgMCAwIDEgMS42IDEuODcyIDUxLjc3IDUxLjc3IDAgMCAxIDEuNjk1IDIuMTkyIDUxLjEyNCA1MS4xMjQgMCAwIDEgMS41ODUgMi4yMDhjLjUuNzI1LjkyMiAxLjM3IDEuMjYzIDEuOTM2VjYuOTEyaDEuNTJWMThoLTEuMjk2em00LjIwMSAwVjYuOTEyaDYuNzY4VjguMjRoLTUuMjE2djMuMjk2aDQuNjR2MS4yOTZoLTQuNjR2My44NGg1LjYxNlYxOGgtNy4xNjh6bTEyLjI5My4wOTZhMTguNDU4IDE4LjQ1OCAwIDAgMS0yLjI4OC0uMTQ0IDUuOTY4IDUuOTY4IDAgMCAxLS43MDQtLjEyOFY3LjA3MmMuMjEzLS4wNTMuNDQ4LS4wOTYuNzA0LS4xMjhBMTguNzI5IDE4LjcyOSAwIDAgMSA5Mi43OCA2LjhjLjY0IDAgMS4yMzcuMDQ4IDEuNzkyLjE0NC41NjUuMDk2IDEuMDUuMjYxIDEuNDU2LjQ5Ni40MTYuMjI0Ljc0MS41MjMuOTc2Ljg5Ni4yMzQuMzczLjM1Mi44MzIuMzUyIDEuMzc2IDAgLjYwOC0uMTQ0IDEuMTEtLjQzMiAxLjUwNGEyLjYyIDIuNjIgMCAwIDEtMS4xNTIuODY0Yy42NS4xOTIgMS4xNjguNDk2IDEuNTUyLjkxMi4zODQuNDE2LjU3NiAxLjAwMy41NzYgMS43NiAwIDEuMTEtLjQxIDEuOTQ3LTEuMjMyIDIuNTEyLS44MS41NTUtMi4xMDIuODMyLTMuODcyLjgzMnptLTEuNDU2LTUuMjY0djMuOTA0Yy4xMTcuMDEuMjU2LjAyMS40MTYuMDMyLjEzOC4wMS4yOTguMDIxLjQ4LjAzMmguNjU2Yy40NTggMCAuODktLjAyNyAxLjI5Ni0uMDhhMy44NCAzLjg0IDAgMCAwIDEuMDg4LS4zMmMuMzEtLjE1LjU1NC0uMzU3LjczNi0uNjI0LjE5Mi0uMjY3LjI4OC0uNjAzLjI4OC0xLjAwOCAwLS4zNjMtLjA3LS42NjctLjIwOC0uOTEyYTEuNTE1IDEuNTE1IDAgMCAwLS42MDgtLjYwOCAyLjc5NiAyLjc5NiAwIDAgMC0uOTI4LS4zMiA3LjAyOSA3LjAyOSAwIDAgMC0xLjIxNi0uMDk2aC0yem0wLTEuMjQ4aDEuNjMyYy4zODQgMCAuNzQ2LS4wMjcgMS4wODgtLjA4LjM0MS0uMDUzLjYzNC0uMTUuODgtLjI4OGExLjU0IDEuNTQgMCAwIDAgLjU5Mi0uNTQ0Yy4xNS0uMjI0LjIyNC0uNTA3LjIyNC0uODQ4IDAtLjMyLS4wNzUtLjU4Ny0uMjI0LS44YTEuNTIgMS41MiAwIDAgMC0uNjI0LS41MjggMy4wNTUgMy4wNTUgMCAwIDAtLjkxMi0uMzA0IDYuMjU3IDYuMjU3IDAgMCAwLTEuMTItLjA5NmMtLjM5NSAwLS43MDQuMDA1LS45MjguMDE2LS4yMjQuMDEtLjQyNy4wMjctLjYwOC4wNDh2My40MjR6TTEwMC4yNDYgMThWNi45MTJoNi43NjhWOC4yNGgtNS4yMTZ2My4yOTZoNC42NHYxLjI5NmgtNC42NHYzLjg0aDUuNjE2VjE4aC03LjE2OHptOS4zMDEgMFY2LjkxMmg2Ljc2OFY4LjI0aC01LjIxNnYzLjI5Nmg0LjY0djEuMjk2aC00LjY0djMuODRoNS42MTZWMThoLTcuMTY4em0xMS44NzYtMS4xMDRjMS42MjIgMCAyLjQzMi0uNTU1IDIuNDMyLTEuNjY0IDAtLjM0MS0uMDc0LS42My0uMjI0LS44NjRhMS44NzQgMS44NzQgMCAwIDAtLjU3Ni0uNjI0IDMuNzc1IDMuNzc1IDAgMCAwLS44NDgtLjQ2NGMtLjMwOS0uMTI4LS42NC0uMjU2LS45OTItLjM4NGExMS4zMzYgMTEuMzM2IDAgMCAxLTEuMTUyLS40NjQgNC40MTcgNC40MTcgMCAwIDEtLjk0NC0uNjI0IDIuODU5IDIuODU5IDAgMCAxLS42NC0uODY0Yy0uMTQ5LS4zMy0uMjI0LS43My0uMjI0LTEuMiAwLS45Ny4zMzEtMS43MjguOTkyLTIuMjcyLjY2Mi0uNTQ0IDEuNTc0LS44MTYgMi43MzYtLjgxNi42NzIgMCAxLjI4LjA3NSAxLjgyNC4yMjQuNTU1LjEzOS45Ni4yOTMgMS4yMTYuNDY0bC0uNDk2IDEuMjY0Yy0uMjI0LS4xMzktLjU2LS4yNzItMS4wMDgtLjQtLjQzNy0uMTM5LS45NDktLjIwOC0xLjUzNi0uMjA4LS4yOTggMC0uNTc2LjAzMi0uODMyLjA5NnMtLjQ4LjE2LS42NzIuMjg4YTEuNDgzIDEuNDgzIDAgMCAwLS40NjQuNDk2Yy0uMTA2LjE5Mi0uMTYuNDIxLS4xNi42ODggMCAuMjk5LjA1OS41NS4xNzYuNzUyLjExOC4yMDMuMjgzLjM4NC40OTYuNTQ0LjIxNC4xNS40NTkuMjg4LjczNi40MTYuMjg4LjEyOC42MDMuMjU2Ljk0NC4zODQuNDguMTkyLjkxOC4zODQgMS4zMTIuNTc2LjQwNi4xOTIuNzUyLjQyMSAxLjA0LjY4OC4yOTkuMjY3LjUyOC41ODcuNjg4Ljk2LjE2LjM2My4yNC44MDUuMjQgMS4zMjggMCAuOTctLjM1NyAxLjcxNy0xLjA3MiAyLjI0LS43MDQuNTIzLTEuNzAxLjc4NC0yLjk5Mi43ODQtLjQzNyAwLS44NDItLjAzMi0xLjIxNi0uMDk2YTkuMzMgOS4zMyAwIDAgMS0uOTc2LS4xOTIgOC43ODYgOC43ODYgMCAwIDEtLjc1Mi0uMjU2IDEwLjU2NyAxMC41NjcgMCAwIDEtLjQ4LS4yNGwuNDY0LTEuMjhjLjI0Ni4xMzkuNjE5LjI5MyAxLjEyLjQ2NC41MDIuMTcgMS4xMTUuMjU2IDEuODQuMjU2elxcXCIgZmlsbD1cXFwiI0FDOTE4MlxcXCIgLz48ZGVmcz48Y2xpcFBhdGggaWQ9XFxcImljb24tb25saW5lYmVlc19hXFxcIj48cGF0aCBmaWxsPVxcXCIjZmZmXFxcIiBkPVxcXCJNMCAwaDI0djI0SDB6XFxcIiAvPjwvY2xpcFBhdGg+PC9kZWZzPjwvc3ltYm9sPlwiXG59KTtcbnZhciByZXN1bHQgPSBzcHJpdGUuYWRkKHN5bWJvbCk7XG5leHBvcnQgZGVmYXVsdCBzeW1ib2xcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9hc3NldHMvc3ZnL211bHRpY29sb3IvaWNvbi1vbmxpbmViZWVzLnN2Z1xuLy8gbW9kdWxlIGlkID0gMTUzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCBTcHJpdGVTeW1ib2wgZnJvbSBcInN2Zy1iYWtlci1ydW50aW1lL2Jyb3dzZXItc3ltYm9sXCI7XG5pbXBvcnQgc3ByaXRlIGZyb20gXCJzdmctc3ByaXRlLWxvYWRlci9ydW50aW1lL2Jyb3dzZXItc3ByaXRlLmJ1aWxkXCI7XG52YXIgc3ltYm9sID0gbmV3IFNwcml0ZVN5bWJvbCh7XG4gIFwiaWRcIjogXCJpY29uLXByZWNpb3VzXCIsXG4gIFwidXNlXCI6IFwiaWNvbi1wcmVjaW91cy11c2FnZVwiLFxuICBcInZpZXdCb3hcIjogXCIwIDAgNTYgNTZcIixcbiAgXCJjb250ZW50XCI6IFwiPHN5bWJvbCB2aWV3Qm94PVxcXCIwIDAgNTYgNTZcXFwiIGZpbGw9XFxcIm5vbmVcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgaWQ9XFxcImljb24tcHJlY2lvdXNcXFwiPjxwYXRoIGQ9XFxcIk01NS44MjggMTcuNTcyQzQ2LjEzNCA1LjE0MyA0Ni41NDggNS40NTQgNDYuMDMgNS40MDRMMzAuODU2IDMuMzZjLTMuODI1LS41MTUtNi40MjMuMTU0LTcuNzUuMjc0YS44MTQuODE0IDAgMCAwIC4yMTcgMS42MTNjMS4zNDYtLjEyNCAzLjc1OS0uNzUzIDcuMzE2LS4yNzVsMTAuNDIgMS40MDQtMTMuMDYgMi42NjEtMTMuMDU4LTIuNjYxIDQuNTE0LS42MDhhLjgxNC44MTQgMCAwIDAtLjIxNy0xLjYxM0w5Ljk3IDUuNDAzbC0uMDA0LjAwMS0uMDEyLjAwMi0uMDM3LjAwNi0uMDI0LjAwNS0uMDIuMDA0LS4wMjcuMDA4LS4wNDMuMDEyLS4wMTcuMDA3YS4xNjQuMTY0IDAgMCAwLS4wMDcuMDAzYy0uMDA4LjAwMy0uMDE3LjAwNS0uMDI1LjAwOWEuNzcuNzcgMCAwIDAtLjA0My4wMmwtLjAxOC4wMDhhLjg3Ljg3IDAgMCAwLS4wMi4wMWwtLjAyLjAxMmMtLjM1My4yMDYtLjE4LjIyLTkuNDgxIDEyLjA2MmEuODEzLjgxMyAwIDAgMC0uMDg1Ljg2N2MuMzI3LjY1LS41NDQtLjYzMyAxNy40MSAyMy4xOThhLjgxNC44MTQgMCAxIDAgMS4zLS45OGwtMTUuNzctMjAuOSAxMi43NDIgNC4wMTMgOS44MTIgMjUuODgtNC40OS01Ljk1MWEuODEzLjgxMyAwIDEgMC0xLjI5OS45OGM0LjcwMiA2LjIzIDUuMTg2IDYuODc2IDUuMjIgNi45MTRhMy44NjQgMy44NjQgMCAwIDAgMi4yIDEuMjI1Yy4xMTcuMDIgMS40OC4wMiAxLjU5NC0uMDAzLjk5MS0uMTkyIDEuODI4LS43NTIgMi4yMjMtMS4yNzJsMTUuODgtMjEuMDQ5YS44MTQuODE0IDAgMCAwLTEuMjk4LS45OEwzMC40MTggNDkuNjUxbDkuODEzLTI1Ljg4MSAxMi43NDItNC4wMTQtNS4wNzYgNi43MjhhLjgxNC44MTQgMCAwIDAgMS4zLjk4YzYuODE0LTkuMDQgNi40NDYtOC40OTMgNi43MTUtOS4wMjRhLjgxMy44MTMgMCAwIDAtLjA4NC0uODY4ek0yOCAxMS4xMDJsOS44MTUgMTEuMTk3aC0xOS42M0wyOCAxMS4xMDJ6TTIuMDkyIDE3Ljc1NUw5LjgxIDcuODU5bDUuMjMzIDEzLjk3Ni0xMi45NS00LjA4ek0xMS4zNCA3LjMwMmwxNS4xMjUgMy4wODMtOS43OSAxMS4xNjgtNS4zMzUtMTQuMjV6bTE2Ljc1IDQzLjkwMWgtLjE4TDE3LjU2OCAyMy45MjZoMjAuODY0TDI4LjA5IDUxLjIwM3ptMTEuMjM1LTI5LjY1bC05Ljc5LTExLjE2OEw0NC42NiA3LjMwMmwtNS4zMzUgMTQuMjUxem0xLjYzMi4yODJsNS4yMzItMTMuOTc3IDcuNzE5IDkuODk4LTEyLjk1MSA0LjA4elxcXCIgZmlsbD1cXFwiIzAwMFxcXCIgLz48L3N5bWJvbD5cIlxufSk7XG52YXIgcmVzdWx0ID0gc3ByaXRlLmFkZChzeW1ib2wpO1xuZXhwb3J0IGRlZmF1bHQgc3ltYm9sXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvYXNzZXRzL3N2Zy9tdWx0aWNvbG9yL2ljb24tcHJlY2lvdXMuc3ZnXG4vLyBtb2R1bGUgaWQgPSAxNTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IFNwcml0ZVN5bWJvbCBmcm9tIFwic3ZnLWJha2VyLXJ1bnRpbWUvYnJvd3Nlci1zeW1ib2xcIjtcbmltcG9ydCBzcHJpdGUgZnJvbSBcInN2Zy1zcHJpdGUtbG9hZGVyL3J1bnRpbWUvYnJvd3Nlci1zcHJpdGUuYnVpbGRcIjtcbnZhciBzeW1ib2wgPSBuZXcgU3ByaXRlU3ltYm9sKHtcbiAgXCJpZFwiOiBcImljb24tcmluZ3NcIixcbiAgXCJ1c2VcIjogXCJpY29uLXJpbmdzLXVzYWdlXCIsXG4gIFwidmlld0JveFwiOiBcIjAgMCA1NyA1NlwiLFxuICBcImNvbnRlbnRcIjogXCI8c3ltYm9sIHZpZXdCb3g9XFxcIjAgMCA1NyA1NlxcXCIgZmlsbD1cXFwibm9uZVxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiBpZD1cXFwiaWNvbi1yaW5nc1xcXCI+PGcgY2xpcC1wYXRoPVxcXCJ1cmwoI2ljb24tcmluZ3NfYSlcXFwiIGZpbGw9XFxcIiMwMDBcXFwiPjxwYXRoIGQ9XFxcIk0yOC41IDExLjIxMmMtMTEuMzQgMC0yMC41MzIgOS4xOTMtMjAuNTMyIDIwLjUzMyAwIDExLjM0IDkuMTkzIDIwLjUzNCAyMC41MzIgMjAuNTM0IDExLjM0IDAgMjAuNTMyLTkuMTk0IDIwLjUzMi0yMC41MzQtLjAxMy0xMS4zMzQtOS4xOTgtMjAuNTItMjAuNTMyLTIwLjUzM3ptMCAzOS4yYy0xMC4zMDkgMC0xOC42NjUtOC4zNTctMTguNjY1LTE4LjY2NyAwLTEwLjMwOSA4LjM1Ni0xOC42NjYgMTguNjY1LTE4LjY2NnMxOC42NjUgOC4zNTcgMTguNjY1IDE4LjY2NkM0Ny4xNTQgNDIuMDUgMzguODA0IDUwLjQgMjguNSA1MC40MTJ6XFxcIiAvPjxwYXRoIGQ9XFxcIk00NC4zOSA0Ljk2TDQxLjQxMi40MzRhLjkzMy45MzMgMCAwIDAtLjc4LS40MkgxNi4zNjlhLjkzMy45MzMgMCAwIDAtLjc4LjQyTDEyLjYxIDQuOTZBMjggMjggMCAwIDAgMjguNSA1Ni4wMTQgMjggMjggMCAwIDAgNDQuMzkgNC45NnptLTQuMjYtMy4wOGwxLjg0MiAyLjhoLTYuMDI1YS44NDkuODQ5IDAgMCAwLS4wMDUtLjIxMmwtLjYwNS0yLjU4OGg0Ljc5MnptLTIzLjI2MyAwaDQuNzkybC0uNjA1IDIuNTg4YS44NDQuODQ0IDAgMCAwLS4wMDEuMjEyaC02LjAyNWwxLjgzOS0yLjh6bTM2LjU2OCAzMy45NEEyNi4xMzIgMjYuMTMyIDAgMCAxIDI4LjUgNTQuMTQ3YTI2LjEzNCAyNi4xMzQgMCAwIDEtMTQuOS00Ny42aDEzLjAzM2EuOTMzLjkzMyAwIDEgMCAwLTEuODY2aC0zLjcwN2wuNjUzLTIuOGg5Ljg0MWwuNjUzIDIuOGgtMy43MDdhLjkzMy45MzMgMCAxIDAgMCAxLjg2N2gxMy4wMzVBMjYuMTM0IDI2LjEzNCAwIDAgMSA1My40MzQgMzUuODJ6XFxcIiAvPjwvZz48ZGVmcz48Y2xpcFBhdGggaWQ9XFxcImljb24tcmluZ3NfYVxcXCI+PHBhdGggZmlsbD1cXFwiI2ZmZlxcXCIgdHJhbnNmb3JtPVxcXCJ0cmFuc2xhdGUoLjUpXFxcIiBkPVxcXCJNMCAwaDU2djU2SDB6XFxcIiAvPjwvY2xpcFBhdGg+PC9kZWZzPjwvc3ltYm9sPlwiXG59KTtcbnZhciByZXN1bHQgPSBzcHJpdGUuYWRkKHN5bWJvbCk7XG5leHBvcnQgZGVmYXVsdCBzeW1ib2xcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9hc3NldHMvc3ZnL211bHRpY29sb3IvaWNvbi1yaW5ncy5zdmdcbi8vIG1vZHVsZSBpZCA9IDE1NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQgU3ByaXRlU3ltYm9sIGZyb20gXCJzdmctYmFrZXItcnVudGltZS9icm93c2VyLXN5bWJvbFwiO1xuaW1wb3J0IHNwcml0ZSBmcm9tIFwic3ZnLXNwcml0ZS1sb2FkZXIvcnVudGltZS9icm93c2VyLXNwcml0ZS5idWlsZFwiO1xudmFyIHN5bWJvbCA9IG5ldyBTcHJpdGVTeW1ib2woe1xuICBcImlkXCI6IFwiaWNvbi1yb2tldFwiLFxuICBcInVzZVwiOiBcImljb24tcm9rZXQtdXNhZ2VcIixcbiAgXCJ2aWV3Qm94XCI6IFwiMCAwIDY0IDY1XCIsXG4gIFwiY29udGVudFwiOiBcIjxzeW1ib2wgdmlld0JveD1cXFwiMCAwIDY0IDY1XFxcIiBmaWxsPVxcXCJub25lXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIGlkPVxcXCJpY29uLXJva2V0XFxcIj48cGF0aCBkPVxcXCJNMzEuOTk0IDI4LjgyNGE2LjY0MSA2LjY0MSAwIDAgMCA2LjYzNC02LjYzNWMwLTMuNjUzLTIuOTgxLTYuNjIzLTYuNjM0LTYuNjIzLTMuNjUzIDAtNi42MzUgMi45ODItNi42MzUgNi42MzUgMCAzLjY1NCAyLjk3IDYuNjIzIDYuNjM1IDYuNjIzem0wLTEwLjU5NGEzLjk3MyAzLjk3MyAwIDAgMSAzLjk3MSAzLjk3MSAzLjk3MyAzLjk3MyAwIDAgMS0zLjk3MSAzLjk3MiAzLjk3MyAzLjk3MyAwIDAgMS0zLjk3MS0zLjk3MiAzLjk3MyAzLjk3MyAwIDAgMSAzLjk3LTMuOTcxelxcXCIgZmlsbD1cXFwiIzg4NkE1QVxcXCIgLz48cGF0aCBkPVxcXCJNNjIuNjU3IDU2LjczMWgtMy45OTVWMjcuMzk4YTMuOTkgMy45OSAwIDAgMC0zLjk5NS0zLjk5NUg0Ny44OWExLjMzIDEuMzMgMCAwIDAtMS4zMzIgMS4zMzIgMS4zMyAxLjMzIDAgMCAwIDEuMzMyIDEuMzMyaDYuNzc2YTEuMzMgMS4zMyAwIDAgMSAxLjMzMSAxLjMzMXYyOS4zMzNIOC4wMDJWMjcuMzk4YTEuMzMgMS4zMyAwIDAgMSAxLjMzMi0xLjMzMWg2Ljc4OGExLjMzIDEuMzMgMCAwIDAgMS4zMzEtMS4zMzIgMS4zMyAxLjMzIDAgMCAwLTEuMzMxLTEuMzMySDkuMzMzYTMuOTkgMy45OSAwIDAgMC0zLjk5NSAzLjk5NVY1Ni43MkgxLjMzMkMuNiA1Ni43MiAwIDU3LjMyIDAgNTguMDUxYTYuNjggNi42OCAwIDAgMCA2LjY3IDYuNjdoNTAuNjZhNi42OCA2LjY4IDAgMCAwIDYuNjctNi42NyAxLjM1NCAxLjM1NCAwIDAgMC0xLjM0My0xLjMyem0tNS4zMzkgNS4zMzlINi42N2EzLjk5MSAzLjk5MSAwIDAgMS0zLjc3MS0yLjY3NWg1OC4xOWE0LjAwNyA0LjAwNyAwIDAgMS0zLjc3IDIuNjc1elxcXCIgZmlsbD1cXFwiIzg4NkE1QVxcXCIgLz48cGF0aCBkPVxcXCJNMTUuOTY4IDM4LjA2NGMwIDEuOTguMzY1IDMuOTM2IDEuMTA4IDUuODIyLjIuNTA2LjY5NS44NDggMS4yMzcuODQ4YTEuMzMgMS4zMyAwIDAgMCAxLjIzNy0uODQ5IDEzLjMxNyAxMy4zMTcgMCAwIDEgMy4wMTctNC41OTZjLjY2IDEuNjI3IDEuNDE0IDMuMjQxIDIuMzQ1IDQuNzg1LjIzNi40LjY4NC42NDggMS4xNTUuNjQ4aDExLjg1NWExLjM2IDEuMzYgMCAwIDAgMS4xNTUtLjY0OCAzNi4wMzYgMzYuMDM2IDAgMCAwIDIuMzMzLTQuNzM3IDEzLjI4NSAxMy4yODUgMCAwIDEgMi45NyA0LjU0OGMuMi41MDcuNjk1Ljg1IDEuMjM3Ljg1YTEuMzMgMS4zMyAwIDAgMCAxLjIzNy0uODUgMTYuMDU3IDE2LjA1NyAwIDAgMCAxLjEwOC01LjgyMWMwLTMuOTM3LTEuNDUtNy42ODQtNC4wNjYtMTAuNjE5LjAxMi0uMzQxLjAzNi0uNjcxLjAzNi0xLjAxMyAwLTkuNTgxLTMuOTEzLTE4LjU3My0xMS4wMDctMjUuMzM4YTEuMzM1IDEuMzM1IDAgMCAwLTEuODM4LS4wMTJjLTcuNDQ4IDcuMDk1LTExLjIzIDE2LjY3Ni0xMC45OTUgMjYuMjctMi42NTEgMi45NTctNC4xMjQgNi43MjgtNC4xMjQgMTAuNzEyem0yLjc3IDEuNjk3Yy0uNDM3LTMuMzgzLjUxOC02LjM2NCAxLjY5Ni04LjM5MS4wMjQuMTQxLjI3MSAyLjM5MiAxLjE2NyA1LjE5N2ExNS40MzMgMTUuNDMzIDAgMCAwLTIuODY0IDMuMTk0em0yNi40NDMgMGExNi4wOTYgMTYuMDk2IDAgMCAwLTIuODA1LTMuMTM1IDM0LjEwMyAzNC4xMDMgMCAwIDAgMS4xNTUtNS4xMzhjMS4xNTUgMS45OCAyLjA3NCA0Ljc2IDEuNjUgOC4yNzN6TTMxLjk5NCAzLjk0NmEzMy41OTEgMzMuNTkxIDAgMCAxIDUuNDQ1IDcuMzlIMjYuNjJhMzIuNjk1IDMyLjY5NSAwIDAgMSA1LjM3My03LjM5ek0yNS4zMjQgMTRoMTMuMzg3YTMxLjY3OCAzMS42NzggMCAwIDEgMi41NDYgMTIuNDQ1YzAgLjQ3MS4zODkgNy40MjQtNC4xMTMgMTUuNjE1SDI2LjgzM2MtMy44MDYtNy4xNjUtMy45MzYtMTIuNzc1LTMuOTcxLTEzLjE0YTMyLjAwNCAzMi4wMDQgMCAwIDEgMi40NjItMTQuOTJ6TTMwLjY2MiA0Ny4zOTd2My45OTVhMS4zMyAxLjMzIDAgMCAwIDEuMzMyIDEuMzMyYy43MyAwIDEuMzMxLS42IDEuMzMxLTEuMzMxdi0zLjk5NmExLjMzIDEuMzMgMCAwIDAtMS4zMzEtMS4zMzFjLS43MyAwLTEuMzMyLjYtMS4zMzIgMS4zMzF6TTI1LjMyNCA1MC4wNDl2NC4wMDdhMS4zMyAxLjMzIDAgMCAwIDEuMzMyIDEuMzMyYy43MyAwIDEuMzQzLS41OSAxLjM0My0xLjMzMnYtNC4wMDdjMC0uNzMtLjYtMS4zMzItMS4zMzEtMS4zMzItLjczMS4wMTItMS4zNDQuNjAxLTEuMzQ0IDEuMzMyek0zNS45ODggNTAuMDQ5djQuMDA3YTEuMzMgMS4zMyAwIDAgMCAxLjMzMiAxLjMzMiAxLjMzIDEuMzMgMCAwIDAgMS4zMzEtMS4zMzJ2LTQuMDA3YTEuMzMgMS4zMyAwIDAgMC0xLjMzMS0xLjMzMmMtLjczLjAxMi0xLjMzMi42MDEtMS4zMzIgMS4zMzJ6XFxcIiBmaWxsPVxcXCIjODg2QTVBXFxcIiAvPjwvc3ltYm9sPlwiXG59KTtcbnZhciByZXN1bHQgPSBzcHJpdGUuYWRkKHN5bWJvbCk7XG5leHBvcnQgZGVmYXVsdCBzeW1ib2xcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9hc3NldHMvc3ZnL211bHRpY29sb3IvaWNvbi1yb2tldC5zdmdcbi8vIG1vZHVsZSBpZCA9IDE1NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQgU3ByaXRlU3ltYm9sIGZyb20gXCJzdmctYmFrZXItcnVudGltZS9icm93c2VyLXN5bWJvbFwiO1xuaW1wb3J0IHNwcml0ZSBmcm9tIFwic3ZnLXNwcml0ZS1sb2FkZXIvcnVudGltZS9icm93c2VyLXNwcml0ZS5idWlsZFwiO1xudmFyIHN5bWJvbCA9IG5ldyBTcHJpdGVTeW1ib2woe1xuICBcImlkXCI6IFwiaWNvbi1zdGFydFwiLFxuICBcInVzZVwiOiBcImljb24tc3RhcnQtdXNhZ2VcIixcbiAgXCJ2aWV3Qm94XCI6IFwiMCAwIDY0IDY1XCIsXG4gIFwiY29udGVudFwiOiBcIjxzeW1ib2wgdmlld0JveD1cXFwiMCAwIDY0IDY1XFxcIiBmaWxsPVxcXCJub25lXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIGlkPVxcXCJpY29uLXN0YXJ0XFxcIj48cGF0aCBkPVxcXCJNNTcuMzE4LjcyMUg2LjY3QzIuOTkzLjcyMSAwIDMuNzE1IDAgNy4zOTN2NTAuNjdjMCAzLjY2NSAyLjk5MyA2LjY1OCA2LjY3IDYuNjU4aDUwLjY2YzMuNjc3IDAgNi42Ny0yLjk5MyA2LjY3LTYuNjdWNy4zOTJDNjMuOTg4IDMuNzE1IDYxLjAwNy43MiA1Ny4zMTguNzJ6bTQuMDA3IDU3LjMzYTMuOTkxIDMuOTkxIDAgMCAxLTMuOTk1IDMuOTk1SDYuNjdhMy45OTEgMy45OTEgMCAwIDEtMy45OTUtMy45OTZWNy4zOTNBMy45OTEgMy45OTEgMCAwIDEgNi42NyAzLjM5N2g1MC42NmEzLjk5MSAzLjk5MSAwIDAgMSAzLjk5NSAzLjk5NlY1OC4wNXpcXFwiIGZpbGw9XFxcIiM4ODZBNUFcXFwiIC8+PHBhdGggZD1cXFwiTTU1Ljk4NyAxOS4zOTFIOC4wMDJhMS4zMyAxLjMzIDAgMCAwLTEuMzMyIDEuMzMyVjU2LjczYTEuMzMgMS4zMyAwIDAgMCAxLjMzMiAxLjMzMmg0Ny45OTdhMS4zMyAxLjMzIDAgMCAwIDEuMzMxLTEuMzMyVjIwLjcyM2ExLjM0IDEuMzQgMCAwIDAtMS4zNDMtMS4zMzJ6TTU0LjY2NyA1NS40SDkuMzMzVjIyLjA1NGg0NS4zMjJsLjAxMiAzMy4zNDN6TTEwLjY2NSAxNS4zOTZBMy45OTEgMy45OTEgMCAwIDAgMTQuNjYgMTEuNGE0LjAwMSA0LjAwMSAwIDAgMC0zLjk5NS00LjAwNyAzLjk5MSAzLjk5MSAwIDAgMC0zLjk5NSAzLjk5NSA0LjAwMSA0LjAwMSAwIDAgMCAzLjk5NSA0LjAwOHptMC01LjM0YTEuMzMgMS4zMyAwIDAgMSAxLjMzMSAxLjMzMiAxLjM0IDEuMzQgMCAwIDEtMS4zMzEgMS4zNDRBMS4zMyAxLjMzIDAgMCAxIDkuMzMzIDExLjRhMS4zMTggMS4zMTggMCAwIDEgMS4zMzItMS4zNDR6TTIxLjMyOSAxNS4zOTZhMy45OTEgMy45OTEgMCAwIDAgMy45OTUtMy45OTYgMy45OTkgMy45OTkgMCAwIDAtMy45OTUtMy45OTZjLTIuMjA0IDAtNC4wMDcgMS43OC00LjAwNyAzLjk4NGE0LjAxOSA0LjAxOSAwIDAgMCA0LjAwNyA0LjAwOHptMC01LjM0YTEuMzMgMS4zMyAwIDAgMSAxLjMzMSAxLjMzMiAxLjMzIDEuMzMgMCAwIDEtMS4zMzEgMS4zMzIgMS4zMiAxLjMyIDAgMCAxLTEuMzMyLTEuMzJjMC0uNzU1LjYwMS0xLjM0NCAxLjMzMi0xLjM0NHpNMzEuOTk0IDE1LjM5NmEzLjk5MSAzLjk5MSAwIDAgMCAzLjk5NS0zLjk5NiA0LjAwMSA0LjAwMSAwIDAgMC0zLjk5NS00LjAwNyAzLjk5MSAzLjk5MSAwIDAgMC0zLjk5NSAzLjk5NWMwIDIuMjA0IDEuNzkxIDQuMDA4IDMuOTk1IDQuMDA4em0wLTUuMzRhMS4zMyAxLjMzIDAgMCAxIDEuMzMxIDEuMzMyIDEuMzMgMS4zMyAwIDAgMS0xLjMzMSAxLjMzMiAxLjMzIDEuMzMgMCAwIDEtMS4zMzItMS4zMzJjMC0uNzQyLjU5LTEuMzMyIDEuMzMyLTEuMzMyelxcXCIgZmlsbD1cXFwiIzg4NkE1QVxcXCIgLz48cGF0aCBkPVxcXCJNMjUuNDQyIDQxLjUyNmwtMi43ODEgOC41NTdhMS4zMzIgMS4zMzIgMCAwIDAgMi4wNSAxLjQ4NWw3LjI4My01LjI5MiA3LjI5NCA1LjI5MmMuNjAxLjQ4MyAxLjMzMi4xNjUgMS41NjggMCAuNDcxLS4zNDIuNjYtLjk0My40ODMtMS40ODVsLTIuNzgxLTguNTU3IDcuMjk0LTUuMjkyYTEuMzMgMS4zMyAwIDAgMC0uNzktMi40MDRIMzYuMDZsLTIuNzgtOC41NThhMS4zMyAxLjMzIDAgMCAwLTEuMjczLS45MTkgMS4zMyAxLjMzIDAgMCAwLTEuMjczLjkybC0yLjc4MSA4LjU1NmgtOS4wMDNhMS4zMyAxLjMzIDAgMCAwLS43OSAyLjQwNWw3LjI4MyA1LjI5MnptMy40NzYtNS4wNDVhMS4zMyAxLjMzIDAgMCAwIDEuMjczLS45MmwxLjgxNS01LjU4NiAxLjgxNCA1LjU3NWMuMTc3LjU1NC42OTYuOTIgMS4yNzMuOTJoNS44NjlsLTQuNzUgMy40NTNjLS40Ny4zNDItLjY2Ljk0My0uNDgzIDEuNDg1bDEuODE1IDUuNTc1LTQuNzQ5LTMuNDUzYTEuMzUzIDEuMzUzIDAgMCAwLS43NzgtLjI0OGMtLjI3IDAtLjU1My4wODItLjc3Ny4yNDhsLTQuNzUgMy40NTMgMS44MTUtNS41NzVhMS4zMzIgMS4zMzIgMCAwIDAtLjQ4My0xLjQ4NWwtNC43NDktMy40NTQgNS44NDUuMDEyelxcXCIgZmlsbD1cXFwiIzg4NkE1QVxcXCIgLz48L3N5bWJvbD5cIlxufSk7XG52YXIgcmVzdWx0ID0gc3ByaXRlLmFkZChzeW1ib2wpO1xuZXhwb3J0IGRlZmF1bHQgc3ltYm9sXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvYXNzZXRzL3N2Zy9tdWx0aWNvbG9yL2ljb24tc3RhcnQuc3ZnXG4vLyBtb2R1bGUgaWQgPSAxNTdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IFNwcml0ZVN5bWJvbCBmcm9tIFwic3ZnLWJha2VyLXJ1bnRpbWUvYnJvd3Nlci1zeW1ib2xcIjtcbmltcG9ydCBzcHJpdGUgZnJvbSBcInN2Zy1zcHJpdGUtbG9hZGVyL3J1bnRpbWUvYnJvd3Nlci1zcHJpdGUuYnVpbGRcIjtcbnZhciBzeW1ib2wgPSBuZXcgU3ByaXRlU3ltYm9sKHtcbiAgXCJpZFwiOiBcImljb24tc3RvbWF0b2xvZ29jaGVza29lLXpvbG90b1wiLFxuICBcInVzZVwiOiBcImljb24tc3RvbWF0b2xvZ29jaGVza29lLXpvbG90by11c2FnZVwiLFxuICBcInZpZXdCb3hcIjogXCIwIDAgMTI4IDEyOFwiLFxuICBcImNvbnRlbnRcIjogXCI8c3ltYm9sIHZpZXdCb3g9XFxcIjAgMCAxMjggMTI4XFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIGlkPVxcXCJpY29uLXN0b21hdG9sb2dvY2hlc2tvZS16b2xvdG9cXFwiPjxwYXRoIGQ9XFxcIk03NS41MDcgNDEuNUExNS4zNzEgMTUuMzcxIDAgMCAwIDY0IDQ2LjY1M2ExNS40NCAxNS40NCAwIDAgMC0yNi45NTQgMTAuMjk0djEwLjUwN2E1NS4zNjkgNTUuMzY5IDAgMCAwIDQuNDQyIDIxLjc4N2wzLjk1IDkuMjg0YTcuNzA1IDcuNzA1IDAgMCAwIDE0Ljc5NS0zLjAxN1Y4Ni4xYTMuOTI5IDMuOTI5IDAgMCAxIDMuMzkxLTMuOTg3IDMuNzcgMy43NyAwIDAgMSA0LjE0MyAzLjc0OXY5LjY0NWE3LjcwNSA3LjcwNSAwIDAgMCAxNC44IDMuMDE3bDMuOTUtOS4yODRhNTUuMzY5IDU1LjM2OSAwIDAgMCA0LjQ0Mi0yMS43ODdWNTYuOTQ3QTE1LjQ2NSAxNS40NjUgMCAwIDAgNzUuNTA3IDQxLjV6TTUyLjQ5MyA0NWExMS45MDYgMTEuOTA2IDAgMCAxIDEwLjAzNiA1LjQ4MyAxLjc1MSAxLjc1MSAwIDAgMCAyLjk0MiAwQTExLjk0MyAxMS45NDMgMCAxIDEgNzUuNTA3IDY4LjlINTIuNDkzYTExLjk0OCAxMS45NDggMCAwIDEgMC0yMy44OTV6bTM0Ljk2MSAyMi40NTRhNTEuODUgNTEuODUgMCAwIDEtNC4xNjMgMjAuNDE2bC0zLjk1IDkuMjg0YTQuMiA0LjIgMCAwIDEtOC4wNzQtMS42NDZ2LTkuNjQ1YTcuMjY4IDcuMjY4IDAgMCAwLTcuOTc1LTcuMjMzIDcuNDUyIDcuNDUyIDAgMCAwLTYuNTU5IDcuNDd2OS40MDdhNC4yIDQuMiAwIDAgMS04LjA3NCAxLjY0NmwtMy45NS05LjI4NGE1MS44NSA1MS44NSAwIDAgMS00LjE2My0yMC40MTZ2LS43MjlBMTUuNDIxIDE1LjQyMSAwIDAgMCA1Mi40OTMgNzIuNGgyMy4wMTRhMTUuNDIxIDE1LjQyMSAwIDAgMCAxMS45NDctNS42N3pNNjQgMzUuMjVhMS43NDkgMS43NDkgMCAwIDAgMS43NS0xLjc1di02Ljk2M2ExLjc1IDEuNzUgMCAwIDAtMy41IDBWMzMuNUExLjc0OSAxLjc0OSAwIDAgMCA2NCAzNS4yNXpNNTQuMzQ3IDM4LjIyNGExLjc1IDEuNzUgMCAxIDAgMi40NzQtMi40NzVMNTEuOSAzMC44MjVhMS43NSAxLjc1IDAgMSAwLTIuNDc3IDIuNDc1ek03Mi40MTYgMzguNzM2YTEuNzQ0IDEuNzQ0IDAgMCAwIDEuMjM3LS41MTJsNC45MjQtNC45MjRhMS43NSAxLjc1IDAgMSAwLTIuNDc3LTIuNDc1bC00LjkyNCA0LjkyNGExLjc1IDEuNzUgMCAwIDAgMS4yMzcgMi45ODd6XFxcIiAvPjwvc3ltYm9sPlwiXG59KTtcbnZhciByZXN1bHQgPSBzcHJpdGUuYWRkKHN5bWJvbCk7XG5leHBvcnQgZGVmYXVsdCBzeW1ib2xcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9hc3NldHMvc3ZnL211bHRpY29sb3IvaWNvbi1zdG9tYXRvbG9nb2NoZXNrb2Utem9sb3RvLnN2Z1xuLy8gbW9kdWxlIGlkID0gMTU4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCBTcHJpdGVTeW1ib2wgZnJvbSBcInN2Zy1iYWtlci1ydW50aW1lL2Jyb3dzZXItc3ltYm9sXCI7XG5pbXBvcnQgc3ByaXRlIGZyb20gXCJzdmctc3ByaXRlLWxvYWRlci9ydW50aW1lL2Jyb3dzZXItc3ByaXRlLmJ1aWxkXCI7XG52YXIgc3ltYm9sID0gbmV3IFNwcml0ZVN5bWJvbCh7XG4gIFwiaWRcIjogXCJpY29uLXdlZGRpbmdcIixcbiAgXCJ1c2VcIjogXCJpY29uLXdlZGRpbmctdXNhZ2VcIixcbiAgXCJ2aWV3Qm94XCI6IFwiMCAwIDU3IDU2XCIsXG4gIFwiY29udGVudFwiOiBcIjxzeW1ib2wgdmlld0JveD1cXFwiMCAwIDU3IDU2XFxcIiBmaWxsPVxcXCJub25lXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIGlkPVxcXCJpY29uLXdlZGRpbmdcXFwiPjxnIGNsaXAtcGF0aD1cXFwidXJsKCNpY29uLXdlZGRpbmdfYSlcXFwiPjxwYXRoIGQ9XFxcIk01NS45MTcgMzIuNTMxYTE4Ljk4MyAxOC45ODMgMCAwIDAtMTkuMjA4LTE0LjQ3IDE4Ljg5NyAxOC44OTcgMCAwIDAtOS42NDEtOS4zNzIuODMuODMgMCAwIDAtLjY2MiAxLjUyMiAxNy4yNDMgMTcuMjQzIDAgMCAxIDkuMDE4IDkuMDM4IDE3LjQ5NCAxNy40OTQgMCAwIDEgMS4wOSAzLjUzM2MuODMgNC4yNC4wNDkgOC42MTQtMi4yMDIgMTIuMzE0YTE3LjI1OSAxNy4yNTkgMCAwIDEtOS4yNDYgNy40MDVjLS4wNy0uMTU4LS4xMzYtLjMxOC0uMi0uNDc5bC0uMDAyLS4wMDVjLS4xMjItLjMxLS4yMzMtLjYyNS0uMzMyLS45NDRsLS4wMjQtLjA3N2MtLjA0Ni0uMTUtLjA5LS4zMDItLjEzLS40NTRsLS4wMDQtLjAxMmM3LjI1LTIuNDMzIDExLjYzNC05Ljk4MSAxMC4wNS0xNy41NDVhMTUuMzA5IDE1LjMwOSAwIDAgMC0xLjMwNy0zLjc0OGwtLjAwMy0uMDA2LS4wMS0uMDJhMTUuMjkyIDE1LjI5MiAwIDAgMC03LjEyNC02LjkwMyAxNS4xODggMTUuMTg4IDAgMCAwLTQuNjQ1LTEuMzI3bDUuODk0LTUuNDhhLjgzLjgzIDAgMCAwIC4xMjQtMS4wN2wtLjAwNC0uMDA1TDI0LjYyNC4zNjdBLjgzLjgzIDAgMCAwIDIzLjkzNSAwaC04LjgzMmEuODMuODMgMCAwIDAtLjY4OS4zNjdsLTIuNzI5IDQuMDY1YS44My44MyAwIDAgMCAuMTI0IDEuMDdsNS44OTQgNS40NzljLS42LjA3MS0xLjE5Ny4xNzgtMS43ODguMzIyLTguMTU4IDEuOTg3LTEzLjE3OCAxMC4yNDEtMTEuMTkgMTguNGExNS4yNjYgMTUuMjY2IDAgMCAwIDUuNTIxIDguNDc1QTE1LjMwNSAxNS4zMDUgMCAwIDAgMTkgNDEuMzJhMjIuMTYgMjIuMTYgMCAwIDAgLjE2My42NDZsLjAyOS4xMDVjLjAzMy4xMi4wNjcuMjQuMTAyLjM1OGwuMDMuMDk4YTE5LjQ2NiAxOS40NjYgMCAwIDAgLjI5Mi44ODlBMTcuMzY3IDE3LjM2NyAwIDAgMSA5LjM4IDQwLjEzNWExNy4zMTUgMTcuMzE1IDAgMCAxLTUuMzMtMjEuODIgMTcuMzMgMTcuMzMgMCAwIDEgOC41NzgtOC4xMDYuODMuODMgMCAwIDAtLjY1OS0xLjUyM0ExOC45ODEgMTguOTgxIDAgMCAwIDEuMDgzIDMwLjU4OSAxOC45NzcgMTguOTc3IDAgMCAwIDIwLjI5IDQ1LjA1OEMyMy40MDQgNTEuNzI4IDMwLjE2MiA1NiAzNy40OCA1NmMxLjQ4MyAwIDIuOTg4LS4xNzUgNC40OTEtLjU0MSAxMC4xNjYtMi40NzcgMTYuNDIyLTEyLjc2MiAxMy45NDUtMjIuOTI4ek0zNS43MyAzNS45NThhMTguOTEzIDE4LjkxMyAwIDAgMCAyLjU4Mi0xMi40NzljMi43LjE2OCA1LjMzMiAxLjE1MyA3LjQ4NyAyLjgyNGExMy40MjQgMTMuNDI0IDAgMCAxIDQuODY1IDcuNTA4YzEuNzcgNy4yNy0yLjcwMyAxNC42MjMtOS45NzIgMTYuMzk0YTEzLjQ3OSAxMy40NzkgMCAwIDEtMTAuMjYyLTEuNTkgMTMuNTAxIDEzLjUwMSAwIDAgMS00LjU5OC00LjYyNCAxOC45MTIgMTguOTEyIDAgMCAwIDkuODk4LTguMDMzek0yNC4wNDEgMzguODlhMTMuNDg3IDEzLjQ4NyAwIDAgMSAxLjc0LTguNzM5IDEzLjQ4NyAxMy40ODcgMCAwIDEgNy4xNzYtNS45MmMuODkgNi4zNTgtMi44NiAxMi41MjMtOC45MTYgMTQuNjU5ek0xNS41NDYgMS42Nmg3Ljk0N2wxLjYxIDIuMzk4SDEzLjkzNmwxLjYxLTIuMzk4em0tMS4wNjcgNC4wNThoMTAuMDhsLTUuMDQgNC42ODUtNS4wNC00LjY4NXptNC4yMDggMzMuOTI0YTEzLjYzOCAxMy42MzggMCAwIDEtNy40My0yLjc4MiAxMy40MTggMTMuNDE4IDAgMCAxLTQuOTItNy41NWMtMS43NzEtNy4yNyAyLjcwMi0xNC42MjQgOS45Ny0xNi4zOTUgMy4wNDEtLjc0IDYuMTQyLS40MyA4Ljk2OS44OTZhMTMuNjQ1IDEzLjY0NSAwIDAgMSA1Ljg4NyA1LjMxOSAxOC44NzUgMTguODc1IDAgMCAwLTEwLjEwMiA4LjM4MyAxOC44NzMgMTguODczIDAgMCAwLTIuMzc0IDEyLjEzek00MS41OCA1My44NDZhMTcuMjg3IDE3LjI4NyAwIDAgMS00LjA5OS40OTRjLTYuODkgMC0xMy4yMzUtNC4xNS0xNS45NDgtMTAuNTdsLS4wODgtLjIxMS0uMDM0LS4wODYtLjEwNC0uMjY1LS4wMTUtLjA0YTE2Ljk0NiAxNi45NDYgMCAwIDEtLjExMy0uMzA4bC0uMDA0LS4wMWMtLjA0LS4xMTEtLjA3OC0uMjIzLS4xMTYtLjMzNXYtLjAwMmExNi45ODYgMTYuOTg2IDAgMCAxLS4xMS0uMzQybC0uMDA4LS4wMjRhMTcuNTE0IDE3LjUxNCAwIDAgMS0uMDk2LS4zMmwtLjAzLS4xMDYtLjA2Ni0uMjQzYTE3LjIyOCAxNy4yMjggMCAwIDEtLjE3NS0uNzJsLS4wMzEtLjE0NWExOC43MSAxOC43MSAwIDAgMS0uMDM0LS4xNjVsLS4wMjItLjExLS4wMDQtLjAxNGExNy4yMjYgMTcuMjI2IDAgMCAxIDIuMDE0LTExLjk3OSAxNy4yMjQgMTcuMjI0IDAgMCAxIDkuNDM3LTcuNzI2Yy4yOC42MzYuNTEgMS4yOTYuNjkxIDEuOTdhMTUuMTM5IDE1LjEzOSAwIDAgMC04LjI3NCA2LjcyMiAxNS4xNDIgMTUuMTQyIDAgMCAwLTEuNzc1IDEwLjgyNGwuMDAxLjAwNmExNi44NTQgMTYuODU0IDAgMCAwIC4yMTMuODg3bC4wMjguMDk4Yy4wMjkuMTA0LjA1OC4yMDcuMDkuMzEuMDA4LjAzLjAxOC4wNi4wMjguMDkyYTE2LjY0NCAxNi42NDQgMCAwIDAgLjI1NS43NTZsLjAwNC4wMTNhMTUuMTEzIDE1LjExMyAwIDAgMCA2LjM3MyA3LjczNiAxNS4xMyAxNS4xMyAwIDAgMCAxMS41MTggMS43ODRjOC4xNTgtMS45ODcgMTMuMTc4LTEwLjI0IDExLjE5LTE4LjM5OWExNS4wNjYgMTUuMDY2IDAgMCAwLTUuNDYtOC40MjcgMTUuMzE0IDE1LjMxNCAwIDAgMC04LjgxNS0zLjE5bC0uMDQ2LS4xOTRhMTkuMDk2IDE5LjA5NiAwIDAgMC0uNTctMS45MDMgMTcuMzIxIDE3LjMyMSAwIDAgMSAxNi45MiAxMy4yMmMyLjI2IDkuMjc3LTMuNDQ5IDE4LjY2Mi0xMi43MjUgMjAuOTIyelxcXCIgZmlsbD1cXFwiIzAwMFxcXCIgLz48L2c+PGRlZnM+PGNsaXBQYXRoIGlkPVxcXCJpY29uLXdlZGRpbmdfYVxcXCI+PHBhdGggZmlsbD1cXFwiI2ZmZlxcXCIgdHJhbnNmb3JtPVxcXCJ0cmFuc2xhdGUoLjUpXFxcIiBkPVxcXCJNMCAwaDU2djU2SDB6XFxcIiAvPjwvY2xpcFBhdGg+PC9kZWZzPjwvc3ltYm9sPlwiXG59KTtcbnZhciByZXN1bHQgPSBzcHJpdGUuYWRkKHN5bWJvbCk7XG5leHBvcnQgZGVmYXVsdCBzeW1ib2xcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9hc3NldHMvc3ZnL211bHRpY29sb3IvaWNvbi13ZWRkaW5nLnN2Z1xuLy8gbW9kdWxlIGlkID0gMTU5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCBTcHJpdGVTeW1ib2wgZnJvbSBcInN2Zy1iYWtlci1ydW50aW1lL2Jyb3dzZXItc3ltYm9sXCI7XG5pbXBvcnQgc3ByaXRlIGZyb20gXCJzdmctc3ByaXRlLWxvYWRlci9ydW50aW1lL2Jyb3dzZXItc3ByaXRlLmJ1aWxkXCI7XG52YXIgc3ltYm9sID0gbmV3IFNwcml0ZVN5bWJvbCh7XG4gIFwiaWRcIjogXCJpY29uLXdpdGhvdXQtc2FtcGxlXCIsXG4gIFwidXNlXCI6IFwiaWNvbi13aXRob3V0LXNhbXBsZS11c2FnZVwiLFxuICBcInZpZXdCb3hcIjogXCIwIDAgNTcgNTZcIixcbiAgXCJjb250ZW50XCI6IFwiPHN5bWJvbCB2aWV3Qm94PVxcXCIwIDAgNTcgNTZcXFwiIGZpbGw9XFxcIm5vbmVcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgaWQ9XFxcImljb24td2l0aG91dC1zYW1wbGVcXFwiPjxnIGNsaXAtcGF0aD1cXFwidXJsKCNpY29uLXdpdGhvdXQtc2FtcGxlX2EpXFxcIj48cGF0aCBkPVxcXCJNMjEuNDI0IDQ4LjE0YTIzLjI0MSAyMy4yNDEgMCAwIDEtMTQuNjQtMjEuNjMzYzAtMTIuODU4IDEwLjQzLTIzLjI3OCAyMy4zMDItMjMuMjc4czIzLjMwMyAxMC40MiAyMy4zMDMgMjMuMjc4YzAgMTIuODU3LTEwLjQzMSAyMy4yNzctMjMuMzAzIDIzLjI3Ny0xLjM0MiAwLTIuNjg0LS4xMjEtMy45NjUtLjMwNE0xLjQxNSA1NS4wODZsMTIuMzg0LTExLjk0M001NS41ODUgNDUuNThjLTMuODQzIDAtNi40ODQtLjM1Ny0xMC4wMjMtMS4zOTJNMTIuNzUgMTAuOTM4QzExIDcuODc0IDEwLjEyNSA1LjA4IDEwLjEyNS44NzRNNTUuNTg1IDM4LjYzNGMtMS42NDcgMC0zLjQ0LS4xNDUtNS4yMS0uNTcyTTE4LjA2MyA1Ljc2N2MtLjUtLjk1NS0uOTM4LTMuNTgtLjkzOC00Ljg5MlxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBzdHJva2Utd2lkdGg9XFxcIjEuOFxcXCIgc3Ryb2tlLW1pdGVybGltaXQ9XFxcIjEwXFxcIiBzdHJva2UtbGluZWNhcD1cXFwicm91bmRcXFwiIC8+PHBhdGggZD1cXFwiTTIwLjYzIDI2LjIwMmwxLjE2LS45NzUuNzkzLjkxNC0xLjE2Ljk3NS0uNzkyLS45MTR6bTEuOTUzLTEuNjQ1YTMuMDYgMy4wNiAwIDAgMSAuODU0LS40ODdjLjMwNS0uMDYxLjYxLS4wNjEgMS4wMzcuMDYuMTIyLjA2MS4yNDQuMTIyLjQyNy4xODNsLjU0OS4xODNjLjE4My4wNjEuMzY2LjA2MS41NS4wNjEuMTgyIDAgLjM2NS0uMTIyLjU0OC0uMjQ0LjEyMi0uMTIyLjE4My0uMTgyLjI0NC0uMzA0cy4wNjEtLjI0NC4wNjEtLjM2NiAwLS4yNDQtLjA2LS4zNjZsLS4xODQtLjM2NWMtLjEyMi0uMTIyLS4yNDQtLjI0NC0uMzY2LS4zMDUtLjEyMi0uMDYtLjI0NC0uMTIyLS4zNjYtLjEyMnMtLjI0NC0uMDYtLjQyNy0uMDZoLS4zNjZsLS4xMjItMS4wOThjLjI0NC0uMDYuNDg4LS4xMjEuNzMyLS4xMjFzLjQ4OC4wNi42NzEuMTIxYy4yNDQuMDYxLjQyNy4xODMuNjEuMzA1cy4zNjYuMzA1LjU1LjQ4OGMuMTgyLjI0My4zMDQuNDI2LjQyNi43My4xMjIuMjQ1LjE4My41NS4xODMuNzkzIDAgLjMwNS0uMDYuNTQ4LS4xODMuODUzLS4xMjIuMzA1LS4zMDUuNTQ5LS42MS43OTItLjE4My4xMjItLjM2Ni4yNDQtLjU0OS4zMDUtLjE4My4wNi0uMzY2LjEyMi0uNTQ5LjEyMmgtLjU0OWMtLjE4My0uMDYxLS4zNjYtLjA2MS0uNTQ5LS4xMjItLjE4My0uMDYxLS4zMDUtLjEyMi0uNDg4LS4xODMtLjE4My0uMDYtLjMwNS0uMTIyLS40ODgtLjEyMnMtLjMwNS0uMDYtLjQyNyAwYS42Ni42NiAwIDAgMC0uNDI3LjE4M2wtLjczMi0uOTE0ek0yNC41OTYgMzAuNjVsMS4wMzctMS4wOTYuOTE1Ljc5Mi0xLjAzNyAxLjE1OC0uOTE1LS44NTN6bTEuNzA4LTEuODg4Yy4yNDQtLjI0NC40ODgtLjQ4OC43OTMtLjYxLjMwNS0uMTIyLjYxLS4xODMgMS4wMzctLjA2LjEyMiAwIC4zMDUuMDYuNDI3LjEyMS4xODMuMDYxLjM2Ni4wNjEuNTUuMTIyLjE4MiAwIC4zNjUgMCAuNTQ4LS4wNi4xODMtLjA2Mi4zNjYtLjEyMy40ODgtLjMwNS4xMjItLjEyMi4xODMtLjI0NC4xODMtLjM2NmEuMzg4LjM4OCAwIDAgMCAwLS4zNjZjMC0uMTIyLS4wNi0uMjQ0LS4xMjItLjM2NS0uMDYtLjEyMi0uMTIyLS4yNDQtLjI0NC0uMzA1LS4xMjItLjEyMi0uMjQ0LS4xODMtLjM2Ni0uMjQ0LS4xMjItLjA2LS4yNDQtLjA2LS40MjctLjA2aC0uNDI3Yy0uMTIyIDAtLjI0NC4wNi0uMzY2LjA2bC0uMjQ0LTEuMTU4Yy4yNDQtLjEyMS40MjctLjE4Mi42NzEtLjE4Mi4yNDQgMCAuNDg4IDAgLjY3MS4wNi4yNDQuMDYxLjQyNy4xMjIuNjcxLjI0NC4yNDQuMTIyLjQyNy4yNDQuNjEuNDI3cy4zNjYuNDI2LjU1LjY3Yy4xMjEuMjQ0LjI0My40ODguMzA0Ljc5Mi4wNjEuMzA1IDAgLjU0OS0uMDYuODUzLS4wNjIuMzA1LS4yNDUuNjEtLjQ4OS44NTQtLjE4My4xODItLjMwNS4zMDQtLjQ4OC40MjZzLS4zMDUuMTgzLS40ODguMTgzYy0uMTgzLjA2LS4zNjYuMDYtLjU0OS4wNi0uMTgzIDAtLjM2NiAwLS41NDktLjA2LS4xODMtLjA2MS0uMzA1LS4wNjEtLjQ4OC0uMTIyLS4xODMtLjA2LS4zMDUtLjA2LS40ODgtLjA2cy0uMzA1IDAtLjQyNy4wNmMtLjEyMi4wNjEtLjMwNS4xMjItLjQyNy4yNDRsLS44NTQtLjg1M3pNMjkuMjMyIDM0LjU1bC44NTUtMS4yOCAxLjAzNy42NzEtLjg1NCAxLjI4LTEuMDM4LS42N3ptMS40MDQtMi4xMzJjLjE4My0uMzA1LjQyNy0uNTQ5LjY3LS43MzEuMjQ0LS4xODMuNjEtLjI0NCAxLjAzNy0uMjQ0LjEyMiAwIC4zMDUgMCAuNDg5LjA2LjE4My4wNjIuMzY2IDAgLjU0OSAwIC4xODMgMCAuMzY2LS4wNi41NDktLjEyMS4xODMtLjA2MS4zMDUtLjE4My40MjctLjM2Ni4wNi0uMTIyLjEyMi0uMjQzLjE4My0uMzY1di0uMzY2YzAtLjEyMi0uMTIyLS4yNDQtLjE4My0uMzY2LS4wNjEtLjEyMS0uMTgzLS4xODItLjMwNS0uMjQzcy0uMjQ0LS4xMjItLjQyNy0uMTgzYy0uMTIyIDAtLjMwNS0uMDYxLS40MjcgMC0uMTIyLjA2LS4yNDQuMDYtLjM2Ni4wNi0uMTIzLjA2Mi0uMjQ1LjA2Mi0uMzY3LjEyM2wtLjQyNy0xLjAzNmMuMTg0LS4xMjIuNDI4LS4yNDQuNjcyLS4zMDUuMjQ0LS4wNi40ODgtLjA2LjY3LS4wNi4yNDUgMCAuNDg5LjA2LjY3Mi4xMjEuMTgzLjA2MS40MjcuMTgzLjY3LjMwNS4yNDUuMTgzLjQyOC4zNjUuNjEuNTQ4LjE4NC4xODMuMzA2LjQ4OC4zNjcuNzMxLjA2LjI0NC4xMjIuNTQ5LjA2Ljg1NC0uMDYuMzA0LS4xODIuNjA5LS4zNjUuOTEzLS4xMjIuMTgzLS4yNDQuMzY2LS40MjcuNDg4YTEuODI1IDEuODI1IDAgMCAxLS40ODguMjQ0Yy0uMTgzLjA2LS4zNjYuMTIyLS41NS4xMjJoLS42MWMtLjE4MiAwLS4zNjUgMC0uNDg3LS4wNjFoLS40ODljLS4xODMgMC0uMzA1LjA2LS40MjcuMTIxcy0uMTgzLjI0NC0uMzA1LjQyN2wtLjk3Ni0uNjd6XFxcIiBmaWxsPVxcXCIjMDAwXFxcIiAvPjxwYXRoIGQ9XFxcIk04LjkxOCAxNi43NTdjNS4wNjMgMTUuNDc4IDE1LjM3MyAyNS43NzYgMzAuODA2IDMwLjk1Nk01Mi44NCAzMS41MDRDMzguMzIgMjcuNzg3IDI3Ljk1IDE4LjI4IDIzLjE5MyA0LjI2NVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBzdHJva2Utd2lkdGg9XFxcIjEuOFxcXCIgc3Ryb2tlLW1pdGVybGltaXQ9XFxcIjEwXFxcIiBzdHJva2UtbGluZWNhcD1cXFwicm91bmRcXFwiIC8+PC9nPjxkZWZzPjxjbGlwUGF0aCBpZD1cXFwiaWNvbi13aXRob3V0LXNhbXBsZV9hXFxcIj48cGF0aCBmaWxsPVxcXCIjZmZmXFxcIiB0cmFuc2Zvcm09XFxcInRyYW5zbGF0ZSguNSlcXFwiIGQ9XFxcIk0wIDBoNTZ2NTZIMHpcXFwiIC8+PC9jbGlwUGF0aD48L2RlZnM+PC9zeW1ib2w+XCJcbn0pO1xudmFyIHJlc3VsdCA9IHNwcml0ZS5hZGQoc3ltYm9sKTtcbmV4cG9ydCBkZWZhdWx0IHN5bWJvbFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2Fzc2V0cy9zdmcvbXVsdGljb2xvci9pY29uLXdpdGhvdXQtc2FtcGxlLnN2Z1xuLy8gbW9kdWxlIGlkID0gMTYwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCBTcHJpdGVTeW1ib2wgZnJvbSBcInN2Zy1iYWtlci1ydW50aW1lL2Jyb3dzZXItc3ltYm9sXCI7XG5pbXBvcnQgc3ByaXRlIGZyb20gXCJzdmctc3ByaXRlLWxvYWRlci9ydW50aW1lL2Jyb3dzZXItc3ByaXRlLmJ1aWxkXCI7XG52YXIgc3ltYm9sID0gbmV3IFNwcml0ZVN5bWJvbCh7XG4gIFwiaWRcIjogXCJpY29uLXpvbG90aWUta29yb25raVwiLFxuICBcInVzZVwiOiBcImljb24tem9sb3RpZS1rb3JvbmtpLXVzYWdlXCIsXG4gIFwidmlld0JveFwiOiBcIjAgMCA3NCA3NFwiLFxuICBcImNvbnRlbnRcIjogXCI8c3ltYm9sIHZpZXdCb3g9XFxcIjAgMCA3NCA3NFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiBpZD1cXFwiaWNvbi16b2xvdGllLWtvcm9ua2lcXFwiPjxwYXRoIGQ9XFxcIk01My4wNjUgNDcuNzM4YS40ODguNDg4IDAgMCAxLS4yMDYtLjA0NS41LjUgMCAwIDEtLjI0OS0uNjYxYy4zNTItLjc3OC43LTEuNjI5IDEuMDQ0LTIuNTI5YS41LjUgMCAwIDEgLjkzNi4zNTUgNDUuMjEgNDUuMjEgMCAwIDEtMS4wNjkgMi41ODYuNS41IDAgMCAxLS40NTYuMjk0ek00Ni4xIDY5YTIuNDc5IDIuNDc5IDAgMCAxLTEuNzkxLS43NjRjLS42MDctLjc0NC0xLjIxMi0yLjc1My0xLjk3OC01LjMtMS4yOC00LjI0OC0zLjIxNS0xMC42NjktNS4zNDktMTAuNzM3LTIuMS4wNjgtMy45OTIgNi4zNTktNS4yNDYgMTAuNTIxYTI0LjE2OCAyNC4xNjggMCAwIDEtMi4wMDYgNS40NTkgMi40NjYgMi40NjYgMCAwIDEtMy4wNjEuNDc4Yy00LjY2Ni0yLjc3NS01LjEyNi0xMi45ODYtNS4xMDctMTcuMjQ3YTcuMyA3LjMgMCAwIDAtLjczOS0zLjIxMWMtLjcxOS0xLjUxOS0zLjc1LTExLjA0Ny0yLjg0LTE3Ljk4MWEuNS41IDAgMCAxIC45OTMuMTNDMTguMSAzNy4wNyAyMS4wMzMgNDYuMyAyMS43MjkgNDcuNzc0YTguMyA4LjMgMCAwIDEgLjgzNSAzLjY0NmMtLjAxOCA0LjA4OC40IDEzLjg3MSA0LjYyMSAxNi4zODNhMS40NSAxLjQ1IDAgMCAwIDEuNzgyLS4yNTkgMjcuNCAyNy40IDAgMCAwIDEuODEzLTUuMTA4YzEuNTc0LTUuMjIzIDMuMzU4LTExLjE0MSA2LjItMTEuMjMyIDIuODg0LjA5MSA0LjcgNi4xMjQgNi4zMDYgMTEuNDQ3YTIzLjg0NCAyMy44NDQgMCAwIDAgMS43NyA0LjkyNCAxLjQ0NCAxLjQ0NCAwIDAgMCAxLjc1My4yMjljMS4zOS0uODI2IDIuNDk0LTIuNTM2IDMuMjgzLTUuMDg0YS41LjUgMCAxIDEgLjk1NS4zYy0uODY0IDIuNzkyLTIuMTE3IDQuNjkyLTMuNzI0IDUuNjQ2QTIuMzY5IDIuMzY5IDAgMCAxIDQ2LjEgNjl6TTUxLjcyMyA1Ni45MzhhLjM3LjM3IDAgMCAxLS4wNDggMCAuNS41IDAgMCAxLS40NTEtLjU0NWMuMDg2LS45LjE0NC0xLjgyOS4xNzQtMi43NDlhLjQ4MS40ODEgMCAwIDEgLjUxNy0uNDgzLjUuNSAwIDAgMSAuNDgzLjUxNmMtLjAzMS45NC0uMDkxIDEuODg2LS4xNzggMi44MWEuNS41IDAgMCAxLS40OTcuNDUxek01NS42NyAzOC44NzFoLS4wNTFhLjUuNSAwIDAgMS0uNDQ3LS41NDhjLjAyNy0uMy4wNi02LjAyNC0uMTUxLTcuOTgxYS41LjUgMCAwIDEgLjk5NS0uMTA3Yy4yMTMgMS45OC4xOTIgNy43NzYuMTUgOC4xODhhLjUuNSAwIDAgMS0uNDk2LjQ0OHpcXFwiIC8+PHBhdGggZD1cXFwiTTU1LjUxOSAzMC43ODdIMTguNDgxYS41LjUgMCAwIDEtLjQ5My0uNDE2TDE0LjgxNyAxMS43OGEuNS41IDAgMCAxIC43NDUtLjUxNmwxMiA3IDkuMDI3LTEzLjA1YS41Mi41MiAwIDAgMSAuODIyIDBsOS4wMzIgMTMuMDQ2IDEyLTdhLjUuNSAwIDAgMSAuNzQ1LjUxNmwtMy4xNzYgMTguNTk1YS41LjUgMCAwIDEtLjQ5My40MTZ6bS0zNi42MTYtMUg1NS4xbDIuOTItMTcuMTItMTEuNDY5IDYuNjlhLjUuNSAwIDAgMS0uNjYzLS4xNDdMMzcgNi4zNzcgMjguMTE1IDE5LjIxYS41LjUgMCAwIDEtLjY2My4xNDdsLTExLjQ2OS02LjY5elxcXCIgLz48L3N5bWJvbD5cIlxufSk7XG52YXIgcmVzdWx0ID0gc3ByaXRlLmFkZChzeW1ib2wpO1xuZXhwb3J0IGRlZmF1bHQgc3ltYm9sXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvYXNzZXRzL3N2Zy9tdWx0aWNvbG9yL2ljb24tem9sb3RpZS1rb3JvbmtpLnN2Z1xuLy8gbW9kdWxlIGlkID0gMTYxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCBTcHJpdGVTeW1ib2wgZnJvbSBcInN2Zy1iYWtlci1ydW50aW1lL2Jyb3dzZXItc3ltYm9sXCI7XG5pbXBvcnQgc3ByaXRlIGZyb20gXCJzdmctc3ByaXRlLWxvYWRlci9ydW50aW1lL2Jyb3dzZXItc3ByaXRlLmJ1aWxkXCI7XG52YXIgc3ltYm9sID0gbmV3IFNwcml0ZVN5bWJvbCh7XG4gIFwiaWRcIjogXCJpY29uLXpvbG90by1wcm9iYVwiLFxuICBcInVzZVwiOiBcImljb24tem9sb3RvLXByb2JhLXVzYWdlXCIsXG4gIFwidmlld0JveFwiOiBcIjAgMCA0MTcuOTIxIDQxNy45MjFcIixcbiAgXCJjb250ZW50XCI6IFwiPHN5bWJvbCB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIHZpZXdCb3g9XFxcIjAgMCA0MTcuOTIxIDQxNy45MjFcXFwiIGlkPVxcXCJpY29uLXpvbG90by1wcm9iYVxcXCI+PHBhdGggZD1cXFwiTTM2NS42MjUgNzkuNDIyQzM2NC40ODEgMzUuNTUgMzI3LjkyNSAwIDI4NC4wNDkgMGwtLjM2OC4wMDEtMS4wNTMuMDA1Yy0xNy44MjEuMDc4LTM0LjI0NSA5LjQ0My00My45MzYgMjUuMDUtNi40MzYgMTAuMzY1LTE3LjU1IDE2LjU1Mi0yOS43MzIgMTYuNTUycy0yMy4yOTYtNi4xODgtMjkuNzMyLTE2LjU1MkMxNjkuNTM4IDkuNDQ5IDE1My4xMTMuMDg1IDEzNS4yOS4wMDZsLTEuMDUtLjAwNS0uMzY3LS4wMDFDOTAgMCA1My40MzkgMzUuNTUzIDUyLjI5NSA3OS40MjJhODEuNzQ4IDgxLjc0OCAwIDAgMCAzLjY3NCAyNi41MzhsMjguOTg4IDkwLjYwNGMuMDIzIDM1LjQ1OCA3LjU0OCA4OS4zODcgMjQuMTYzIDEyNS4yNTFsMzcuMjUgODAuNDA0YzMuMjA3IDkuMzIgMTEuNzM0IDE1LjYxMSAyMS4zNDggMTUuNyA2LjA3LjA3IDExLjgzMy0yLjI3NCAxNi4xNjEtNi41NjJhMjIuNTAxIDIyLjUwMSAwIDAgMCA2LjcxMS0xNi4wOTdjMC0uNjAzLS4wODQtMS4yMDMtLjI0OS0xLjc4My03LjM3Ny0yNS44NjUtMjIuMTYxLTk4Ljc2OS0yLjI1MS0xMjUuMTUxIDQuOTU2LTYuNTY3IDExLjc4My05Ljc2IDIwLjg3LTkuNzYgOC44NjIgMCAxNS41NDQgMy4xMjcgMjAuNDI3IDkuNTYxIDE5Ljg1MiAyNi4xNTYgNS40NCA5OS4wNTItMS43ODggMTI0LjkzNGE2LjUxIDYuNTEgMCAwIDAtLjI0IDEuNzVjMCAxMS43NTYgOS4zMjIgMjIuMDg4IDIwLjc4IDIzLjAzMi42MzguMDUzIDEuMjcxLjA3OCAxLjkwMS4wNzhhMjIuNTc2IDIyLjU3NiAwIDAgMCAyMS4zOTYtMTUuMjYybDM3LjQyNi04MC45MDJjMTYuNTc2LTM1LjgzMiAyNC4wODEtODkuNzIxIDI0LjEwMi0xMjUuMTk0bDI5LjAwMS05MC42NDhjMi42NjUtOC41NDQgMy44OTYtMTcuNDU3IDMuNjYtMjYuNDkzem0tMTYuMDU2IDIyLjU3NmwtMjkuMjk4IDkxLjU3M2E2Ljk2NyA2Ljk2NyAwIDAgMC0uMzA5IDIuMDc5Yy4xMTkgMzQuMDEtNi45OTcgODYuMjcyLTIyLjg5OSAxMjAuNjQ3bC0zNy41NzUgODEuMjI1YTYuNTczIDYuNTczIDAgMCAwLS4yODMuNzIxIDkuNjQzIDkuNjQzIDAgMCAxLTkuOTk5IDYuNjQzYy00LjQ3My0uMzY4LTguNDI0LTQuNjI3LTguODE1LTkuMzE2IDIuOTg1LTExLjAzIDI1Ljk4MS0xMDAuMjA0LS42NDUtMTM1LjI5Ny03LjQwNC05Ljc1OS0xNy43NjItMTQuNzA3LTMwLjc4Ni0xNC43MDctMTMuMjU4IDAtMjMuNzcxIDUuMDIzLTMxLjI0NyAxNC45MjktMjYuNjY3IDM1LjMzNi0zLjIwOSAxMjQuNDgtLjE1NCAxMzUuNTQ2YTkuNTgyIDkuNTgyIDAgMCAxLTIuODMxIDYuMDgxYy0xLjg0NCAxLjgyOC00LjI3NSAyLjgwMS02Ljg5IDIuNzk3LTQuMDkxLS4wMzgtNy44ODktMi45NjQtOS4yMzgtNy4xMTZhNi41MDYgNi41MDYgMCAwIDAtLjI4NC0uNzI0bC0zNy40MDEtODAuNzNjLTE0LjU2OC0zMS40NDUtMjEuNzc3LTc3LjgzMy0yMi44MjItMTExLjU3NyAxNy43OTcgNS44MjkgNjAuMDA2IDE3LjU4OCAxMTAuODY2IDE3LjU4OCAyNS4yNiAwIDUxLjU2Mi0yLjk4MiA3OC4xNzUtOC44NjRhNi41IDYuNSAwIDAgMCA0Ljk0NC03Ljc1IDYuNSA2LjUgMCAwIDAtNy43NS00Ljk0NCAzODMuMjk2IDM4My4yOTYgMCAwIDEtOS41NSAxLjk4NGwxNC4xNzYtMzUuOTczYTYuNSA2LjUgMCAwIDAtMTIuMDk1LTQuNzY3bC0xNy4wOCA0My4zNDFjLTE3LjI3MyAyLjYzNi0zNC4yODggMy45NzEtNTAuODIxIDMuOTcxLTE4LjY1NiAwLTM2LjIyNi0xLjY5My01MS43Ni00LjA4OGwtMTcuMDM0LTQzLjIyNGE2LjUgNi41IDAgMCAwLTEyLjA5NSA0Ljc2N2wxNC4xMTkgMzUuODI2Yy0yMi42NjgtNC40NTMtMzkuMTc2LTkuODY5LTQ1LjUxMS0xMi4xMDNMNjguMzYzIDEwMi4wNGMtMi4yMzktNy4xNzktMy4yNzMtMTQuNjc2LTMuMDc1LTIyLjI4M0M2Ni4yNTMgNDIuODgzIDk2Ljk4NSAxMyAxMzMuODc0IDEzbC4zMS4wMDEgMS4wNTMuMDA1YzEzLjMxNi4wNTggMjUuNjMzIDcuMTI2IDMyLjk0OCAxOC45MDcgOC44MjQgMTQuMjExIDI0LjA2NyAyMi42OTUgNDAuNzc2IDIyLjY5NXMzMS45NTItOC40ODQgNDAuNzc2LTIyLjY5NWM3LjMxNS0xMS43ODEgMTkuNjMyLTE4Ljg0OSAzMi45NDYtMTguOTA3bDEuMDU3LS4wMDUuMzEtLjAwMWMzNi44ODQgMCA2Ny42MiAyOS44ODUgNjguNTgyIDY2Ljc2MS4xOTYgNy42MDctLjgzOCAxNS4xMDQtMy4wNjMgMjIuMjM3em0tOC43NjEtMTkuODk1YTYuNDk4IDYuNDk4IDAgMCAxLTYuMzI4IDYuNjY3bC0uMTczLjAwMmE2LjUgNi41IDAgMCAxLTYuNDk0LTYuMzMxYy0uNjgzLTI2LjE3My0yMi40OTktNDcuMzg1LTQ4LjY3OS00Ny4zODVoLS4yNWE2LjUgNi41IDAgMCAxLS4wMjktMTNoLjI3OGMzMy4xNzMuMDAxIDYwLjgxIDI2Ljg3OCA2MS42NzUgNjAuMDQ3em0tNi4yMzkgMzAuODc4bC04LjI4OSAyNS45MDhhNi41MDIgNi41MDIgMCAwIDEtNi4xODkgNC41MjEgNi41IDYuNSAwIDAgMS02LjE5Mi04LjQ4Mmw4LjI4OS0yNS45MDhhNi41IDYuNSAwIDAgMSAxMi4zODEgMy45NjF6TTE1MS44MzYgODIuMjc2Yy05LjcxMSAwLTE3LjYxMiA3LjkwMS0xNy42MTIgMTcuNjEzIDAgOS43MTEgNy45MDEgMTcuNjEyIDE3LjYxMiAxNy42MTIgMS41OTggMCAzLjEzOS0uMjMzIDQuNjEyLS42MzR2NS4yNDZhNC42MTcgNC42MTcgMCAwIDEtNC42MTIgNC42MTIgNC42MDQgNC42MDQgMCAwIDEtMy41NjYtMS42ODcgNi41IDYuNSAwIDAgMC0xMC4wMzkgOC4yNTkgMTcuNTYyIDE3LjU2MiAwIDAgMCAxMy42MDUgNi40MjdjOS43MTEgMCAxNy42MTItNy45MDEgMTcuNjEyLTE3LjYxMlY5OS44ODhjMC0uMjI1LS4wMTEtLjQ0Ny0uMDM0LS42NjYtLjM1My05LjQwMS04LjA5MS0xNi45NDYtMTcuNTc4LTE2Ljk0NnptMCAyMi4yMjRhNC42MTcgNC42MTcgMCAwIDEtNC42MTItNC42MTJjMC0yLjU0MyAyLjA2OS00LjYxMyA0LjYxMi00LjYxM3M0LjYxMiAyLjA2OSA0LjYxMiA0LjYxM2E0LjYxNiA0LjYxNiAwIDAgMS00LjYxMiA0LjYxMnptMzguMDgzLTIyLjIyNGMtOS43MTEgMC0xNy42MTIgNy45MDEtMTcuNjEyIDE3LjYxMyAwIDkuNzExIDcuOTAxIDE3LjYxMiAxNy42MTIgMTcuNjEyIDEuNTk4IDAgMy4xMzktLjIzMyA0LjYxMi0uNjM0djUuMjQ2YTQuNjE3IDQuNjE3IDAgMCAxLTQuNjEyIDQuNjEyIDQuNjA0IDQuNjA0IDAgMCAxLTMuNTY2LTEuNjg3IDYuNSA2LjUgMCAwIDAtMTAuMDM5IDguMjU5IDE3LjU2MiAxNy41NjIgMCAwIDAgMTMuNjA1IDYuNDI3YzkuNzExIDAgMTcuNjEyLTcuOTAxIDE3LjYxMi0xNy42MTJWOTkuODg4YzAtLjIyNS0uMDExLS40NDctLjAzNC0uNjY2LS4zNTQtOS40MDEtOC4wOTEtMTYuOTQ2LTE3LjU3OC0xNi45NDZ6bTAgMjIuMjI0YTQuNjE3IDQuNjE3IDAgMCAxLTQuNjEyLTQuNjEyYzAtMi41NDMgMi4wNjktNC42MTMgNC42MTItNC42MTNzNC42MTIgMi4wNjkgNC42MTIgNC42MTNhNC42MTcgNC42MTcgMCAwIDEtNC42MTIgNC42MTJ6bTM4LjA4My0yMi4yMjRjLTkuNzExIDAtMTcuNjEyIDcuOTAxLTE3LjYxMiAxNy42MTMgMCA5LjcxMSA3LjkwMSAxNy42MTIgMTcuNjEyIDE3LjYxMiAxLjU5OCAwIDMuMTM5LS4yMzMgNC42MTItLjYzNHY1LjI0NmE0LjYxNyA0LjYxNyAwIDAgMS00LjYxMiA0LjYxMiA0LjYwNCA0LjYwNCAwIDAgMS0zLjU2Ni0xLjY4NyA2LjUgNi41IDAgMCAwLTEwLjAzOSA4LjI1OSAxNy41NjIgMTcuNTYyIDAgMCAwIDEzLjYwNSA2LjQyN2M5LjcxMSAwIDE3LjYxMi03LjkwMSAxNy42MTItMTcuNjEyVjk5Ljg4OGMwLS4yMjUtLjAxMS0uNDQ3LS4wMzQtLjY2Ni0uMzUzLTkuNDAxLTguMDkxLTE2Ljk0Ni0xNy41NzgtMTYuOTQ2em0wIDIyLjIyNGE0LjYxNyA0LjYxNyAwIDAgMS00LjYxMi00LjYxMmMwLTIuNTQzIDIuMDY5LTQuNjEzIDQuNjEyLTQuNjEzczQuNjEyIDIuMDY5IDQuNjEyIDQuNjEzYTQuNjE3IDQuNjE3IDAgMCAxLTQuNjEyIDQuNjEyem0zOC4wODItMjIuMjI0Yy05LjcxMSAwLTE3LjYxMiA3LjkwMS0xNy42MTIgMTcuNjEzIDAgOS43MTEgNy45MDEgMTcuNjEyIDE3LjYxMiAxNy42MTIgMS41OTggMCAzLjEzOS0uMjMzIDQuNjEyLS42MzR2NS4yNDZhNC42MTcgNC42MTcgMCAwIDEtNC42MTIgNC42MTIgNC42MDQgNC42MDQgMCAwIDEtMy41NjYtMS42ODcgNi41IDYuNSAwIDAgMC0xMC4wMzkgOC4yNTkgMTcuNTYyIDE3LjU2MiAwIDAgMCAxMy42MDUgNi40MjdjOS43MTEgMCAxNy42MTItNy45MDEgMTcuNjEyLTE3LjYxMlY5OS44ODhjMC0uMjI1LS4wMTEtLjQ0Ny0uMDM0LS42NjYtLjM1My05LjQwMS04LjA5MS0xNi45NDYtMTcuNTc4LTE2Ljk0NnptMCAyMi4yMjRhNC42MTcgNC42MTcgMCAwIDEtNC42MTItNC42MTJjMC0yLjU0MyAyLjA2OS00LjYxMyA0LjYxMi00LjYxM3M0LjYxMiAyLjA2OSA0LjYxMiA0LjYxM2E0LjYxNiA0LjYxNiAwIDAgMS00LjYxMiA0LjYxMnpNMTI4LjU2IDEyNS4zNmMxLjIxIDEuMjEgMS45IDIuODkgMS45IDQuNnMtLjY5IDMuMzktMS45IDQuNmMtMS4yMSAxLjIxLTIuODkgMS45LTQuNiAxLjlzLTMuMzktLjY5LTQuNi0xLjktMS45LTIuODktMS45LTQuNi42OS0zLjM5IDEuOS00LjYgMi44OS0xLjkgNC42LTEuOSAzLjM5LjY5IDQuNiAxLjl6XFxcIiAvPjwvc3ltYm9sPlwiXG59KTtcbnZhciByZXN1bHQgPSBzcHJpdGUuYWRkKHN5bWJvbCk7XG5leHBvcnQgZGVmYXVsdCBzeW1ib2xcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9hc3NldHMvc3ZnL211bHRpY29sb3IvaWNvbi16b2xvdG8tcHJvYmEuc3ZnXG4vLyBtb2R1bGUgaWQgPSAxNjJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IFNwcml0ZVN5bWJvbCBmcm9tIFwic3ZnLWJha2VyLXJ1bnRpbWUvYnJvd3Nlci1zeW1ib2xcIjtcbmltcG9ydCBzcHJpdGUgZnJvbSBcInN2Zy1zcHJpdGUtbG9hZGVyL3J1bnRpbWUvYnJvd3Nlci1zcHJpdGUuYnVpbGRcIjtcbnZhciBzeW1ib2wgPSBuZXcgU3ByaXRlU3ltYm9sKHtcbiAgXCJpZFwiOiBcInRlbGVncmFtbVwiLFxuICBcInVzZVwiOiBcInRlbGVncmFtbS11c2FnZVwiLFxuICBcInZpZXdCb3hcIjogXCIwIDAgNjAgNjBcIixcbiAgXCJjb250ZW50XCI6IFwiPHN5bWJvbCB2aWV3Qm94PVxcXCIwIDAgNjAgNjBcXFwiIGZpbGw9XFxcIm5vbmVcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgaWQ9XFxcInRlbGVncmFtbVxcXCI+PGcgY2xpcC1wYXRoPVxcXCJ1cmwoI3RlbGVncmFtbV9hKVxcXCI+PGNpcmNsZSBjeD1cXFwiMzBcXFwiIGN5PVxcXCIzMFxcXCIgcj1cXFwiMzBcXFwiIGZpbGw9XFxcIiMyREE1RTFcXFwiIC8+PHBhdGggZD1cXFwiTTEzLjMyIDI5Ljk0czE0LjkyNi02LjU4NSAyMC4xMDMtOC45MDRjMS45ODQtLjkyOCA4LjcxNC0zLjg5NiA4LjcxNC0zLjg5NnMzLjEwNy0xLjI5OSAyLjg0OCAxLjg1NWMtLjA4NyAxLjI5OS0uNzc3IDUuODQzLTEuNDY3IDEwLjc2LTEuMDM1IDYuOTU2LTIuMTU3IDE0LjU2Mi0yLjE1NyAxNC41NjJzLS4xNzIgMi4xMzMtMS42NCAyLjUwNWMtMS40NjYuMzctMy44ODItMS4yOTktNC4zMTMtMS42Ny0uMzQ2LS4yNzgtNi40NzItNC40NTItOC43MTUtNi40OTMtLjYwNC0uNTU2LTEuMjk0LTEuNjcuMDg2LTIuOTY4IDMuMTA3LTMuMDYgNi44MTctNi44NjQgOS4wNi05LjI3NSAxLjAzNS0xLjExMyAyLjA3LTMuNzEtMi4yNDMtLjU1Ny02LjEyNiA0LjU0NS0xMi4xNjYgOC44MTItMTIuMTY2IDguODEycy0xLjM4LjkyOC0zLjk3LjA5M2MtMi41ODgtLjgzNS01LjYwOC0xLjk0OC01LjYwOC0xLjk0OHMtMi4wNy0xLjM5MiAxLjQ2Ny0yLjg3NnpcXFwiIGZpbGw9XFxcIiNmZmZcXFwiIC8+PC9nPjxkZWZzPjxjbGlwUGF0aCBpZD1cXFwidGVsZWdyYW1tX2FcXFwiPjxwYXRoIGZpbGw9XFxcIiNmZmZcXFwiIGQ9XFxcIk0wIDBoNjB2NjBIMHpcXFwiIC8+PC9jbGlwUGF0aD48L2RlZnM+PC9zeW1ib2w+XCJcbn0pO1xudmFyIHJlc3VsdCA9IHNwcml0ZS5hZGQoc3ltYm9sKTtcbmV4cG9ydCBkZWZhdWx0IHN5bWJvbFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2Fzc2V0cy9zdmcvbXVsdGljb2xvci90ZWxlZ3JhbW0uc3ZnXG4vLyBtb2R1bGUgaWQgPSAxNjNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IFNwcml0ZVN5bWJvbCBmcm9tIFwic3ZnLWJha2VyLXJ1bnRpbWUvYnJvd3Nlci1zeW1ib2xcIjtcbmltcG9ydCBzcHJpdGUgZnJvbSBcInN2Zy1zcHJpdGUtbG9hZGVyL3J1bnRpbWUvYnJvd3Nlci1zcHJpdGUuYnVpbGRcIjtcbnZhciBzeW1ib2wgPSBuZXcgU3ByaXRlU3ltYm9sKHtcbiAgXCJpZFwiOiBcIndoYXRzdXBcIixcbiAgXCJ1c2VcIjogXCJ3aGF0c3VwLXVzYWdlXCIsXG4gIFwidmlld0JveFwiOiBcIjAgMCA2MCA2MFwiLFxuICBcImNvbnRlbnRcIjogXCI8c3ltYm9sIHZpZXdCb3g9XFxcIjAgMCA2MCA2MFxcXCIgZmlsbD1cXFwibm9uZVxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiBpZD1cXFwid2hhdHN1cFxcXCI+PGcgY2xpcC1wYXRoPVxcXCJ1cmwoI3doYXRzdXBfYSlcXFwiPjxjaXJjbGUgY3g9XFxcIjMwXFxcIiBjeT1cXFwiMzBcXFwiIHI9XFxcIjMwXFxcIiBmaWxsPVxcXCIjNEZDRTVEXFxcIiAvPjxwYXRoIGZpbGwtcnVsZT1cXFwiZXZlbm9kZFxcXCIgY2xpcC1ydWxlPVxcXCJldmVub2RkXFxcIiBkPVxcXCJNMzAuMjczIDQ0LjIyN0MzOC40MDcgNDQuMjI3IDQ1IDM3LjY4NSA0NSAyOS42MTRTMzguNDA4IDE1IDMwLjI3MyAxNWMtOC4xMzQgMC0xNC43MjggNi41NDMtMTQuNzI4IDE0LjYxNCAwIDIuNzYuNzcyIDUuMzQzIDIuMTEzIDcuNTQ1TDE1IDQ1bDguMTU0LTIuNTkxYTE0Ljc1MiAxNC43NTIgMCAwIDAgNy4xMTkgMS44MTh6bTYuOTQxLTExLjU3MWMuMjUzLjEyMS40MjMuMjAzLjQ5Ny4zMjMuMDkuMTUuMDkuODY3LS4yMSAxLjcwNC0uMzAzLjgzNi0xLjc3NyAxLjY0Mi0yLjQzOCAxLjcwMi0uMTE0LjAxLS4yMDguMDMzLS4zMDQuMDU2LS40NjYuMTEyLS45ODcuMjM3LTQuMDI5LS45NTEtMy4zOTEtMS4zMjYtNS42MjctNC42MTYtNi4wODktNS4yOTYtLjAzNy0uMDU1LS4wNjMtLjA5NC0uMDc3LS4xMTItLjE4NC0uMjQyLTEuNDc0LTEuOTQ0LTEuNDc0LTMuNzA0IDAtMS42NS44MTYtMi41MTQgMS4xOTItMi45MTJsLjA3LS4wNzZjLjMzMi0uMzU4LjcyMy0uNDQ4Ljk2NC0uNDQ4LjEyNCAwIC4yNDkuMDA4LjM2OS4wMTYuMTEyLjAwNy4yMjEuMDE0LjMyMy4wMTRsLjA4LS4wMDNjLjIwMy0uMDEzLjQ2Ny0uMDMuNzMyLjZsLjM4NC45MjZjLjMxNS43Ni42NjggMS42MTIuNzMgMS43MzMuMDkuMTguMTUuMzkuMDMuNjI4bC0uMDUuMDk4YTIuMDIgMi4wMiAwIDAgMS0uMzEyLjVsLS4xODMuMjE4Yy0uMTI1LjE1LS4yNS4zMDItLjM1OC40MS0uMTguMTc3LS4zNjkuMzcxLS4xNTkuNzMuMjExLjM1OC45MzYgMS41MyAyLjAwOSAyLjQ4IDEuMTU0IDEuMDIxIDIuMTU3IDEuNDUzIDIuNjY1IDEuNjcxLjA5OS4wNDMuMTc5LjA3Ny4yMzguMTA2LjM2LjE4LjU3MS4xNS43ODItLjA5LjIxLS4yMzkuOTAzLTEuMDQ1IDEuMTQzLTEuNDA0LjI0LS4zNTguNDgyLS4yOTguODEzLS4xNzkuMzMuMTIgMi4xMDUuOTg2IDIuNDY3IDEuMTY1bC4xOTUuMDk1elxcXCIgZmlsbD1cXFwiI2ZmZlxcXCIgLz48L2c+PGRlZnM+PGNsaXBQYXRoIGlkPVxcXCJ3aGF0c3VwX2FcXFwiPjxwYXRoIGZpbGw9XFxcIiNmZmZcXFwiIGQ9XFxcIk0wIDBoNjB2NjBIMHpcXFwiIC8+PC9jbGlwUGF0aD48L2RlZnM+PC9zeW1ib2w+XCJcbn0pO1xudmFyIHJlc3VsdCA9IHNwcml0ZS5hZGQoc3ltYm9sKTtcbmV4cG9ydCBkZWZhdWx0IHN5bWJvbFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2Fzc2V0cy9zdmcvbXVsdGljb2xvci93aGF0c3VwLnN2Z1xuLy8gbW9kdWxlIGlkID0gMTY0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCBTcHJpdGVTeW1ib2wgZnJvbSBcInN2Zy1iYWtlci1ydW50aW1lL2Jyb3dzZXItc3ltYm9sXCI7XG5pbXBvcnQgc3ByaXRlIGZyb20gXCJzdmctc3ByaXRlLWxvYWRlci9ydW50aW1lL2Jyb3dzZXItc3ByaXRlLmJ1aWxkXCI7XG52YXIgc3ltYm9sID0gbmV3IFNwcml0ZVN5bWJvbCh7XG4gIFwiaWRcIjogXCJ3aWJlclwiLFxuICBcInVzZVwiOiBcIndpYmVyLXVzYWdlXCIsXG4gIFwidmlld0JveFwiOiBcIjAgMCA2MCA2MFwiLFxuICBcImNvbnRlbnRcIjogXCI8c3ltYm9sIHZpZXdCb3g9XFxcIjAgMCA2MCA2MFxcXCIgZmlsbD1cXFwibm9uZVxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiBpZD1cXFwid2liZXJcXFwiPjxnIGNsaXAtcGF0aD1cXFwidXJsKCN3aWJlcl9hKVxcXCI+PHBhdGggZD1cXFwiTTMwIDBjMTYuNTY5IDAgMzAgMTMuNDMxIDMwIDMwIDAgMTYuNTY5LTEzLjQzMSAzMC0zMCAzMEMxMy40MzEgNjAgMCA0Ni41NjkgMCAzMCAwIDEzLjQzMSAxMy40MzEgMCAzMCAwelxcXCIgZmlsbD1cXFwiIzdGNERBMFxcXCIgLz48cGF0aCBkPVxcXCJNMzcuNTA2IDI2LjgyNGMtLjEzMy0xLjA4Mi0uNDY2LTEuOTMxLTEuMDU2LTIuNjg0LS43NjctLjk2OS0xLjc0Ny0xLjU1LTMuMTk4LTEuODkzLS45NDYtLjIzLTEuMzI4LS4yMDMtMS42Ny4xMDktLjMxOS4yOTMtLjM4Ljg4LS4xMzcgMS4yNi4xNy4yNzUuMzY4LjM3NC45MTguNDgyLjczMS4xMzQgMS4yMzcuMzA5IDEuNjk3LjU3Mi45NzYuNTYzIDEuNDMgMS40NDUgMS40NzkgMi44NzMuMDIzLjY3LjA4Ljg3Ny4zMTUgMS4xMTUuNDM0LjQzNCAxLjIwNi4zNSAxLjUzNC0uMTcuMTItLjE5Ny4xMzgtLjI4Mi4xNTEtLjczN2E3LjI2NyA3LjI2NyAwIDAgMC0uMDMzLS45Mjd6XFxcIiBmaWxsPVxcXCIjZmZmXFxcIiAvPjxwYXRoIGQ9XFxcIk00MS4zMyAyOC4wNDRjLS4xOTQtMy4zMTUtMS40OS01Ljk4Mi0zLjgxLTcuODU4LTEuMzA4LTEuMDU1LTIuODg5LTEuNzgtNC42MjEtMi4xMzMtLjYzNS0uMTI2LTEuODAzLS4yMjgtMi4wMDQtLjE3LS4xODkuMDU1LS40NTYuMjYtLjU3NS40NDUtLjEyNy4yLS4xNTUuNjUtLjA0Ny45MDkuMTczLjQzMy40OTYuNTg2IDEuNC42NjUgMS4zOTUuMTIyIDIuODM0LjYxMiAzLjkyIDEuMzM4YTguMjIgOC4yMiAwIDAgMSAyLjg2NSAzLjI4MmMuNTUxIDEuMTQuODkgMi43ODQuODgxIDQuMjU2LS4wMDMuNTMyLjA4LjgzMi4yOTMgMS4wNTJhLjk4My45ODMgMCAwIDAgMS4yMS4xODhjLjQ2LS4yNDMuNTY4LS42NjguNDg3LTEuOTc0elxcXCIgZmlsbD1cXFwiI2ZmZlxcXCIgLz48cGF0aCBkPVxcXCJNNDUuMjIgMjguODA2Yy0uMDY5LTEuODc1LS4zODQtMy40MTMtMS4wNDMtNS4xMjgtLjY1LTEuNjg3LTEuMzA3LTIuNzg4LTIuNTUtNC4yNzctMS4xNzQtMS4zOTUtMi4wODctMi4xOTItMy41MzMtMy4wOC0yLjAxOS0xLjIzNi00LjQ3Ni0yLjA1NC03LjIyOS0yLjM5OC0uOTM4LS4xMi0xLjE1LS4xMTItMS40MzkuMDgtLjU1OC4zNjUtLjU1IDEuMjczLjAxIDEuNjMxLjE4NS4xMTQuMzUuMTU2IDEuMS4yNTQgMS4xNTMuMTU2IDEuODk0LjMwMiAyLjc3NC41NDIgMy40NS45NDMgNi4xMDIgMi44NyA3Ljg3NSA1LjczMSAxLjQ4NCAyLjM4NSAyLjEgNC43NyAyLjAxMyA3LjgxNi0uMDMgMS4wMy0uMDA5IDEuMjEuMTQ5IDEuNDU4LjMwMS40NjEgMS4wOTYuNTUyIDEuNTA0LjE3LjI1NC0uMjMzLjMwMi0uNDA5LjM1Mi0xLjI5LjAyMy0uNDYuMDI5LTEuMTM4LjAxOC0xLjUwOXpNNDUuNTYgNDAuODExYTMuNjQ2IDMuNjQ2IDAgMCAwLS4zMjUtLjY1Yy0uNjgtMS4wMjgtNC4zNC0zLjg5MS02LjE2Ni00LjgyOC0xLjA0NC0uNTM1LTEuODE3LS43MTQtMi4zOS0uNTQ2LS42MTYuMTczLS45NC40Ni0xLjk3MiAxLjc0My0uNDE2LjUxNC0uODQzLjk5Ni0uOTU3IDEuMDcyLS4yOC4xOTQtLjgzMi4zNTEtMS4yMjEuMzUxLS45MDMtLjAwNS0yLjU0LS41OS0zLjgtMS4zNTgtLjk3OC0uNTk2LTIuMjMyLTEuNjYyLTMuMTk0LTIuNzE4LTEuMTM1LTEuMjM5LTEuOTA3LTIuMzMyLTIuNTE4LTMuNTY3LS43OS0xLjU4NS0uOTktMi41NTQtLjY2LTMuMjYzLjA4MS0uMTguMTktLjM2OS4yMzgtLjQyOC4wNDktLjA1NC41NTctLjQ3MSAxLjExOS0uOTI2IDEuMTAyLS44NzcgMS4yOC0xLjA3NyAxLjQ4Ni0xLjY3OC4yNi0uNzYzLjE5LTEuNTQyLS4yMS0yLjMyNy0uMzA5LS41OTYtMS4xMTQtMS44OTUtMS42OTgtMi43MzQtLjc3My0xLjEwNC0yLjY5Ny0zLjQ2NC0zLjA4LTMuNzgzLS42OTItLjU2My0xLjU3OC0uNjYtMi41NTctLjI4Mi0xLjAzMi40LTIuOTY3IDEuOTYtMy43OTQgMy4wNDgtLjc0Ni45ODUtMS4wMzIgMS42ODMtMS4wNzUgMi42MDMtLjAzOC43NTguMDI3IDEuMDcyLjQyNyAyLjA0IDMuMTI5IDcuNiA3Ljc5OSAxMy42NjggMTQuMjE0IDE4LjQ4NiAzLjM1IDIuNTE3IDYuODI2IDQuNDMzIDEwLjQzIDUuNzQzIDIuMTAzLjc2MyAzLjAxNy44IDQuMDkyLjE3My40NTQtLjI3IDEuNTc4LTEuNDI0IDIuMjA1LTIuMjYzIDEuMDM4LTEuMzk2IDEuNDIyLTIuMDQgMS41My0yLjU1NC4wNzUtLjM1Mi4wMTYtLjk2NC0uMTI0LTEuMzU0elxcXCIgZmlsbD1cXFwiI2ZmZlxcXCIgLz48L2c+PGRlZnM+PGNsaXBQYXRoIGlkPVxcXCJ3aWJlcl9hXFxcIj48cGF0aCBmaWxsPVxcXCIjZmZmXFxcIiBkPVxcXCJNMCAwaDYwdjYwSDB6XFxcIiAvPjwvY2xpcFBhdGg+PC9kZWZzPjwvc3ltYm9sPlwiXG59KTtcbnZhciByZXN1bHQgPSBzcHJpdGUuYWRkKHN5bWJvbCk7XG5leHBvcnQgZGVmYXVsdCBzeW1ib2xcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9hc3NldHMvc3ZnL211bHRpY29sb3Ivd2liZXIuc3ZnXG4vLyBtb2R1bGUgaWQgPSAxNjVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==